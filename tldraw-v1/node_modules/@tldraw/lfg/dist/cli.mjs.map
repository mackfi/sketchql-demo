{
  "version": 3,
  "sources": ["../src/cli.ts", "../src/lfg.ts", "../src/buildLibrary.ts", "../src/devLibrary.ts"],
  "sourcesContent": ["#!/usr/bin/env node\n/* eslint-disable @typescript-eslint/no-var-requires */\n/** @format */\n\nimport path from 'path'\nimport fs from 'fs'\nimport program, { Command } from 'commander'\nimport { lfg } from './lfg'\nimport type { Options } from './lfg'\n\ninterface CLI extends Command {\n  dev?: boolean\n  node?: boolean\n}\n\nprogram\n  .version('0.0.0')\n  .option('-d, --dev', 'Develop')\n  .option('-n, --node', 'Node')\n  .parse(process.argv)\n\nconst cli = program as CLI\n\nconst { dev, node } = cli\n\nconst options = {} as Partial<Options>\n\ntry {\n  const cwd = path.join(process.cwd())\n  // Try to load a lfg.config.json file\n  const configPath = path.join(cwd, 'lfg.config.json')\n  if (fs.existsSync(configPath)) {\n    const config = require(configPath)\n    Object.assign(options, config)\n  }\n\n  Object.assign(options, {\n    isNode: options.isNode ?? node ?? false,\n    isDev: options.isDev ?? dev ?? false,\n  })\n} catch (e) {\n  // No config, noop\n}\n\nlfg(options)\n", "/* eslint-disable @typescript-eslint/no-var-requires */\n/** @format */\n\nimport { BuildOptions } from 'esbuild'\nimport fs from 'fs'\nimport path from 'path'\nimport { buildLibrary } from './buildLibrary'\nimport { devLibrary } from './devLibrary'\n\nexport interface Options {\n  isDev: boolean\n  isNode: boolean\n  entryPoints: string[]\n  clean: boolean\n  outDir: string\n  external: {\n    dependencies: boolean\n    devDependencies: boolean\n    peerDependencies: boolean\n  }\n  target: string\n  format: 'esm' | 'cjs' | ('esm' | 'cjs')[]\n  devFormat: 'esm' | 'cjs'\n  devConfig: string\n  buildConfig: string\n  define: { [key: string]: string }\n  calculateSize: boolean\n  customEsbuildConfig?: BuildOptions\n  buildCss?: { entryPoints: string[] }\n}\n\nexport async function lfg(opts = {} as Partial<Options>) {\n  const {\n    isDev = false,\n    isNode = false,\n    entryPoints = ['src/index.ts'],\n    clean = true,\n    devConfig = 'tsconfig.dev.json',\n    buildConfig = 'tsconfig.build.json',\n    devFormat = 'esm',\n    format = ['cjs', 'esm'],\n    target = 'es6',\n    outDir = 'dist',\n    external = {\n      dependencies: true,\n      devDependencies: true,\n      peerDependencies: true,\n    },\n    define = {\n      'process.env.NODE_ENV': isDev ? '\"development\"' : '\"production\"',\n    },\n    calculateSize = true,\n    customEsbuildConfig = {},\n    buildCss,\n  } = opts\n\n  const cwd = process.cwd()\n  const pkg = require(path.join(cwd, 'package.json'))\n\n  // Collect externals from package\n  const externals = [\n    ...(external.dependencies ? Object.keys(pkg.dependencies ?? {}) : []),\n    ...(external.devDependencies ? Object.keys(pkg.devDependencies ?? {}) : []),\n    ...(external.peerDependencies ? Object.keys(pkg.peerDependencies ?? {}) : []),\n  ]\n\n  // Absolute path to out directory\n  const outDirAbs = path.join(cwd, outDir)\n\n  // Absolute path to config\n  let configAbs = path.join(cwd, isDev ? devConfig : buildConfig)\n  if (!fs.existsSync(configAbs)) {\n    const { log } = console\n    log(\n      `\u2023 ${pkg.name}: Could not find ${isDev ? 'dev' : 'build'} config file (${\n        isDev ? devConfig : buildConfig\n      }), using tsconfig.json.`\n    )\n    configAbs = path.join(cwd, 'tsconfig.json')\n  }\n\n  // Absolute paths to entry points\n  const entryPointsAbs = entryPoints.map((entryPoint) => path.join(cwd, entryPoint))\n\n  if (isDev) {\n    await buildLibrary({\n      name: pkg.name,\n      outdir: outDirAbs,\n      tsconfig: configAbs,\n      external: externals,\n      entryPoints: entryPointsAbs,\n      format,\n      target,\n      isNode,\n      define,\n      calculateSize,\n      customEsbuildConfig,\n      buildCss,\n    })\n\n    return devLibrary({\n      name: pkg.name,\n      outdir: outDirAbs,\n      tsconfig: configAbs,\n      external: externals,\n      format: devFormat,\n      target,\n      entryPoints: entryPointsAbs,\n      isNode,\n      define,\n      calculateSize,\n      customEsbuildConfig,\n      buildCss,\n    })\n  } else {\n    // Delete dist\n    if (clean) {\n      if (fs.existsSync(outDirAbs)) {\n        fs.rmSync(outDirAbs, { recursive: true })\n      }\n    }\n\n    return buildLibrary({\n      name: pkg.name,\n      outdir: outDirAbs,\n      tsconfig: configAbs,\n      external: externals,\n      entryPoints: entryPointsAbs,\n      format,\n      target,\n      isNode,\n      define,\n      calculateSize,\n      customEsbuildConfig,\n      buildCss,\n    })\n  }\n}\n", "/* eslint-disable no-inner-declarations */\n/* eslint-disable @typescript-eslint/no-var-requires */\n\nimport fs from 'fs'\nimport path from 'path'\nimport { build, BuildOptions } from 'esbuild'\nimport { gzip } from 'zlib'\nimport { spawn } from 'child_process'\nimport dotenv from 'dotenv'\n\ndotenv.config()\n\nconst { log } = console\n\nexport function buildLibrary({\n  name,\n  isNode,\n  outdir,\n  tsconfig,\n  external,\n  format,\n  target,\n  define,\n  entryPoints,\n  calculateSize,\n  customEsbuildConfig,\n  buildCss,\n}: {\n  name: string\n  outdir: string\n  calculateSize: boolean\n  entryPoints: string[]\n  isNode: boolean\n  format: 'esm' | 'cjs' | ('esm' | 'cjs')[]\n  target: string\n  tsconfig: string\n  external: string[]\n  define: Record<string, string>\n  customEsbuildConfig: BuildOptions\n  buildCss?: { entryPoints: string[]; outfile?: string }\n}) {\n  return new Promise<void>((resolve) => {\n    log(`\u2023 ${name}: Building packages.`)\n\n    try {\n      let didBuild = false\n      let didTypes = false\n\n      function finish(types = false, build = false) {\n        if (build) didBuild = true\n        if (types) didTypes = true\n        if (didBuild && didTypes) {\n          log(`\u2714 ${name}: Build complete.`)\n          resolve()\n        }\n      }\n\n      // Build types\n      const ts = spawn(`tsc`, [`--project`, tsconfig, `--outDir`, outdir], { shell: true })\n\n      ts.stdout.on('data', function (data: any) {\n        const str = data.toString()\n        log(`\u2022 ${name}: ${str}`)\n      })\n\n      ts.on('exit', () => {\n        log(`\u2022 ${name}: Built types.`)\n        // Replace paths (if config / build config includes paths)\n        const base_cfg = require(path.join(process.cwd(), 'tsconfig.json'))\n        let cfgWithPaths = ''\n        if (base_cfg?.compilerOptions?.paths) {\n          cfgWithPaths = 'tsconfig.json'\n        } else {\n          const cfg = require(tsconfig)\n          if (cfg?.compilerOptions?.paths) {\n            cfgWithPaths = tsconfig\n          }\n        }\n        if (cfgWithPaths) {\n          const trp = spawn(`tsconfig-replace-paths`, [`-p`, cfgWithPaths], { shell: true })\n          trp.on('exit', () => {\n            log(`\u2022 ${name}: Resolved paths.`)\n            finish(true)\n          })\n        } else {\n          finish(true)\n        }\n      })\n      // Build packages\n      Promise.all(\n        (Array.isArray(format) ? format : [format]).map(async (fmt) => {\n          const extension = fmt === 'esm' ? '.mjs' : '.js'\n          const buildResult = await build({\n            entryPoints,\n            outdir,\n            tsconfig,\n            external,\n            define,\n            format: fmt,\n            platform: isNode ? 'node' : 'neutral',\n            outExtension: { '.js': extension },\n            bundle: true,\n            metafile: true,\n            minify: process.env.NODE_ENV === 'production',\n            sourcemap: true,\n            treeShaking: true,\n            target,\n            ...customEsbuildConfig,\n          })\n\n          if (calculateSize) {\n            // Calculate the size of the output esm module (standard and zipped)\n            fs.readFile(path.join(outdir, `index${extension}`), (_err, data) => {\n              gzip(data, (_err, result) => {\n                const size = Object.values(buildResult.metafile!.outputs).reduce(\n                  (acc, { bytes }) => acc + bytes,\n                  0\n                )\n                log(\n                  `\u2022 ${name}: Built ${fmt} package. (${(size / 1000).toFixed(1)}kb / ${(\n                    result.length / 1000\n                  ).toFixed(1)}kb gzipped)`\n                )\n              })\n            })\n          }\n        })\n      ).then(() => {\n        if (buildCss) {\n          build({\n            entryPoints: buildCss.entryPoints,\n            outfile: path.join(outdir, 'index.css'),\n            bundle: true,\n            minify: true,\n          }).then(() => {\n            finish(false, true)\n          })\n        } else {\n          finish(false, true)\n        }\n      })\n    } catch (e: any) {\n      log(`x ${name}: Build failed due to an error. ${e.message}`)\n      // log(e)\n    }\n  })\n}\n", "/* eslint-disable no-inner-declarations */\n/* eslint-disable @typescript-eslint/no-var-requires */\n\nimport { build, BuildOptions, Format } from 'esbuild'\nimport { spawn } from 'child_process'\nimport path from 'path'\n\nconst { log } = console\n\nconst ERROR_REGEX = /merror/gm // there is weird color formatting in pretty output\nconst CLEAN_REGEX = /Found 0 errors/gm\nconst CHANGE_REGEX = /Starting incremental compilation/gm\n\nexport async function devLibrary({\n  name,\n  isNode,\n  outdir,\n  tsconfig,\n  external,\n  target,\n  define,\n  format,\n  entryPoints,\n  customEsbuildConfig,\n  buildCss,\n}: {\n  name: string\n  outdir: string\n  calculateSize: boolean\n  entryPoints: string[]\n  isNode: boolean\n  tsconfig: string\n  external: string[]\n  format: 'esm' | 'cjs' | ('esm' | 'cjs')[]\n  target: string\n  define: Record<string, string>\n  customEsbuildConfig: BuildOptions\n  buildCss?: { entryPoints: string[] }\n}) {\n  // Start the TypeScript service and log errors\n\n  log(`\u2023 ${name}: Starting watch mode.`)\n\n  // Log the Path\u2014if undefined, this will cause ENOENT\n  const ts = spawn(`tsc`, [`-w`, `--project`, tsconfig, `--pretty`, `--preserveWatchOutput`], {\n    shell: true,\n  })\n\n  let state: 'clean' | 'error' = 'clean'\n\n  ts.stdout.on('data', function (data: any) {\n    const str = data.toString()\n\n    if (CHANGE_REGEX.test(str)) return\n\n    const isErrorMessage = ERROR_REGEX.test(str)\n    const isCleanMessage = CLEAN_REGEX.test(str)\n\n    if (isErrorMessage) {\n      // if the stdout is an error, set the state to error\n      state = 'error'\n      log(`\u2023 ${name}: Rebuilt types. Encountered errors:`)\n    }\n\n    switch (state) {\n      case 'error': {\n        // if the state is error (set either by this stdout or a previous one)\n        if (isCleanMessage) {\n          // If the stdout is now clean, then change the state\n          state = 'clean'\n          log(`\u2023 ${name}: Rebuilt types. TypeScript errors fixed.`)\n        } else {\n          // For any other stdout, log the message\n          str\n            .split('\\n')\n            .filter(Boolean)\n            .forEach((s: string) => log(`\u2023 ${name}: ${s}`))\n        }\n\n        break\n      }\n      case 'clean': {\n        // if the state is not error...\n        if (isCleanMessage) {\n          // If the message is the last line of the output, log success\n          log(`\u2023 ${name}: Rebuilt types.`)\n        } else {\n          // Ignore all other messages while not in the error state\n        }\n\n        break\n      }\n    }\n  })\n\n  // Start the esbuild process\n\n  try {\n    log(`\u2023 ${name}: Starting incremental build.`)\n\n    // const format = ['cjs', 'esm']\n\n    // Build packages\n    const formats = Array.isArray(format) ? format : [format]\n\n    formats.forEach((fmt) => {\n      const extension = fmt === 'esm' ? '.mjs' : '.js'\n      build({\n        entryPoints,\n        outdir,\n        tsconfig,\n        external,\n        define,\n        format: fmt as Format,\n        target,\n        platform: isNode ? 'node' : 'neutral',\n        outExtension: { '.js': extension },\n        minify: false,\n        bundle: true,\n        treeShaking: true,\n        metafile: true,\n        sourcemap: true,\n        incremental: true,\n        ...customEsbuildConfig,\n        watch: {\n          onRebuild(err) {\n            if (err) {\n              throw Error(`\u2023 ${name}: Rebuild failed.`)\n            }\n\n            log(`\u2714 ${name}: Rebuilt package (${fmt}).`)\n          },\n        },\n      })\n    })\n\n    if (buildCss) {\n      build({\n        entryPoints: buildCss.entryPoints,\n        outfile: path.join(outdir, 'index.css'),\n        bundle: true,\n        minify: false,\n        incremental: true,\n        watch: {\n          onRebuild(err) {\n            if (err) {\n              throw Error(`\u2023 ${name}: Failed to rebuild CSS.`)\n            }\n\n            log(`\u2714 ${name}: Rebuilt CSS.`)\n          },\n        },\n      })\n    }\n  } catch (err) {\n    ts?.kill()\n    process.exit(1)\n  }\n}\n"],
  "mappings": "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",
  "names": []
}

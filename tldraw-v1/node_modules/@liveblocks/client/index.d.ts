import { C as ClientOptions, a as Client } from "./shared.js";
export {
  B as BaseUserMeta,
  d as BroadcastOptions,
  a as Client,
  H as History,
  J as Json,
  e as JsonObject,
  L as LiveList,
  b as LiveMap,
  c as LiveObject,
  f as LiveStructure,
  g as Lson,
  h as LsonObject,
  O as Others,
  P as Presence,
  R as Room,
  S as StorageUpdate,
  U as User,
} from "./shared.js";

/**
 * Create a client that will be responsible to communicate with liveblocks servers.
 *
 * @example
 * const client = createClient({
 *   authEndpoint: "/api/auth"
 * });
 *
 * // It's also possible to use a function to call your authentication endpoint.
 * // Useful to add additional headers or use an API wrapper (like Firebase functions)
 * const client = createClient({
 *   authEndpoint: async (room) => {
 *     const response = await fetch("/api/auth", {
 *       method: "POST",
 *       headers: {
 *          Authentication: "token",
 *          "Content-Type": "application/json"
 *       },
 *       body: JSON.stringify({ room })
 *     });
 *
 *     return await response.json(); // should be: { token: "..." }
 *   }
 * });
 */
declare function createClient(options: ClientOptions): Client;

/**
 * Helper type to help users adopt to Lson types from interface definitions.
 * You should only use this to wrap interfaces you don't control. For more
 * information, see
 * https://liveblocks.io/docs/guides/limits#lson-constraint-and-interfaces
 */
declare type EnsureJson<T> = [unknown] extends [T]
  ? T
  : T extends (...args: unknown[]) => unknown
  ? T
  : {
      [K in keyof T]: EnsureJson<T[K]>;
    };

export { EnsureJson, createClient };

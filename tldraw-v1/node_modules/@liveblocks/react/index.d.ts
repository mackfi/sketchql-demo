/// <reference types="react" />
import {
  Client,
  JsonObject,
  LsonObject,
  BaseUserMeta,
  Json,
  Room,
  BroadcastOptions,
  History,
  Others,
  User,
  LiveObject,
  Lson,
  LiveList,
  LiveMap,
} from "@liveblocks/client";
export { Json, JsonObject } from "@liveblocks/client";
import * as React from "react";
import { Resolve, RoomInitializers } from "@liveblocks/client/internal";

declare type LiveblocksProviderProps = {
  children: React.ReactNode;
  client: Client;
};
/**
 * Makes the Liveblocks client available in the component hierarchy below.
 *
 * @deprecated LiveblocksProvider is no longer needed in your component tree if
 * you set up your Liveblocks context using `createRoomContext()`. See
 * https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for
 * details.
 */
declare function LiveblocksProvider(
  props: LiveblocksProviderProps
): JSX.Element;
/**
 * Returns the Client of the nearest LiveblocksProvider above in the React
 * component tree.
 */
declare function useClient(): Client;

declare type RoomProviderProps<
  TPresence extends JsonObject,
  TStorage extends LsonObject
> = Resolve<
  {
    /**
     * The id of the room you want to connect to
     */
    id: string;
    children: React.ReactNode;
  } & RoomInitializers<TPresence, TStorage>
>;
declare type RoomContextBundle<
  TPresence extends JsonObject,
  TStorage extends LsonObject,
  TUserMeta extends BaseUserMeta,
  TRoomEvent extends Json
> = {
  RoomContext: React.Context<Room<
    TPresence,
    TStorage,
    TUserMeta,
    TRoomEvent
  > | null>;
  /**
   * Makes a Room available in the component hierarchy below.
   * When this component is unmounted, the current user leave the room.
   * That means that you can't have 2 RoomProvider with the same room id in your react tree.
   */
  RoomProvider(props: RoomProviderProps<TPresence, TStorage>): JSX.Element;
  /**
   * Returns a function that batches modifications made during the given function.
   * All the modifications are sent to other clients in a single message.
   * All the modifications are merged in a single history item (undo/redo).
   * All the subscribers are called only after the batch is over.
   */
  useBatch(): (callback: () => void) => void;
  /**
   * Returns a callback that lets you broadcast custom events to other users in the room
   *
   * @example
   * const broadcast = useBroadcastEvent();
   *
   * broadcast({ type: "CUSTOM_EVENT", data: { x: 0, y: 0 } });
   */
  useBroadcastEvent(): (event: TRoomEvent, options?: BroadcastOptions) => void;
  /**
   * useErrorListener is a react hook that lets you react to potential room connection errors.
   *
   * @example
   * useErrorListener(er => {
   *   console.error(er);
   * })
   */
  useErrorListener(callback: (err: Error) => void): void;
  /**
   * useEventListener is a react hook that lets you react to event broadcasted by other users in the room.
   *
   * @example
   * useEventListener(({ connectionId, event }) => {
   *   if (event.type === "CUSTOM_EVENT") {
   *     // Do something
   *   }
   * });
   */
  useEventListener(
    callback: (eventData: { connectionId: number; event: TRoomEvent }) => void
  ): void;
  /**
   * Returns the room.history
   */
  useHistory(): History;
  /**
   * Returns a function that undoes the last operation executed by the current client.
   * It does not impact operations made by other clients.
   */
  useUndo(): () => void;
  /**
   * Returns a function that redoes the last operation executed by the current client.
   * It does not impact operations made by other clients.
   */
  useRedo(): () => void;
  /**
   * Returns the LiveList associated with the provided key.
   * The hook triggers a re-render if the LiveList is updated, however it does not triggers a re-render if a nested CRDT is updated.
   *
   * @param key The storage key associated with the LiveList
   * @returns null while the storage is loading, otherwise, returns the LiveList associated to the storage
   *
   * @example
   * const animals = useList("animals");  // e.g. [] or ["ü¶Å", "üêç", "ü¶ç"]
   */
  useList<TKey extends Extract<keyof TStorage, string>>(
    key: TKey
  ): TStorage[TKey] | null;
  /**
   * Returns the LiveMap associated with the provided key. If the LiveMap does not exist, a new empty LiveMap will be created.
   * The hook triggers a re-render if the LiveMap is updated, however it does not triggers a re-render if a nested CRDT is updated.
   *
   * @param key The storage key associated with the LiveMap
   * @returns null while the storage is loading, otherwise, returns the LiveMap associated to the storage
   *
   * @example
   * const shapesById = useMap("shapes");
   */
  useMap<TKey extends Extract<keyof TStorage, string>>(
    key: TKey
  ): TStorage[TKey] | null;
  /**
   * Returns the LiveObject associated with the provided key.
   * The hook triggers a re-render if the LiveObject is updated, however it does not triggers a re-render if a nested CRDT is updated.
   *
   * @param key The storage key associated with the LiveObject
   * @returns null while the storage is loading, otherwise, returns the LveObject associated to the storage
   *
   * @example
   * const object = useObject("obj");
   */
  useObject<TKey extends Extract<keyof TStorage, string>>(
    key: TKey
  ): TStorage[TKey] | null;
  /**
   * Returns the presence of the current user of the current room, and a function to update it.
   * It is different from the setState function returned by the useState hook from React.
   * You don't need to pass the full presence object to update it.
   *
   * @example
   * const [myPresence, updateMyPresence] = useMyPresence();
   * updateMyPresence({ x: 0 });
   * updateMyPresence({ y: 0 });
   *
   * // At the next render, "myPresence" will be equal to "{ x: 0, y: 0 }"
   */
  useMyPresence(): [
    TPresence,
    (
      overrides: Partial<TPresence>,
      options?: {
        addToHistory: boolean;
      }
    ) => void
  ];
  /**
   * Returns an object that lets you get information about all the the users currently connected in the room.
   *
   * @example
   * const others = useOthers();
   *
   * // Example to map all cursors in JSX
   * {
   *   others.map((user) => {
   *     if (user.presence?.cursor == null) {
   *       return null;
   *     }
   *     return <Cursor key={user.connectionId} cursor={user.presence.cursor} />
   *   })
   * }
   */
  useOthers(): Others<TPresence, TUserMeta>;
  /**
   * Returns the Room of the nearest RoomProvider above in the React component
   * tree.
   */
  useRoom(): Room<TPresence, TStorage, TUserMeta, TRoomEvent>;
  /**
   * Gets the current user once it is connected to the room.
   *
   * @example
   * const user = useSelf();
   */
  useSelf(): User<TPresence, TUserMeta> | null;
  /**
   * Returns the LiveObject instance that is the root of your entire Liveblocks
   * Storage.
   *
   * @example
   * const [root] = useStorage();
   */
  useStorage(): [root: LiveObject<TStorage> | null];
  /**
   * useUpdateMyPresence is similar to useMyPresence but it only returns the function to update the current user presence.
   * If you don't use the current user presence in your component, but you need to update it (e.g. live cursor), it's better to use useUpdateMyPresence to avoid unnecessary renders.
   *
   * @example
   * const updateMyPresence = useUpdateMyPresence();
   * updateMyPresence({ x: 0 });
   * updateMyPresence({ y: 0 });
   *
   * // At the next render, the presence of the current user will be equal to "{ x: 0, y: 0 }"
   */
  useUpdateMyPresence(): (
    overrides: Partial<TPresence>,
    options?: {
      addToHistory: boolean;
    }
  ) => void;
  /**
   * Returns the LiveList associated with the provided key.
   * The hook triggers a re-render if the LiveList is updated, however it does not triggers a re-render if a nested CRDT is updated.
   *
   * @param key The storage key associated with the LiveList
   * @returns null while the storage is loading, otherwise, returns the LiveList associated to the storage
   *
   * @example
   * const animals = useList("animals");  // e.g. [] or ["ü¶Å", "üêç", "ü¶ç"]
   */
  useList_deprecated<TValue extends Lson>(key: string): LiveList<TValue> | null;
  /**
   * @deprecated We no longer recommend initializing the
   * items from the useList() hook. For details, see https://bit.ly/3Niy5aP.
   */
  useList_deprecated<TValue extends Lson>(
    key: string,
    items: TValue[]
  ): LiveList<TValue> | null;
  /**
   * Returns the LiveMap associated with the provided key. If the LiveMap does not exist, a new empty LiveMap will be created.
   * The hook triggers a re-render if the LiveMap is updated, however it does not triggers a re-render if a nested CRDT is updated.
   *
   * @param key The storage key associated with the LiveMap
   * @returns null while the storage is loading, otherwise, returns the LiveMap associated to the storage
   *
   * @example
   * const shapesById = useMap("shapes");
   */
  useMap_deprecated<TKey extends string, TValue extends Lson>(
    key: string
  ): LiveMap<TKey, TValue> | null;
  /**
   * @deprecated We no longer recommend initializing the
   * entries from the useMap() hook. For details, see https://bit.ly/3Niy5aP.
   */
  useMap_deprecated<TKey extends string, TValue extends Lson>(
    key: string,
    entries: readonly (readonly [TKey, TValue])[] | null
  ): LiveMap<TKey, TValue> | null;
  /**
   * Returns the LiveObject associated with the provided key.
   * The hook triggers a re-render if the LiveObject is updated, however it does not triggers a re-render if a nested CRDT is updated.
   *
   * @param key The storage key associated with the LiveObject
   * @returns null while the storage is loading, otherwise, returns the LveObject associated to the storage
   *
   * @example
   * const object = useObject("obj");
   */
  useObject_deprecated<TData extends LsonObject>(
    key: string
  ): LiveObject<TData> | null;
  /**
   * @deprecated We no longer recommend initializing the fields from the
   * useObject() hook. For details, see https://bit.ly/3Niy5aP.
   */
  useObject_deprecated<TData extends LsonObject>(
    key: string,
    initialData: TData
  ): LiveObject<TData> | null;
};
declare function createRoomContext<
  TPresence extends JsonObject,
  TStorage extends LsonObject = LsonObject,
  TUserMeta extends BaseUserMeta = BaseUserMeta,
  TRoomEvent extends Json = never
>(
  client: Client
): RoomContextBundle<TPresence, TStorage, TUserMeta, TRoomEvent>;

/**
 * NOTE:
 * This file is AUTOGENERATED!
 *
 * Do not update it manually.
 */

/**
 * @deprecated Please use `createRoomContext()` instead of importing
 * `RoomProvider` from `@liveblocks/react` directly. See
 * https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details.
 */
declare function RoomProvider<
  TPresence extends JsonObject,
  TStorage extends LsonObject
>(props: RoomProviderProps<TPresence, TStorage>): JSX.Element;
/**
 * @deprecated Please use `createRoomContext()` instead of importing
 * `useBatch` from `@liveblocks/react` directly. See
 * https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details.
 */
declare function useBatch(): (callback: () => void) => void;
/**
 * @deprecated Please use `createRoomContext()` instead of importing
 * `useBroadcastEvent` from `@liveblocks/react` directly. See
 * https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details.
 */
declare function useBroadcastEvent<TRoomEvent extends Json>(): (
  event: TRoomEvent,
  options?: BroadcastOptions
) => void;
/**
 * @deprecated Please use `createRoomContext()` instead of importing
 * `useErrorListener` from `@liveblocks/react` directly. See
 * https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details.
 */
declare function useErrorListener(callback: (err: Error) => void): void;
/**
 * @deprecated Please use `createRoomContext()` instead of importing
 * `useEventListener` from `@liveblocks/react` directly. See
 * https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details.
 */
declare function useEventListener<TRoomEvent extends Json>(
  callback: (eventData: { connectionId: number; event: TRoomEvent }) => void
): void;
/**
 * @deprecated Please use `createRoomContext()` instead of importing
 * `useHistory` from `@liveblocks/react` directly. See
 * https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details.
 */
declare function useHistory(): History;
/**
 * @deprecated Please use `createRoomContext()` instead of importing
 * `useMyPresence` from `@liveblocks/react` directly. See
 * https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details.
 */
declare function useMyPresence<TPresence extends JsonObject>(): [
  TPresence,
  (
    overrides: Partial<TPresence>,
    options?: {
      addToHistory: boolean;
    }
  ) => void
];
/**
 * @deprecated Please use `createRoomContext()` instead of importing
 * `useOthers` from `@liveblocks/react` directly. See
 * https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details.
 */
declare function useOthers<
  TPresence extends JsonObject,
  TUserMeta extends BaseUserMeta
>(): Others<TPresence, TUserMeta>;
/**
 * @deprecated Please use `createRoomContext()` instead of importing
 * `useRedo` from `@liveblocks/react` directly. See
 * https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details.
 */
declare function useRedo(): () => void;
/**
 * @deprecated Please use `createRoomContext()` instead of importing
 * `useRoom` from `@liveblocks/react` directly. See
 * https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details.
 */
declare function useRoom<
  TPresence extends JsonObject,
  TStorage extends LsonObject,
  TUserMeta extends BaseUserMeta,
  TRoomEvent extends Json
>(): Room<TPresence, TStorage, TUserMeta, TRoomEvent>;
/**
 * @deprecated Please use `createRoomContext()` instead of importing
 * `useSelf` from `@liveblocks/react` directly. See
 * https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details.
 */
declare function useSelf<
  TPresence extends JsonObject,
  TUserMeta extends BaseUserMeta
>(): User<TPresence, TUserMeta> | null;
/**
 * @deprecated Please use `createRoomContext()` instead of importing
 * `useStorage` from `@liveblocks/react` directly. See
 * https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details.
 */
declare function useStorage<TStorage extends LsonObject>(): [
  root: LiveObject<TStorage> | null
];
/**
 * @deprecated Please use `createRoomContext()` instead of importing
 * `useUndo` from `@liveblocks/react` directly. See
 * https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details.
 */
declare function useUndo(): () => void;
/**
 * @deprecated Please use `createRoomContext()` instead of importing
 * `useUpdateMyPresence` from `@liveblocks/react` directly. See
 * https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details.
 */
declare function useUpdateMyPresence<TPresence extends JsonObject>(): (
  overrides: Partial<TPresence>,
  options?: {
    addToHistory: boolean;
  }
) => void;
/**
 * @deprecated Please use `createRoomContext()` instead of importing
 * `useList` from `@liveblocks/react` directly. See
 * https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details.
 */
declare function useList<TValue extends Lson>(
  key: string
): LiveList<TValue> | null;
/**
 * @deprecated Please use `createRoomContext()` instead of importing
 * `useList` from `@liveblocks/react` directly. See
 * https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details.
 */
declare function useList<TValue extends Lson>(
  key: string,
  items: TValue[]
): LiveList<TValue> | null;
/**
 * @deprecated Please use `createRoomContext()` instead of importing
 * `useMap` from `@liveblocks/react` directly. See
 * https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details.
 */
declare function useMap<TKey extends string, TValue extends Lson>(
  key: string
): LiveMap<TKey, TValue> | null;
/**
 * @deprecated Please use `createRoomContext()` instead of importing
 * `useMap` from `@liveblocks/react` directly. See
 * https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details.
 */
declare function useMap<TKey extends string, TValue extends Lson>(
  key: string,
  entries: readonly (readonly [TKey, TValue])[] | null
): LiveMap<TKey, TValue> | null;
/**
 * @deprecated Please use `createRoomContext()` instead of importing
 * `useObject` from `@liveblocks/react` directly. See
 * https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details.
 */
declare function useObject<TData extends LsonObject>(
  key: string
): LiveObject<TData> | null;
/**
 * @deprecated Please use `createRoomContext()` instead of importing
 * `useObject` from `@liveblocks/react` directly. See
 * https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details.
 */
declare function useObject<TData extends LsonObject>(
  key: string,
  initialData: TData
): LiveObject<TData> | null;

export {
  LiveblocksProvider,
  RoomProvider,
  createRoomContext,
  useBatch,
  useBroadcastEvent,
  useClient,
  useErrorListener,
  useEventListener,
  useHistory,
  useList,
  useMap,
  useMyPresence,
  useObject,
  useOthers,
  useRedo,
  useRoom,
  useSelf,
  useStorage,
  useUndo,
  useUpdateMyPresence,
};

import { deprecate, errorIf } from "@liveblocks/client/internal";
import * as React from "react";
import { useReducer } from "react";
import { LiveMap, LiveList, LiveObject } from "@liveblocks/client";
const ClientContext = React.createContext(null);
function LiveblocksProvider(props) {
  return (
    deprecate(
      "LiveblocksProvider is no longer needed in your component tree if you set up your Liveblocks context using `createRoomContext()`. See https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details."
    ),
    React.createElement(
      ClientContext.Provider,
      { value: props.client },
      props.children
    )
  );
}
function useClient() {
  const client = React.useContext(ClientContext);
  if (null == client)
    throw new Error("LiveblocksProvider is missing from the react tree");
  return client;
}
function __awaiter(thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      var value;
      result.done
        ? resolve(result.value)
        : ((value = result.value),
          value instanceof P
            ? value
            : new P(function (resolve) {
                resolve(value);
              })).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function useRerender() {
  const [, update] = useReducer((x) => x + 1, 0);
  return update;
}
function useInitial(value) {
  return React.useRef(value).current;
}
function createRoomContext(client) {
  let useClient$1;
  useClient$1 = "__legacy" !== client ? () => client : useClient;
  const RoomContext = React.createContext(null);
  function useRoom() {
    const room = React.useContext(RoomContext);
    if (null == room)
      throw new Error("RoomProvider is missing from the react tree");
    return room;
  }
  function useStorage() {
    const room = useRoom(),
      [root, setState] = React.useState(null);
    return (
      React.useEffect(() => {
        let didCancel = !1;
        return (
          (function () {
            __awaiter(this, void 0, void 0, function* () {
              const storage = yield room.getStorage();
              didCancel || setState(storage.root);
            });
          })(),
          () => {
            didCancel = !0;
          }
        );
      }, [room]),
      [root]
    );
  }
  function useMap_deprecated(key, entries) {
    errorIf(
      entries,
      `Support for initializing entries in useMap() directly will be removed in @liveblocks/react 0.18.\n\nInstead, please initialize this data where you set up your RoomProvider:\n\n    const initialStorage = () => ({\n      ${JSON.stringify(
        key
      )}: new LiveMap(...),\n      ...\n    });\n\n    <RoomProvider initialStorage={initialStorage}>\n      ...\n    </RoomProvider>\n\nPlease see https://bit.ly/3Niy5aP for details.`
    );
    const value = useStorageValue(
      key,
      new LiveMap(null != entries ? entries : void 0)
    );
    return "ok" === value.status
      ? value.value
      : (errorIf(
          "notfound" === value.status,
          `Key ${JSON.stringify(
            key
          )} was not found in Storage. Starting with 0.18, useMap() will no longer automatically create this key.\n\nInstead, please initialize your storage where you set up your RoomProvider:\n\n    import { LiveMap } from "@liveblocks/client";\n\n    const initialStorage = () => ({\n      ${JSON.stringify(
            key
          )}: new LiveMap(...),\n      ...\n    });\n\n    <RoomProvider initialStorage={initialStorage}>\n      ...\n    </RoomProvider>\n\nPlease see https://bit.ly/3Niy5aP for details.`
        ),
        null);
  }
  function useList_deprecated(key, items) {
    errorIf(
      items,
      `Support for initializing items in useList() directly will be removed in @liveblocks/react 0.18.\n\nInstead, please initialize this data where you set up your RoomProvider:\n\n    import { LiveList } from "@liveblocks/client";\n\n    const initialStorage = () => ({\n      ${JSON.stringify(
        key
      )}: new LiveList(...),\n      ...\n    });\n\n    <RoomProvider initialStorage={initialStorage}>\n      ...\n    </RoomProvider>\n\nPlease see https://bit.ly/3Niy5aP for details.`
    );
    const value = useStorageValue(key, new LiveList(items));
    return "ok" === value.status
      ? value.value
      : (errorIf(
          "notfound" === value.status,
          `Key ${JSON.stringify(
            key
          )} was not found in Storage. Starting with 0.18, useList() will no longer automatically create this key.\n\nInstead, please initialize your storage where you set up your RoomProvider:\n\n    import { LiveList } from "@liveblocks/client";\n\n    const initialStorage = () => ({\n      ${JSON.stringify(
            key
          )}: new LiveList(...),\n      ...\n    });\n\n    <RoomProvider initialStorage={initialStorage}>\n      ...\n    </RoomProvider>\n\nPlease see https://bit.ly/3Niy5aP for details.`
        ),
        null);
  }
  function useObject_deprecated(key, initialData) {
    errorIf(
      initialData,
      `Support for initializing data in useObject() directly will be removed in @liveblocks/react 0.18.\n\nInstead, please initialize this data where you set up your RoomProvider:\n\n    import { LiveObject } from "@liveblocks/client";\n\n    const initialStorage = () => ({\n      ${JSON.stringify(
        key
      )}: new LiveObject(...),\n      ...\n    });\n\n    <RoomProvider initialStorage={initialStorage}>\n      ...\n    </RoomProvider>\n\nPlease see https://bit.ly/3Niy5aP for details.`
    );
    const value = useStorageValue(key, new LiveObject(initialData));
    return "ok" === value.status
      ? value.value
      : (errorIf(
          "notfound" === value.status,
          `Key ${JSON.stringify(
            key
          )} was not found in Storage. Starting with 0.18, useObject() will no longer automatically create this key.\n\nInstead, please initialize your storage where you set up your RoomProvider:\n\n    import { LiveObject } from "@liveblocks/client";\n\n    const initialStorage = () => ({\n      ${JSON.stringify(
            key
          )}: new LiveObject(...),\n      ...\n    });\n\n    <RoomProvider initialStorage={initialStorage}>\n      ...\n    </RoomProvider>\n\nPlease see https://bit.ly/3Niy5aP for details.`
        ),
        null);
  }
  function useHistory() {
    return useRoom().history;
  }
  function useStorageValue(key, initialValue) {
    const room = useRoom(),
      [root] = useStorage(),
      rerender = useRerender(),
      frozenInitialValue = useInitial(initialValue);
    if (
      (React.useEffect(() => {
        if (null == root) return;
        let liveValue = root.get(key);
        null == liveValue &&
          ((liveValue = frozenInitialValue), root.set(key, liveValue));
        let unsubscribeCrdt = room.subscribe(liveValue, rerender);
        const unsubscribeRoot = room.subscribe(root, function () {
          const newCrdt = root.get(key);
          newCrdt !== liveValue &&
            (unsubscribeCrdt(),
            (liveValue = newCrdt),
            (unsubscribeCrdt = room.subscribe(liveValue, rerender)),
            rerender());
        });
        return (
          rerender(),
          () => {
            unsubscribeRoot(), unsubscribeCrdt();
          }
        );
      }, [root, room, key, frozenInitialValue, rerender]),
      null == root)
    )
      return { status: "loading" };
    {
      const value = root.get(key);
      return null == value
        ? { status: "notfound" }
        : { status: "ok", value: value };
    }
  }
  return {
    RoomProvider: function (props) {
      const {
        id: roomId,
        initialPresence: initialPresence,
        initialStorage: initialStorage,
        defaultPresence: defaultPresence,
        defaultStorageRoot: defaultStorageRoot,
      } = props;
      if ("production" !== process.env.NODE_ENV) {
        if (null == roomId)
          throw new Error(
            "RoomProvider id property is required. For more information: https://liveblocks.io/docs/errors/liveblocks-react/RoomProvider-id-property-is-required"
          );
        if ("string" != typeof roomId)
          throw new Error("RoomProvider id property should be a string.");
      }
      errorIf(
        defaultPresence,
        "RoomProvider's `defaultPresence` prop will be removed in @liveblocks/react 0.18. Please use `initialPresence` instead. For more info, see https://bit.ly/3Niy5aP"
      ),
        errorIf(
          defaultStorageRoot,
          "RoomProvider's `defaultStorageRoot` prop will be removed in @liveblocks/react 0.18. Please use `initialStorage` instead. For more info, see https://bit.ly/3Niy5aP"
        );
      const _client = useClient$1(),
        frozen = useInitial({
          initialPresence: initialPresence,
          initialStorage: initialStorage,
          defaultPresence: defaultPresence,
          defaultStorageRoot: defaultStorageRoot,
        }),
        [room, setRoom] = React.useState(() =>
          _client.enter(roomId, {
            initialPresence: initialPresence,
            initialStorage: initialStorage,
            defaultPresence: defaultPresence,
            defaultStorageRoot: defaultStorageRoot,
            DO_NOT_USE_withoutConnecting: "undefined" == typeof window,
          })
        );
      return (
        React.useEffect(
          () => (
            setRoom(
              _client.enter(roomId, {
                initialPresence: frozen.initialPresence,
                initialStorage: frozen.initialStorage,
                defaultPresence: frozen.defaultPresence,
                defaultStorageRoot: frozen.defaultStorageRoot,
                DO_NOT_USE_withoutConnecting: "undefined" == typeof window,
              })
            ),
            () => {
              _client.leave(roomId);
            }
          ),
          [_client, roomId, frozen]
        ),
        React.createElement(
          RoomContext.Provider,
          { value: room },
          props.children
        )
      );
    },
    useBatch: function () {
      return useRoom().batch;
    },
    useBroadcastEvent: function () {
      const room = useRoom();
      return React.useCallback(
        (event, options = { shouldQueueEventIfNotReady: !1 }) => {
          room.broadcastEvent(event, options);
        },
        [room]
      );
    },
    useErrorListener: function (callback) {
      const room = useRoom(),
        savedCallback = React.useRef(callback);
      React.useEffect(() => {
        savedCallback.current = callback;
      }),
        React.useEffect(() => {
          const unsubscribe = room.subscribe("error", (e) =>
            savedCallback.current(e)
          );
          return () => {
            unsubscribe();
          };
        }, [room]);
    },
    useEventListener: function (callback) {
      const room = useRoom(),
        savedCallback = React.useRef(callback);
      React.useEffect(() => {
        savedCallback.current = callback;
      }),
        React.useEffect(() => {
          const unsubscribe = room.subscribe("event", (eventData) => {
            savedCallback.current(eventData);
          });
          return () => {
            unsubscribe();
          };
        }, [room]);
    },
    useHistory: useHistory,
    useList: function (key) {
      return useList_deprecated(key);
    },
    useMap: function (key) {
      return useMap_deprecated(key);
    },
    useMyPresence: function () {
      const room = useRoom(),
        presence = room.getPresence(),
        rerender = useRerender();
      return (
        React.useEffect(() => {
          const unsubscribe = room.subscribe("my-presence", rerender);
          return () => {
            unsubscribe();
          };
        }, [room, rerender]),
        [
          presence,
          React.useCallback(
            (overrides, options) => room.updatePresence(overrides, options),
            [room]
          ),
        ]
      );
    },
    useObject: function (key) {
      return useObject_deprecated(key);
    },
    useOthers: function () {
      const room = useRoom(),
        rerender = useRerender();
      return (
        React.useEffect(() => {
          const unsubscribe = room.subscribe("others", rerender);
          return () => {
            unsubscribe();
          };
        }, [room, rerender]),
        room.getOthers()
      );
    },
    useRedo: function () {
      return useHistory().redo;
    },
    useRoom: useRoom,
    useSelf: function () {
      const room = useRoom(),
        rerender = useRerender();
      return (
        React.useEffect(() => {
          const unsubscribePresence = room.subscribe("my-presence", rerender),
            unsubscribeConnection = room.subscribe("connection", rerender);
          return () => {
            unsubscribePresence(), unsubscribeConnection();
          };
        }, [room, rerender]),
        room.getSelf()
      );
    },
    useStorage: useStorage,
    useUndo: function () {
      return useHistory().undo;
    },
    useUpdateMyPresence: function () {
      const room = useRoom();
      return React.useCallback(
        (overrides, options) => {
          room.updatePresence(overrides, options);
        },
        [room]
      );
    },
    RoomContext: RoomContext,
    useList_deprecated: useList_deprecated,
    useMap_deprecated: useMap_deprecated,
    useObject_deprecated: useObject_deprecated,
  };
}
const _hooks = createRoomContext("__legacy");
function RoomProvider(props) {
  return (
    deprecate(
      "Please use `createRoomContext()` instead of importing `RoomProvider` from `@liveblocks/react` directly. See https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details."
    ),
    _hooks.RoomProvider(props)
  );
}
function useBatch() {
  return (
    deprecate(
      "Please use `createRoomContext()` instead of importing `useBatch` from `@liveblocks/react` directly. See https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details."
    ),
    _hooks.useBatch()
  );
}
function useBroadcastEvent() {
  return (
    deprecate(
      "Please use `createRoomContext()` instead of importing `useBroadcastEvent` from `@liveblocks/react` directly. See https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details."
    ),
    _hooks.useBroadcastEvent()
  );
}
function useErrorListener(callback) {
  return (
    deprecate(
      "Please use `createRoomContext()` instead of importing `useErrorListener` from `@liveblocks/react` directly. See https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details."
    ),
    _hooks.useErrorListener(callback)
  );
}
function useEventListener(callback) {
  return (
    deprecate(
      "Please use `createRoomContext()` instead of importing `useEventListener` from `@liveblocks/react` directly. See https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details."
    ),
    _hooks.useEventListener(callback)
  );
}
function useHistory() {
  return (
    deprecate(
      "Please use `createRoomContext()` instead of importing `useHistory` from `@liveblocks/react` directly. See https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details."
    ),
    _hooks.useHistory()
  );
}
function useMyPresence() {
  return (
    deprecate(
      "Please use `createRoomContext()` instead of importing `useMyPresence` from `@liveblocks/react` directly. See https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details."
    ),
    _hooks.useMyPresence()
  );
}
function useOthers() {
  return (
    deprecate(
      "Please use `createRoomContext()` instead of importing `useOthers` from `@liveblocks/react` directly. See https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details."
    ),
    _hooks.useOthers()
  );
}
function useRedo() {
  return (
    deprecate(
      "Please use `createRoomContext()` instead of importing `useRedo` from `@liveblocks/react` directly. See https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details."
    ),
    _hooks.useRedo()
  );
}
function useRoom() {
  return (
    deprecate(
      "Please use `createRoomContext()` instead of importing `useRoom` from `@liveblocks/react` directly. See https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details."
    ),
    _hooks.useRoom()
  );
}
function useSelf() {
  return (
    deprecate(
      "Please use `createRoomContext()` instead of importing `useSelf` from `@liveblocks/react` directly. See https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details."
    ),
    _hooks.useSelf()
  );
}
function useStorage() {
  return (
    deprecate(
      "Please use `createRoomContext()` instead of importing `useStorage` from `@liveblocks/react` directly. See https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details."
    ),
    _hooks.useStorage()
  );
}
function useUndo() {
  return (
    deprecate(
      "Please use `createRoomContext()` instead of importing `useUndo` from `@liveblocks/react` directly. See https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details."
    ),
    _hooks.useUndo()
  );
}
function useUpdateMyPresence() {
  return (
    deprecate(
      "Please use `createRoomContext()` instead of importing `useUpdateMyPresence` from `@liveblocks/react` directly. See https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details."
    ),
    _hooks.useUpdateMyPresence()
  );
}
function useList(key, items) {
  return (
    deprecate(
      "Please use `createRoomContext()` instead of importing `useList` from `@liveblocks/react` directly. See https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details."
    ),
    _hooks.useList_deprecated(key, items)
  );
}
function useMap(key, entries) {
  return (
    deprecate(
      "Please use `createRoomContext()` instead of importing `useMap` from `@liveblocks/react` directly. See https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details."
    ),
    _hooks.useMap_deprecated(key, entries)
  );
}
function useObject(key, initialData) {
  return (
    deprecate(
      "Please use `createRoomContext()` instead of importing `useObject` from `@liveblocks/react` directly. See https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details."
    ),
    _hooks.useObject_deprecated(key, initialData)
  );
}
export {
  LiveblocksProvider,
  RoomProvider,
  createRoomContext,
  useBatch,
  useBroadcastEvent,
  useClient,
  useErrorListener,
  useEventListener,
  useHistory,
  useList,
  useMap,
  useMyPresence,
  useObject,
  useOthers,
  useRedo,
  useRoom,
  useSelf,
  useStorage,
  useUndo,
  useUpdateMyPresence,
};

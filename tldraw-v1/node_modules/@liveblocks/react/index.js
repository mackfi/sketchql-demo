"use strict";
Object.defineProperty(exports, "__esModule", { value: !0 });
var internal = require("@liveblocks/client/internal"),
  React = require("react"),
  client = require("@liveblocks/client");
function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  return (
    e &&
      Object.keys(e).forEach(function (k) {
        if ("default" !== k) {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(
            n,
            k,
            d.get
              ? d
              : {
                  enumerable: !0,
                  get: function () {
                    return e[k];
                  },
                }
          );
        }
      }),
    (n.default = e),
    Object.freeze(n)
  );
}
var React__namespace = _interopNamespace(React),
  ClientContext = React__namespace.createContext(null);
function useClient() {
  var client = React__namespace.useContext(ClientContext);
  if (null == client)
    throw new Error("LiveblocksProvider is missing from the react tree");
  return client;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg),
      value = info.value;
  } catch (error) {
    return void reject(error);
  }
  info.done ? resolve(value) : Promise.resolve(value).then(_next, _throw);
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(void 0);
    });
  };
}
function useRerender() {
  return React.useReducer(function (x) {
    return x + 1;
  }, 0)[1];
}
function useInitial(value) {
  return React__namespace.useRef(value).current;
}
function createRoomContext(client$1) {
  var useClient$1;
  useClient$1 =
    "__legacy" !== client$1
      ? function () {
          return client$1;
        }
      : useClient;
  var RoomContext = React__namespace.createContext(null);
  function useRoom() {
    var room = React__namespace.useContext(RoomContext);
    if (null == room)
      throw new Error("RoomProvider is missing from the react tree");
    return room;
  }
  function useStorage() {
    var room = useRoom(),
      _React$useState2 = React__namespace.useState(null),
      root = _React$useState2[0],
      setState = _React$useState2[1];
    return (
      React__namespace.useEffect(
        function () {
          var didCancel = !1;
          function _fetchStorage() {
            return (_fetchStorage = _asyncToGenerator(
              regeneratorRuntime.mark(function _callee() {
                var storage;
                return regeneratorRuntime.wrap(function (_context) {
                  for (;;)
                    switch ((_context.prev = _context.next)) {
                      case 0:
                        return (_context.next = 2), room.getStorage();
                      case 2:
                        (storage = _context.sent),
                          didCancel || setState(storage.root);
                      case 4:
                      case "end":
                        return _context.stop();
                    }
                }, _callee);
              })
            )).apply(this, arguments);
          }
          return (
            (function () {
              _fetchStorage.apply(this, arguments);
            })(),
            function () {
              didCancel = !0;
            }
          );
        },
        [room]
      ),
      [root]
    );
  }
  function useMap_deprecated(key, entries) {
    internal.errorIf(
      entries,
      "Support for initializing entries in useMap() directly will be removed in @liveblocks/react 0.18.\n\nInstead, please initialize this data where you set up your RoomProvider:\n\n    const initialStorage = () => ({\n      " +
        JSON.stringify(key) +
        ": new LiveMap(...),\n      ...\n    });\n\n    <RoomProvider initialStorage={initialStorage}>\n      ...\n    </RoomProvider>\n\nPlease see https://bit.ly/3Niy5aP for details."
    );
    var value = useStorageValue(
      key,
      new client.LiveMap(null != entries ? entries : void 0)
    );
    return "ok" === value.status
      ? value.value
      : (internal.errorIf(
          "notfound" === value.status,
          "Key " +
            JSON.stringify(key) +
            ' was not found in Storage. Starting with 0.18, useMap() will no longer automatically create this key.\n\nInstead, please initialize your storage where you set up your RoomProvider:\n\n    import { LiveMap } from "@liveblocks/client";\n\n    const initialStorage = () => ({\n      ' +
            JSON.stringify(key) +
            ": new LiveMap(...),\n      ...\n    });\n\n    <RoomProvider initialStorage={initialStorage}>\n      ...\n    </RoomProvider>\n\nPlease see https://bit.ly/3Niy5aP for details."
        ),
        null);
  }
  function useList_deprecated(key, items) {
    internal.errorIf(
      items,
      'Support for initializing items in useList() directly will be removed in @liveblocks/react 0.18.\n\nInstead, please initialize this data where you set up your RoomProvider:\n\n    import { LiveList } from "@liveblocks/client";\n\n    const initialStorage = () => ({\n      ' +
        JSON.stringify(key) +
        ": new LiveList(...),\n      ...\n    });\n\n    <RoomProvider initialStorage={initialStorage}>\n      ...\n    </RoomProvider>\n\nPlease see https://bit.ly/3Niy5aP for details."
    );
    var value = useStorageValue(key, new client.LiveList(items));
    return "ok" === value.status
      ? value.value
      : (internal.errorIf(
          "notfound" === value.status,
          "Key " +
            JSON.stringify(key) +
            ' was not found in Storage. Starting with 0.18, useList() will no longer automatically create this key.\n\nInstead, please initialize your storage where you set up your RoomProvider:\n\n    import { LiveList } from "@liveblocks/client";\n\n    const initialStorage = () => ({\n      ' +
            JSON.stringify(key) +
            ": new LiveList(...),\n      ...\n    });\n\n    <RoomProvider initialStorage={initialStorage}>\n      ...\n    </RoomProvider>\n\nPlease see https://bit.ly/3Niy5aP for details."
        ),
        null);
  }
  function useObject_deprecated(key, initialData) {
    internal.errorIf(
      initialData,
      'Support for initializing data in useObject() directly will be removed in @liveblocks/react 0.18.\n\nInstead, please initialize this data where you set up your RoomProvider:\n\n    import { LiveObject } from "@liveblocks/client";\n\n    const initialStorage = () => ({\n      ' +
        JSON.stringify(key) +
        ": new LiveObject(...),\n      ...\n    });\n\n    <RoomProvider initialStorage={initialStorage}>\n      ...\n    </RoomProvider>\n\nPlease see https://bit.ly/3Niy5aP for details."
    );
    var value = useStorageValue(key, new client.LiveObject(initialData));
    return "ok" === value.status
      ? value.value
      : (internal.errorIf(
          "notfound" === value.status,
          "Key " +
            JSON.stringify(key) +
            ' was not found in Storage. Starting with 0.18, useObject() will no longer automatically create this key.\n\nInstead, please initialize your storage where you set up your RoomProvider:\n\n    import { LiveObject } from "@liveblocks/client";\n\n    const initialStorage = () => ({\n      ' +
            JSON.stringify(key) +
            ": new LiveObject(...),\n      ...\n    });\n\n    <RoomProvider initialStorage={initialStorage}>\n      ...\n    </RoomProvider>\n\nPlease see https://bit.ly/3Niy5aP for details."
        ),
        null);
  }
  function useHistory() {
    return useRoom().history;
  }
  function useStorageValue(key, initialValue) {
    var room = useRoom(),
      root = useStorage()[0],
      rerender = useRerender(),
      frozenInitialValue = useInitial(initialValue);
    if (
      (React__namespace.useEffect(
        function () {
          if (null != root) {
            var liveValue = root.get(key);
            null == liveValue &&
              ((liveValue = frozenInitialValue), root.set(key, liveValue));
            var unsubscribeCrdt = room.subscribe(liveValue, rerender),
              unsubscribeRoot = room.subscribe(root, function () {
                var newCrdt = root.get(key);
                newCrdt !== liveValue &&
                  (unsubscribeCrdt(),
                  (liveValue = newCrdt),
                  (unsubscribeCrdt = room.subscribe(liveValue, rerender)),
                  rerender());
              });
            return (
              rerender(),
              function () {
                unsubscribeRoot(), unsubscribeCrdt();
              }
            );
          }
        },
        [root, room, key, frozenInitialValue, rerender]
      ),
      null == root)
    )
      return { status: "loading" };
    var value = root.get(key);
    return null == value
      ? { status: "notfound" }
      : { status: "ok", value: value };
  }
  return {
    RoomProvider: function (props) {
      var roomId = props.id,
        initialPresence = props.initialPresence,
        initialStorage = props.initialStorage,
        defaultPresence = props.defaultPresence,
        defaultStorageRoot = props.defaultStorageRoot;
      if ("production" !== process.env.NODE_ENV) {
        if (null == roomId)
          throw new Error(
            "RoomProvider id property is required. For more information: https://liveblocks.io/docs/errors/liveblocks-react/RoomProvider-id-property-is-required"
          );
        if ("string" != typeof roomId)
          throw new Error("RoomProvider id property should be a string.");
      }
      internal.errorIf(
        defaultPresence,
        "RoomProvider's `defaultPresence` prop will be removed in @liveblocks/react 0.18. Please use `initialPresence` instead. For more info, see https://bit.ly/3Niy5aP"
      ),
        internal.errorIf(
          defaultStorageRoot,
          "RoomProvider's `defaultStorageRoot` prop will be removed in @liveblocks/react 0.18. Please use `initialStorage` instead. For more info, see https://bit.ly/3Niy5aP"
        );
      var _client = useClient$1(),
        frozen = useInitial({
          initialPresence: initialPresence,
          initialStorage: initialStorage,
          defaultPresence: defaultPresence,
          defaultStorageRoot: defaultStorageRoot,
        }),
        _React$useState = React__namespace.useState(function () {
          return _client.enter(roomId, {
            initialPresence: initialPresence,
            initialStorage: initialStorage,
            defaultPresence: defaultPresence,
            defaultStorageRoot: defaultStorageRoot,
            DO_NOT_USE_withoutConnecting: "undefined" == typeof window,
          });
        }),
        room = _React$useState[0],
        setRoom = _React$useState[1];
      return (
        React__namespace.useEffect(
          function () {
            return (
              setRoom(
                _client.enter(roomId, {
                  initialPresence: frozen.initialPresence,
                  initialStorage: frozen.initialStorage,
                  defaultPresence: frozen.defaultPresence,
                  defaultStorageRoot: frozen.defaultStorageRoot,
                  DO_NOT_USE_withoutConnecting: "undefined" == typeof window,
                })
              ),
              function () {
                _client.leave(roomId);
              }
            );
          },
          [_client, roomId, frozen]
        ),
        React__namespace.createElement(
          RoomContext.Provider,
          { value: room },
          props.children
        )
      );
    },
    useBatch: function () {
      return useRoom().batch;
    },
    useBroadcastEvent: function () {
      var room = useRoom();
      return React__namespace.useCallback(
        function (event, options) {
          void 0 === options && (options = { shouldQueueEventIfNotReady: !1 }),
            room.broadcastEvent(event, options);
        },
        [room]
      );
    },
    useErrorListener: function (callback) {
      var room = useRoom(),
        savedCallback = React__namespace.useRef(callback);
      React__namespace.useEffect(function () {
        savedCallback.current = callback;
      }),
        React__namespace.useEffect(
          function () {
            var unsubscribe = room.subscribe("error", function (e) {
              return savedCallback.current(e);
            });
            return function () {
              unsubscribe();
            };
          },
          [room]
        );
    },
    useEventListener: function (callback) {
      var room = useRoom(),
        savedCallback = React__namespace.useRef(callback);
      React__namespace.useEffect(function () {
        savedCallback.current = callback;
      }),
        React__namespace.useEffect(
          function () {
            var unsubscribe = room.subscribe("event", function (eventData) {
              savedCallback.current(eventData);
            });
            return function () {
              unsubscribe();
            };
          },
          [room]
        );
    },
    useHistory: useHistory,
    useList: function (key) {
      return useList_deprecated(key);
    },
    useMap: function (key) {
      return useMap_deprecated(key);
    },
    useMyPresence: function () {
      var room = useRoom(),
        presence = room.getPresence(),
        rerender = useRerender();
      return (
        React__namespace.useEffect(
          function () {
            var unsubscribe = room.subscribe("my-presence", rerender);
            return function () {
              unsubscribe();
            };
          },
          [room, rerender]
        ),
        [
          presence,
          React__namespace.useCallback(
            function (overrides, options) {
              return room.updatePresence(overrides, options);
            },
            [room]
          ),
        ]
      );
    },
    useObject: function (key) {
      return useObject_deprecated(key);
    },
    useOthers: function () {
      var room = useRoom(),
        rerender = useRerender();
      return (
        React__namespace.useEffect(
          function () {
            var unsubscribe = room.subscribe("others", rerender);
            return function () {
              unsubscribe();
            };
          },
          [room, rerender]
        ),
        room.getOthers()
      );
    },
    useRedo: function () {
      return useHistory().redo;
    },
    useRoom: useRoom,
    useSelf: function () {
      var room = useRoom(),
        rerender = useRerender();
      return (
        React__namespace.useEffect(
          function () {
            var unsubscribePresence = room.subscribe("my-presence", rerender),
              unsubscribeConnection = room.subscribe("connection", rerender);
            return function () {
              unsubscribePresence(), unsubscribeConnection();
            };
          },
          [room, rerender]
        ),
        room.getSelf()
      );
    },
    useStorage: useStorage,
    useUndo: function () {
      return useHistory().undo;
    },
    useUpdateMyPresence: function () {
      var room = useRoom();
      return React__namespace.useCallback(
        function (overrides, options) {
          room.updatePresence(overrides, options);
        },
        [room]
      );
    },
    RoomContext: RoomContext,
    useList_deprecated: useList_deprecated,
    useMap_deprecated: useMap_deprecated,
    useObject_deprecated: useObject_deprecated,
  };
}
var _hooks = createRoomContext("__legacy");
(exports.LiveblocksProvider = function (props) {
  return (
    internal.deprecate(
      "LiveblocksProvider is no longer needed in your component tree if you set up your Liveblocks context using `createRoomContext()`. See https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details."
    ),
    React__namespace.createElement(
      ClientContext.Provider,
      { value: props.client },
      props.children
    )
  );
}),
  (exports.RoomProvider = function (props) {
    return (
      internal.deprecate(
        "Please use `createRoomContext()` instead of importing `RoomProvider` from `@liveblocks/react` directly. See https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details."
      ),
      _hooks.RoomProvider(props)
    );
  }),
  (exports.createRoomContext = createRoomContext),
  (exports.useBatch = function () {
    return (
      internal.deprecate(
        "Please use `createRoomContext()` instead of importing `useBatch` from `@liveblocks/react` directly. See https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details."
      ),
      _hooks.useBatch()
    );
  }),
  (exports.useBroadcastEvent = function () {
    return (
      internal.deprecate(
        "Please use `createRoomContext()` instead of importing `useBroadcastEvent` from `@liveblocks/react` directly. See https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details."
      ),
      _hooks.useBroadcastEvent()
    );
  }),
  (exports.useClient = useClient),
  (exports.useErrorListener = function (callback) {
    return (
      internal.deprecate(
        "Please use `createRoomContext()` instead of importing `useErrorListener` from `@liveblocks/react` directly. See https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details."
      ),
      _hooks.useErrorListener(callback)
    );
  }),
  (exports.useEventListener = function (callback) {
    return (
      internal.deprecate(
        "Please use `createRoomContext()` instead of importing `useEventListener` from `@liveblocks/react` directly. See https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details."
      ),
      _hooks.useEventListener(callback)
    );
  }),
  (exports.useHistory = function () {
    return (
      internal.deprecate(
        "Please use `createRoomContext()` instead of importing `useHistory` from `@liveblocks/react` directly. See https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details."
      ),
      _hooks.useHistory()
    );
  }),
  (exports.useList = function (key, items) {
    return (
      internal.deprecate(
        "Please use `createRoomContext()` instead of importing `useList` from `@liveblocks/react` directly. See https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details."
      ),
      _hooks.useList_deprecated(key, items)
    );
  }),
  (exports.useMap = function (key, entries) {
    return (
      internal.deprecate(
        "Please use `createRoomContext()` instead of importing `useMap` from `@liveblocks/react` directly. See https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details."
      ),
      _hooks.useMap_deprecated(key, entries)
    );
  }),
  (exports.useMyPresence = function () {
    return (
      internal.deprecate(
        "Please use `createRoomContext()` instead of importing `useMyPresence` from `@liveblocks/react` directly. See https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details."
      ),
      _hooks.useMyPresence()
    );
  }),
  (exports.useObject = function (key, initialData) {
    return (
      internal.deprecate(
        "Please use `createRoomContext()` instead of importing `useObject` from `@liveblocks/react` directly. See https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details."
      ),
      _hooks.useObject_deprecated(key, initialData)
    );
  }),
  (exports.useOthers = function () {
    return (
      internal.deprecate(
        "Please use `createRoomContext()` instead of importing `useOthers` from `@liveblocks/react` directly. See https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details."
      ),
      _hooks.useOthers()
    );
  }),
  (exports.useRedo = function () {
    return (
      internal.deprecate(
        "Please use `createRoomContext()` instead of importing `useRedo` from `@liveblocks/react` directly. See https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details."
      ),
      _hooks.useRedo()
    );
  }),
  (exports.useRoom = function () {
    return (
      internal.deprecate(
        "Please use `createRoomContext()` instead of importing `useRoom` from `@liveblocks/react` directly. See https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details."
      ),
      _hooks.useRoom()
    );
  }),
  (exports.useSelf = function () {
    return (
      internal.deprecate(
        "Please use `createRoomContext()` instead of importing `useSelf` from `@liveblocks/react` directly. See https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details."
      ),
      _hooks.useSelf()
    );
  }),
  (exports.useStorage = function () {
    return (
      internal.deprecate(
        "Please use `createRoomContext()` instead of importing `useStorage` from `@liveblocks/react` directly. See https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details."
      ),
      _hooks.useStorage()
    );
  }),
  (exports.useUndo = function () {
    return (
      internal.deprecate(
        "Please use `createRoomContext()` instead of importing `useUndo` from `@liveblocks/react` directly. See https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details."
      ),
      _hooks.useUndo()
    );
  }),
  (exports.useUpdateMyPresence = function () {
    return (
      internal.deprecate(
        "Please use `createRoomContext()` instead of importing `useUpdateMyPresence` from `@liveblocks/react` directly. See https://liveblocks.io/docs/guides/upgrading#upgrading-from-0-16-to-0-17 for details."
      ),
      _hooks.useUpdateMyPresence()
    );
  });

{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["export class Vec {\n  /**\n   * Clamp a value into a range.\n   * @param n\n   * @param min\n   */\n  static clamp(n: number, min: number): number\n  static clamp(n: number, min: number, max: number): number\n  static clamp(n: number, min: number, max?: number): number {\n    return Math.max(min, typeof max !== 'undefined' ? Math.min(n, max) : n)\n  }\n\n  /**\n   * Clamp a value into a range.\n   * @param n\n   * @param min\n   */\n  static clampV(A: number[], min: number): number[]\n  static clampV(A: number[], min: number, max: number): number[]\n  static clampV(A: number[], min: number, max?: number): number[] {\n    return A.map((n) => (max ? Vec.clamp(n, min, max) : Vec.clamp(n, min)))\n  }\n\n  /**\n   * Negate a vector.\n   * @param A\n   */\n  static neg = (A: number[]): number[] => {\n    return [-A[0], -A[1]]\n  }\n\n  /**\n   * Add vectors.\n   * @param A\n   * @param B\n   */\n  static add = (A: number[], B: number[]): number[] => {\n    return [A[0] + B[0], A[1] + B[1]]\n  }\n\n  /**\n   * Add scalar to vector.\n   * @param A\n   * @param B\n   */\n  static addScalar = (A: number[], n: number): number[] => {\n    return [A[0] + n, A[1] + n]\n  }\n\n  /**\n   * Subtract vectors.\n   * @param A\n   * @param B\n   */\n  static sub = (A: number[], B: number[]): number[] => {\n    return [A[0] - B[0], A[1] - B[1]]\n  }\n\n  /**\n   * Subtract scalar from vector.\n   * @param A\n   * @param B\n   */\n  static subScalar = (A: number[], n: number): number[] => {\n    return [A[0] - n, A[1] - n]\n  }\n\n  /**\n   * Get the vector from vectors A to B.\n   * @param A\n   * @param B\n   */\n  static vec = (A: number[], B: number[]): number[] => {\n    // A, B as vectors get the vector from A to B\n    return [B[0] - A[0], B[1] - A[1]]\n  }\n\n  /**\n   * Vector multiplication by scalar\n   * @param A\n   * @param n\n   */\n  static mul = (A: number[], n: number): number[] => {\n    return [A[0] * n, A[1] * n]\n  }\n\n  /**\n   * Multiple two vectors.\n   * @param A\n   * @param B\n   */\n  static mulV = (A: number[], B: number[]): number[] => {\n    return [A[0] * B[0], A[1] * B[1]]\n  }\n\n  /**\n   * Vector division by scalar.\n   * @param A\n   * @param n\n   */\n  static div = (A: number[], n: number): number[] => {\n    return [A[0] / n, A[1] / n]\n  }\n\n  /**\n   * Vector division by vector.\n   * @param A\n   * @param n\n   */\n  static divV = (A: number[], B: number[]): number[] => {\n    return [A[0] / B[0], A[1] / B[1]]\n  }\n\n  /**\n   * Perpendicular rotation of a vector A\n   * @param A\n   */\n  static per = (A: number[]): number[] => {\n    return [A[1], -A[0]]\n  }\n\n  /**\n   * Dot product\n   * @param A\n   * @param B\n   */\n  static dpr = (A: number[], B: number[]): number => {\n    return A[0] * B[0] + A[1] * B[1]\n  }\n\n  /**\n   * Cross product (outer product) | A X B |\n   * @param A\n   * @param B\n   */\n  static cpr = (A: number[], B: number[]): number => {\n    return A[0] * B[1] - B[0] * A[1]\n  }\n\n  /**\n   * Cross (for point in polygon)\n   *\n   */\n  static cross(x: number[], y: number[], z: number[]): number {\n    return (y[0] - x[0]) * (z[1] - x[1]) - (z[0] - x[0]) * (y[1] - x[1])\n  }\n\n  /**\n   * Length of the vector squared\n   * @param A\n   */\n  static len2 = (A: number[]): number => {\n    return A[0] * A[0] + A[1] * A[1]\n  }\n\n  /**\n   * Length of the vector\n   * @param A\n   */\n  static len = (A: number[]): number => {\n    return Math.hypot(A[0], A[1])\n  }\n\n  /**\n   * Project A over B\n   * @param A\n   * @param B\n   */\n  static pry = (A: number[], B: number[]): number => {\n    return Vec.dpr(A, B) / Vec.len(B)\n  }\n\n  /**\n   * Get normalized / unit vector.\n   * @param A\n   */\n  static uni = (A: number[]): number[] => {\n    return Vec.div(A, Vec.len(A))\n  }\n\n  /**\n   * Get normalized / unit vector.\n   * @param A\n   */\n  static normalize = (A: number[]): number[] => {\n    return Vec.uni(A)\n  }\n\n  /**\n   * Get the tangent between two vectors.\n   * @param A\n   * @param B\n   * @returns\n   */\n  static tangent = (A: number[], B: number[]): number[] => {\n    return Vec.uni(Vec.sub(A, B))\n  }\n\n  /**\n   * Dist length from A to B squared.\n   * @param A\n   * @param B\n   */\n  static dist2 = (A: number[], B: number[]): number => {\n    return Vec.len2(Vec.sub(A, B))\n  }\n\n  /**\n   * Dist length from A to B\n   * @param A\n   * @param B\n   */\n  static dist = (A: number[], B: number[]): number => {\n    return Math.hypot(A[1] - B[1], A[0] - B[0])\n  }\n\n  /**\n   * A faster, though less accurate method for testing distances. Maybe faster?\n   * @param A\n   * @param B\n   * @returns\n   */\n  static fastDist = (A: number[], B: number[]): number[] => {\n    const V = [B[0] - A[0], B[1] - A[1]]\n    const aV = [Math.abs(V[0]), Math.abs(V[1])]\n    let r = 1 / Math.max(aV[0], aV[1])\n    r = r * (1.29289 - (aV[0] + aV[1]) * r * 0.29289)\n    return [V[0] * r, V[1] * r]\n  }\n\n  /**\n   * Angle between vector A and vector B in radians\n   * @param A\n   * @param B\n   */\n  static ang = (A: number[], B: number[]): number => {\n    return Math.atan2(Vec.cpr(A, B), Vec.dpr(A, B))\n  }\n\n  /**\n   * Angle between vector A and vector B in radians\n   * @param A\n   * @param B\n   */\n  static angle = (A: number[], B: number[]): number => {\n    return Math.atan2(B[1] - A[1], B[0] - A[0])\n  }\n\n  /**\n   * Mean between two vectors or mid vector between two vectors\n   * @param A\n   * @param B\n   */\n  static med = (A: number[], B: number[]): number[] => {\n    return Vec.mul(Vec.add(A, B), 0.5)\n  }\n\n  /**\n   * Vector rotation by r (radians)\n   * @param A\n   * @param r rotation in radians\n   */\n  static rot = (A: number[], r = 0): number[] => {\n    return [A[0] * Math.cos(r) - A[1] * Math.sin(r), A[0] * Math.sin(r) + A[1] * Math.cos(r)]\n  }\n\n  /**\n   * Rotate a vector around another vector by r (radians)\n   * @param A vector\n   * @param C center\n   * @param r rotation in radians\n   */\n  static rotWith = (A: number[], C: number[], r = 0): number[] => {\n    if (r === 0) return A\n\n    const s = Math.sin(r)\n    const c = Math.cos(r)\n\n    const px = A[0] - C[0]\n    const py = A[1] - C[1]\n\n    const nx = px * c - py * s\n    const ny = px * s + py * c\n\n    return [nx + C[0], ny + C[1]]\n  }\n\n  /**\n   * Check of two vectors are identical.\n   * @param A\n   * @param B\n   */\n  static isEqual = (A: number[], B: number[]): boolean => {\n    return A[0] === B[0] && A[1] === B[1]\n  }\n\n  /**\n   * Interpolate vector A to B with a scalar t\n   * @param A\n   * @param B\n   * @param t scalar\n   */\n  static lrp = (A: number[], B: number[], t: number): number[] => {\n    return Vec.add(A, Vec.mul(Vec.sub(B, A), t))\n  }\n\n  /**\n   * Interpolate from A to B when curVAL goes fromVAL: number[] => to\n   * @param A\n   * @param B\n   * @param from Starting value\n   * @param to Ending value\n   * @param s Strength\n   */\n  static int = (A: number[], B: number[], from: number, to: number, s = 1): number[] => {\n    const t = (Vec.clamp(from, to) - from) / (to - from)\n    return Vec.add(Vec.mul(A, 1 - t), Vec.mul(B, s))\n  }\n\n  /**\n   * Get the angle between the three vectors A, B, and C.\n   * @param p1\n   * @param pc\n   * @param p2\n   */\n  static ang3 = (p1: number[], pc: number[], p2: number[]): number => {\n    // this,\n    const v1 = Vec.vec(pc, p1)\n    const v2 = Vec.vec(pc, p2)\n    return Vec.ang(v1, v2)\n  }\n\n  /**\n   * Absolute value of a vector.\n   * @param A\n   * @returns\n   */\n  static abs = (A: number[]): number[] => {\n    return [Math.abs(A[0]), Math.abs(A[1])]\n  }\n\n  static rescale = (a: number[], n: number): number[] => {\n    const l = Vec.len(a)\n    return [(n * a[0]) / l, (n * a[1]) / l]\n  }\n\n  /**\n   * Get whether p1 is left of p2, relative to pc.\n   * @param p1\n   * @param pc\n   * @param p2\n   */\n  static isLeft = (p1: number[], pc: number[], p2: number[]): number => {\n    //  isLeft: >0 for counterclockwise\n    //          =0 for none (degenerate)\n    //          <0 for clockwise\n    return (pc[0] - p1[0]) * (p2[1] - p1[1]) - (p2[0] - p1[0]) * (pc[1] - p1[1])\n  }\n\n  /**\n   * Get whether p1 is left of p2, relative to pc.\n   * @param p1\n   * @param pc\n   * @param p2\n   */\n  static clockwise = (p1: number[], pc: number[], p2: number[]): boolean => {\n    return Vec.isLeft(p1, pc, p2) > 0\n  }\n\n  /**\n   * Round a vector to two decimal places.\n   * @param a\n   */\n  static toFixed = (a: number[]): number[] => {\n    return a.map((v) => Math.round(v * 100) / 100)\n  }\n\n  /**\n   * Snap vector to nearest step.\n   * @param A\n   * @param step\n   * @example\n   * ```ts\n   * Vec.snap([10.5, 28], 10) // [10, 30]\n   * ```\n   */\n  static snap(a: number[], step = 1) {\n    return [Math.round(a[0] / step) * step, Math.round(a[1] / step) * step]\n  }\n\n  /**\n   * Get the nearest point on a line with a known unit vector that passes through point A\n   * @param A Any point on the line\n   * @param u The unit vector for the line.\n   * @param P A point not on the line to test.\n   * @returns\n   */\n  static nearestPointOnLineThroughPoint = (A: number[], u: number[], P: number[]): number[] => {\n    return Vec.add(A, Vec.mul(u, Vec.pry(Vec.sub(P, A), u)))\n  }\n\n  /**\n   * Distance between a point and a line with a known unit vector that passes through a point.\n   * @param A Any point on the line\n   * @param u The unit vector for the line.\n   * @param P A point not on the line to test.\n   * @returns\n   */\n  static distanceToLineThroughPoint = (A: number[], u: number[], P: number[]): number => {\n    return Vec.dist(P, Vec.nearestPointOnLineThroughPoint(A, u, P))\n  }\n\n  /**\n   * Get the nearest point on a line segment between A and B\n   * @param A The start of the line segment\n   * @param B The end of the line segment\n   * @param P The off-line point\n   * @param clamp Whether to clamp the point between A and B.\n   * @returns\n   */\n  static nearestPointOnLineSegment = (\n    A: number[],\n    B: number[],\n    P: number[],\n    clamp = true\n  ): number[] => {\n    const u = Vec.uni(Vec.sub(B, A))\n    const C = Vec.add(A, Vec.mul(u, Vec.pry(Vec.sub(P, A), u)))\n\n    if (clamp) {\n      if (C[0] < Math.min(A[0], B[0])) return A[0] < B[0] ? A : B\n      if (C[0] > Math.max(A[0], B[0])) return A[0] > B[0] ? A : B\n      if (C[1] < Math.min(A[1], B[1])) return A[1] < B[1] ? A : B\n      if (C[1] > Math.max(A[1], B[1])) return A[1] > B[1] ? A : B\n    }\n\n    return C\n  }\n\n  /**\n   * Distance between a point and the nearest point on a line segment between A and B\n   * @param A The start of the line segment\n   * @param B The end of the line segment\n   * @param P The off-line point\n   * @param clamp Whether to clamp the point between A and B.\n   * @returns\n   */\n  static distanceToLineSegment = (A: number[], B: number[], P: number[], clamp = true): number => {\n    return Vec.dist(P, Vec.nearestPointOnLineSegment(A, B, P, clamp))\n  }\n\n  /**\n   * Get the nearest point on a bounding box to a point P.\n   * @param bounds The bounding box\n   * @param P The point point\n   * @returns\n   */\n  static nearestPointOnBounds = (\n    bounds: {\n      minX: number\n      minY: number\n      maxX: number\n      maxY: number\n    },\n    P: number[]\n  ): number[] => {\n    return [Vec.clamp(P[0], bounds.minX, bounds.maxX), Vec.clamp(P[1], bounds.minY, bounds.maxY)]\n  }\n\n  /**\n   * Distance between a point and the nearest point on a bounding box.\n   * @param bounds The bounding box.\n   * @param P The point\n   * @returns\n   */\n  static distanceToBounds = (\n    bounds: {\n      minX: number\n      minY: number\n      maxX: number\n      maxY: number\n    },\n    P: number[]\n  ): number => {\n    return Vec.dist(P, Vec.nearestPointOnBounds(bounds, P))\n  }\n\n  /**\n   * Push a point A towards point B by a given distance.\n   * @param A\n   * @param B\n   * @param d\n   * @returns\n   */\n  static nudge = (A: number[], B: number[], d: number): number[] => {\n    if (Vec.isEqual(A, B)) return A\n    return Vec.add(A, Vec.mul(Vec.uni(Vec.sub(B, A)), d))\n  }\n\n  /**\n   * Push a point in a given angle by a given distance.\n   * @param A\n   * @param B\n   * @param d\n   */\n  static nudgeAtAngle = (A: number[], a: number, d: number): number[] => {\n    return [Math.cos(a) * d + A[0], Math.sin(a) * d + A[1]]\n  }\n\n  /**\n   * Round a vector to a precision length.\n   * @param a\n   * @param n\n   */\n  static toPrecision = (a: number[], n = 4): number[] => {\n    return [+a[0].toPrecision(n), +a[1].toPrecision(n)]\n  }\n\n  /**\n   * Get an array of points between two points.\n   * @param A The first point.\n   * @param B The second point.\n   * @param steps The number of points to return.\n   */\n  static pointsBetween = (A: number[], B: number[], steps = 6): number[][] => {\n    return Array.from(Array(steps)).map((_, i) => {\n      const t = i / (steps - 1)\n      const k = Math.min(1, 0.5 + Math.abs(0.5 - t))\n      return [...Vec.lrp(A, B, t), k]\n    })\n  }\n\n  /**\n   * Get the slope between two points.\n   * @param A\n   * @param B\n   */\n  static slope = (A: number[], B: number[]) => {\n    if (A[0] === B[0]) return NaN\n    return (A[1] - B[1]) / (A[0] - B[0])\n  }\n\n  /**\n   * Get a vector comprised of the maximum of two or more vectors.\n   */\n  static max = (...v: number[][]) => {\n    return [Math.max(...v.map((a) => a[0])), Math.max(...v.map((a) => a[1]))]\n  }\n\n  /**\n   * Get a vector comprised of the minimum of two or more vectors.\n   */\n  static min = (...v: number[][]) => {\n    return [Math.min(...v.map((a) => a[0])), Math.min(...v.map((a) => a[1]))]\n  }\n}\n\nexport default Vec\n"],
  "mappings": "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",
  "names": []
}

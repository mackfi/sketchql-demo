{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["export class Vec {\n  /**\n   * Clamp a value into a range.\n   * @param n\n   * @param min\n   */\n  static clamp(n: number, min: number): number\n  static clamp(n: number, min: number, max: number): number\n  static clamp(n: number, min: number, max?: number): number {\n    return Math.max(min, typeof max !== 'undefined' ? Math.min(n, max) : n)\n  }\n\n  /**\n   * Clamp a value into a range.\n   * @param n\n   * @param min\n   */\n  static clampV(A: number[], min: number): number[]\n  static clampV(A: number[], min: number, max: number): number[]\n  static clampV(A: number[], min: number, max?: number): number[] {\n    return A.map((n) => (max ? Vec.clamp(n, min, max) : Vec.clamp(n, min)))\n  }\n\n  /**\n   * Negate a vector.\n   * @param A\n   */\n  static neg = (A: number[]): number[] => {\n    return [-A[0], -A[1]]\n  }\n\n  /**\n   * Add vectors.\n   * @param A\n   * @param B\n   */\n  static add = (A: number[], B: number[]): number[] => {\n    return [A[0] + B[0], A[1] + B[1]]\n  }\n\n  /**\n   * Add scalar to vector.\n   * @param A\n   * @param B\n   */\n  static addScalar = (A: number[], n: number): number[] => {\n    return [A[0] + n, A[1] + n]\n  }\n\n  /**\n   * Subtract vectors.\n   * @param A\n   * @param B\n   */\n  static sub = (A: number[], B: number[]): number[] => {\n    return [A[0] - B[0], A[1] - B[1]]\n  }\n\n  /**\n   * Subtract scalar from vector.\n   * @param A\n   * @param B\n   */\n  static subScalar = (A: number[], n: number): number[] => {\n    return [A[0] - n, A[1] - n]\n  }\n\n  /**\n   * Get the vector from vectors A to B.\n   * @param A\n   * @param B\n   */\n  static vec = (A: number[], B: number[]): number[] => {\n    // A, B as vectors get the vector from A to B\n    return [B[0] - A[0], B[1] - A[1]]\n  }\n\n  /**\n   * Vector multiplication by scalar\n   * @param A\n   * @param n\n   */\n  static mul = (A: number[], n: number): number[] => {\n    return [A[0] * n, A[1] * n]\n  }\n\n  /**\n   * Multiple two vectors.\n   * @param A\n   * @param B\n   */\n  static mulV = (A: number[], B: number[]): number[] => {\n    return [A[0] * B[0], A[1] * B[1]]\n  }\n\n  /**\n   * Vector division by scalar.\n   * @param A\n   * @param n\n   */\n  static div = (A: number[], n: number): number[] => {\n    return [A[0] / n, A[1] / n]\n  }\n\n  /**\n   * Vector division by vector.\n   * @param A\n   * @param n\n   */\n  static divV = (A: number[], B: number[]): number[] => {\n    return [A[0] / B[0], A[1] / B[1]]\n  }\n\n  /**\n   * Perpendicular rotation of a vector A\n   * @param A\n   */\n  static per = (A: number[]): number[] => {\n    return [A[1], -A[0]]\n  }\n\n  /**\n   * Dot product\n   * @param A\n   * @param B\n   */\n  static dpr = (A: number[], B: number[]): number => {\n    return A[0] * B[0] + A[1] * B[1]\n  }\n\n  /**\n   * Cross product (outer product) | A X B |\n   * @param A\n   * @param B\n   */\n  static cpr = (A: number[], B: number[]): number => {\n    return A[0] * B[1] - B[0] * A[1]\n  }\n\n  /**\n   * Cross (for point in polygon)\n   *\n   */\n  static cross(x: number[], y: number[], z: number[]): number {\n    return (y[0] - x[0]) * (z[1] - x[1]) - (z[0] - x[0]) * (y[1] - x[1])\n  }\n\n  /**\n   * Length of the vector squared\n   * @param A\n   */\n  static len2 = (A: number[]): number => {\n    return A[0] * A[0] + A[1] * A[1]\n  }\n\n  /**\n   * Length of the vector\n   * @param A\n   */\n  static len = (A: number[]): number => {\n    return Math.hypot(A[0], A[1])\n  }\n\n  /**\n   * Project A over B\n   * @param A\n   * @param B\n   */\n  static pry = (A: number[], B: number[]): number => {\n    return Vec.dpr(A, B) / Vec.len(B)\n  }\n\n  /**\n   * Get normalized / unit vector.\n   * @param A\n   */\n  static uni = (A: number[]): number[] => {\n    return Vec.div(A, Vec.len(A))\n  }\n\n  /**\n   * Get normalized / unit vector.\n   * @param A\n   */\n  static normalize = (A: number[]): number[] => {\n    return Vec.uni(A)\n  }\n\n  /**\n   * Get the tangent between two vectors.\n   * @param A\n   * @param B\n   * @returns\n   */\n  static tangent = (A: number[], B: number[]): number[] => {\n    return Vec.uni(Vec.sub(A, B))\n  }\n\n  /**\n   * Dist length from A to B squared.\n   * @param A\n   * @param B\n   */\n  static dist2 = (A: number[], B: number[]): number => {\n    return Vec.len2(Vec.sub(A, B))\n  }\n\n  /**\n   * Dist length from A to B\n   * @param A\n   * @param B\n   */\n  static dist = (A: number[], B: number[]): number => {\n    return Math.hypot(A[1] - B[1], A[0] - B[0])\n  }\n\n  /**\n   * A faster, though less accurate method for testing distances. Maybe faster?\n   * @param A\n   * @param B\n   * @returns\n   */\n  static fastDist = (A: number[], B: number[]): number[] => {\n    const V = [B[0] - A[0], B[1] - A[1]]\n    const aV = [Math.abs(V[0]), Math.abs(V[1])]\n    let r = 1 / Math.max(aV[0], aV[1])\n    r = r * (1.29289 - (aV[0] + aV[1]) * r * 0.29289)\n    return [V[0] * r, V[1] * r]\n  }\n\n  /**\n   * Angle between vector A and vector B in radians\n   * @param A\n   * @param B\n   */\n  static ang = (A: number[], B: number[]): number => {\n    return Math.atan2(Vec.cpr(A, B), Vec.dpr(A, B))\n  }\n\n  /**\n   * Angle between vector A and vector B in radians\n   * @param A\n   * @param B\n   */\n  static angle = (A: number[], B: number[]): number => {\n    return Math.atan2(B[1] - A[1], B[0] - A[0])\n  }\n\n  /**\n   * Mean between two vectors or mid vector between two vectors\n   * @param A\n   * @param B\n   */\n  static med = (A: number[], B: number[]): number[] => {\n    return Vec.mul(Vec.add(A, B), 0.5)\n  }\n\n  /**\n   * Vector rotation by r (radians)\n   * @param A\n   * @param r rotation in radians\n   */\n  static rot = (A: number[], r = 0): number[] => {\n    return [A[0] * Math.cos(r) - A[1] * Math.sin(r), A[0] * Math.sin(r) + A[1] * Math.cos(r)]\n  }\n\n  /**\n   * Rotate a vector around another vector by r (radians)\n   * @param A vector\n   * @param C center\n   * @param r rotation in radians\n   */\n  static rotWith = (A: number[], C: number[], r = 0): number[] => {\n    if (r === 0) return A\n\n    const s = Math.sin(r)\n    const c = Math.cos(r)\n\n    const px = A[0] - C[0]\n    const py = A[1] - C[1]\n\n    const nx = px * c - py * s\n    const ny = px * s + py * c\n\n    return [nx + C[0], ny + C[1]]\n  }\n\n  /**\n   * Check of two vectors are identical.\n   * @param A\n   * @param B\n   */\n  static isEqual = (A: number[], B: number[]): boolean => {\n    return A[0] === B[0] && A[1] === B[1]\n  }\n\n  /**\n   * Interpolate vector A to B with a scalar t\n   * @param A\n   * @param B\n   * @param t scalar\n   */\n  static lrp = (A: number[], B: number[], t: number): number[] => {\n    return Vec.add(A, Vec.mul(Vec.sub(B, A), t))\n  }\n\n  /**\n   * Interpolate from A to B when curVAL goes fromVAL: number[] => to\n   * @param A\n   * @param B\n   * @param from Starting value\n   * @param to Ending value\n   * @param s Strength\n   */\n  static int = (A: number[], B: number[], from: number, to: number, s = 1): number[] => {\n    const t = (Vec.clamp(from, to) - from) / (to - from)\n    return Vec.add(Vec.mul(A, 1 - t), Vec.mul(B, s))\n  }\n\n  /**\n   * Get the angle between the three vectors A, B, and C.\n   * @param p1\n   * @param pc\n   * @param p2\n   */\n  static ang3 = (p1: number[], pc: number[], p2: number[]): number => {\n    // this,\n    const v1 = Vec.vec(pc, p1)\n    const v2 = Vec.vec(pc, p2)\n    return Vec.ang(v1, v2)\n  }\n\n  /**\n   * Absolute value of a vector.\n   * @param A\n   * @returns\n   */\n  static abs = (A: number[]): number[] => {\n    return [Math.abs(A[0]), Math.abs(A[1])]\n  }\n\n  static rescale = (a: number[], n: number): number[] => {\n    const l = Vec.len(a)\n    return [(n * a[0]) / l, (n * a[1]) / l]\n  }\n\n  /**\n   * Get whether p1 is left of p2, relative to pc.\n   * @param p1\n   * @param pc\n   * @param p2\n   */\n  static isLeft = (p1: number[], pc: number[], p2: number[]): number => {\n    //  isLeft: >0 for counterclockwise\n    //          =0 for none (degenerate)\n    //          <0 for clockwise\n    return (pc[0] - p1[0]) * (p2[1] - p1[1]) - (p2[0] - p1[0]) * (pc[1] - p1[1])\n  }\n\n  /**\n   * Get whether p1 is left of p2, relative to pc.\n   * @param p1\n   * @param pc\n   * @param p2\n   */\n  static clockwise = (p1: number[], pc: number[], p2: number[]): boolean => {\n    return Vec.isLeft(p1, pc, p2) > 0\n  }\n\n  /**\n   * Round a vector to two decimal places.\n   * @param a\n   */\n  static toFixed = (a: number[]): number[] => {\n    return a.map((v) => Math.round(v * 100) / 100)\n  }\n\n  /**\n   * Snap vector to nearest step.\n   * @param A\n   * @param step\n   * @example\n   * ```ts\n   * Vec.snap([10.5, 28], 10) // [10, 30]\n   * ```\n   */\n  static snap(a: number[], step = 1) {\n    return [Math.round(a[0] / step) * step, Math.round(a[1] / step) * step]\n  }\n\n  /**\n   * Get the nearest point on a line with a known unit vector that passes through point A\n   * @param A Any point on the line\n   * @param u The unit vector for the line.\n   * @param P A point not on the line to test.\n   * @returns\n   */\n  static nearestPointOnLineThroughPoint = (A: number[], u: number[], P: number[]): number[] => {\n    return Vec.add(A, Vec.mul(u, Vec.pry(Vec.sub(P, A), u)))\n  }\n\n  /**\n   * Distance between a point and a line with a known unit vector that passes through a point.\n   * @param A Any point on the line\n   * @param u The unit vector for the line.\n   * @param P A point not on the line to test.\n   * @returns\n   */\n  static distanceToLineThroughPoint = (A: number[], u: number[], P: number[]): number => {\n    return Vec.dist(P, Vec.nearestPointOnLineThroughPoint(A, u, P))\n  }\n\n  /**\n   * Get the nearest point on a line segment between A and B\n   * @param A The start of the line segment\n   * @param B The end of the line segment\n   * @param P The off-line point\n   * @param clamp Whether to clamp the point between A and B.\n   * @returns\n   */\n  static nearestPointOnLineSegment = (\n    A: number[],\n    B: number[],\n    P: number[],\n    clamp = true\n  ): number[] => {\n    const u = Vec.uni(Vec.sub(B, A))\n    const C = Vec.add(A, Vec.mul(u, Vec.pry(Vec.sub(P, A), u)))\n\n    if (clamp) {\n      if (C[0] < Math.min(A[0], B[0])) return A[0] < B[0] ? A : B\n      if (C[0] > Math.max(A[0], B[0])) return A[0] > B[0] ? A : B\n      if (C[1] < Math.min(A[1], B[1])) return A[1] < B[1] ? A : B\n      if (C[1] > Math.max(A[1], B[1])) return A[1] > B[1] ? A : B\n    }\n\n    return C\n  }\n\n  /**\n   * Distance between a point and the nearest point on a line segment between A and B\n   * @param A The start of the line segment\n   * @param B The end of the line segment\n   * @param P The off-line point\n   * @param clamp Whether to clamp the point between A and B.\n   * @returns\n   */\n  static distanceToLineSegment = (A: number[], B: number[], P: number[], clamp = true): number => {\n    return Vec.dist(P, Vec.nearestPointOnLineSegment(A, B, P, clamp))\n  }\n\n  /**\n   * Get the nearest point on a bounding box to a point P.\n   * @param bounds The bounding box\n   * @param P The point point\n   * @returns\n   */\n  static nearestPointOnBounds = (\n    bounds: {\n      minX: number\n      minY: number\n      maxX: number\n      maxY: number\n    },\n    P: number[]\n  ): number[] => {\n    return [Vec.clamp(P[0], bounds.minX, bounds.maxX), Vec.clamp(P[1], bounds.minY, bounds.maxY)]\n  }\n\n  /**\n   * Distance between a point and the nearest point on a bounding box.\n   * @param bounds The bounding box.\n   * @param P The point\n   * @returns\n   */\n  static distanceToBounds = (\n    bounds: {\n      minX: number\n      minY: number\n      maxX: number\n      maxY: number\n    },\n    P: number[]\n  ): number => {\n    return Vec.dist(P, Vec.nearestPointOnBounds(bounds, P))\n  }\n\n  /**\n   * Push a point A towards point B by a given distance.\n   * @param A\n   * @param B\n   * @param d\n   * @returns\n   */\n  static nudge = (A: number[], B: number[], d: number): number[] => {\n    if (Vec.isEqual(A, B)) return A\n    return Vec.add(A, Vec.mul(Vec.uni(Vec.sub(B, A)), d))\n  }\n\n  /**\n   * Push a point in a given angle by a given distance.\n   * @param A\n   * @param B\n   * @param d\n   */\n  static nudgeAtAngle = (A: number[], a: number, d: number): number[] => {\n    return [Math.cos(a) * d + A[0], Math.sin(a) * d + A[1]]\n  }\n\n  /**\n   * Round a vector to a precision length.\n   * @param a\n   * @param n\n   */\n  static toPrecision = (a: number[], n = 4): number[] => {\n    return [+a[0].toPrecision(n), +a[1].toPrecision(n)]\n  }\n\n  /**\n   * Get an array of points between two points.\n   * @param A The first point.\n   * @param B The second point.\n   * @param steps The number of points to return.\n   */\n  static pointsBetween = (A: number[], B: number[], steps = 6): number[][] => {\n    return Array.from(Array(steps)).map((_, i) => {\n      const t = i / (steps - 1)\n      const k = Math.min(1, 0.5 + Math.abs(0.5 - t))\n      return [...Vec.lrp(A, B, t), k]\n    })\n  }\n\n  /**\n   * Get the slope between two points.\n   * @param A\n   * @param B\n   */\n  static slope = (A: number[], B: number[]) => {\n    if (A[0] === B[0]) return NaN\n    return (A[1] - B[1]) / (A[0] - B[0])\n  }\n\n  /**\n   * Get a vector comprised of the maximum of two or more vectors.\n   */\n  static max = (...v: number[][]) => {\n    return [Math.max(...v.map((a) => a[0])), Math.max(...v.map((a) => a[1]))]\n  }\n\n  /**\n   * Get a vector comprised of the minimum of two or more vectors.\n   */\n  static min = (...v: number[][]) => {\n    return [Math.min(...v.map((a) => a[0])), Math.min(...v.map((a) => a[1]))]\n  }\n}\n\nexport default Vec\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "Vec", "src_default", "__toCommonJS", "_Vec", "min", "max", "A", "n", "x", "y", "z", "a", "step", "Vec", "__publicField", "B", "V", "aV", "r", "C", "s", "c", "px", "py", "nx", "ny", "from", "to", "t", "p1", "pc", "p2", "v1", "v2", "l", "v", "u", "P", "clamp", "bounds", "d", "steps", "_", "i", "k", "src_default"]
}

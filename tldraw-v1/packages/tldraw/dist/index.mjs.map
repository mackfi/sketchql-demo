{
  "version": 3,
  "sources": ["../src/Tldraw.tsx", "../src/components/ContextMenu/ContextMenu.tsx", "../src/styles/stitches.config.ts", "../src/components/Primitives/Divider/Divider.tsx", "../src/components/Primitives/MenuContent/MenuContent.ts", "../src/components/Primitives/RowButton/RowButton.tsx", "../src/components/Primitives/Kbd/Kbd.tsx", "../src/components/Primitives/SmallIcon/SmallIcon.tsx", "../src/components/breakpoints.tsx", "../src/components/Primitives/ToolButton/ToolButton.tsx", "../src/components/Primitives/Tooltip/Tooltip.tsx", "../src/hooks/useFileSystem.ts", "../src/hooks/useFileSystemHandlers.ts", "../src/hooks/useKeyboardShortcuts.tsx", "../src/types.ts", "../src/hooks/useTldrawApp.tsx", "../src/hooks/useTranslation.ts", "../src/translations/translations.ts", "../src/hooks/useDialog.ts", "../src/components/ErrorFallback/ErrorFallback.tsx", "../src/components/FocusButton/FocusButton.tsx", "../src/components/Primitives/IconButton/IconButton.tsx", "../src/components/Loading/Loading.tsx", "../src/components/Primitives/AlertDialog/AlertDialog.tsx", "../src/components/Primitives/AlertDialog/FilenameDialog.tsx", "../src/components/Primitives/TextField/TextField.tsx", "../src/components/ToolsPanel/ToolsPanel.tsx", "../src/components/ToolsPanel/ActionButton.tsx", "../src/components/Primitives/DropdownMenu/DMItem.tsx", "../src/components/Primitives/DropdownMenu/DMCheckboxItem.tsx", "../src/components/preventEvent.ts", "../src/components/Primitives/DropdownMenu/DMContent.tsx", "../src/components/stopPropagation.ts", "../src/components/Primitives/DropdownMenu/DMDivider.tsx", "../src/components/Primitives/DropdownMenu/DMRadioItem.tsx", "../src/components/Primitives/DropdownMenu/DMSubMenu.tsx", "../src/components/Primitives/DropdownMenu/DMTriggerIcon.tsx", "../src/components/ToolsPanel/BackToContent.tsx", "../src/components/ToolsPanel/DeleteButton.tsx", "../src/components/Primitives/icons/BoxIcon.tsx", "../src/components/Primitives/icons/CircleIcon.tsx", "../src/components/Primitives/icons/DashDashedIcon.tsx", "../src/components/Primitives/icons/DashDottedIcon.tsx", "../src/components/Primitives/icons/DashDrawIcon.tsx", "../src/components/Primitives/icons/DashSolidIcon.tsx", "../src/components/Primitives/icons/TrashIcon.tsx", "../src/components/Primitives/icons/UndoIcon.tsx", "../src/components/Primitives/icons/SizeSmallIcon.tsx", "../src/components/Primitives/icons/SizeMediumIcon.tsx", "../src/components/Primitives/icons/SizeLargeIcon.tsx", "../src/components/Primitives/icons/EraserIcon.tsx", "../src/components/Primitives/icons/DiscordIcon.tsx", "../src/components/Primitives/icons/LineIcon.tsx", "../src/components/ToolsPanel/HelpPanel.tsx", "../src/components/TopPanel/LanguageMenu/LanguageMenu.tsx", "../src/components/ToolsPanel/KeyboardShortcutDialog.tsx", "../src/components/ToolsPanel/PrimaryTools.tsx", "../src/components/Primitives/Panel/Panel.tsx", "../src/components/ToolsPanel/ShapesMenu.tsx", "../src/components/ToolsPanel/StatusBar.tsx", "../src/components/TopPanel/TopPanel.tsx", "../src/components/TopPanel/Menu/Menu.tsx", "../src/components/TopPanel/PreferencesMenu/PreferencesMenu.tsx", "../src/components/TopPanel/MultiplayerMenu/MultiplayerMenu.tsx", "../src/components/Primitives/icons/MultiplayerIcon2.tsx", "../src/state/TLDR.ts", "../src/constants.ts", "../src/state/StateManager/copy.ts", "../src/state/shapes/ArrowUtil/ArrowUtil.tsx", "../src/state/shapes/TDShapeUtil.tsx", "../src/state/shapes/shared/getBoundsRectangle.ts", "../src/state/shapes/shared/getTextAlign.ts", "../src/state/shapes/shared/getTextSize.ts", "../src/state/shapes/shared/getTextSvgElement.ts", "../src/state/shapes/shared/LabelMask.tsx", "../src/state/shapes/shared/PolygonUtils.ts", "../src/state/shapes/shared/shape-styles.ts", "../src/state/shapes/shared/TextAreaUtils.ts", "../src/state/shapes/shared/TextLabel.tsx", "../src/state/shapes/shared/transformRectangle.ts", "../src/state/shapes/shared/transformSingleRectangle.ts", "../src/state/shapes/ArrowUtil/arrowHelpers.ts", "../src/state/shapes/ArrowUtil/components/CurvedArrow.tsx.tsx", "../src/state/shapes/ArrowUtil/components/ArrowHead.tsx", "../src/state/shapes/ArrowUtil/components/StraightArrow.tsx", "../src/state/shapes/DrawUtil/DrawUtil.tsx", "../src/state/shapes/DrawUtil/drawHelpers.ts", "../src/state/shapes/EllipseUtil/EllipseUtil.tsx", "../src/state/shapes/EllipseUtil/components/DashedEllipse.tsx", "../src/state/shapes/EllipseUtil/components/DrawEllipse.tsx", "../src/state/shapes/EllipseUtil/ellipseHelpers.ts", "../src/state/shapes/GroupUtil/GroupUtil.tsx", "../src/state/shapes/ImageUtil/ImageUtil.tsx", "../src/state/shapes/RectangleUtil/RectangleUtil.tsx", "../src/state/shapes/RectangleUtil/components/BindingIndicator.tsx", "../src/state/shapes/RectangleUtil/components/DashedRectangle.tsx", "../src/state/shapes/RectangleUtil/components/DrawRectangle.tsx", "../src/state/shapes/RectangleUtil/rectangleHelpers.ts", "../src/state/shapes/StickyUtil/StickyUtil.tsx", "../src/state/shapes/TextUtil/TextUtil.tsx", "../src/state/shapes/TriangleUtil/TriangleUtil.tsx", "../src/state/shapes/TriangleUtil/components/DashedTriangle.tsx", "../src/state/shapes/TriangleUtil/triangleHelpers.ts", "../src/state/shapes/TriangleUtil/components/DrawTriangle.tsx", "../src/state/shapes/TriangleUtil/components/TriangleBindingIndicator.tsx", "../src/state/shapes/VideoUtil/VideoUtil.tsx", "../src/state/shapes/index.ts", "../src/components/TopPanel/PageMenu/PageMenu.tsx", "../src/components/TopPanel/PageOptionsDialog/PageOptionsDialog.tsx", "../src/components/TopPanel/StyleMenu/StyleMenu.tsx", "../src/components/TopPanel/ZoomMenu/ZoomMenu.tsx", "../src/hooks/useCursor.ts", "../src/state/TldrawApp.ts", "../src/state/IdbClipboard.ts", "../src/state/StateManager/StateManager.ts", "../src/state/commands/alignShapes/alignShapes.ts", "../src/state/commands/changePage/changePage.ts", "../src/state/commands/createPage/createPage.ts", "../src/state/commands/shared/getIncrementedName.ts", "../src/state/commands/shared/removeShapesFromPage.ts", "../src/state/commands/createShapes/createShapes.ts", "../src/state/commands/deletePage/deletePage.ts", "../src/state/commands/deleteShapes/deleteShapes.ts", "../src/state/commands/distributeShapes/distributeShapes.ts", "../src/state/commands/duplicatePage/duplicatePage.ts", "../src/state/commands/duplicateShapes/duplicateShapes.ts", "../src/state/commands/flipShapes/flipShapes.ts", "../src/state/commands/groupShapes/groupShapes.ts", "../src/state/commands/moveShapesToPage/moveShapesToPage.ts", "../src/state/commands/movePage/movePage.ts", "../src/state/commands/reorderShapes/reorderShapes.ts", "../src/state/commands/renamePage/renamePage.ts", "../src/state/commands/resetBounds/resetBounds.ts", "../src/state/commands/rotateShapes/rotateShapes.ts", "../src/state/commands/stretchShapes/stretchShapes.ts", "../src/state/commands/styleShapes/styleShapes.ts", "../src/state/commands/toggleShapesDecoration/toggleShapesDecoration.ts", "../src/state/commands/toggleShapesProp/toggleShapesProp.ts", "../src/state/commands/translateShapes/translateShapes.ts", "../src/state/commands/ungroupShapes/ungroupShapes.ts", "../src/state/commands/updateShapes/updateShapes.ts", "../src/state/commands/setShapesProps/setShapesProps.ts", "../src/state/commands/insertContent/insertContent.ts", "../src/state/data/index.ts", "../src/state/data/migrate.ts", "../src/state/data/filesystem.ts", "../src/state/sessions/ArrowSession/ArrowSession.ts", "../src/state/sessions/BaseSession.ts", "../src/state/sessions/BrushSession/BrushSession.ts", "../src/state/sessions/DrawSession/DrawSession.ts", "../src/state/sessions/EditSession/EditSession.ts", "../src/state/sessions/EraseSession/EraseSession.ts", "../src/state/sessions/GridSession/GridSession.ts", "../src/state/sessions/HandleSession/HandleSession.ts", "../src/state/sessions/RotateSession/RotateSession.ts", "../src/state/sessions/TransformSession/TransformSession.ts", "../src/state/sessions/TransformSingleSession/TransformSingleSession.ts", "../src/state/sessions/TranslateSession/TranslateSession.ts", "../src/state/sessions/index.ts", "../src/state/tools/ArrowTool/ArrowTool.ts", "../src/state/tools/BaseTool.ts", "../src/state/tools/DrawTool/DrawTool.ts", "../src/state/tools/EllipseTool/EllipseTool.ts", "../src/state/tools/EraseTool/EraseTool.ts", "../src/state/tools/LineTool/LineTool.ts", "../src/state/tools/RectangleTool/RectangleTool.ts", "../src/state/tools/SelectTool/SelectTool.ts", "../src/state/tools/StickyTool/StickyTool.ts", "../src/state/tools/TextTool/TextTool.ts", "../src/state/tools/TriangleTool/TriangleTool.ts", "../src/state/tools/index.ts"],
  "sourcesContent": ["import '@fontsource/caveat-brush'\nimport '@fontsource/crimson-pro'\nimport '@fontsource/recursive'\nimport '@fontsource/source-code-pro'\nimport '@fontsource/source-sans-pro'\nimport { CursorComponent, Renderer } from '@tldraw/core'\nimport * as React from 'react'\nimport { ErrorBoundary as _Errorboundary } from 'react-error-boundary'\nimport { IntlProvider } from 'react-intl'\nimport { ContextMenu } from '~components/ContextMenu'\nimport { ErrorFallback } from '~components/ErrorFallback'\nimport { FocusButton } from '~components/FocusButton'\nimport { Loading } from '~components/Loading'\nimport { AlertDialog } from '~components/Primitives/AlertDialog'\nimport { ToolsPanel } from '~components/ToolsPanel'\nimport { TopPanel } from '~components/TopPanel'\nimport { GRID_SIZE } from '~constants'\nimport {\n  AlertDialogContext,\n  ContainerContext,\n  DialogState,\n  TldrawContext,\n  useKeyboardShortcuts,\n  useTldrawApp,\n  useTranslation,\n} from '~hooks'\nimport { useCursor } from '~hooks/useCursor'\nimport { TDCallbacks, TldrawApp } from '~state'\nimport { TLDR } from '~state/TLDR'\nimport { shapeUtils } from '~state/shapes'\nimport { dark, styled } from '~styles'\nimport { TDDocument, TDStatus } from '~types'\n\nconst ErrorBoundary = _Errorboundary as any\n\nexport interface TldrawProps extends TDCallbacks {\n  /**\n   * (optional) If provided, the component will load / persist state under this key.\n   */\n  id?: string\n\n  /**\n   * (optional) The document to load or update from.\n   */\n  document?: TDDocument\n\n  /**\n   * (optional) The current page id.\n   */\n  currentPageId?: string\n\n  /**\n   * (optional) Whether the editor should immediately receive focus. Defaults to true.\n   */\n  autofocus?: boolean\n\n  /**\n   * (optional) Whether to show the menu UI.\n   */\n  showMenu?: boolean\n\n  /**\n   * (optional) Whether to show the multiplayer menu.\n   */\n  showMultiplayerMenu?: boolean\n\n  /**\n   * (optional) Whether to show the pages UI.\n   */\n  showPages?: boolean\n\n  /**\n   * (optional) Whether to show the styles UI.\n   */\n  showStyles?: boolean\n\n  /**\n   * (optional) Whether to show the zoom UI.\n   */\n  showZoom?: boolean\n\n  /**\n   * (optional) Whether to show the tools UI.\n   */\n  showTools?: boolean\n\n  /**\n   * (optional) Whether to show the UI.\n   */\n  showUI?: boolean\n\n  /**\n   * (optional) Whether to the document should be read only.\n   */\n  readOnly?: boolean\n\n  /**\n   * (optional) Whether to to show the app's dark mode UI.\n   */\n  darkMode?: boolean\n\n  /**\n   * (optional) If provided, image/video componnets will be disabled.\n   *\n   * Warning: Keeping this enabled for multiplayer applications without provifing a storage\n   * bucket based solution will cause massive base64 string to be written to the liveblocks room.\n   */\n  disableAssets?: boolean\n\n  /**\n   * (optional) Custom components to override parts of the default UI.\n   */\n  components?: {\n    /**\n     * The component to render for multiplayer cursors.\n     */\n    Cursor?: CursorComponent\n  }\n\n  /**\n   * (optional) To hide cursors\n   */\n  hideCursors?: boolean\n}\n\nconst isSystemDarkMode = window.matchMedia\n  ? window.matchMedia('(prefers-color-scheme: dark)').matches\n  : false\n\nexport function Tldraw({\n  id,\n  document,\n  currentPageId,\n  autofocus = true,\n  showMenu = true,\n  showMultiplayerMenu = true,\n  showPages = true,\n  showTools = true,\n  showZoom = true,\n  showStyles = true,\n  showUI = true,\n  readOnly = false,\n  disableAssets = false,\n  darkMode = isSystemDarkMode,\n  components,\n  onMount,\n  onChange,\n  onChangePresence,\n  onNewProject,\n  onSaveProject,\n  onSaveProjectAs,\n  onOpenProject,\n  onOpenMedia,\n  onUndo,\n  onRedo,\n  onPersist,\n  onPatch,\n  onCommand,\n  onChangePage,\n  onAssetCreate,\n  onAssetDelete,\n  onAssetUpload,\n  onSessionStart,\n  onSessionEnd,\n  onExport,\n  hideCursors,\n}: TldrawProps) {\n  const [sId, setSId] = React.useState(id)\n\n  // Create a new app when the component mounts.\n  const [app, setApp] = React.useState(() => {\n    const app = new TldrawApp(id, {\n      onMount,\n      onChange,\n      onChangePresence,\n      onNewProject,\n      onSaveProject,\n      onSaveProjectAs,\n      onOpenProject,\n      onOpenMedia,\n      onUndo,\n      onRedo,\n      onPersist,\n      onPatch,\n      onCommand,\n      onChangePage,\n      onAssetDelete,\n      onAssetCreate,\n      onAssetUpload,\n      onSessionStart,\n      onSessionEnd,\n    })\n    return app\n  })\n\n  const [onCancel, setOnCancel] = React.useState<(() => void) | null>(null)\n  const [onYes, setOnYes] = React.useState<(() => void) | null>(null)\n  const [onNo, setOnNo] = React.useState<(() => void) | null>(null)\n  const [dialogState, setDialogState] = React.useState<DialogState | null>(null)\n\n  const openDialog = React.useCallback(\n    (dialogState: DialogState, onYes: () => void, onNo: () => void, onCancel: () => void) => {\n      setDialogState(() => dialogState)\n      setOnCancel(() => onCancel)\n      setOnYes(() => onYes)\n      setOnNo(() => onNo)\n    },\n    []\n  )\n\n  // Create a new app if the `id` prop changes.\n  React.useLayoutEffect(() => {\n    if (id === sId) return\n    const newApp = new TldrawApp(id, {\n      onMount,\n      onChange,\n      onChangePresence,\n      onNewProject,\n      onSaveProject,\n      onSaveProjectAs,\n      onOpenProject,\n      onOpenMedia,\n      onUndo,\n      onRedo,\n      onPersist,\n      onPatch,\n      onCommand,\n      onChangePage,\n      onAssetDelete,\n      onAssetCreate,\n      onAssetUpload,\n      onExport,\n      onSessionStart,\n      onSessionEnd,\n    })\n\n    setSId(id)\n\n    setApp(newApp)\n  }, [sId, id])\n\n  // Update the document if the `document` prop changes but the ids,\n  // are the same, or else load a new document if the ids are different.\n  React.useEffect(() => {\n    if (!document) return\n\n    if (document.id === app.document.id) {\n      app.updateDocument(document)\n    } else {\n      app.loadDocument(document)\n    }\n  }, [document, app])\n\n  // Disable assets when the `disableAssets` prop changes.\n  React.useEffect(() => {\n    app.setDisableAssets(disableAssets)\n  }, [app, disableAssets])\n\n  // Change the page when the `currentPageId` prop changes.\n  React.useEffect(() => {\n    if (!currentPageId) return\n    app.changePage(currentPageId)\n  }, [currentPageId, app])\n\n  // Toggle the app's readOnly mode when the `readOnly` prop changes.\n  React.useEffect(() => {\n    app.readOnly = readOnly\n    if (!readOnly) {\n      app.selectNone()\n      app.cancelSession()\n      app.setEditingId()\n    }\n  }, [app, readOnly])\n\n  // Toggle the app's darkMode when the `darkMode` prop changes.\n  React.useEffect(() => {\n    if (darkMode !== app.settings.isDarkMode) {\n      app.toggleDarkMode()\n    }\n  }, [app, darkMode])\n\n  // Update the app's callbacks when any callback changes.\n  React.useEffect(() => {\n    app.callbacks = {\n      onMount,\n      onChange,\n      onChangePresence,\n      onNewProject,\n      onSaveProject,\n      onSaveProjectAs,\n      onOpenProject,\n      onOpenMedia,\n      onUndo,\n      onRedo,\n      onPersist,\n      onPatch,\n      onCommand,\n      onChangePage,\n      onAssetDelete,\n      onAssetCreate,\n      onAssetUpload,\n      onExport,\n      onSessionStart,\n      onSessionEnd,\n    }\n  }, [\n    onMount,\n    onChange,\n    onChangePresence,\n    onNewProject,\n    onSaveProject,\n    onSaveProjectAs,\n    onOpenProject,\n    onOpenMedia,\n    onUndo,\n    onRedo,\n    onPersist,\n    onPatch,\n    onCommand,\n    onChangePage,\n    onAssetDelete,\n    onAssetCreate,\n    onAssetUpload,\n    onExport,\n    onSessionStart,\n    onSessionEnd,\n  ])\n\n  React.useLayoutEffect(() => {\n    if (typeof window === 'undefined') return\n    if (!window.document?.fonts) return\n\n    function refreshBoundingBoxes() {\n      app.refreshBoundingBoxes()\n    }\n    window.document.fonts.addEventListener('loadingdone', refreshBoundingBoxes)\n    return () => {\n      window.document.fonts.removeEventListener('loadingdone', refreshBoundingBoxes)\n    }\n  }, [app])\n\n  // Use the `key` to ensure that new selector hooks are made when the id changes\n  return (\n    <TldrawContext.Provider value={app}>\n      <AlertDialogContext.Provider\n        value={{ onYes, onCancel, onNo, dialogState, setDialogState, openDialog }}\n      >\n        <InnerTldraw\n          key={sId || 'Tldraw'}\n          id={sId}\n          autofocus={autofocus}\n          showPages={showPages}\n          showMenu={showMenu}\n          showMultiplayerMenu={showMultiplayerMenu}\n          showStyles={showStyles}\n          showZoom={showZoom}\n          showTools={showTools}\n          showUI={showUI}\n          readOnly={readOnly}\n          components={components}\n          hideCursors={hideCursors}\n        />\n      </AlertDialogContext.Provider>\n    </TldrawContext.Provider>\n  )\n}\n\ninterface InnerTldrawProps {\n  id?: string\n  autofocus: boolean\n  readOnly: boolean\n  showPages: boolean\n  showMenu: boolean\n  showMultiplayerMenu: boolean\n  showZoom: boolean\n  showStyles: boolean\n  showUI: boolean\n  showTools: boolean\n  components?: {\n    Cursor?: CursorComponent\n  }\n  hideCursors?: boolean\n}\n\nconst InnerTldraw = React.memo(function InnerTldraw({\n  id,\n  autofocus,\n  showPages,\n  showMenu,\n  showMultiplayerMenu,\n  showZoom,\n  showStyles,\n  showTools,\n  readOnly,\n  showUI,\n  components,\n  hideCursors,\n}: InnerTldrawProps) {\n  const app = useTldrawApp()\n  const [dialogContainer, setDialogContainer] = React.useState<any>(null)\n  const rWrapper = React.useRef<HTMLDivElement>(null)\n\n  const state = app.useStore()\n\n  const { document, settings, appState, room } = state\n\n  const isSelecting = state.appState.activeTool === 'select'\n\n  const page = document.pages[appState.currentPageId]\n  const pageState = document.pageStates[page.id]\n  const assets = document.assets\n  const { selectedIds } = pageState\n\n  const isHideBoundsShape =\n    selectedIds.length === 1 &&\n    page.shapes[selectedIds[0]] &&\n    TLDR.getShapeUtil(page.shapes[selectedIds[0]].type).hideBounds\n\n  const isHideResizeHandlesShape =\n    selectedIds.length === 1 &&\n    page.shapes[selectedIds[0]] &&\n    TLDR.getShapeUtil(page.shapes[selectedIds[0]].type).hideResizeHandles\n\n  // Custom rendering meta, with dark mode for shapes\n  const meta = React.useMemo(() => {\n    return { isDarkMode: settings.isDarkMode }\n  }, [settings.isDarkMode])\n\n  const showDashedBrush = settings.isCadSelectMode\n    ? !appState.selectByContain\n    : appState.selectByContain\n\n  // Custom theme, based on darkmode\n  const theme = React.useMemo(() => {\n    const { selectByContain } = appState\n    const { isDarkMode, isCadSelectMode } = settings\n\n    if (isDarkMode) {\n      const brushBase = isCadSelectMode\n        ? selectByContain\n          ? '69, 155, 255'\n          : '105, 209, 73'\n        : '180, 180, 180'\n      return {\n        brushFill: `rgba(${brushBase}, ${isCadSelectMode ? 0.08 : 0.05})`,\n        brushStroke: `rgba(${brushBase}, ${isCadSelectMode ? 0.5 : 0.25})`,\n        brushDashStroke: `rgba(${brushBase}, .6)`,\n        selected: 'rgba(38, 150, 255, 1.000)',\n        selectFill: 'rgba(38, 150, 255, 0.05)',\n        background: '#212529',\n        foreground: '#49555f',\n      }\n    }\n\n    const brushBase = isCadSelectMode ? (selectByContain ? '0, 89, 242' : '51, 163, 23') : '0,0,0'\n\n    return {\n      brushFill: `rgba(${brushBase}, ${isCadSelectMode ? 0.08 : 0.05})`,\n      brushStroke: `rgba(${brushBase}, ${isCadSelectMode ? 0.4 : 0.25})`,\n      brushDashStroke: `rgba(${brushBase}, .6)`,\n    }\n  }, [settings.isDarkMode, settings.isCadSelectMode, appState.selectByContain])\n\n  const isInSession = app.session !== undefined\n\n  // Hide bounds when not using the select tool, or when the only selected shape has handles\n  const hideBounds =\n    (isInSession && app.session?.constructor.name !== 'BrushSession') ||\n    !isSelecting ||\n    isHideBoundsShape ||\n    !!pageState.editingId\n\n  // Hide bounds when not using the select tool, or when in session\n  const hideHandles = isInSession || !isSelecting\n\n  // Hide indicators when not using the select tool, or when in session\n  const hideIndicators =\n    (isInSession && state.appState.status !== TDStatus.Brushing) || !isSelecting\n\n  const hideCloneHandles = isInSession || !isSelecting || pageState.camera.zoom < 0.2\n\n  const translation = useTranslation(settings.language)\n\n  // Put the theme on the body. This means that components with\n  // multiple editors cannot have different themes.\n  React.useLayoutEffect(() => {\n    const elm = rWrapper.current\n    if (!elm) return\n    if (settings.isDarkMode) {\n      elm.classList.add(dark)\n    } else {\n      elm.classList.remove(dark)\n    }\n  }, [settings.isDarkMode])\n\n  useCursor(rWrapper)\n\n  return (\n    <ContainerContext.Provider value={rWrapper}>\n      <IntlProvider locale={translation.locale} messages={translation.messages}>\n        <AlertDialog container={dialogContainer} />\n        <StyledLayout ref={rWrapper} tabIndex={-0}>\n          <Loading />\n          <OneOff focusableRef={rWrapper} autofocus={autofocus} />\n          <ContextMenu>\n            <ErrorBoundary FallbackComponent={ErrorFallback}>\n              <Renderer\n                id={id}\n                containerRef={rWrapper}\n                shapeUtils={shapeUtils}\n                page={page}\n                pageState={pageState}\n                assets={assets}\n                snapLines={appState.snapLines}\n                eraseLine={appState.eraseLine}\n                grid={GRID_SIZE}\n                users={room?.users}\n                userId={room?.userId}\n                theme={theme}\n                meta={meta}\n                components={components}\n                hideCursors={hideCursors}\n                hideBounds={hideBounds}\n                hideHandles={hideHandles}\n                hideResizeHandles={isHideResizeHandlesShape}\n                hideIndicators={hideIndicators}\n                hideBindingHandles={!settings.showBindingHandles}\n                hideCloneHandles={hideCloneHandles}\n                hideRotateHandles={!settings.showRotateHandles}\n                hideGrid={!settings.showGrid}\n                showDashedBrush={showDashedBrush}\n                performanceMode={app.session?.performanceMode}\n                onPinchStart={app.onPinchStart}\n                onPinchEnd={app.onPinchEnd}\n                onPinch={app.onPinch}\n                onPan={app.onPan}\n                onZoom={app.onZoom}\n                onPointerDown={app.onPointerDown}\n                onPointerMove={app.onPointerMove}\n                onPointerUp={app.onPointerUp}\n                onPointCanvas={app.onPointCanvas}\n                onDoubleClickCanvas={app.onDoubleClickCanvas}\n                onRightPointCanvas={app.onRightPointCanvas}\n                onDragCanvas={app.onDragCanvas}\n                onReleaseCanvas={app.onReleaseCanvas}\n                onPointShape={app.onPointShape}\n                onDoubleClickShape={app.onDoubleClickShape}\n                onRightPointShape={app.onRightPointShape}\n                onDragShape={app.onDragShape}\n                onHoverShape={app.onHoverShape}\n                onUnhoverShape={app.onUnhoverShape}\n                onReleaseShape={app.onReleaseShape}\n                onPointBounds={app.onPointBounds}\n                onDoubleClickBounds={app.onDoubleClickBounds}\n                onRightPointBounds={app.onRightPointBounds}\n                onDragBounds={app.onDragBounds}\n                onHoverBounds={app.onHoverBounds}\n                onUnhoverBounds={app.onUnhoverBounds}\n                onReleaseBounds={app.onReleaseBounds}\n                onPointBoundsHandle={app.onPointBoundsHandle}\n                onDoubleClickBoundsHandle={app.onDoubleClickBoundsHandle}\n                onRightPointBoundsHandle={app.onRightPointBoundsHandle}\n                onDragBoundsHandle={app.onDragBoundsHandle}\n                onHoverBoundsHandle={app.onHoverBoundsHandle}\n                onUnhoverBoundsHandle={app.onUnhoverBoundsHandle}\n                onReleaseBoundsHandle={app.onReleaseBoundsHandle}\n                onPointHandle={app.onPointHandle}\n                onDoubleClickHandle={app.onDoubleClickHandle}\n                onRightPointHandle={app.onRightPointHandle}\n                onDragHandle={app.onDragHandle}\n                onHoverHandle={app.onHoverHandle}\n                onUnhoverHandle={app.onUnhoverHandle}\n                onReleaseHandle={app.onReleaseHandle}\n                onError={app.onError}\n                onRenderCountChange={app.onRenderCountChange}\n                onShapeChange={app.onShapeChange}\n                onShapeBlur={app.onShapeBlur}\n                onShapeClone={app.onShapeClone}\n                onBoundsChange={app.updateBounds}\n                onKeyDown={app.onKeyDown}\n                onKeyUp={app.onKeyUp}\n                onDragOver={app.onDragOver}\n                onDrop={app.onDrop}\n              />\n            </ErrorBoundary>\n          </ContextMenu>\n          {showUI && (\n            <StyledUI ref={setDialogContainer}>\n              {settings.isFocusMode ? (\n                <FocusButton onSelect={app.toggleFocusMode} />\n              ) : (\n                <>\n                  <TopPanel\n                    readOnly={readOnly}\n                    showPages={showPages}\n                    showMenu={showMenu}\n                    showMultiplayerMenu={showMultiplayerMenu}\n                    showStyles={showStyles}\n                    showZoom={showZoom}\n                  />\n                  <StyledSpacer />\n                  {showTools && !readOnly && <ToolsPanel />}\n                </>\n              )}\n            </StyledUI>\n          )}\n        </StyledLayout>\n      </IntlProvider>\n    </ContainerContext.Provider>\n  )\n})\n\nconst OneOff = React.memo(function OneOff({\n  focusableRef,\n  autofocus,\n}: {\n  autofocus?: boolean\n  focusableRef: React.RefObject<HTMLDivElement>\n}) {\n  useKeyboardShortcuts(focusableRef)\n\n  React.useEffect(() => {\n    if (autofocus) {\n      focusableRef.current?.focus()\n    }\n  }, [autofocus])\n\n  return null\n})\n\nconst StyledLayout = styled('div', {\n  position: 'absolute',\n  height: '100%',\n  width: '100%',\n  minHeight: 0,\n  minWidth: 0,\n  maxHeight: '100%',\n  maxWidth: '100%',\n  overflow: 'hidden',\n  boxSizing: 'border-box',\n  outline: 'none',\n  userSelect: 'none',\n  WebkitUserSelect: 'none',\n\n  '& .tl-container': {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    height: '100%',\n    width: '100%',\n    zIndex: 1,\n  },\n\n  '& input, textarea, button, select, label, button': {\n    webkitTouchCallout: 'none',\n    webkitUserSelect: 'none',\n    '-webkit-tap-highlight-color': 'transparent',\n    'tap-highlight-color': 'transparent',\n  },\n})\n\nconst StyledUI = styled('div', {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  height: '100%',\n  width: '100%',\n  padding: '8px 8px 0 8px',\n  display: 'flex',\n  alignItems: 'flex-start',\n  justifyContent: 'flex-start',\n  pointerEvents: 'none',\n  zIndex: 2,\n  '& > *': {\n    pointerEvents: 'all',\n  },\n})\n\nconst StyledSpacer = styled('div', {\n  flexGrow: 2,\n})\n", "import * as RadixContextMenu from '@radix-ui/react-context-menu'\nimport {\n  AlignBottomIcon,\n  AlignCenterHorizontallyIcon,\n  AlignCenterVerticallyIcon,\n  AlignLeftIcon,\n  AlignRightIcon,\n  AlignTopIcon,\n  SpaceEvenlyHorizontallyIcon,\n  SpaceEvenlyVerticallyIcon,\n  StretchHorizontallyIcon,\n  StretchVerticallyIcon,\n} from '@radix-ui/react-icons'\nimport * as React from 'react'\nimport { FormattedMessage, useIntl } from 'react-intl'\nimport { Divider } from '~components/Primitives/Divider'\nimport { MenuContent } from '~components/Primitives/MenuContent'\nimport { RowButton, RowButtonProps } from '~components/Primitives/RowButton'\nimport { ToolButton, ToolButtonProps } from '~components/Primitives/ToolButton'\nimport { useContainer, useTldrawApp } from '~hooks'\nimport { styled } from '~styles'\nimport { AlignType, DistributeType, StretchType, TDExportType, TDSnapshot } from '~types'\n\nconst numberOfSelectedIdsSelector = (s: TDSnapshot) => {\n  return s.document.pageStates[s.appState.currentPageId].selectedIds.length\n}\n\nconst isDebugModeSelector = (s: TDSnapshot) => {\n  return s.settings.isDebugMode\n}\n\nconst hasGroupSelectedSelector = (s: TDSnapshot) => {\n  return s.document.pageStates[s.appState.currentPageId].selectedIds.some(\n    (id) => s.document.pages[s.appState.currentPageId].shapes[id].children !== undefined\n  )\n}\n\nconst preventDefault = (e: Event) => e.stopPropagation()\n\ninterface ContextMenuProps {\n  onBlur?: React.FocusEventHandler\n  children: React.ReactNode\n}\n\nexport const _ContextMenu = ({ onBlur, children }: ContextMenuProps) => {\n  const container = useContainer()\n\n  return (\n    <RadixContextMenu.Root dir=\"ltr\">\n      <RadixContextMenu.Trigger dir=\"ltr\">{children}</RadixContextMenu.Trigger>\n      <RadixContextMenu.Portal container={container.current}>\n        <RadixContextMenu.Content\n          onEscapeKeyDown={preventDefault}\n          tabIndex={-1}\n          onBlur={onBlur}\n          asChild\n        >\n          <MenuContent id=\"TD-ContextMenu\">\n            <InnerMenu />\n          </MenuContent>\n        </RadixContextMenu.Content>\n      </RadixContextMenu.Portal>\n    </RadixContextMenu.Root>\n  )\n}\n\nconst InnerMenu = React.memo(function InnerMenu() {\n  const app = useTldrawApp()\n  const intl = useIntl()\n  const numberOfSelectedIds = app.useStore(numberOfSelectedIdsSelector)\n  const isDebugMode = app.useStore(isDebugModeSelector)\n  const hasGroupSelected = app.useStore(hasGroupSelectedSelector)\n\n  const handleFlipHorizontal = React.useCallback(() => {\n    app.flipHorizontal()\n  }, [app])\n\n  const handleFlipVertical = React.useCallback(() => {\n    app.flipVertical()\n  }, [app])\n\n  const handleDuplicate = React.useCallback(() => {\n    app.duplicate()\n  }, [app])\n\n  const handleLock = React.useCallback(() => {\n    app.toggleLocked()\n  }, [app])\n\n  const handleGroup = React.useCallback(() => {\n    app.group()\n  }, [app])\n\n  const handleMoveToBack = React.useCallback(() => {\n    app.moveToBack()\n  }, [app])\n\n  const handleMoveBackward = React.useCallback(() => {\n    app.moveBackward()\n  }, [app])\n\n  const handleMoveForward = React.useCallback(() => {\n    app.moveForward()\n  }, [app])\n\n  const handleMoveToFront = React.useCallback(() => {\n    app.moveToFront()\n  }, [app])\n\n  const handleDelete = React.useCallback(() => {\n    app.delete()\n  }, [app])\n\n  const handleCut = React.useCallback(() => {\n    app.cut()\n  }, [app])\n\n  const handleCopy = React.useCallback(() => {\n    app.copy()\n  }, [app])\n\n  const handlePaste = React.useCallback(() => {\n    app.paste()\n  }, [app])\n\n  const handleCopySVG = React.useCallback(() => {\n    app.copyImage(TDExportType.SVG, { scale: 1, quality: 1, transparentBackground: false })\n  }, [app])\n\n  const handleCopyPNG = React.useCallback(() => {\n    app.copyImage(TDExportType.PNG, { scale: 2, quality: 1, transparentBackground: true })\n  }, [app])\n\n  const handleUndo = React.useCallback(() => {\n    app.undo()\n  }, [app])\n\n  const handleRedo = React.useCallback(() => {\n    app.redo()\n  }, [app])\n\n  const handleExportPNG = React.useCallback(async () => {\n    app.exportImage(TDExportType.PNG, { scale: 2, quality: 1 })\n  }, [app])\n\n  const handleExportJPG = React.useCallback(async () => {\n    app.exportImage(TDExportType.JPG, { scale: 2, quality: 1 })\n  }, [app])\n\n  const handleExportWEBP = React.useCallback(async () => {\n    app.exportImage(TDExportType.WEBP, { scale: 2, quality: 1 })\n  }, [app])\n\n  const handleExportSVG = React.useCallback(async () => {\n    app.exportImage(TDExportType.SVG, { scale: 1, quality: 1 })\n  }, [app])\n\n  const handleCopyJSON = React.useCallback(async () => {\n    app.copyJson()\n  }, [app])\n\n  const handleExportJSON = React.useCallback(async () => {\n    app.exportJson()\n  }, [app])\n\n  const hasSelection = numberOfSelectedIds > 0\n  const hasTwoOrMore = numberOfSelectedIds > 1\n  const hasThreeOrMore = numberOfSelectedIds > 2\n\n  return (\n    <>\n      {hasSelection ? (\n        <>\n          <CMRowButton onClick={handleDuplicate} kbd=\"#D\" id=\"TD-ContextMenu-Duplicate\">\n            <FormattedMessage id=\"duplicate\" />\n          </CMRowButton>\n          <CMRowButton onClick={handleFlipHorizontal} kbd=\"\u21E7H\" id=\"TD-ContextMenu-Flip_Horizontal\">\n            <FormattedMessage id=\"flip.horizontal\" />\n          </CMRowButton>\n          <CMRowButton onClick={handleFlipVertical} kbd=\"\u21E7V\" id=\"TD-ContextMenu-Flip_Vertical\">\n            <FormattedMessage id=\"flip.vertical\" />\n          </CMRowButton>\n          <CMRowButton onClick={handleLock} kbd=\"#\u21E7L\" id=\"TD-ContextMenu- Lock_Unlock\">\n            <FormattedMessage id=\"lock\" /> / <FormattedMessage id=\"unlock\" />\n          </CMRowButton>\n          {(hasTwoOrMore || hasGroupSelected) && <Divider />}\n          {hasTwoOrMore && (\n            <CMRowButton onClick={handleGroup} kbd=\"#G\" id=\"TD-ContextMenu-Group\">\n              <FormattedMessage id=\"group\" />\n            </CMRowButton>\n          )}\n          {hasGroupSelected && (\n            <CMRowButton onClick={handleGroup} kbd=\"#G\" id=\"TD-ContextMenu-Ungroup\">\n              <FormattedMessage id=\"ungroup\" />\n            </CMRowButton>\n          )}\n          <Divider />\n          <ContextMenuSubMenu label={intl.formatMessage({ id: 'move' })} id=\"TD-ContextMenu-Move\">\n            <CMRowButton onClick={handleMoveToFront} kbd=\"\u21E7]\" id=\"TD-ContextMenu-Move-To_Front\">\n              <FormattedMessage id=\"to.front\" />\n            </CMRowButton>\n            <CMRowButton onClick={handleMoveForward} kbd=\"]\" id=\"TD-ContextMenu-Move-Forward\">\n              <FormattedMessage id=\"forward\" />\n            </CMRowButton>\n            <CMRowButton onClick={handleMoveBackward} kbd=\"[\" id=\"TD-ContextMenu-Move-Backward\">\n              <FormattedMessage id=\"backward\" />\n            </CMRowButton>\n            <CMRowButton onClick={handleMoveToBack} kbd=\"\u21E7[\" id=\"TD-ContextMenu-Move-To_Back\">\n              <FormattedMessage id=\"back\" />\n            </CMRowButton>\n          </ContextMenuSubMenu>\n          <MoveToPageMenu />\n          {hasTwoOrMore && (\n            <AlignDistributeSubMenu hasTwoOrMore={hasTwoOrMore} hasThreeOrMore={hasThreeOrMore} />\n          )}\n          <Divider />\n          <CMRowButton onClick={handleCut} kbd=\"#X\" id=\"TD-ContextMenu-Cut\">\n            <FormattedMessage id=\"cut\" />\n          </CMRowButton>\n          <CMRowButton onClick={handleCopy} kbd=\"#C\" id=\"TD-ContextMenu-Copy\">\n            <FormattedMessage id=\"copy\" />\n          </CMRowButton>\n          <CMRowButton onClick={handlePaste} kbd=\"#V\" id=\"TD-ContextMenu-Paste\">\n            <FormattedMessage id=\"paste\" />\n          </CMRowButton>\n          <Divider />\n          <ContextMenuSubMenu\n            label={`${intl.formatMessage({ id: 'copy.as' })}...`}\n            size=\"small\"\n            id=\"TD-ContextMenu-Copy-As\"\n          >\n            <CMRowButton onClick={handleCopySVG} id=\"TD-ContextMenu-Copy-as-SVG\">\n              SVG\n            </CMRowButton>\n            <CMRowButton onClick={handleCopyPNG} id=\"TD-ContextMenu-Copy-As-PNG\">\n              PNG\n            </CMRowButton>\n            {isDebugMode && (\n              <CMRowButton onClick={handleCopyJSON} id=\"TD-ContextMenu-Copy_as_JSON\">\n                JSON\n              </CMRowButton>\n            )}\n          </ContextMenuSubMenu>\n          <ContextMenuSubMenu\n            label={`${intl.formatMessage({ id: 'export.as' })}...`}\n            size=\"small\"\n            id=\"TD-ContextMenu-Export\"\n          >\n            <CMRowButton onClick={handleExportSVG} id=\"TD-ContextMenu-Export-SVG\">\n              SVG\n            </CMRowButton>\n            <CMRowButton onClick={handleExportPNG} id=\"TD-ContextMenu-Export-PNG\">\n              PNG\n            </CMRowButton>\n            <CMRowButton onClick={handleExportJPG} id=\"TD-ContextMenu-Export-JPG\">\n              JPG\n            </CMRowButton>\n            <CMRowButton onClick={handleExportWEBP} id=\"TD-ContextMenu-Export-WEBP\">\n              WEBP\n            </CMRowButton>\n            {isDebugMode && (\n              <CMRowButton onClick={handleExportJSON} id=\"TD-ContextMenu-Export-JSON\">\n                JSON\n              </CMRowButton>\n            )}\n          </ContextMenuSubMenu>\n          <Divider />\n          <CMRowButton onClick={handleDelete} kbd=\"\u232B\" id=\"TD-ContextMenu-Delete\">\n            <FormattedMessage id=\"delete\" />\n          </CMRowButton>\n        </>\n      ) : (\n        <>\n          <CMRowButton onClick={handlePaste} kbd=\"#V\" id=\"TD-ContextMenu-Paste\">\n            <FormattedMessage id=\"paste\" />\n          </CMRowButton>\n          <CMRowButton onClick={handleUndo} kbd=\"#Z\" id=\"TD-ContextMenu-Undo\">\n            <FormattedMessage id=\"undo\" />\n          </CMRowButton>\n          <CMRowButton onClick={handleRedo} kbd=\"#\u21E7Z\" id=\"TD-ContextMenu-Redo\">\n            <FormattedMessage id=\"redo\" />\n          </CMRowButton>\n          <ContextMenuSubMenu\n            label={`${intl.formatMessage({ id: 'export.as' })}...`}\n            size=\"small\"\n            id=\"TD-ContextMenu-Export\"\n          >\n            <CMRowButton onClick={handleExportSVG} id=\"TD-ContextMenu-Export-SVG\">\n              SVG\n            </CMRowButton>\n            <CMRowButton onClick={handleExportPNG} id=\"TD-ContextMenu-Export-PNG\">\n              PNG\n            </CMRowButton>\n            <CMRowButton onClick={handleExportJPG} id=\"TD-ContextMenu-Export-JPG\">\n              JPG\n            </CMRowButton>\n            <CMRowButton onClick={handleExportWEBP} id=\"TD-ContextMenu-Export-WEBP\">\n              WEBP\n            </CMRowButton>\n            {isDebugMode && (\n              <CMRowButton onClick={handleExportJSON} id=\"TD-ContextMenu-Export-JSON\">\n                JSON\n              </CMRowButton>\n            )}\n          </ContextMenuSubMenu>\n        </>\n      )}\n    </>\n  )\n})\n\n/* ---------- Align and Distribute Sub Menu --------- */\n\nfunction AlignDistributeSubMenu({\n  hasThreeOrMore,\n}: {\n  hasTwoOrMore: boolean\n  hasThreeOrMore: boolean\n}) {\n  const app = useTldrawApp()\n\n  const alignTop = React.useCallback(() => {\n    app.align(AlignType.Top)\n  }, [app])\n\n  const alignCenterVertical = React.useCallback(() => {\n    app.align(AlignType.CenterVertical)\n  }, [app])\n\n  const alignBottom = React.useCallback(() => {\n    app.align(AlignType.Bottom)\n  }, [app])\n\n  const stretchVertically = React.useCallback(() => {\n    app.stretch(StretchType.Vertical)\n  }, [app])\n\n  const distributeVertically = React.useCallback(() => {\n    app.distribute(DistributeType.Vertical)\n  }, [app])\n\n  const alignLeft = React.useCallback(() => {\n    app.align(AlignType.Left)\n  }, [app])\n\n  const alignCenterHorizontal = React.useCallback(() => {\n    app.align(AlignType.CenterHorizontal)\n  }, [app])\n\n  const alignRight = React.useCallback(() => {\n    app.align(AlignType.Right)\n  }, [app])\n\n  const stretchHorizontally = React.useCallback(() => {\n    app.stretch(StretchType.Horizontal)\n  }, [app])\n\n  const distributeHorizontally = React.useCallback(() => {\n    app.distribute(DistributeType.Horizontal)\n  }, [app])\n\n  const container = useContainer()\n\n  return (\n    <RadixContextMenu.Sub>\n      <CMSubTriggerButton id=\"TD-ContextMenu-Align-Distribute-Trigger\">\n        <FormattedMessage id=\"align.distribute\" />\n      </CMSubTriggerButton>\n      <RadixContextMenu.Portal container={container.current}>\n        <RadixContextMenu.SubContent asChild sideOffset={4} alignOffset={-2}>\n          <StyledGridContent numberOfSelected={hasThreeOrMore ? 'threeOrMore' : 'twoOrMore'}>\n            <CMIconButton onClick={alignLeft} id=\"TD-ContextMenu-Align_Distribute-AlignLeft\">\n              <AlignLeftIcon />\n            </CMIconButton>\n            <CMIconButton\n              onClick={alignCenterHorizontal}\n              id=\"TD-ContextMenu-Align_Distribute-AlignCenterHorizontal\"\n            >\n              <AlignCenterHorizontallyIcon />\n            </CMIconButton>\n            <CMIconButton onClick={alignRight} id=\"TD-ContextMenu-Align_Distribute-AlignRight\">\n              <AlignRightIcon />\n            </CMIconButton>\n            <CMIconButton\n              onClick={stretchHorizontally}\n              id=\"TD-ContextMenu-Align_Distribute-StretchHorizontal\"\n            >\n              <StretchHorizontallyIcon />\n            </CMIconButton>\n            {hasThreeOrMore && (\n              <CMIconButton\n                onClick={distributeHorizontally}\n                id=\"TD-ContextMenu-Align_Distribute-SpaceEvenlyHorizontal\"\n              >\n                <SpaceEvenlyHorizontallyIcon />\n              </CMIconButton>\n            )}\n            <CMIconButton onClick={alignTop} id=\"TD-ContextMenu-Align_Distribute-AlignTop\">\n              <AlignTopIcon />\n            </CMIconButton>\n            <CMIconButton\n              onClick={alignCenterVertical}\n              id=\"TD-ContextMenu-Align_Distribute-AlignCenterVertical\"\n            >\n              <AlignCenterVerticallyIcon />\n            </CMIconButton>\n            <CMIconButton onClick={alignBottom} id=\"TD-ContextMenu-Align_Distribute-AlignBottom\">\n              <AlignBottomIcon />\n            </CMIconButton>\n            <CMIconButton\n              onClick={stretchVertically}\n              id=\"TD-ContextMenu-Align_Distribute-StretchVertical\"\n            >\n              <StretchVerticallyIcon />\n            </CMIconButton>\n            {hasThreeOrMore && (\n              <CMIconButton\n                onClick={distributeVertically}\n                id=\"TD-ContextMenu-Align_Distribute-SpaceEvenlyVertical\"\n              >\n                <SpaceEvenlyVerticallyIcon />\n              </CMIconButton>\n            )}\n            <CMArrow offset={13} />\n          </StyledGridContent>\n        </RadixContextMenu.SubContent>\n      </RadixContextMenu.Portal>\n    </RadixContextMenu.Sub>\n  )\n}\n\nconst StyledGridContent = styled(MenuContent, {\n  display: 'grid',\n  variants: {\n    numberOfSelected: {\n      threeOrMore: {\n        gridTemplateColumns: 'repeat(5, auto)',\n      },\n      twoOrMore: {\n        gridTemplateColumns: 'repeat(4, auto)',\n      },\n    },\n  },\n})\n\n/* -------------- Move to Page Sub Menu ------------- */\n\nconst currentPageIdSelector = (s: TDSnapshot) => s.appState.currentPageId\nconst documentPagesSelector = (s: TDSnapshot) => s.document.pages\n\nfunction MoveToPageMenu() {\n  const app = useTldrawApp()\n  const currentPageId = app.useStore(currentPageIdSelector)\n  const documentPages = app.useStore(documentPagesSelector)\n\n  const sorted = Object.values(documentPages)\n    .sort((a, b) => (a.childIndex || 0) - (b.childIndex || 0))\n    .filter((a) => a.id !== currentPageId)\n\n  const container = useContainer()\n\n  if (sorted.length === 0) return null\n\n  return (\n    <RadixContextMenu.Sub>\n      <CMSubTriggerButton>\n        <FormattedMessage id=\"move.to.page\" />\n      </CMSubTriggerButton>\n      <RadixContextMenu.Portal container={container.current}>\n        <RadixContextMenu.SubContent sideOffset={4} alignOffset={-2} asChild>\n          <MenuContent>\n            {sorted.map(({ id, name }, i) => (\n              <CMRowButton\n                key={id}\n                disabled={id === currentPageId}\n                onClick={() => app.moveToPage(id)}\n              >\n                {name || `Page ${i}`}\n              </CMRowButton>\n            ))}\n            <CMArrow offset={13} />\n          </MenuContent>\n        </RadixContextMenu.SubContent>\n      </RadixContextMenu.Portal>\n    </RadixContextMenu.Sub>\n  )\n}\n\n/* --------------------- Submenu -------------------- */\n\nexport interface ContextMenuSubMenuProps {\n  label: string\n  size?: 'small'\n  children: React.ReactNode\n  id?: string\n}\n\nexport function ContextMenuSubMenu({ children, label, size, id }: ContextMenuSubMenuProps) {\n  const container = useContainer()\n  return (\n    <RadixContextMenu.Sub>\n      <CMSubTriggerButton>{label}</CMSubTriggerButton>\n      <RadixContextMenu.Portal container={container.current}>\n        <RadixContextMenu.SubContent sideOffset={4} alignOffset={-2} asChild>\n          <MenuContent size={size}>\n            {children}\n            <CMArrow offset={13} />\n          </MenuContent>\n        </RadixContextMenu.SubContent>\n      </RadixContextMenu.Portal>\n    </RadixContextMenu.Sub>\n  )\n}\n\n/* ---------------------- Arrow --------------------- */\n\nconst CMArrow = styled(RadixContextMenu.ContextMenuArrow, {\n  fill: '$panel',\n})\n\n/* ------------------- IconButton ------------------- */\n\nfunction CMIconButton({ onSelect, ...rest }: ToolButtonProps) {\n  return (\n    <RadixContextMenu.ContextMenuItem dir=\"ltr\" onSelect={onSelect} asChild>\n      <ToolButton {...rest} />\n    </RadixContextMenu.ContextMenuItem>\n  )\n}\n\n/* -------------------- RowButton ------------------- */\n\nconst CMRowButton = ({ id, ...rest }: RowButtonProps) => {\n  return (\n    <RadixContextMenu.ContextMenuItem asChild id={id}>\n      <RowButton {...rest} />\n    </RadixContextMenu.ContextMenuItem>\n  )\n}\n\n/* ----------------- Trigger Button ----------------- */\n\nexport const CMSubTriggerButton = ({ id, ...rest }: RowButtonProps) => {\n  return (\n    <RadixContextMenu.SubTrigger asChild id={id}>\n      <RowButton hasArrow {...rest} />\n    </RadixContextMenu.SubTrigger>\n  )\n}\n\nexport const ContextMenu = React.memo(_ContextMenu)\n", "import { createStitches, defaultThemeMap } from '@stitches/react'\n\nconst { styled, createTheme } = createStitches({\n  themeMap: {\n    ...defaultThemeMap,\n  },\n  theme: {\n    colors: {\n      bounds: 'rgba(65, 132, 244, 1.000)',\n      boundsBg: 'rgba(65, 132, 244, 0.05)',\n      hover: '#ececec',\n      overlay: 'rgba(0, 0, 0, 0.15)',\n      overlayContrast: 'rgba(255, 255, 255, 0.15)',\n      panel: '#fefefe',\n      panelContrast: '#ffffff',\n      selected: 'rgba(66, 133, 244, 1.000)',\n      selectedContrast: '#fefefe',\n      text: '#333333',\n      tooltip: '#1d1d1d',\n      tooltipContrast: '#ffffff',\n      warn: 'rgba(255, 100, 100, 1)',\n      canvas: 'rgb(248, 249, 250)',\n    },\n    shadows: {\n      2: '0px 1px 1px rgba(0, 0, 0, 0.14)',\n      3: '0px 2px 3px rgba(0, 0, 0, 0.14)',\n      4: '0px 4px 5px -1px rgba(0, 0, 0, 0.14)',\n      8: '0px 12px 17px rgba(0, 0, 0, 0.14)',\n      12: '0px 12px 17px rgba(0, 0, 0, 0.14)',\n      24: '0px 24px 38px rgba(0, 0, 0, 0.14)',\n      key: '1px 1px rgba(0,0,0,1)',\n      panel: `0px 0px 16px -1px rgba(0, 0, 0, 0.05), \n        0px 0px 16px -8px rgba(0, 0, 0, 0.05), \n        0px 0px 16px -12px rgba(0, 0, 0, 0.12),\n        0px 0px 2px 0px rgba(0, 0, 0, 0.08)`,\n    },\n    space: {\n      0: '2px',\n      1: '3px',\n      2: '4px',\n      3: '8px',\n      4: '12px',\n      5: '16px',\n      6: '32px',\n      7: '48px',\n    },\n    fontSizes: {\n      0: '10px',\n      1: '12px',\n      2: '13px',\n      3: '16px',\n      4: '18px',\n    },\n    fonts: {\n      ui: '\"Recursive\", system-ui, sans-serif',\n      body: '\"Recursive\", system-ui, sans-serif',\n      mono: '\"Recursive Mono\", monospace',\n    },\n    fontWeights: {},\n    lineHeights: {},\n    letterSpacings: {},\n    sizes: {},\n    borderWidths: {\n      0: '$1',\n    },\n    borderStyles: {},\n    radii: {\n      0: '2px',\n      1: '4px',\n      2: '8px',\n      3: '12px',\n      4: '16px',\n    },\n    zIndices: {},\n    transitions: {},\n  },\n  media: {\n    micro: '(max-width: 370px)',\n    sm: '(min-width: 640px)',\n    md: '(min-width: 768px)',\n    lg: '(min-width: 1024px)',\n  },\n  utils: {\n    zStrokeWidth: () => (value: number | number[]) => {\n      if (Array.isArray(value)) {\n        return {\n          strokeWidth: `calc(${value[0]}px / var(--camera-zoom))`,\n        }\n      }\n\n      return {\n        strokeWidth: `calc(${value}px / var(--camera-zoom))`,\n      }\n    },\n  },\n})\n\nexport const dark = createTheme({\n  colors: {\n    bounds: 'rgba(38, 150, 255, 1.000)',\n    boundsBg: 'rgba(38, 150, 255, 0.05)',\n    hover: '#444A50',\n    overlay: 'rgba(0, 0, 0, 0.15)',\n    overlayContrast: 'rgba(255, 255, 255, 0.15)',\n    panel: '#363D44',\n    panelContrast: '#49555f',\n    selected: 'rgba(38, 150, 255, 1.000)',\n    selectedContrast: '#fefefe',\n    text: '#f8f9fa',\n    tooltip: '#1d1d1d',\n    tooltipContrast: '#ffffff',\n    canvas: '#212529',\n  },\n  shadows: {\n    2: '0px 1px 1px rgba(0, 0, 0, 0.24)',\n    3: '0px 2px 3px rgba(0, 0, 0, 0.24)',\n    4: '0px 4px 5px -1px rgba(0, 0, 0, 0.24)',\n    8: '0px 12px 17px rgba(0, 0, 0, 0.24)',\n    12: '0px 12px 17px rgba(0, 0, 0, 0.24)',\n    24: '0px 24px 38px rgba(0, 0, 0, 0.24)',\n    panel: `0px 0px 16px -1px rgba(0, 0, 0, 0.05), \n      0px 0px 16px -8px rgba(0, 0, 0, 0.09), \n      0px 0px 16px -12px rgba(0, 0, 0, 0.2)`,\n  },\n})\n\nexport { styled }\n", "import { styled } from '~styles'\n\nexport const Divider = styled('hr', {\n  height: 0,\n  paddingTop: 1,\n  width: 'calc(100%+8px)',\n  backgroundColor: '$hover',\n  border: 'none',\n  margin: '$2 -4px',\n})\n", "import { styled } from '~styles'\n\nexport const MenuContent = styled('div', {\n  position: 'relative',\n  overflow: 'hidden',\n  userSelect: 'none',\n  WebkitUserSelect: 'none',\n  display: 'flex',\n  flexDirection: 'column',\n  zIndex: 99997,\n  minWidth: 180,\n  pointerEvents: 'all',\n  backgroundColor: '$panel',\n  border: '1px solid $panelContrast',\n  boxShadow: '$panel',\n  padding: '$2 $2',\n  borderRadius: '$3',\n  font: '$ui',\n  maxHeight: '100vh',\n  overflowY: 'auto',\n  overflowX: 'hidden',\n  '&::webkit-scrollbar': {\n    display: 'none',\n  },\n  '-ms-overflow-style': 'none' /* for Internet Explorer, Edge */,\n  scrollbarWidth: 'none',\n  variants: {\n    size: {\n      small: {\n        minWidth: 72,\n      },\n    },\n    overflow: {\n      true: {\n        maxHeight: '60vh',\n      },\n    },\n  },\n})\n", "import { ItemIndicator } from '@radix-ui/react-dropdown-menu'\nimport { CheckIcon, ChevronRightIcon } from '@radix-ui/react-icons'\nimport * as React from 'react'\nimport { Kbd } from '~components/Primitives/Kbd'\nimport { SmallIcon } from '~components/Primitives/SmallIcon'\nimport { breakpoints } from '~components/breakpoints'\nimport { styled } from '~styles'\n\nexport interface RowButtonProps {\n  onClick?: React.MouseEventHandler<HTMLButtonElement>\n  children: React.ReactNode\n  disabled?: boolean\n  kbd?: string\n  variant?: 'wide' | 'styleMenu'\n  isActive?: boolean\n  isWarning?: boolean\n  hasIndicator?: boolean\n  hasArrow?: boolean\n  id?: string\n}\n\nexport const RowButton = React.forwardRef<HTMLButtonElement, RowButtonProps>(\n  (\n    {\n      onClick,\n      isActive = false,\n      isWarning = false,\n      hasIndicator = false,\n      hasArrow = false,\n      disabled = false,\n      variant,\n      kbd,\n      children,\n      ...rest\n    },\n    ref\n  ) => {\n    return (\n      <StyledRowButton\n        ref={ref}\n        bp={breakpoints}\n        isWarning={isWarning}\n        isActive={isActive}\n        disabled={disabled}\n        onClick={onClick}\n        variant={variant}\n        {...rest}\n      >\n        <StyledRowButtonInner>\n          {children}\n          {kbd ? <Kbd variant=\"menu\">{kbd}</Kbd> : undefined}\n          {hasIndicator && (\n            <ItemIndicator dir=\"ltr\">\n              <SmallIcon>\n                <CheckIcon />\n              </SmallIcon>\n            </ItemIndicator>\n          )}\n          {hasArrow && (\n            <SmallIcon>\n              <ChevronRightIcon />\n            </SmallIcon>\n          )}\n        </StyledRowButtonInner>\n      </StyledRowButton>\n    )\n  }\n)\n\nconst StyledRowButtonInner = styled('div', {\n  height: '100%',\n  width: '100%',\n  backgroundColor: '$panel',\n  borderRadius: '$2',\n  display: 'flex',\n  gap: '$1',\n  flexDirection: 'row',\n  alignItems: 'center',\n  padding: '0 $3',\n  justifyContent: 'space-between',\n  border: '1px solid transparent',\n\n  '& svg': {\n    position: 'relative',\n    stroke: '$overlay',\n    strokeWidth: 1,\n    zIndex: 1,\n  },\n\n  [`& > ${SmallIcon}`]: {\n    paddingLeft: '$3',\n  },\n})\n\nexport const StyledRowButton = styled('button', {\n  position: 'relative',\n  width: '100%',\n  background: 'none',\n  border: 'none',\n  cursor: 'pointer',\n  height: 32,\n  minHeight: 32,\n  outline: 'none',\n  color: '$text',\n  fontFamily: '$ui',\n  fontWeight: 400,\n  fontSize: '$1',\n  borderRadius: 4,\n  userSelect: 'none',\n  WebkitUserSelect: 'none',\n  margin: 0,\n  padding: '0 0',\n\n  '&[data-disabled]': {\n    opacity: 0.3,\n  },\n\n  '&:disabled': {\n    opacity: 0.3,\n  },\n\n  [`&:focus:not(:disabled) ${StyledRowButtonInner}`]: {\n    backgroundColor: '$hover',\n  },\n\n  '& a': {\n    textDecoration: 'none',\n    color: '$text',\n  },\n\n  variants: {\n    bp: {\n      mobile: {},\n      small: {},\n    },\n    variant: {\n      styleMenu: {\n        margin: '$1 0 $1 0',\n      },\n      wide: {\n        gridColumn: '1 / span 4',\n      },\n    },\n    size: {\n      icon: {\n        padding: '4px ',\n        width: 'auto',\n      },\n    },\n    isWarning: {\n      true: {\n        color: '$warn',\n      },\n    },\n    isActive: {\n      true: {\n        backgroundColor: '$hover',\n      },\n      false: {},\n    },\n  },\n})\n", "import { Utils } from '@tldraw/core'\nimport * as React from 'react'\nimport { styled } from '~styles'\n\n/* -------------------------------------------------- */\n/*                  Keyboard Shortcut                 */\n/* -------------------------------------------------- */\n\nconst commandKey = () => (Utils.isDarwin() ? '\u2318' : 'Ctrl')\n\nexport function Kbd({ variant, children }: { variant: 'tooltip' | 'menu'; children: string }) {\n  return (\n    <StyledKbd variant={variant}>\n      {children.split('').map((k, i) => {\n        return <span key={i}>{k.replace('#', commandKey())}</span>\n      })}\n    </StyledKbd>\n  )\n}\n\nexport const StyledKbd = styled('kbd', {\n  marginLeft: '$3',\n  textShadow: '$2',\n  textAlign: 'center',\n  fontSize: '$0',\n  fontFamily: '$ui',\n  color: '$text',\n  background: 'none',\n  fontWeight: 400,\n  gap: '$1',\n  display: 'flex',\n  alignItems: 'center',\n\n  '& > span': {\n    padding: '$0',\n    borderRadius: '$0',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n\n  variants: {\n    variant: {\n      tooltip: {\n        '& > span': {\n          color: '$tooltipContrast',\n          background: '$overlayContrast',\n          boxShadow: '$key',\n          width: '20px',\n          height: '20px',\n        },\n      },\n      menu: {},\n    },\n  },\n})\n", "import { styled } from '~styles'\n\nexport const SmallIcon = styled('div', {\n  height: '100%',\n  borderRadius: '4px',\n  marginRight: '1px',\n  width: 'fit-content',\n  display: 'grid',\n  alignItems: 'center',\n  justifyContent: 'center',\n  outline: 'none',\n  border: 'none',\n  pointerEvents: 'all',\n  cursor: 'pointer',\n  color: 'currentColor',\n\n  '& svg': {\n    height: 16,\n    width: 16,\n    strokeWidth: 1,\n  },\n\n  '& > *': {\n    gridRow: 1,\n    gridColumn: 1,\n  },\n})\n", "/* -------------------------------------------------- */\n/*                     Breakpoints                    */\n/* -------------------------------------------------- */\n\nexport const breakpoints: any = {\n  '@initial': 'mobile',\n  '@micro': 'micro',\n  '@sm': 'small',\n  '@md': 'medium',\n  '@lg': 'large',\n}\n", "import * as React from 'react'\nimport { Tooltip } from '~components/Primitives/Tooltip'\nimport { breakpoints } from '~components/breakpoints'\nimport { useTldrawApp } from '~hooks'\nimport { styled } from '~styles'\n\nexport interface ToolButtonProps {\n  onClick?: () => void\n  onSelect?: () => void\n  onDoubleClick?: () => void\n  disabled?: boolean\n  isActive?: boolean\n  isToolLocked?: boolean\n  variant?: 'icon' | 'text' | 'circle' | 'primary'\n  children: React.ReactNode\n  id?: string\n  onKeyDown?: React.KeyboardEventHandler<HTMLButtonElement>\n}\n\nexport const ToolButton = React.forwardRef<HTMLButtonElement, ToolButtonProps>(\n  (\n    {\n      onSelect,\n      onClick,\n      onDoubleClick,\n      variant,\n      children,\n      isToolLocked = false,\n      disabled = false,\n      isActive = false,\n      onKeyDown,\n      id,\n      ...rest\n    },\n    ref\n  ) => {\n    return (\n      <StyledToolButton\n        ref={ref}\n        isActive={isActive}\n        variant={variant}\n        onClick={onClick}\n        disabled={disabled}\n        onPointerDown={onSelect}\n        onDoubleClick={onDoubleClick}\n        onKeyDown={onKeyDown}\n        bp={breakpoints}\n        id={id}\n        {...rest}\n      >\n        <StyledToolButtonInner>{children}</StyledToolButtonInner>\n        {isToolLocked && <ToolLockIndicator />}\n      </StyledToolButton>\n    )\n  }\n)\n\n/* ------------------ With Tooltip ------------------ */\n\ninterface ToolButtonWithTooltipProps extends ToolButtonProps {\n  label: string\n  isLocked?: boolean\n  kbd?: string\n  variant?: 'icon' | 'text' | 'circle' | 'primary'\n}\n\nexport function ToolButtonWithTooltip({\n  label,\n  kbd,\n  variant,\n  isLocked,\n  ...rest\n}: ToolButtonWithTooltipProps) {\n  const app = useTldrawApp()\n\n  const handleDoubleClick = React.useCallback(() => {\n    app.toggleToolLock()\n  }, [])\n\n  const handleKeyDown = React.useCallback((e: React.KeyboardEvent<HTMLButtonElement>) => {\n    if (e.key === ' ' && app.isForcePanning) {\n      e.preventDefault()\n    }\n  }, [])\n\n  return (\n    <Tooltip label={label[0].toUpperCase() + label.slice(1)} kbd={kbd}>\n      <ToolButton\n        {...rest}\n        variant={variant}\n        isToolLocked={isLocked && rest.isActive}\n        onDoubleClick={handleDoubleClick}\n        onKeyDown={handleKeyDown}\n        aria-label={label[0].toUpperCase() + label.slice(1)}\n      />\n    </Tooltip>\n  )\n}\n\nexport const StyledToolButtonInner = styled('div', {\n  position: 'relative',\n  height: '100%',\n  width: '100%',\n  backgroundColor: '$panel',\n  borderRadius: '$2',\n  margin: '0',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  fontFamily: '$ui',\n  color: 'inherit',\n  userSelect: 'none',\n  WebkitUserSelect: 'none',\n  boxSizing: 'border-box',\n  border: '1px solid transparent',\n  '-webkit-tap-highlight-color': 'transparent',\n  'tap-highlight-color': 'transparent',\n})\n\nexport const StyledToolButton = styled('button', {\n  position: 'relative',\n  color: '$text',\n  fontSize: '$0',\n  background: 'none',\n  margin: '0',\n  padding: '$2',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  outline: 'none',\n  cursor: 'pointer',\n  pointerEvents: 'all',\n  height: '40px',\n  width: '40px',\n  border: '1px solid $panel',\n  '-webkit-tap-highlight-color': 'transparent',\n  'tap-highlight-color': 'transparent',\n\n  [`&:disabled ${StyledToolButtonInner}`]: {\n    opacity: 0.618,\n  },\n\n  variants: {\n    variant: {\n      primary: {\n        marginTop: '0',\n      },\n      icon: {\n        [`& ${StyledToolButtonInner}`]: {\n          display: 'grid',\n          '& > *': {\n            gridRow: 1,\n            gridColumn: 1,\n          },\n        },\n      },\n      text: {\n        width: 'auto',\n        [`& ${StyledToolButtonInner}`]: {\n          fontSize: '$1',\n          padding: '0 $3',\n          gap: '$3',\n        },\n      },\n      circle: {\n        padding: 0,\n        height: 32,\n        width: 32,\n        border: 'none',\n        [`& ${StyledToolButtonInner}`]: {\n          border: '1px solid $panelContrast',\n          borderRadius: '100%',\n          boxShadow: '$panel',\n        },\n        [`& ${StyledToolButtonInner} > svg`]: {\n          width: 14,\n          height: 14,\n        },\n      },\n    },\n    isActive: {\n      true: {},\n      false: {},\n    },\n    bp: {\n      mobile: {\n        padding: 0,\n      },\n      small: {},\n    },\n  },\n  compoundVariants: [\n    {\n      variant: 'primary',\n      bp: 'mobile',\n      css: {\n        height: 40,\n        width: 36,\n        [`& ${StyledToolButtonInner} > svg`]: {\n          width: 16,\n          height: 16,\n        },\n      },\n    },\n    {\n      variant: 'primary',\n      bp: 'small',\n      css: {\n        height: '40px',\n        width: '40px',\n        [`& ${StyledToolButtonInner} > svg`]: {\n          width: 20,\n          height: 20,\n        },\n      },\n    },\n    {\n      isActive: true,\n      css: {\n        [`${StyledToolButtonInner}`]: {\n          backgroundColor: '$selected',\n          color: '$selectedContrast',\n        },\n      },\n    },\n    {\n      isActive: false,\n      bp: 'small',\n      css: {\n        [`&:hover:not(:disabled) ${StyledToolButtonInner}`]: {\n          backgroundColor: '$hover',\n        },\n        [`&:focus:not(:disabled) ${StyledToolButtonInner}`]: {\n          backgroundColor: '$hover',\n        },\n      },\n    },\n  ],\n})\n\nconst ToolLockIndicator = styled('div', {\n  position: 'absolute',\n  width: 10,\n  height: 10,\n  backgroundColor: '$selected',\n  borderRadius: '100%',\n  bottom: -2,\n  border: '2px solid $panel',\n  zIndex: 100,\n})\n", "import * as RadixTooltip from '@radix-ui/react-tooltip'\nimport * as React from 'react'\nimport { Kbd } from '~components/Primitives/Kbd'\nimport { styled } from '~styles'\n\n/* -------------------------------------------------- */\n/*                       Tooltip                      */\n/* -------------------------------------------------- */\n\ninterface TooltipProps {\n  children: React.ReactNode\n  label: string\n  kbd?: string\n  id?: string\n  side?: 'bottom' | 'left' | 'right' | 'top'\n}\n\nexport function Tooltip({ children, label, kbd: kbdProp, id, side = 'top' }: TooltipProps) {\n  return (\n    <span id={id}>\n      <RadixTooltip.Provider>\n        <RadixTooltip.Root>\n          <RadixTooltip.Trigger dir=\"ltr\" asChild={true}>\n            <span>{children}</span>\n          </RadixTooltip.Trigger>\n          <StyledContent dir=\"ltr\" side={side} sideOffset={8}>\n            {label}\n            {kbdProp ? <Kbd variant=\"tooltip\">{kbdProp}</Kbd> : null}\n            <StyledArrow />\n          </StyledContent>\n        </RadixTooltip.Root>\n      </RadixTooltip.Provider>\n    </span>\n  )\n}\n\nconst StyledContent = styled(RadixTooltip.Content, {\n  borderRadius: 3,\n  padding: '$3 $3 $3 $3',\n  fontSize: '$1',\n  backgroundColor: '$tooltip',\n  color: '$tooltipContrast',\n  boxShadow: '$3',\n  display: 'flex',\n  alignItems: 'center',\n  fontFamily: '$ui',\n  userSelect: 'none',\n  WebkitUserSelect: 'none',\n})\n\nconst StyledArrow = styled(RadixTooltip.Arrow, {\n  fill: '$tooltip',\n  margin: '0 8px',\n})\n", "import * as React from 'react'\nimport type { TldrawApp } from '~state'\nimport { DialogState } from './useDialog'\n\nexport function useFileSystem() {\n  const onNewProject = React.useCallback(\n    async (\n      app: TldrawApp,\n      openDialog: (\n        dialogState: DialogState,\n        onYes: () => Promise<void>,\n        onNo: () => Promise<void>,\n        onCancel: () => Promise<void>\n      ) => void\n    ) => {\n      openDialog(\n        app.fileSystemHandle ? 'saveFirstTime' : 'saveAgain',\n        async () => {\n          // user pressed yes\n          try {\n            await app.saveProject()\n            app.newProject()\n          } catch (e) {\n            // noop\n          }\n        },\n        async () => {\n          // user pressed no\n          app.newProject()\n        },\n        async () => {\n          // user pressed cancel\n        }\n      )\n    },\n    []\n  )\n\n  const onOpenProject = React.useCallback(\n    async (\n      app: TldrawApp,\n      openDialog: (\n        dialogState: DialogState,\n        onYes: () => Promise<void>,\n        onNo: () => Promise<void>,\n        onCancel: () => Promise<void>\n      ) => void\n    ) => {\n      openDialog(\n        app.fileSystemHandle ? 'saveFirstTime' : 'saveAgain',\n        async () => {\n          // user pressed yes\n          try {\n            await app.saveProject()\n            await app.openProject()\n          } catch (e) {\n            // noop\n          }\n        },\n        async () => {\n          // user pressed no\n          app.openProject()\n        },\n        async () => {\n          // user pressed cancel\n        }\n      )\n    },\n    []\n  )\n\n  const onSaveProject = React.useCallback((app: TldrawApp) => {\n    app.saveProject()\n  }, [])\n\n  const onSaveProjectAs = React.useCallback((app: TldrawApp) => {\n    app.saveProjectAs()\n  }, [])\n\n  const onOpenMedia = React.useCallback(async (app: TldrawApp) => {\n    app.openAsset?.()\n  }, [])\n\n  return {\n    onNewProject,\n    onSaveProject,\n    onSaveProjectAs,\n    onOpenProject,\n    onOpenMedia,\n  }\n}\n", "import * as React from 'react'\nimport { useDialog, useTldrawApp } from '~hooks'\n\nexport function useFileSystemHandlers() {\n  const app = useTldrawApp()\n\n  const { openDialog } = useDialog()\n\n  const onNewProject = React.useCallback(\n    async (e?: React.MouseEvent | React.KeyboardEvent | KeyboardEvent) => {\n      if (e && app.callbacks.onOpenProject) e.preventDefault()\n      app.callbacks.onNewProject?.(app, openDialog)\n    },\n    [app, openDialog]\n  )\n\n  const onSaveProject = React.useCallback(\n    (e?: React.MouseEvent | React.KeyboardEvent | KeyboardEvent) => {\n      if (e && app.callbacks.onOpenProject) e.preventDefault()\n      app.callbacks.onSaveProject?.(app)\n    },\n    [app]\n  )\n\n  const onSaveProjectAs = React.useCallback(\n    (e?: React.MouseEvent | React.KeyboardEvent | KeyboardEvent) => {\n      if (e && app.callbacks.onOpenProject) e.preventDefault()\n      app.callbacks.onSaveProjectAs?.(app)\n    },\n    [app]\n  )\n\n  const onOpenProject = React.useCallback(\n    async (e?: React.MouseEvent | React.KeyboardEvent | KeyboardEvent) => {\n      if (e && app.callbacks.onOpenProject) e.preventDefault()\n      app.callbacks.onOpenProject?.(app, openDialog)\n    },\n    [app, openDialog]\n  )\n\n  const onOpenMedia = React.useCallback(\n    async (e?: React.MouseEvent | React.KeyboardEvent | KeyboardEvent) => {\n      if (e && app.callbacks.onOpenMedia) e.preventDefault()\n      app.callbacks.onOpenMedia?.(app)\n    },\n    [app]\n  )\n\n  return {\n    onNewProject,\n    onSaveProject,\n    onSaveProjectAs,\n    onOpenProject,\n    onOpenMedia,\n  }\n}\n", "import * as React from 'react'\nimport { useHotkeys } from 'react-hotkeys-hook'\nimport { useFileSystemHandlers, useTldrawApp } from '~hooks'\nimport { AlignStyle, TDExportType, TDShapeType } from '~types'\n\nexport function useKeyboardShortcuts(ref: React.RefObject<HTMLDivElement>) {\n  const app = useTldrawApp()\n\n  const canHandleEvent = React.useCallback(\n    (ignoreMenus = false) => {\n      const elm = ref.current\n      if (ignoreMenus && (app.isMenuOpen || app.settings.keepStyleMenuOpen)) return true\n      return elm && (document.activeElement === elm || elm.contains(document.activeElement))\n    },\n    [ref]\n  )\n\n  React.useEffect(() => {\n    if (!app) return\n\n    const handleCut = (e: ClipboardEvent) => {\n      if (!canHandleEvent(true)) return\n\n      if (app.readOnly) {\n        app.copy(undefined, e)\n        return\n      }\n\n      app.cut(undefined, e)\n    }\n\n    const handleCopy = (e: ClipboardEvent) => {\n      if (!canHandleEvent(true)) return\n\n      app.copy(undefined, e)\n    }\n\n    const handlePaste = (e: ClipboardEvent) => {\n      if (!canHandleEvent(true)) return\n      if (app.readOnly) return\n\n      app.paste(undefined, e)\n    }\n\n    document.addEventListener('cut', handleCut)\n    document.addEventListener('copy', handleCopy)\n    document.addEventListener('paste', handlePaste)\n    return () => {\n      document.removeEventListener('cut', handleCut)\n      document.removeEventListener('copy', handleCopy)\n      document.removeEventListener('paste', handlePaste)\n    }\n  }, [app])\n\n  /* ---------------------- Tools --------------------- */\n\n  useHotkeys(\n    'v,1',\n    () => {\n      if (!canHandleEvent(true)) return\n      app.selectTool('select')\n    },\n    [app, ref.current]\n  )\n\n  useHotkeys(\n    'd,p,2',\n    () => {\n      if (!canHandleEvent(true)) return\n      app.selectTool(TDShapeType.Draw)\n    },\n    undefined,\n    [app]\n  )\n\n  useHotkeys(\n    'e,3',\n    () => {\n      if (!canHandleEvent(true)) return\n      app.selectTool('erase')\n    },\n    undefined,\n    [app]\n  )\n\n  useHotkeys(\n    'r,4',\n    () => {\n      if (!canHandleEvent(true)) return\n      app.selectTool(TDShapeType.Rectangle)\n    },\n    undefined,\n    [app]\n  )\n\n  useHotkeys(\n    'o,5',\n    () => {\n      if (!canHandleEvent(true)) return\n      app.selectTool(TDShapeType.Ellipse)\n    },\n    undefined,\n    [app]\n  )\n\n  useHotkeys(\n    'g,6',\n    () => {\n      if (!canHandleEvent()) return\n      app.selectTool(TDShapeType.Triangle)\n    },\n    undefined,\n    [app]\n  )\n\n  useHotkeys(\n    'l,7',\n    () => {\n      if (!canHandleEvent(true)) return\n      app.selectTool(TDShapeType.Line)\n    },\n    undefined,\n    [app]\n  )\n\n  useHotkeys(\n    'a,8',\n    () => {\n      if (!canHandleEvent(true)) return\n      app.selectTool(TDShapeType.Arrow)\n    },\n    undefined,\n    [app]\n  )\n\n  useHotkeys(\n    't,9',\n    () => {\n      if (!canHandleEvent(true)) return\n      app.selectTool(TDShapeType.Text)\n    },\n    undefined,\n    [app]\n  )\n\n  useHotkeys(\n    's,0',\n    () => {\n      if (!canHandleEvent(true)) return\n      app.selectTool(TDShapeType.Sticky)\n    },\n    undefined,\n    [app]\n  )\n\n  /* ---------------------- Misc ---------------------- */\n\n  // Dark Mode\n\n  useHotkeys(\n    'ctrl+shift+d,\u2318+shift+d',\n    (e) => {\n      if (!canHandleEvent(true)) return\n      app.toggleDarkMode()\n      e.preventDefault()\n    },\n    undefined,\n    [app]\n  )\n\n  // Focus Mode\n\n  useHotkeys(\n    'ctrl+.,\u2318+.',\n    () => {\n      if (!canHandleEvent(true)) return\n      app.toggleFocusMode()\n    },\n    undefined,\n    [app]\n  )\n\n  useHotkeys(\n    'ctrl+shift+g,\u2318+shift+g',\n    () => {\n      if (!canHandleEvent(true)) return\n      app.toggleGrid()\n    },\n    undefined,\n    [app]\n  )\n\n  // File System\n\n  const { onNewProject, onOpenProject, onSaveProject, onSaveProjectAs, onOpenMedia } =\n    useFileSystemHandlers()\n\n  useHotkeys(\n    'ctrl+n,\u2318+n',\n    (e) => {\n      e.preventDefault()\n      if (!canHandleEvent()) return\n      onNewProject(e)\n    },\n    undefined,\n    [app]\n  )\n  useHotkeys(\n    'ctrl+s,\u2318+s',\n    (e) => {\n      if (!canHandleEvent()) return\n\n      onSaveProject(e)\n    },\n    undefined,\n    [app]\n  )\n\n  useHotkeys(\n    'ctrl+shift+s,\u2318+shift+s',\n    (e) => {\n      if (!canHandleEvent()) return\n\n      onSaveProjectAs(e)\n    },\n    undefined,\n    [app]\n  )\n\n  useHotkeys(\n    'ctrl+alt+1,\u2318+alt+1',\n    (e) => {\n      if (!canHandleEvent()) return\n\n      app.exportImage(TDExportType.SVG, { scale: 2, quality: 1 })\n    },\n    undefined,\n    [app]\n  )\n  useHotkeys(\n    'ctrl+alt+2,\u2318+alt+2',\n    (e) => {\n      if (!canHandleEvent()) return\n\n      app.exportImage(TDExportType.PNG, { scale: 2, quality: 1 })\n    },\n    undefined,\n    [app]\n  )\n  useHotkeys(\n    'ctrl+alt+3,\u2318+alt+3',\n    (e) => {\n      if (!canHandleEvent()) return\n\n      app.exportImage(TDExportType.JPG, { scale: 2, quality: 1 })\n    },\n    undefined,\n    [app]\n  )\n  useHotkeys(\n    'ctrl+alt+4,\u2318+alt+4',\n    (e) => {\n      if (!canHandleEvent()) return\n\n      app.exportImage(TDExportType.WEBP, { scale: 2, quality: 1 })\n    },\n    undefined,\n    [app]\n  )\n  useHotkeys(\n    'ctrl+alt+5,\u2318+alt+5',\n    (e) => {\n      if (!canHandleEvent()) return\n\n      app.exportJson()\n    },\n    undefined,\n    [app]\n  )\n\n  useHotkeys(\n    'ctrl+o,\u2318+o',\n    (e) => {\n      if (!canHandleEvent()) return\n\n      onOpenProject(e)\n    },\n    undefined,\n    [app]\n  )\n  useHotkeys(\n    'ctrl+u,\u2318+u',\n    (e) => {\n      if (!canHandleEvent()) return\n      onOpenMedia(e)\n    },\n    undefined,\n    [app]\n  )\n\n  // Undo Redo\n\n  useHotkeys(\n    '\u2318+z,ctrl+z',\n    (e) => {\n      e.preventDefault()\n      if (!canHandleEvent(true)) return\n\n      if (app.session) {\n        app.cancelSession()\n      } else {\n        app.undo()\n      }\n    },\n    undefined,\n    [app]\n  )\n\n  useHotkeys(\n    'ctrl+shift+z,\u2318+shift+z',\n    () => {\n      if (!canHandleEvent(true)) return\n\n      if (app.session) {\n        app.cancelSession()\n      } else {\n        app.redo()\n      }\n    },\n    undefined,\n    [app]\n  )\n\n  // Undo Redo\n\n  useHotkeys(\n    '\u2318+u,ctrl+u',\n    () => {\n      if (!canHandleEvent()) return\n      app.undoSelect()\n    },\n    undefined,\n    [app]\n  )\n\n  useHotkeys(\n    'ctrl+shift-u,\u2318+shift+u',\n    () => {\n      if (!canHandleEvent()) return\n      app.redoSelect()\n    },\n    undefined,\n    [app]\n  )\n\n  /* -------------------- Commands -------------------- */\n\n  // Camera\n\n  useHotkeys(\n    'ctrl+=,\u2318+=,ctrl+num_add,\u2318+num_add',\n    (e) => {\n      if (!canHandleEvent(true)) return\n      app.zoomIn()\n      e.preventDefault()\n    },\n    undefined,\n    [app]\n  )\n\n  useHotkeys(\n    'ctrl+-,\u2318+-,ctrl+num_subtract,\u2318+num_subtract',\n    (e) => {\n      if (!canHandleEvent(true)) return\n\n      app.zoomOut()\n      e.preventDefault()\n    },\n    undefined,\n    [app]\n  )\n\n  useHotkeys(\n    'shift+0,ctrl+numpad_0,\u2318+numpad_0',\n    () => {\n      if (!canHandleEvent(true)) return\n      app.resetZoom()\n    },\n    undefined,\n    [app]\n  )\n\n  useHotkeys(\n    'shift+1',\n    () => {\n      if (!canHandleEvent(true)) return\n      app.zoomToFit()\n    },\n    undefined,\n    [app]\n  )\n\n  useHotkeys(\n    'shift+2',\n    () => {\n      if (!canHandleEvent(true)) return\n      app.zoomToSelection()\n    },\n    undefined,\n    [app]\n  )\n\n  // Duplicate\n\n  useHotkeys(\n    'ctrl+d,\u2318+d',\n    (e) => {\n      if (!canHandleEvent()) return\n\n      app.duplicate()\n      e.preventDefault()\n    },\n    undefined,\n    [app]\n  )\n\n  // Flip\n\n  useHotkeys(\n    'shift+h',\n    () => {\n      if (!canHandleEvent(true)) return\n      app.flipHorizontal()\n    },\n    undefined,\n    [app]\n  )\n\n  useHotkeys(\n    'shift+v',\n    () => {\n      if (!canHandleEvent(true)) return\n      app.flipVertical()\n    },\n    undefined,\n    [app]\n  )\n\n  // Cancel\n\n  useHotkeys(\n    'escape',\n    () => {\n      if (!canHandleEvent(true)) return\n\n      app.cancel()\n    },\n    undefined,\n    [app]\n  )\n\n  // Delete\n\n  useHotkeys(\n    'backspace,del',\n    () => {\n      if (!canHandleEvent()) return\n      app.delete()\n    },\n    undefined,\n    [app]\n  )\n\n  // Select All\n\n  useHotkeys(\n    '\u2318+a,ctrl+a',\n    () => {\n      if (!canHandleEvent(true)) return\n      app.selectAll()\n    },\n    undefined,\n    [app]\n  )\n\n  // Nudge\n\n  useHotkeys(\n    'up',\n    () => {\n      if (!canHandleEvent()) return\n      app.nudge([0, -1], false)\n    },\n    undefined,\n    [app]\n  )\n\n  useHotkeys(\n    'right',\n    () => {\n      if (!canHandleEvent()) return\n      app.nudge([1, 0], false)\n    },\n    undefined,\n    [app]\n  )\n\n  useHotkeys(\n    'down',\n    () => {\n      if (!canHandleEvent()) return\n      app.nudge([0, 1], false)\n    },\n    undefined,\n    [app]\n  )\n\n  useHotkeys(\n    'left',\n    () => {\n      if (!canHandleEvent()) return\n      app.nudge([-1, 0], false)\n    },\n    undefined,\n    [app]\n  )\n\n  useHotkeys(\n    'shift+up',\n    () => {\n      if (!canHandleEvent()) return\n      app.nudge([0, -1], true)\n    },\n    undefined,\n    [app]\n  )\n\n  useHotkeys(\n    'shift+right',\n    () => {\n      if (!canHandleEvent()) return\n      app.nudge([1, 0], true)\n    },\n    undefined,\n    [app]\n  )\n\n  useHotkeys(\n    'shift+down',\n    () => {\n      if (!canHandleEvent()) return\n      app.nudge([0, 1], true)\n    },\n    undefined,\n    [app]\n  )\n\n  useHotkeys(\n    'shift+left',\n    () => {\n      if (!canHandleEvent()) return\n      app.nudge([-1, 0], true)\n    },\n    undefined,\n    [app]\n  )\n\n  useHotkeys(\n    '\u2318+shift+l,ctrl+shift+l',\n    () => {\n      if (!canHandleEvent()) return\n      app.toggleLocked()\n    },\n    undefined,\n    [app]\n  )\n\n  // Copy, Cut & Paste\n\n  // useHotkeys(\n  //   '\u2318+c,ctrl+c',\n  //   () => {\n  //     if (!canHandleEvent()) return\n  //     app.copy()\n  //   },\n  //   undefined,\n  //   [app]\n  // )\n\n  useHotkeys(\n    '\u2318+shift+c,ctrl+shift+c',\n    (e) => {\n      if (!canHandleEvent()) return\n\n      app.copySvg()\n      e.preventDefault()\n    },\n    undefined,\n    [app]\n  )\n\n  // useHotkeys(\n  //   '\u2318+x,ctrl+x',\n  //   () => {\n  //     if (!canHandleEvent()) return\n  //     app.cut()\n  //   },\n  //   undefined,\n  //   [app]\n  // )\n\n  // useHotkeys(\n  //   '\u2318+v,ctrl+v',\n  //   () => {\n  //     if (!canHandleEvent()) return\n\n  //     app.paste()\n  //   },\n  //   undefined,\n  //   [app]\n  // )\n\n  // Group & Ungroup\n\n  useHotkeys(\n    '\u2318+g,ctrl+g',\n    (e) => {\n      if (!canHandleEvent()) return\n\n      app.group()\n      e.preventDefault()\n    },\n    undefined,\n    [app]\n  )\n\n  useHotkeys(\n    '\u2318+shift+g,ctrl+shift+g',\n    (e) => {\n      if (!canHandleEvent()) return\n\n      app.ungroup()\n      e.preventDefault()\n    },\n    undefined,\n    [app]\n  )\n\n  // Move\n\n  useHotkeys(\n    '[',\n    () => {\n      if (!canHandleEvent(true)) return\n      app.moveBackward()\n    },\n    undefined,\n    [app]\n  )\n\n  useHotkeys(\n    ']',\n    () => {\n      if (!canHandleEvent(true)) return\n      app.moveForward()\n    },\n    undefined,\n    [app]\n  )\n\n  useHotkeys(\n    'shift+[',\n    () => {\n      if (!canHandleEvent(true)) return\n      app.moveToBack()\n    },\n    undefined,\n    [app]\n  )\n\n  useHotkeys(\n    'shift+]',\n    () => {\n      if (!canHandleEvent(true)) return\n      app.moveToFront()\n    },\n    undefined,\n    [app]\n  )\n\n  useHotkeys(\n    'ctrl+shift+backspace,\u2318+shift+backspace',\n    (e) => {\n      if (!canHandleEvent()) return\n      if (app.settings.isDebugMode) {\n        app.resetDocument()\n      }\n      e.preventDefault()\n    },\n    undefined,\n    [app]\n  )\n\n  // Text Align\n\n  useHotkeys(\n    'alt+command+l,alt+ctrl+l',\n    (e) => {\n      if (!canHandleEvent(true)) return\n      app.style({ textAlign: AlignStyle.Start })\n      e.preventDefault()\n    },\n    undefined,\n    [app]\n  )\n\n  useHotkeys(\n    'alt+command+t,alt+ctrl+t',\n    (e) => {\n      if (!canHandleEvent(true)) return\n      app.style({ textAlign: AlignStyle.Middle })\n      e.preventDefault()\n    },\n    undefined,\n    [app]\n  )\n\n  useHotkeys(\n    'alt+command+r,alt+ctrl+r',\n    (e) => {\n      if (!canHandleEvent(true)) return\n      app.style({ textAlign: AlignStyle.End })\n      e.preventDefault()\n    },\n    undefined,\n    [app]\n  )\n}\n", "import type {\n  TLAsset,\n  TLBinding,\n  TLBoundsCorner,\n  TLBoundsEdge,\n  TLBoundsEventHandler,\n  TLBoundsHandleEventHandler,\n  TLCanvasEventHandler,\n  TLHandle,\n  TLKeyboardEventHandler,\n  TLPage,\n  TLPageState,\n  TLPinchEventHandler,\n  TLPointerEventHandler,\n  TLShape,\n  TLShapeBlurHandler,\n  TLShapeCloneHandler,\n  TLSnapLine,\n  TLUser,\n  TLWheelEventHandler,\n} from '@tldraw/core'\nimport { TDLanguage } from '~translations'\n\n/* -------------------------------------------------- */\n/*                         App                        */\n/* -------------------------------------------------- */\n\n// A base class for all classes that handle events from the Renderer,\n// including TDApp and all Tools.\nexport class TDEventHandler {\n  onPinchStart?: TLPinchEventHandler\n  onPinchEnd?: TLPinchEventHandler\n  onPinch?: TLPinchEventHandler\n  onKeyDown?: TLKeyboardEventHandler\n  onKeyUp?: TLKeyboardEventHandler\n  onPointerMove?: TLPointerEventHandler\n  onPointerUp?: TLPointerEventHandler\n  onPan?: TLWheelEventHandler\n  onZoom?: TLWheelEventHandler\n  onPointerDown?: TLPointerEventHandler\n  onPointCanvas?: TLCanvasEventHandler\n  onDoubleClickCanvas?: TLCanvasEventHandler\n  onRightPointCanvas?: TLCanvasEventHandler\n  onDragCanvas?: TLCanvasEventHandler\n  onReleaseCanvas?: TLCanvasEventHandler\n  onPointShape?: TLPointerEventHandler\n  onDoubleClickShape?: TLPointerEventHandler\n  onRightPointShape?: TLPointerEventHandler\n  onDragShape?: TLPointerEventHandler\n  onHoverShape?: TLPointerEventHandler\n  onUnhoverShape?: TLPointerEventHandler\n  onReleaseShape?: TLPointerEventHandler\n  onPointBounds?: TLBoundsEventHandler\n  onDoubleClickBounds?: TLBoundsEventHandler\n  onRightPointBounds?: TLBoundsEventHandler\n  onDragBounds?: TLBoundsEventHandler\n  onHoverBounds?: TLBoundsEventHandler\n  onUnhoverBounds?: TLBoundsEventHandler\n  onReleaseBounds?: TLBoundsEventHandler\n  onPointBoundsHandle?: TLBoundsHandleEventHandler\n  onDoubleClickBoundsHandle?: TLBoundsHandleEventHandler\n  onRightPointBoundsHandle?: TLBoundsHandleEventHandler\n  onDragBoundsHandle?: TLBoundsHandleEventHandler\n  onHoverBoundsHandle?: TLBoundsHandleEventHandler\n  onUnhoverBoundsHandle?: TLBoundsHandleEventHandler\n  onReleaseBoundsHandle?: TLBoundsHandleEventHandler\n  onPointHandle?: TLPointerEventHandler\n  onDoubleClickHandle?: TLPointerEventHandler\n  onRightPointHandle?: TLPointerEventHandler\n  onDragHandle?: TLPointerEventHandler\n  onHoverHandle?: TLPointerEventHandler\n  onUnhoverHandle?: TLPointerEventHandler\n  onReleaseHandle?: TLPointerEventHandler\n  onShapeBlur?: TLShapeBlurHandler\n  onShapeClone?: TLShapeCloneHandler\n}\n\nexport type TDDockPosition = 'bottom' | 'left' | 'right' | 'top'\n\n// The shape of the TldrawApp's React (zustand) store\nexport interface TDSnapshot {\n  settings: {\n    isCadSelectMode: boolean\n    isDarkMode: boolean\n    isDebugMode: boolean\n    isPenMode: boolean\n    isReadonlyMode: boolean\n    isZoomSnap: boolean\n    keepStyleMenuOpen: boolean\n    nudgeDistanceSmall: number\n    nudgeDistanceLarge: number\n    isFocusMode: boolean\n    isSnapping: boolean\n    showRotateHandles: boolean\n    showBindingHandles: boolean\n    showCloneHandles: boolean\n    showGrid: boolean\n    language: TDLanguage\n    dockPosition: TDDockPosition\n    exportBackground: TDExportBackground\n  }\n  appState: {\n    currentStyle: ShapeStyles\n    currentPageId: string\n    hoveredId?: string\n    activeTool: TDToolType\n    isToolLocked: boolean\n    isEmptyCanvas: boolean\n    isMenuOpen: boolean\n    status: string\n    snapLines: TLSnapLine[]\n    eraseLine: number[][]\n    isLoading: boolean\n    disableAssets: boolean\n    selectByContain?: boolean\n  }\n  document: TDDocument\n  room?: {\n    id: string\n    userId: string\n    users: Record<string, TDUser>\n  }\n}\n\nexport type TldrawPatch = Patch<TDSnapshot>\n\nexport type TldrawCommand = Command<TDSnapshot>\n\n// The shape of the files stored in JSON\nexport interface TDFile {\n  name: string\n  fileHandle: FileSystemFileHandle | null\n  document: TDDocument\n}\n\n// The shape of the Tldraw document\nexport interface TDDocument {\n  id: string\n  name: string\n  version: number\n  pages: Record<string, TDPage>\n  pageStates: Record<string, TLPageState>\n  assets: TDAssets\n}\n\n// The shape of a single page in the Tldraw document\nexport type TDPage = TLPage<TDShape, TDBinding>\n\n// A partial of a TDPage, used for commands / patches\nexport type PagePartial = {\n  shapes: Patch<TDPage['shapes']>\n  bindings: Patch<TDPage['bindings']>\n}\n\n// The meta information passed to TDShapeUtil components\nexport interface TDMeta {\n  isDarkMode: boolean\n}\n\n// The type of info given to shapes when transforming\nexport interface TransformInfo<T extends TLShape> {\n  type: TLBoundsEdge | TLBoundsCorner\n  initialShape: T\n  scaleX: number\n  scaleY: number\n  transformOrigin: number[]\n}\n\n// The status of a TDUser\nexport enum TDUserStatus {\n  Idle = 'idle',\n  Connecting = 'connecting',\n  Connected = 'connected',\n  Disconnected = 'disconnected',\n}\n\n// A TDUser, for multiplayer rooms\nexport interface TDUser extends TLUser {\n  activeShapes: TDShape[]\n  status: TDUserStatus\n  session?: boolean\n}\n\nexport type Theme = 'dark' | 'light'\n\nexport enum SessionType {\n  Transform = 'transform',\n  Translate = 'translate',\n  TransformSingle = 'transformSingle',\n  Brush = 'brush',\n  Arrow = 'arrow',\n  Draw = 'draw',\n  Erase = 'erase',\n  Rotate = 'rotate',\n  Handle = 'handle',\n  Grid = 'grid',\n  Edit = 'edit',\n}\n\nexport enum TDStatus {\n  Idle = 'idle',\n  PointingHandle = 'pointingHandle',\n  PointingBounds = 'pointingBounds',\n  PointingBoundsHandle = 'pointingBoundsHandle',\n  TranslatingLabel = 'translatingLabel',\n  TranslatingHandle = 'translatingHandle',\n  Translating = 'translating',\n  Transforming = 'transforming',\n  Rotating = 'rotating',\n  Pinching = 'pinching',\n  Brushing = 'brushing',\n  Creating = 'creating',\n  EditingText = 'editing-text',\n}\n\nexport type TDToolType =\n  | 'select'\n  | 'erase'\n  | TDShapeType.Text\n  | TDShapeType.Draw\n  | TDShapeType.Ellipse\n  | TDShapeType.Rectangle\n  | TDShapeType.Triangle\n  | TDShapeType.Line\n  | TDShapeType.Arrow\n  | TDShapeType.Sticky\n\nexport type Easing =\n  | 'linear'\n  | 'easeInQuad'\n  | 'easeOutQuad'\n  | 'easeInOutQuad'\n  | 'easeInCubic'\n  | 'easeOutCubic'\n  | 'easeInOutCubic'\n  | 'easeInQuart'\n  | 'easeOutQuart'\n  | 'easeInOutQuart'\n  | 'easeInQuint'\n  | 'easeOutQuint'\n  | 'easeInOutQuint'\n  | 'easeInSine'\n  | 'easeOutSine'\n  | 'easeInOutSine'\n  | 'easeInExpo'\n  | 'easeOutExpo'\n  | 'easeInOutExpo'\n\nexport enum MoveType {\n  Backward = 'backward',\n  Forward = 'forward',\n  ToFront = 'toFront',\n  ToBack = 'toBack',\n}\n\nexport enum AlignType {\n  Top = 'top',\n  CenterVertical = 'centerVertical',\n  Bottom = 'bottom',\n  Left = 'left',\n  CenterHorizontal = 'centerHorizontal',\n  Right = 'right',\n}\n\nexport enum StretchType {\n  Horizontal = 'horizontal',\n  Vertical = 'vertical',\n}\n\nexport enum DistributeType {\n  Horizontal = 'horizontal',\n  Vertical = 'vertical',\n}\n\nexport enum FlipType {\n  Horizontal = 'horizontal',\n  Vertical = 'vertical',\n}\n\n/* -------------------------------------------------- */\n/*                       Shapes                       */\n/* -------------------------------------------------- */\n\nexport enum TDShapeType {\n  Sticky = 'sticky',\n  Ellipse = 'ellipse',\n  Rectangle = 'rectangle',\n  Triangle = 'triangle',\n  Draw = 'draw',\n  Arrow = 'arrow',\n  Line = 'line',\n  Text = 'text',\n  Group = 'group',\n  Image = 'image',\n  Video = 'video',\n}\n\nexport enum Decoration {\n  Arrow = 'arrow',\n}\n\nexport interface TDBaseShape extends TLShape {\n  style: ShapeStyles\n  type: TDShapeType\n  label?: string\n  handles?: Record<string, TDHandle>\n}\n\nexport interface DrawShape extends TDBaseShape {\n  type: TDShapeType.Draw\n  points: number[][]\n  isComplete: boolean\n}\n\n// The extended handle (used for arrows)\nexport interface TDHandle extends TLHandle {\n  canBind?: boolean\n  bindingId?: string\n}\n\nexport interface RectangleShape extends TDBaseShape {\n  type: TDShapeType.Rectangle\n  size: number[]\n  label?: string\n  labelPoint?: number[]\n}\n\nexport interface EllipseShape extends TDBaseShape {\n  type: TDShapeType.Ellipse\n  radius: number[]\n  label?: string\n  labelPoint?: number[]\n}\n\nexport interface TriangleShape extends TDBaseShape {\n  type: TDShapeType.Triangle\n  size: number[]\n  label?: string\n  labelPoint?: number[]\n}\n\n// The shape created with the arrow tool\nexport interface ArrowShape extends TDBaseShape {\n  type: TDShapeType.Arrow\n  bend: number\n  handles: {\n    start: TDHandle\n    bend: TDHandle\n    end: TDHandle\n  }\n  decorations?: {\n    start?: Decoration\n    end?: Decoration\n    middle?: Decoration\n  }\n  label?: string\n  labelPoint?: number[]\n}\n\nexport interface ArrowBinding extends TLBinding {\n  handleId: keyof ArrowShape['handles']\n  distance: number\n  point: number[]\n}\n\nexport type TDBinding = ArrowBinding\n\nexport interface ImageShape extends TDBaseShape {\n  type: TDShapeType.Image\n  size: number[]\n  assetId: string\n}\n\nexport interface VideoShape extends TDBaseShape {\n  type: TDShapeType.Video\n  size: number[]\n  assetId: string\n  isPlaying: boolean\n  currentTime: number\n}\n\n// The shape created by the text tool\nexport interface TextShape extends TDBaseShape {\n  type: TDShapeType.Text\n  text: string\n}\n\n// The shape created by the sticky tool\nexport interface StickyShape extends TDBaseShape {\n  type: TDShapeType.Sticky\n  size: number[]\n  text: string\n}\n\n// The shape created when multiple shapes are grouped\nexport interface GroupShape extends TDBaseShape {\n  type: TDShapeType.Group\n  size: number[]\n  children: string[]\n}\n\n// A union of all shapes\nexport type TDShape =\n  | RectangleShape\n  | EllipseShape\n  | TriangleShape\n  | DrawShape\n  | ArrowShape\n  | TextShape\n  | GroupShape\n  | StickyShape\n  | ImageShape\n  | VideoShape\n\n/* ------------------ Shape Styles ------------------ */\n\nexport enum ColorStyle {\n  White = 'white',\n  LightGray = 'lightGray',\n  Gray = 'gray',\n  Black = 'black',\n  Green = 'green',\n  Cyan = 'cyan',\n  Blue = 'blue',\n  Indigo = 'indigo',\n  Violet = 'violet',\n  Red = 'red',\n  Orange = 'orange',\n  Yellow = 'yellow',\n}\n\nexport enum SizeStyle {\n  Small = 'small',\n  Medium = 'medium',\n  Large = 'large',\n}\n\nexport enum DashStyle {\n  Draw = 'draw',\n  Solid = 'solid',\n  Dashed = 'dashed',\n  Dotted = 'dotted',\n}\n\nexport enum FontSize {\n  Small = 'small',\n  Medium = 'medium',\n  Large = 'large',\n  ExtraLarge = 'extraLarge',\n}\n\nexport enum AlignStyle {\n  Start = 'start',\n  Middle = 'middle',\n  End = 'end',\n  Justify = 'justify',\n}\n\nexport enum FontStyle {\n  Script = 'script',\n  Sans = 'sans',\n  Serif = 'serif',\n  Mono = 'mono',\n}\n\nexport type ShapeStyles = {\n  color: ColorStyle\n  size: SizeStyle\n  dash: DashStyle\n  font?: FontStyle\n  textAlign?: AlignStyle\n  isFilled?: boolean\n  scale?: number\n}\n\nexport enum TDAssetType {\n  Image = 'image',\n  Video = 'video',\n}\n\nexport interface TDImageAsset extends TLAsset {\n  type: TDAssetType.Image\n  fileName: string\n  src: string\n  size: number[]\n}\n\nexport interface TDVideoAsset extends TLAsset {\n  type: TDAssetType.Video\n  fileName: string\n  src: string\n  size: number[]\n}\n\nexport type TDAsset = TDImageAsset | TDVideoAsset\n\nexport type TDAssets = Record<string, TDAsset>\n\n/* -------------------------------------------------- */\n/*                    Export                          */\n/* -------------------------------------------------- */\n\nexport enum TDExportType {\n  PNG = 'png',\n  JPG = 'jpeg',\n  WEBP = 'webp',\n  SVG = 'svg',\n  JSON = 'json',\n}\n\nexport interface TDExport {\n  name: string\n  type: string\n  blob: Blob\n}\n\nexport enum TDExportBackground {\n  Transparent = 'transparent',\n  Auto = 'auto',\n  Light = 'light',\n  Dark = 'dark',\n}\n\n/* -------------------------------------------------- */\n/*                    Type Helpers                    */\n/* -------------------------------------------------- */\n\nexport type ParametersExceptFirst<F> = F extends (arg0: any, ...rest: infer R) => any ? R : never\n\nexport type ExceptFirst<T extends unknown[]> = T extends [any, ...infer U] ? U : never\n\nexport type ExceptFirstTwo<T extends unknown[]> = T extends [any, any, ...infer U] ? U : never\n\nexport type PropsOfType<U> = {\n  [K in keyof TDShape]: TDShape[K] extends any ? (TDShape[K] extends U ? K : never) : never\n}[keyof TDShape]\n\nexport type Difference<A, B, C = A> = A extends B ? never : C\n\nexport type Intersection<A, B, C = A> = A extends B ? C : never\n\nexport type FilteredKeys<T, U> = {\n  [P in keyof T]: T[P] extends U ? P : never\n}[keyof T]\n\nexport type RequiredKeys<T> = {\n  [K in keyof T]-?: Difference<Record<string, unknown>, Pick<T, K>, K>\n}[keyof T]\n\nexport type MembersWithRequiredKey<T, U> = {\n  [P in keyof T]: Intersection<U, RequiredKeys<T[P]>, T[P]>\n}[keyof T]\n\nexport type MappedByType<U extends string, T extends { type: U }> = {\n  [P in T['type']]: T extends any ? (P extends T['type'] ? T : never) : never\n}\n\nexport type ShapesWithProp<U> = MembersWithRequiredKey<MappedByType<TDShapeType, TDShape>, U>\n\nexport type Patch<T> = Partial<{ [P in keyof T]: Patch<T[P]> }>\n\nexport interface Command<T extends { [key: string]: any }> {\n  id?: string\n  before: Patch<T>\n  after: Patch<T>\n}\n\nexport interface FileWithHandle extends File {\n  handle?: FileSystemFileHandle\n}\n\nexport interface FileWithDirectoryHandle extends File {\n  directoryHandle?: FileSystemDirectoryHandle\n}\n\n// The following typings implement the relevant parts of the File System Access\n// API. This can be removed once the specification reaches the Candidate phase\n// and is implemented as part of microsoft/TSJS-lib-generator.\n\nexport interface FileSystemHandlePermissionDescriptor {\n  mode?: 'read' | 'readwrite'\n}\n\nexport interface FileSystemHandle {\n  readonly kind: 'file' | 'directory'\n  readonly name: string\n\n  isSameEntry: (other: FileSystemHandle) => Promise<boolean>\n\n  queryPermission: (descriptor?: FileSystemHandlePermissionDescriptor) => Promise<PermissionState>\n  requestPermission: (descriptor?: FileSystemHandlePermissionDescriptor) => Promise<PermissionState>\n}\n", "import * as React from 'react'\nimport type { TldrawApp } from '~state'\n\nexport const TldrawContext = React.createContext<TldrawApp>({} as TldrawApp)\n\nconst useForceUpdate = () => {\n  const [_state, setState] = React.useState(0)\n  React.useEffect(() => setState(1))\n}\n\nexport function useTldrawApp() {\n  const context = React.useContext(TldrawContext)\n  return context\n}\n\nexport const ContainerContext = React.createContext({} as React.RefObject<HTMLDivElement>)\n\nexport function useContainer() {\n  const context = React.useContext(ContainerContext)\n  useForceUpdate()\n  return context\n}\n", "import * as React from 'react'\nimport { TDLanguage, getTranslation } from '~translations'\n\nexport function useTranslation(locale?: TDLanguage) {\n  return React.useMemo(() => {\n    return getTranslation(locale ?? navigator.language.split(/[-_]/)[0])\n  }, [locale])\n}\n", "import ar from './ar.json'\nimport da from './da.json'\nimport de from './de.json'\nimport en from './en.json'\nimport es from './es.json'\nimport fa from './fa.json'\nimport fr from './fr.json'\nimport gl from './gl.json'\nimport he from './he.json'\nimport it from './it.json'\nimport ja from './ja.json'\nimport ko_kr from './ko-kr.json'\nimport ku from './ku.json'\nimport main from './main.json'\nimport my from \"./my.json\"\nimport nb_no from './nb-no.json'\nimport ne from './ne.json'\nimport nn_no from './nn-no.json'\nimport pl from './pl.json'\nimport pt_br from './pt-br.json'\nimport pt_pt from './pt-pt.json'\nimport ru from './ru.json'\nimport sv from './sv.json'\nimport te from './te.json'\nimport th from './th.json'\nimport tr from './tr.json'\nimport uk from './uk.json'\nimport zh_cn from './zh-cn.json'\nimport zh_tw from './zh-tw.json'\n\n// The default language (english) must have a value for every message.\n// Other languages may have missing messages. If the application finds\n// a missing message for the current language, it will use the english\n// translation instead.\n\nexport const TRANSLATIONS: TDTranslations = [\n  { locale: 'ar', label: '\u0639\u0631\u0628\u064A', messages: ar },\n  { locale: 'da', label: 'Danish', messages: da },\n  { locale: 'de', label: 'Deutsch', messages: de },\n  { locale: 'en', label: 'English', messages: en },\n  { locale: 'es', label: 'Espa\u00F1ol', messages: es },\n  { locale: 'fa', label: '\u0641\u0627\u0631\u0633\u06CC', messages: fa },\n  { locale: 'fr', label: 'Fran\u00E7ais', messages: fr },\n  { locale: 'gl', label: 'Galego', messages: gl },\n  { locale: 'he', label: '\u05E2\u05D1\u05E8\u05D9\u05EA', messages: he },\n  { locale: 'it', label: 'Italiano', messages: it },\n  { locale: 'ja', label: '\u65E5\u672C\u8A9E', messages: ja },\n  { locale: 'ko-kr', label: '\uD55C\uAD6D\uC5B4', messages: ko_kr },\n  { locale: 'my', label: '\u1019\u103C\u1014\u103A\u1019\u102C\u1005\u102C', messages: my},\n  { locale: 'nb-no', label: 'Norwegian Bokm\u00E5l', messages: nb_no },\n  { locale: 'ne', label: '\u0928\u0947\u092A\u093E\u0932\u0940', messages: ne },\n  { locale: 'nn-no', label: 'Norwegian Nynorsk', messages: nn_no },\n  { locale: 'pl', label: 'Polski', messages: pl },\n  { locale: 'pt', label: 'Portugu\u00EAs - Europeu', messages: pt_pt },\n  { locale: 'pt-br', label: 'Portugu\u00EAs - Brasil', messages: pt_br },\n  { locale: 'ru', label: 'Russian', messages: ru },\n  { locale: 'sv', label: 'Svenska', messages: sv },\n  { locale: 'te', label: '\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41', messages: te },\n  { locale: 'tr', label: 'T\u00FCrk\u00E7e', messages: tr },\n  { locale: 'uk', label: 'Ukrainian', messages: uk },\n  { locale: 'zh-ch', label: '\u7B80\u4F53\u4E2D\u6587', messages: zh_cn },\n  { locale: 'zh-tw', label: '\u7E41\u9AD4\u4E2D\u6587 (\u53F0\u7063)', messages: zh_tw },\n  { locale: 'th', label: '\u0E20\u0E32\u0E29\u0E32\u0E44\u0E17\u0E22', messages: th },\n  { locale: 'ku', label: '\u06A9\u0648\u0631\u062F\u06CC', messages: ku },\n]\n\n/* ----------------- (do not change) ---------------- */\n\nTRANSLATIONS.sort((a, b) => (a.locale < b.locale ? -1 : 1))\n\nexport type TDTranslation = {\n  readonly locale: string\n  readonly label: string\n  readonly messages: Partial<typeof main>\n}\n\nexport type TDTranslations = TDTranslation[]\n\nexport type TDLanguage = TDTranslations[number]['locale']\n\nexport function getTranslation(locale: TDLanguage): TDTranslation {\n  const translation = TRANSLATIONS.find((t) => t.locale === locale)\n\n  return {\n    locale,\n    label: translation?.label ?? locale,\n    messages: {\n      ...main,\n      ...translation?.messages,\n    },\n  }\n}\n", "import * as React from 'react'\n\nexport type DialogState = 'saveFirstTime' | 'saveAgain'\n\ninterface AlertDialogProps {\n  dialogState: DialogState | null\n  setDialogState: (dialogState: DialogState | null) => void\n  onYes: (() => void) | null\n  onNo: (() => void) | null\n  onCancel: (() => void) | null\n  openDialog: (\n    dialogState: DialogState,\n    onYes: () => void,\n    onNo: () => void,\n    onCancel: () => void\n  ) => void\n}\n\nexport const AlertDialogContext = React.createContext<AlertDialogProps>({} as AlertDialogProps)\n\nexport const useDialog = () => {\n  const context = React.useContext(AlertDialogContext)\n  if (!context) throw new Error('useCtx must be inside a Provider with a value')\n  return context\n}\n", "import * as React from 'react'\nimport { FallbackProps } from 'react-error-boundary'\nimport { Divider } from '~components/Primitives/Divider'\nimport { RowButton } from '~components/Primitives/RowButton'\nimport { useTldrawApp } from '~hooks'\nimport { styled } from '~styles'\n\nexport function ErrorFallback({ error, resetErrorBoundary }: FallbackProps): any {\n  const app = useTldrawApp()\n\n  const refreshPage = () => {\n    window.location.reload()\n    resetErrorBoundary()\n  }\n\n  const copyError = () => {\n    const textarea = document.createElement('textarea')\n    textarea.value = error.message\n    document.body.appendChild(textarea)\n    textarea.select()\n    document.execCommand('copy')\n    textarea.remove()\n  }\n\n  const downloadBackup = () => {\n    app.saveProjectAs()\n  }\n\n  const resetDocument = () => {\n    app.resetDocument()\n    resetErrorBoundary()\n  }\n\n  return (\n    <Container>\n      <InnerContainer>\n        <div>We've encountered an error!</div>\n        <pre>\n          <code>{error.message}</code>\n        </pre>\n        <Buttons>\n          <RowButton onClick={copyError}>Copy Error</RowButton>\n          <RowButton onClick={refreshPage}>Refresh Page</RowButton>\n        </Buttons>\n        <Divider />\n        <p>\n          Keep getting this error?{' '}\n          <a onClick={downloadBackup} title=\"Download your project\">\n            Download your project\n          </a>{' '}\n          as a backup and then{' '}\n          <a onClick={resetDocument} title=\"Reset the document\">\n            reset the document\n          </a>\n          .\n        </p>\n      </InnerContainer>\n    </Container>\n  )\n}\n\nconst Container = styled('div', {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  width: '100%',\n  height: '100%',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  backgroundColor: '$canvas',\n})\n\nconst InnerContainer = styled('div', {\n  backgroundColor: '$panel',\n  border: '1px solid $panelContrast',\n  padding: '$5',\n  borderRadius: 8,\n  boxShadow: '$panel',\n  maxWidth: 320,\n  color: '$text',\n  fontFamily: '$ui',\n  fontSize: '$2',\n  textAlign: 'center',\n  display: 'flex',\n  flexDirection: 'column',\n  gap: '$3',\n  '& > pre': {\n    marginTop: '$3',\n    marginBottom: '$3',\n    textAlign: 'left',\n    whiteSpace: 'pre-wrap',\n    backgroundColor: '$hover',\n    padding: '$4',\n    borderRadius: '$2',\n    fontFamily: '\"Menlo\", \"Monaco\", monospace',\n    fontWeight: 500,\n  },\n  '& p': {\n    fontFamily: '$body',\n    lineHeight: 1.7,\n    padding: '$5',\n    margin: 0,\n  },\n  '& a': {\n    color: '$text',\n    cursor: 'pointer',\n    textDecoration: 'underline',\n  },\n  '& hr': {\n    marginLeft: '-$5',\n    marginRight: '-$5',\n  },\n})\n\nconst Buttons = styled('div', {\n  display: 'flex',\n  '& > button > div': {\n    justifyContent: 'center',\n    textAlign: 'center',\n  },\n})\n", "import { DotFilledIcon } from '@radix-ui/react-icons'\nimport * as React from 'react'\nimport { IconButton } from '~components/Primitives/IconButton/IconButton'\nimport { styled } from '~styles'\n\ninterface FocusButtonProps {\n  onSelect: () => void\n}\n\nexport function FocusButton({ onSelect }: FocusButtonProps) {\n  return (\n    <StyledButtonContainer>\n      <IconButton onClick={onSelect}>\n        <DotFilledIcon />\n      </IconButton>\n    </StyledButtonContainer>\n  )\n}\n\nconst StyledButtonContainer = styled('div', {\n  opacity: 1,\n  zIndex: 100,\n  backgroundColor: 'transparent',\n\n  '& svg': {\n    color: '$text',\n  },\n\n  '&:hover svg': {\n    color: '$text',\n  },\n})\n", "import { styled } from '~styles'\n\nexport const IconButton = styled('button', {\n  position: 'relative',\n  height: '32px',\n  width: '32px',\n  backgroundColor: '$panel',\n  borderRadius: '4px',\n  padding: '0',\n  margin: '0',\n  outline: 'none',\n  border: 'none',\n  pointerEvents: 'all',\n  fontSize: '$0',\n  color: '$text',\n  cursor: 'pointer',\n  display: 'grid',\n  alignItems: 'center',\n  justifyContent: 'center',\n\n  '& > *': {\n    gridRow: 1,\n    gridColumn: 1,\n  },\n\n  '&:disabled': {\n    opacity: '0.5',\n  },\n\n  '& > span': {\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    alignItems: 'center',\n  },\n\n  variants: {\n    bp: {\n      mobile: {\n        backgroundColor: 'transparent',\n      },\n      small: {\n        '&:hover:not(:disabled)': {\n          backgroundColor: '$hover',\n        },\n      },\n    },\n    size: {\n      small: {\n        height: 32,\n        width: 32,\n        '& svg:nth-of-type(1)': {\n          height: '16px',\n          width: '16px',\n        },\n      },\n      medium: {\n        height: 44,\n        width: 44,\n        '& svg:nth-of-type(1)': {\n          height: '18px',\n          width: '18px',\n        },\n      },\n      large: {\n        height: 44,\n        width: 44,\n        '& svg:nth-of-type(1)': {\n          height: '20px',\n          width: '20px',\n        },\n      },\n    },\n    isActive: {\n      true: {\n        color: '$selected',\n      },\n    },\n  },\n})\n", "import * as React from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { useTldrawApp } from '~hooks'\nimport { styled } from '~styles'\nimport type { TDSnapshot } from '~types'\n\nconst loadingSelector = (s: TDSnapshot) => s.appState.isLoading\n\nexport function Loading() {\n  const app = useTldrawApp()\n  const isLoading = app.useStore(loadingSelector)\n\n  return (\n    <StyledLoadingPanelContainer hidden={!isLoading}>\n      <FormattedMessage id=\"loading\" values={{ dots: '...' }} />\n    </StyledLoadingPanelContainer>\n  )\n}\n\nconst StyledLoadingPanelContainer = styled('div', {\n  position: 'absolute',\n  top: 0,\n  left: '50%',\n  transform: `translate(-50%, 0)`,\n  borderBottomLeftRadius: '12px',\n  borderBottomRightRadius: '12px',\n  padding: '8px 16px',\n  fontFamily: 'var(--fonts-ui)',\n  fontSize: 'var(--fontSizes-1)',\n  boxShadow: 'var(--shadows-panel)',\n  backgroundColor: 'white',\n  zIndex: 200,\n  pointerEvents: 'none',\n  '& > div > *': {\n    pointerEvents: 'all',\n  },\n  variants: {\n    transform: {\n      hidden: {\n        transform: `translate(-50%, 100%)`,\n      },\n      visible: {\n        transform: `translate(-50%, 0%)`,\n      },\n    },\n  },\n})\n", "import * as AlertDialogPrimitive from '@radix-ui/react-alert-dialog'\nimport * as React from 'react'\nimport { FormattedMessage, useIntl } from 'react-intl'\nimport { DialogState, useDialog } from '~hooks'\nimport { styled } from '~styles'\n\ninterface ContentProps {\n  children: React.ReactNode\n  onClose?: () => void\n  container: any\n}\n\nfunction Content({ children, onClose, container }: ContentProps) {\n  const handleKeyDown = (event: React.KeyboardEvent) => {\n    switch (event.key) {\n      case 'Escape':\n        onClose?.()\n        break\n    }\n  }\n  return (\n    <AlertDialogPrimitive.Portal container={container}>\n      <StyledOverlay />\n      <StyledContent onKeyDown={handleKeyDown}>{children}</StyledContent>\n    </AlertDialogPrimitive.Portal>\n  )\n}\n\nconst StyledDescription = styled(AlertDialogPrimitive.Description, {\n  marginBottom: 20,\n  color: '$text',\n  fontSize: '$2',\n  lineHeight: 1.5,\n  textAlign: 'center',\n  maxWidth: '62%',\n  minWidth: 0,\n  alignSelf: 'center',\n})\n\nexport const AlertDialogRoot = AlertDialogPrimitive.Root\nexport const AlertDialogContent = Content\nexport const AlertDialogDescription = StyledDescription\nexport const AlertDialogAction = AlertDialogPrimitive.Action\nexport const AlertDialogCancel = AlertDialogPrimitive.Cancel\n\nexport const AlertDialog = ({ container }: { container: any }) => {\n  const { setDialogState, dialogState, onCancel, onNo, onYes } = useDialog()\n  const intl = useIntl()\n  const descriptions: Record<DialogState, string> = {\n    saveFirstTime: intl.formatMessage({ id: 'dialog.save.firsttime' }),\n    saveAgain: intl.formatMessage({ id: 'dialog.save.again' }),\n  }\n\n  return (\n    <AlertDialogRoot open={dialogState !== null}>\n      <AlertDialogContent onClose={() => setDialogState(null)} container={container}>\n        {dialogState && (\n          <AlertDialogDescription>{descriptions[dialogState]}</AlertDialogDescription>\n        )}\n        <div\n          style={{\n            width: '100%',\n            gap: '$6',\n            display: 'flex',\n            justifyContent: 'space-between',\n          }}\n        >\n          {onCancel && (\n            <AlertDialogCancel asChild>\n              <Button\n                css={{ color: '$text' }}\n                onClick={() => {\n                  onCancel()\n                  setDialogState(null)\n                }}\n              >\n                <FormattedMessage id=\"dialog.cancel\" />\n              </Button>\n            </AlertDialogCancel>\n          )}\n          <div style={{ flexShrink: 0 }}>\n            {onNo && (\n              <AlertDialogAction asChild>\n                <Button\n                  onClick={() => {\n                    onNo()\n                    setDialogState(null)\n                  }}\n                >\n                  <FormattedMessage id=\"dialog.no\" />\n                </Button>\n              </AlertDialogAction>\n            )}\n            {onYes && (\n              <AlertDialogAction asChild>\n                <Button\n                  css={{ backgroundColor: '#2F80ED', color: 'White' }}\n                  onClick={() => {\n                    onYes()\n                    setDialogState(null)\n                  }}\n                >\n                  <FormattedMessage id=\"dialog.yes\" />\n                </Button>\n              </AlertDialogAction>\n            )}\n          </div>\n        </div>\n      </AlertDialogContent>\n    </AlertDialogRoot>\n  )\n}\n\nconst StyledOverlay = styled(AlertDialogPrimitive.Overlay, {\n  position: 'fixed',\n  inset: 0,\n  backgroundColor: 'rgba(0, 0, 0, .15)',\n  pointerEvents: 'all',\n})\n\nexport const StyledDialogOverlay = styled(AlertDialogPrimitive.Overlay, {\n  backgroundColor: 'rgba(0, 0, 0, .15)',\n  position: 'absolute',\n  pointerEvents: 'all',\n  inset: 0,\n})\n\nconst StyledContent = styled(AlertDialogPrimitive.Content, {\n  position: 'fixed',\n  font: '$ui',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 'max-content',\n  padding: '$3',\n  pointerEvents: 'all',\n  backgroundColor: '$panel',\n  borderRadius: '$3',\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  fontFamily: '$ui',\n  border: '1px solid $panelContrast',\n  boxShadow: '$panel',\n})\n\nexport const Button = styled('button', {\n  all: 'unset',\n  display: 'inline-flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  borderRadius: '$2',\n  padding: '0 15px',\n  fontSize: '$1',\n  lineHeight: 1,\n  fontWeight: 'normal',\n  height: 36,\n  color: '$text',\n  cursor: 'pointer',\n  minWidth: 48,\n})\n", "import * as Dialog from '@radix-ui/react-alert-dialog'\nimport { Pencil1Icon } from '@radix-ui/react-icons'\nimport * as React from 'react'\nimport { FormattedMessage, useIntl } from 'react-intl'\nimport { useContainer, useTldrawApp } from '~hooks'\nimport { styled } from '~styles'\nimport { TextField } from '../TextField'\nimport { Button } from './AlertDialog'\n\ninterface FilenameDialogProps {\n  isOpen: boolean\n  onClose: () => void\n}\n\nexport const FilenameDialog = ({ isOpen, onClose }: FilenameDialogProps) => {\n  const app = useTldrawApp()\n  const container = useContainer()\n  const intl = useIntl()\n  const [filename, setFilename] = React.useState(app.document.name)\n\n  const handleChange = React.useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value.trimStart()\n    setFilename(value)\n  }, [])\n\n  function stopPropagation(e: React.KeyboardEvent<HTMLDivElement>) {\n    e.stopPropagation()\n  }\n\n  const handleTextFieldKeyDown = React.useCallback((e: React.KeyboardEvent<HTMLInputElement>) => {\n    switch (e.key) {\n      case 'Enter': {\n        app.saveProjectAs(filename)\n        onClose()\n        break\n      }\n      case 'Escape': {\n        onClose()\n        break\n      }\n    }\n  }, [])\n\n  return (\n    <Dialog.Root open={isOpen}>\n      <Dialog.Portal container={container.current}>\n        <StyledDialogOverlay onPointerDown={onClose} />\n        <StyledDialogContent dir=\"ltr\" onKeyDown={stopPropagation} onKeyUp={stopPropagation}>\n          <Input\n            placeholder={intl.formatMessage({ id: 'enter.file.name' })}\n            value={filename}\n            onChange={handleChange}\n            onKeyDown={handleTextFieldKeyDown}\n            icon={<Pencil1Icon />}\n          />\n          <ActionWrapper>\n            <Dialog.Action asChild>\n              <Button onClick={onClose}>\n                <FormattedMessage id=\"cancel\" />\n              </Button>\n            </Dialog.Action>\n            <Dialog.Action asChild>\n              <Button\n                css={{ backgroundColor: '#2F80ED', color: 'White' }}\n                onClick={() => {\n                  // Remove the file extension if the user entered it\n                  const name = filename.trim().replace(/\\.tldr$/, '')\n                  app.saveProjectAs(name)\n                  onClose()\n                }}\n              >\n                <FormattedMessage id=\"save\" />\n              </Button>\n            </Dialog.Action>\n          </ActionWrapper>\n        </StyledDialogContent>\n      </Dialog.Portal>\n    </Dialog.Root>\n  )\n}\nconst StyledDialogContent = styled(Dialog.Content, {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  minWidth: 300,\n  maxWidth: 'fit-content',\n  maxHeight: '85vh',\n  marginTop: '-5vh',\n  pointerEvents: 'all',\n  backgroundColor: '$panel',\n  padding: '$3',\n  borderRadius: '$2',\n  font: '$ui',\n  zIndex: 999999,\n  '&:focus': {\n    outline: 'none',\n  },\n})\n\nconst StyledDialogOverlay = styled(Dialog.Overlay, {\n  backgroundColor: 'rgba(0, 0, 0, .15)',\n  position: 'absolute',\n  pointerEvents: 'all',\n  inset: 0,\n  zIndex: 999998,\n})\n\nconst ActionWrapper = styled('div', {\n  width: '100%',\n  display: 'flex',\n  alignItems: 'center',\n  gap: 8,\n  justifyContent: 'flex-end',\n  marginTop: 10,\n})\n\nconst Input = styled(TextField, {\n  background: '$hover',\n})\n", "import * as React from 'react'\nimport { SmallIcon } from '~components/Primitives/SmallIcon'\nimport { styled } from '~styles'\n\nexport interface TextFieldProps extends React.HTMLProps<HTMLInputElement> {\n  icon?: React.ReactElement\n}\n\nexport const TextField = React.forwardRef<HTMLInputElement, TextFieldProps>(\n  ({ icon, ...rest }, ref) => {\n    return (\n      <StyledInputWrapper>\n        <StyledInput {...rest} ref={ref} />\n        {icon ? <StyledInputIcon>{icon}</StyledInputIcon> : null}\n      </StyledInputWrapper>\n    )\n  }\n)\n\nconst StyledInputWrapper = styled('div', {\n  position: 'relative',\n  width: '100%',\n  height: 'min-content',\n})\n\nconst StyledInput = styled('input', {\n  color: '$text',\n  border: 'none',\n  textAlign: 'left',\n  width: '100%',\n  paddingLeft: '$3',\n  paddingRight: '$6',\n  backgroundColor: '$background',\n\n  height: '32px',\n  outline: 'none',\n  fontFamily: '$ui',\n  fontSize: '$1',\n  '&:focus': {\n    backgroundColor: '$hover',\n  },\n  borderRadius: '$2',\n})\n\nconst StyledInputIcon = styled(SmallIcon, {\n  top: 0,\n  right: 0,\n  position: 'absolute',\n  paddingLeft: '$3',\n  paddingRight: '$3',\n  pointerEvents: 'none',\n  color: '$text',\n})\n", "import * as React from 'react'\nimport { breakpoints } from '~components/breakpoints'\nimport { useTldrawApp } from '~hooks'\nimport { styled } from '~styles'\nimport type { TDSnapshot } from '~types'\nimport { ActionButton } from './ActionButton'\nimport { BackToContent } from './BackToContent'\nimport { DeleteButton } from './DeleteButton'\nimport { HelpPanel } from './HelpPanel'\nimport { PrimaryTools } from './PrimaryTools'\nimport { StatusBar } from './StatusBar'\n\nconst isDebugModeSelector = (s: TDSnapshot) => s.settings.isDebugMode\nconst dockPositionState = (s: TDSnapshot) => s.settings.dockPosition\n\ninterface ToolsPanelProps {\n  onBlur?: React.FocusEventHandler\n}\n\nexport const ToolsPanel = React.memo(function ToolsPanel({ onBlur }: ToolsPanelProps) {\n  const app = useTldrawApp()\n  const side = app.useStore(dockPositionState)\n  const isDebugMode = app.useStore(isDebugModeSelector)\n\n  return (\n    <>\n      <StyledToolsPanelContainer side={side} onBlur={onBlur} bp={breakpoints} debug={isDebugMode}>\n        <StyledCenterWrap id=\"TD-Tools\">\n          <BackToContent />\n          <StyledPrimaryTools\n            orientation={side === 'bottom' || side === 'top' ? 'horizontal' : 'vertical'}\n          >\n            <ActionButton />\n            <PrimaryTools />\n            <DeleteButton />\n          </StyledPrimaryTools>\n        </StyledCenterWrap>\n      </StyledToolsPanelContainer>\n      <HelpPanel />\n      {isDebugMode && (\n        <StyledStatusWrap>\n          <StatusBar />\n        </StyledStatusWrap>\n      )}\n    </>\n  )\n})\n\nconst StyledToolsPanelContainer = styled('div', {\n  position: 'absolute',\n  width: '100%',\n  minWidth: 0,\n  maxWidth: '100%',\n  height: 64,\n  gap: '$4',\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  zIndex: 200,\n  overflow: 'hidden',\n  pointerEvents: 'none',\n  '& > div > *': {\n    pointerEvents: 'all',\n  },\n  variants: {\n    debug: {\n      true: {},\n      false: {},\n    },\n    bp: {\n      mobile: {},\n      small: {},\n      medium: {},\n      large: {},\n    },\n    side: {\n      top: {\n        width: '100%',\n        height: 64,\n        left: 0,\n        right: 0,\n        top: 45,\n      },\n      right: { width: 64, height: '100%', top: 0, right: 0 },\n      bottom: {\n        width: '100%',\n        left: 0,\n        right: 0,\n        bottom: 4,\n      },\n      left: { width: 64, height: '100%', left: 0 },\n    },\n  },\n  compoundVariants: [\n    {\n      side: 'top',\n      bp: 'large',\n      css: {\n        top: 0,\n      },\n    },\n    {\n      side: 'bottom',\n      debug: true,\n      css: {\n        bottom: 44,\n      },\n    },\n  ],\n})\n\nconst StyledCenterWrap = styled('div', {\n  display: 'flex',\n  width: 'fit-content',\n  height: 'fit-content',\n  alignItems: 'center',\n  justifyContent: 'center',\n  flexDirection: 'column',\n  gap: '$4',\n})\n\nconst StyledStatusWrap = styled('div', {\n  position: 'absolute',\n  bottom: '0px',\n  left: '0px',\n  right: '0px',\n  height: '40px',\n  width: '100%',\n  maxWidth: '100%',\n})\n\nconst StyledPrimaryTools = styled('div', {\n  position: 'relative',\n  display: 'flex',\n  alignItems: 'center',\n  height: 'fit-content',\n  gap: '$3',\n  variants: {\n    orientation: {\n      horizontal: {\n        flexDirection: 'row',\n      },\n      vertical: {\n        flexDirection: 'column',\n      },\n    },\n  },\n})\n", "import * as DropdownMenu from '@radix-ui/react-dropdown-menu'\nimport {\n  AlignBottomIcon,\n  AlignCenterHorizontallyIcon,\n  AlignCenterVerticallyIcon,\n  AlignLeftIcon,\n  AlignRightIcon,\n  AlignTopIcon,\n  AngleIcon,\n  ArrowDownIcon,\n  ArrowUpIcon,\n  AspectRatioIcon,\n  BoxIcon,\n  CopyIcon,\n  DotsHorizontalIcon,\n  GroupIcon,\n  LockClosedIcon,\n  LockOpen1Icon,\n  PinBottomIcon,\n  PinTopIcon,\n  RotateCounterClockwiseIcon,\n  SpaceEvenlyHorizontallyIcon,\n  SpaceEvenlyVerticallyIcon,\n  StretchHorizontallyIcon,\n  StretchVerticallyIcon,\n} from '@radix-ui/react-icons'\nimport * as React from 'react'\nimport { useIntl } from 'react-intl'\nimport { Divider } from '~components/Primitives/Divider'\nimport { DMContent } from '~components/Primitives/DropdownMenu'\nimport { ToolButton } from '~components/Primitives/ToolButton'\nimport { Tooltip } from '~components/Primitives/Tooltip/Tooltip'\nimport { useTldrawApp } from '~hooks'\nimport { styled } from '~styles'\nimport { AlignType, DistributeType, StretchType, TDSnapshot } from '~types'\n\nconst dockPositionState = (s: TDSnapshot) => s.settings.dockPosition\n\nconst selectedShapesCountSelector = (s: TDSnapshot) =>\n  s.document.pageStates[s.appState.currentPageId].selectedIds.length\n\nconst isAllLockedSelector = (s: TDSnapshot) => {\n  const page = s.document.pages[s.appState.currentPageId]\n  const { selectedIds } = s.document.pageStates[s.appState.currentPageId]\n  return selectedIds.every((id) => page.shapes[id].isLocked)\n}\n\nconst isAllAspectLockedSelector = (s: TDSnapshot) => {\n  const page = s.document.pages[s.appState.currentPageId]\n  const { selectedIds } = s.document.pageStates[s.appState.currentPageId]\n  return selectedIds.every((id) => page.shapes[id].isAspectRatioLocked)\n}\n\nconst isAllGroupedSelector = (s: TDSnapshot) => {\n  const page = s.document.pages[s.appState.currentPageId]\n  const selectedShapes = s.document.pageStates[s.appState.currentPageId].selectedIds.map(\n    (id) => page.shapes[id]\n  )\n\n  return selectedShapes.every(\n    (shape) =>\n      shape.children !== undefined ||\n      (shape.parentId === selectedShapes[0].parentId &&\n        selectedShapes[0].parentId !== s.appState.currentPageId)\n  )\n}\n\nconst hasSelectionSelector = (s: TDSnapshot) => {\n  const { selectedIds } = s.document.pageStates[s.appState.currentPageId]\n  return selectedIds.length > 0\n}\n\nconst hasMultipleSelectionSelector = (s: TDSnapshot) => {\n  const { selectedIds } = s.document.pageStates[s.appState.currentPageId]\n  return selectedIds.length > 1\n}\n\nexport function ActionButton() {\n  const app = useTldrawApp()\n  const intl = useIntl()\n\n  const isAllLocked = app.useStore(isAllLockedSelector)\n\n  const isAllAspectLocked = app.useStore(isAllAspectLockedSelector)\n\n  const isAllGrouped = app.useStore(isAllGroupedSelector)\n\n  const hasSelection = app.useStore(hasSelectionSelector)\n\n  const hasMultipleSelection = app.useStore(hasMultipleSelectionSelector)\n\n  const selectedShapesCount = app.useStore(selectedShapesCountSelector)\n\n  const dockPosition = app.useStore(dockPositionState)\n\n  const hasTwoOrMore = selectedShapesCount > 1\n\n  const hasThreeOrMore = selectedShapesCount > 2\n\n  const handleRotate = React.useCallback(() => {\n    app.rotate()\n  }, [app])\n\n  const handleDuplicate = React.useCallback(() => {\n    app.duplicate()\n  }, [app])\n\n  const handleToggleLocked = React.useCallback(() => {\n    app.toggleLocked()\n  }, [app])\n\n  const handleToggleAspectRatio = React.useCallback(() => {\n    app.toggleAspectRatioLocked()\n  }, [app])\n\n  const handleGroup = React.useCallback(() => {\n    app.group()\n  }, [app])\n\n  const handleMoveToBack = React.useCallback(() => {\n    app.moveToBack()\n  }, [app])\n\n  const handleMoveBackward = React.useCallback(() => {\n    app.moveBackward()\n  }, [app])\n\n  const handleMoveForward = React.useCallback(() => {\n    app.moveForward()\n  }, [app])\n\n  const handleMoveToFront = React.useCallback(() => {\n    app.moveToFront()\n  }, [app])\n\n  const handleResetAngle = React.useCallback(() => {\n    app.setShapeProps({ rotation: 0 })\n  }, [app])\n\n  const alignTop = React.useCallback(() => {\n    app.align(AlignType.Top)\n  }, [app])\n\n  const alignCenterVertical = React.useCallback(() => {\n    app.align(AlignType.CenterVertical)\n  }, [app])\n\n  const alignBottom = React.useCallback(() => {\n    app.align(AlignType.Bottom)\n  }, [app])\n\n  const stretchVertically = React.useCallback(() => {\n    app.stretch(StretchType.Vertical)\n  }, [app])\n\n  const distributeVertically = React.useCallback(() => {\n    app.distribute(DistributeType.Vertical)\n  }, [app])\n\n  const alignLeft = React.useCallback(() => {\n    app.align(AlignType.Left)\n  }, [app])\n\n  const alignCenterHorizontal = React.useCallback(() => {\n    app.align(AlignType.CenterHorizontal)\n  }, [app])\n\n  const alignRight = React.useCallback(() => {\n    app.align(AlignType.Right)\n  }, [app])\n\n  const stretchHorizontally = React.useCallback(() => {\n    app.stretch(StretchType.Horizontal)\n  }, [app])\n\n  const distributeHorizontally = React.useCallback(() => {\n    app.distribute(DistributeType.Horizontal)\n  }, [app])\n\n  const handleMenuOpenChange = React.useCallback(\n    (open: boolean) => {\n      app.setMenuOpen(open)\n    },\n    [app]\n  )\n\n  const contentSide = dockPosition === 'bottom' || dockPosition === 'top' ? 'top' : dockPosition\n\n  return (\n    <DropdownMenu.Root dir=\"ltr\" onOpenChange={handleMenuOpenChange}>\n      <DropdownMenu.Trigger dir=\"ltr\" asChild id=\"TD-Tools-Dots\">\n        <ToolButton aria-label={intl.formatMessage({ id: 'shape.options' })} variant=\"circle\">\n          <DotsHorizontalIcon />\n        </ToolButton>\n      </DropdownMenu.Trigger>\n      <DMContent sideOffset={16} side={contentSide}>\n        <>\n          <ButtonsRow>\n            <Tooltip label={intl.formatMessage({ id: 'duplicate' })} kbd={`#D`} id=\"TD-Tools-Copy\">\n              <ToolButton\n                aria-label={intl.formatMessage({ id: 'duplicate' })}\n                disabled={!hasSelection}\n                onClick={handleDuplicate}\n              >\n                <CopyIcon />\n              </ToolButton>\n            </Tooltip>\n            <Tooltip label={intl.formatMessage({ id: 'rotate' })} id=\"TD-Tools-Rotate\">\n              <ToolButton\n                aria-label={intl.formatMessage({ id: 'rotate' })}\n                disabled={!hasSelection}\n                onClick={handleRotate}\n              >\n                <RotateCounterClockwiseIcon />\n              </ToolButton>\n            </Tooltip>\n            <Tooltip\n              label={intl.formatMessage({ id: isAllLocked ? 'unlock' : 'lock' })}\n              kbd={`#L`}\n              id=\"TD-Tools-Lock\"\n            >\n              <ToolButton\n                aria-label={intl.formatMessage({ id: isAllLocked ? 'unlock' : 'lock' })}\n                disabled={!hasSelection}\n                onClick={handleToggleLocked}\n              >\n                {isAllLocked ? <LockClosedIcon /> : <LockOpen1Icon />}\n              </ToolButton>\n            </Tooltip>\n            <Tooltip\n              label={intl.formatMessage({\n                id: isAllAspectLocked ? 'unlock.aspect.ratio' : 'lock.aspect.ratio',\n              })}\n              id=\"TD-Tools-AspectRatio\"\n            >\n              <ToolButton\n                aria-label={intl.formatMessage({\n                  id: isAllAspectLocked ? 'unlock.aspect.ratio' : 'lock.aspect.ratio',\n                })}\n                disabled={!hasSelection}\n                onClick={handleToggleAspectRatio}\n              >\n                {isAllAspectLocked ? <AspectRatioIcon /> : <BoxIcon />}\n              </ToolButton>\n            </Tooltip>\n            <Tooltip label={intl.formatMessage({ id: 'group' })} kbd={`#G`} id=\"TD-Tools-Group\">\n              <ToolButton\n                aria-label={intl.formatMessage({ id: 'group' })}\n                disabled={!hasSelection || (!isAllGrouped && !hasMultipleSelection)}\n                onClick={handleGroup}\n              >\n                <GroupIcon />\n              </ToolButton>\n            </Tooltip>\n          </ButtonsRow>\n          <ButtonsRow>\n            <Tooltip\n              label={intl.formatMessage({ id: 'move.to.back' })}\n              kbd={`#\u21E7[`}\n              id=\"TD-Tools-PinBottom\"\n            >\n              <ToolButton\n                aria-label={intl.formatMessage({ id: 'move.to.back' })}\n                disabled={!hasSelection}\n                onClick={handleMoveToBack}\n              >\n                <PinBottomIcon />\n              </ToolButton>\n            </Tooltip>\n            <Tooltip\n              label={intl.formatMessage({ id: 'move.backward' })}\n              kbd={`#[`}\n              id=\"TD-Tools-ArrowDown\"\n            >\n              <ToolButton\n                aria-label={intl.formatMessage({ id: 'move.backward' })}\n                disabled={!hasSelection}\n                onClick={handleMoveBackward}\n              >\n                <ArrowDownIcon />\n              </ToolButton>\n            </Tooltip>\n            <Tooltip\n              label={intl.formatMessage({ id: 'move.forward' })}\n              kbd={`#]`}\n              id=\"TD-Tools-ArrowUp\"\n            >\n              <ToolButton\n                aria-label={intl.formatMessage({ id: 'move.forward' })}\n                disabled={!hasSelection}\n                onClick={handleMoveForward}\n              >\n                <ArrowUpIcon />\n              </ToolButton>\n            </Tooltip>\n            <Tooltip\n              label={intl.formatMessage({ id: 'move.to.front' })}\n              kbd={`#\u21E7]`}\n              id=\"TD-Tools-PinTop\"\n            >\n              <ToolButton\n                aria-label={intl.formatMessage({ id: 'move.to.front' })}\n                disabled={!hasSelection}\n                onClick={handleMoveToFront}\n              >\n                <PinTopIcon />\n              </ToolButton>\n            </Tooltip>\n            <Tooltip label={intl.formatMessage({ id: 'reset.angle' })} id=\"TD-Tools-ResetAngle\">\n              <ToolButton\n                aria-label={intl.formatMessage({ id: 'reset.angle' })}\n                disabled={!hasSelection}\n                onClick={handleResetAngle}\n              >\n                <AngleIcon />\n              </ToolButton>\n            </Tooltip>\n          </ButtonsRow>\n          <Divider />\n          <ButtonsRow>\n            <Tooltip label={intl.formatMessage({ id: 'align.left' })} id=\"TD-Tools-AlignLeft\">\n              <ToolButton\n                aria-label={intl.formatMessage({ id: 'align.left' })}\n                disabled={!hasTwoOrMore}\n                onClick={alignLeft}\n              >\n                <AlignLeftIcon />\n              </ToolButton>\n            </Tooltip>\n            <Tooltip\n              label={intl.formatMessage({ id: 'align.center.x' })}\n              id=\"TD-Tools-AlignCenterHorizontal\"\n            >\n              <ToolButton\n                aria-label={intl.formatMessage({ id: 'align.center.x' })}\n                disabled={!hasTwoOrMore}\n                onClick={alignCenterHorizontal}\n              >\n                <AlignCenterHorizontallyIcon />\n              </ToolButton>\n            </Tooltip>\n            <Tooltip label={intl.formatMessage({ id: 'align.right' })} id=\"TD-Tools-AlignRight\">\n              <ToolButton\n                aria-label={intl.formatMessage({ id: 'align.right' })}\n                disabled={!hasTwoOrMore}\n                onClick={alignRight}\n              >\n                <AlignRightIcon />\n              </ToolButton>\n            </Tooltip>\n            <Tooltip\n              label={intl.formatMessage({ id: 'stretch.x' })}\n              id=\"TD-Tools-StretchHorizontal\"\n            >\n              <ToolButton\n                aria-label={intl.formatMessage({ id: 'stretch.x' })}\n                disabled={!hasTwoOrMore}\n                onClick={stretchHorizontally}\n              >\n                <StretchHorizontallyIcon />\n              </ToolButton>\n            </Tooltip>\n            <Tooltip\n              label={intl.formatMessage({ id: 'distribute.x' })}\n              id=\"TD-Tools-SpaceEvenlyHorizontal\"\n            >\n              <ToolButton\n                aria-label={intl.formatMessage({ id: 'distribute.x' })}\n                disabled={!hasThreeOrMore}\n                onClick={distributeHorizontally}\n              >\n                <SpaceEvenlyHorizontallyIcon />\n              </ToolButton>\n            </Tooltip>\n          </ButtonsRow>\n          <ButtonsRow>\n            <Tooltip label={intl.formatMessage({ id: 'align.top' })} id=\"TD-Tools-AlignTop\">\n              <ToolButton\n                aria-label={intl.formatMessage({ id: 'align.top' })}\n                disabled={!hasTwoOrMore}\n                onClick={alignTop}\n              >\n                <AlignTopIcon />\n              </ToolButton>\n            </Tooltip>\n            <Tooltip\n              label={intl.formatMessage({ id: 'align.center.y' })}\n              id=\"TD-Tools-AlignCenterVertical\"\n            >\n              <ToolButton\n                aria-label={intl.formatMessage({ id: 'align.center.y' })}\n                disabled={!hasTwoOrMore}\n                onClick={alignCenterVertical}\n              >\n                <AlignCenterVerticallyIcon />\n              </ToolButton>\n            </Tooltip>\n            <Tooltip label={intl.formatMessage({ id: 'align.bottom' })} id=\"TD-Tools-AlignBottom\">\n              <ToolButton\n                aria-label={intl.formatMessage({ id: 'align.bottom' })}\n                disabled={!hasTwoOrMore}\n                onClick={alignBottom}\n              >\n                <AlignBottomIcon />\n              </ToolButton>\n            </Tooltip>\n            <Tooltip label={intl.formatMessage({ id: 'stretch.y' })} id=\"TD-Tools-StretchVertical\">\n              <ToolButton\n                aria-label={intl.formatMessage({ id: 'stretch.y' })}\n                disabled={!hasTwoOrMore}\n                onClick={stretchVertically}\n              >\n                <StretchVerticallyIcon />\n              </ToolButton>\n            </Tooltip>\n            <Tooltip\n              label={intl.formatMessage({ id: 'distribute.y' })}\n              id=\"TD-Tools-SpaceEvenlyVertical\"\n            >\n              <ToolButton\n                aria-label={intl.formatMessage({ id: 'distribute.y' })}\n                disabled={!hasThreeOrMore}\n                onClick={distributeVertically}\n              >\n                <SpaceEvenlyVerticallyIcon />\n              </ToolButton>\n            </Tooltip>\n          </ButtonsRow>\n        </>\n      </DMContent>\n    </DropdownMenu.Root>\n  )\n}\n\nexport const ButtonsRow = styled('div', {\n  position: 'relative',\n  display: 'flex',\n  width: '100%',\n  background: 'none',\n  border: 'none',\n  cursor: 'pointer',\n  outline: 'none',\n  alignItems: 'center',\n  justifyContent: 'flex-start',\n  padding: 0,\n})\n", "import { Item } from '@radix-ui/react-dropdown-menu'\nimport * as React from 'react'\nimport { RowButton, RowButtonProps } from '~components/Primitives/RowButton'\n\nexport function DMItem({\n  onSelect,\n  id,\n  ...rest\n}: RowButtonProps & { onSelect?: (event: Event) => void; id?: string }) {\n  return (\n    <Item dir=\"ltr\" asChild onSelect={onSelect} id={id}>\n      <RowButton {...rest} />\n    </Item>\n  )\n}\n", "import { CheckboxItem } from '@radix-ui/react-dropdown-menu'\nimport * as React from 'react'\nimport { RowButton, RowButtonProps } from '~components/Primitives/RowButton'\nimport { preventEvent } from '~components/preventEvent'\n\ninterface DMCheckboxItemProps {\n  checked: boolean\n  disabled?: boolean\n  onCheckedChange: (isChecked: boolean) => void\n  children: React.ReactNode\n  variant?: RowButtonProps['variant']\n  kbd?: string\n  id?: string\n  ariaLabel?: string\n}\n\nexport function DMCheckboxItem({\n  checked,\n  disabled = false,\n  variant,\n  onCheckedChange,\n  kbd,\n  id,\n  ariaLabel,\n  children,\n}: DMCheckboxItemProps) {\n  return (\n    <CheckboxItem\n      dir=\"ltr\"\n      onSelect={preventEvent}\n      onCheckedChange={onCheckedChange}\n      checked={checked}\n      disabled={disabled}\n      asChild\n      id={id}\n      aria-label={ariaLabel}\n    >\n      <RowButton kbd={kbd} variant={variant} hasIndicator>\n        {children}\n      </RowButton>\n    </CheckboxItem>\n  )\n}\n", "export const preventEvent = (e: Event) => e.preventDefault()\n", "import * as DropdownMenu from '@radix-ui/react-dropdown-menu'\nimport * as React from 'react'\nimport { MenuContent } from '~components/Primitives/MenuContent'\nimport { stopPropagation } from '~components/stopPropagation'\nimport { useContainer } from '~hooks'\nimport { styled } from '~styles/stitches.config'\n\nexport interface DMContentProps {\n  variant?: 'menu' | 'horizontal'\n  align?: 'start' | 'center' | 'end'\n  alignOffset?: number\n  sideOffset?: number\n  children: React.ReactNode\n  overflow?: boolean\n  id?: string\n  side?: 'top' | 'left' | 'right' | 'bottom' | undefined\n}\n\nexport function DMContent({\n  sideOffset = 4,\n  alignOffset = 0,\n  children,\n  align,\n  variant,\n  id,\n  overflow = false,\n  side = 'bottom',\n}: DMContentProps) {\n  const container = useContainer()\n\n  return (\n    <DropdownMenu.Portal container={container.current} dir=\"ltr\">\n      <DropdownMenu.Content\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        onEscapeKeyDown={stopPropagation}\n        asChild\n        id={id}\n        side={side}\n      >\n        <StyledContent variant={variant} overflow={overflow}>\n          {children}\n        </StyledContent>\n      </DropdownMenu.Content>\n    </DropdownMenu.Portal>\n  )\n}\n\nexport const StyledContent = styled(MenuContent, {\n  width: 'fit-content',\n  height: 'fit-content',\n  minWidth: 0,\n  maxHeight: '100vh',\n  overflowY: 'auto',\n  overflowX: 'hidden',\n  '&::webkit-scrollbar': {\n    display: 'none',\n  },\n  '-ms-overflow-style': 'none' /* for Internet Explorer, Edge */,\n  scrollbarWidth: 'none',\n  variants: {\n    variant: {\n      horizontal: {\n        flexDirection: 'row',\n      },\n      menu: {\n        minWidth: 128,\n      },\n    },\n    overflow: {\n      true: {\n        maxHeight: '60vh',\n      },\n    },\n  },\n})\n", "import type React from 'react'\n\nexport const stopPropagation = (e: KeyboardEvent | React.SyntheticEvent<any, Event>) =>\n  e.stopPropagation()\n", "import { Separator } from '@radix-ui/react-dropdown-menu'\nimport { styled } from '~styles/stitches.config'\n\nexport const DMDivider = styled(Separator, {\n  backgroundColor: '$hover',\n  height: 1,\n  marginTop: '$2',\n  marginRight: '-$2',\n  marginBottom: '$2',\n  marginLeft: '-$2',\n})\n", "import { RadioItem } from '@radix-ui/react-dropdown-menu'\nimport { styled } from '~styles/stitches.config'\n\nexport const DMRadioItem = styled(RadioItem, {\n  height: '32px',\n  width: '32px',\n  backgroundColor: '$panel',\n  borderRadius: '4px',\n  padding: '0',\n  margin: '0',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  outline: 'none',\n  border: 'none',\n  pointerEvents: 'all',\n  cursor: 'pointer',\n\n  variants: {\n    isActive: {\n      true: {\n        backgroundColor: '$selected',\n        color: 'white',\n      },\n      false: {},\n    },\n    bp: {\n      mobile: {},\n      small: {},\n    },\n  },\n\n  compoundVariants: [\n    {\n      isActive: false,\n      bp: 'small',\n      css: {\n        '&:focus': {\n          backgroundColor: '$hover',\n        },\n        '&:hover:not(:disabled)': {\n          backgroundColor: '$hover',\n        },\n      },\n    },\n  ],\n})\n", "import { Arrow, Sub, SubContent, SubTrigger } from '@radix-ui/react-dropdown-menu'\nimport * as React from 'react'\nimport { MenuContent } from '~components/Primitives/MenuContent'\nimport { RowButton } from '~components/Primitives/RowButton'\n\nexport interface DMSubMenuProps {\n  label: string\n  size?: 'small'\n  disabled?: boolean\n  children: React.ReactNode\n  overflow?: boolean\n  id?: string\n}\n\nexport function DMSubMenu({\n  children,\n  size,\n  overflow = false,\n  disabled = false,\n  label,\n  id,\n}: DMSubMenuProps) {\n  return (\n    <Sub key={id}>\n      <SubTrigger dir=\"ltr\" asChild>\n        <RowButton disabled={disabled} hasArrow>\n          {label}\n        </RowButton>\n      </SubTrigger>\n      <SubContent asChild sideOffset={4} alignOffset={-4}>\n        <MenuContent size={size} overflow={overflow}>\n          {children}\n          <Arrow offset={13} />\n        </MenuContent>\n      </SubContent>\n    </Sub>\n  )\n}\n", "import { Trigger } from '@radix-ui/react-dropdown-menu'\nimport * as React from 'react'\nimport { ToolButton, ToolButtonProps } from '~components/Primitives/ToolButton'\n\ninterface DMTriggerIconProps extends ToolButtonProps {\n  children: React.ReactNode\n  id?: string\n}\n\nexport function DMTriggerIcon({ id, children, ...rest }: DMTriggerIconProps) {\n  return (\n    <Trigger asChild id={id}>\n      <ToolButton {...rest}>{children}</ToolButton>\n    </Trigger>\n  )\n}\n", "import * as React from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { MenuContent } from '~components/Primitives/MenuContent'\nimport { RowButton } from '~components/Primitives/RowButton'\nimport { useTldrawApp } from '~hooks'\nimport { styled } from '~styles'\nimport type { TDSnapshot } from '~types'\n\nconst isEmptyCanvasSelector = (s: TDSnapshot) => {\n  return (\n    s.appState.isEmptyCanvas &&\n    Object.keys(s.document.pages[s.appState.currentPageId].shapes).length > 0\n  )\n}\n\nconst isDebugModeSelector = (s: TDSnapshot) => s.settings.isDebugMode\nconst dockPositionState = (s: TDSnapshot) => s.settings.dockPosition\n\nexport const BackToContent = React.memo(function BackToContent() {\n  const app = useTldrawApp()\n\n  const isEmptyCanvas = app.useStore(isEmptyCanvasSelector)\n  const dockPosition = app.useStore(dockPositionState)\n  const isDebugMode = app.useStore(isDebugModeSelector)\n\n  const style = {\n    bottom:\n      dockPosition === 'bottom' && isDebugMode\n        ? 120\n        : dockPosition === 'bottom'\n        ? 80\n        : isDebugMode\n        ? 60\n        : 20,\n    left: '50%',\n    transform: 'translate(-50%,0)',\n  }\n\n  if (!isEmptyCanvas) return null\n\n  return (\n    <BackToContentContainer id=\"TD-Tools-Back_to_content\" style={{ ...style }}>\n      <RowButton onClick={app.zoomToContent}>\n        <FormattedMessage id=\"zoom.to.content\" />\n      </RowButton>\n    </BackToContentContainer>\n  )\n})\n\nconst BackToContentContainer = styled(MenuContent, {\n  pointerEvents: 'all',\n  width: 'fit-content',\n  minWidth: 0,\n  position: 'fixed',\n  bottom: 0,\n})\n", "import * as React from 'react'\nimport { useIntl } from 'react-intl'\nimport { ToolButton } from '~components/Primitives/ToolButton'\nimport { Tooltip } from '~components/Primitives/Tooltip'\nimport { TrashIcon } from '~components/Primitives/icons'\nimport { useTldrawApp } from '~hooks'\n\nexport function DeleteButton() {\n  const app = useTldrawApp()\n  const intl = useIntl()\n\n  const handleDelete = React.useCallback(() => {\n    app.delete()\n  }, [app])\n\n  const hasSelection = app.useStore(\n    (s) =>\n      s.appState.status === 'idle' &&\n      s.document.pageStates[s.appState.currentPageId].selectedIds.length > 0\n  )\n\n  return (\n    <Tooltip label={intl.formatMessage({ id: 'delete' })} kbd=\"\u232B\" id=\"TD-Delete\">\n      <ToolButton\n        aria-label={intl.formatMessage({ id: 'delete' })}\n        variant=\"circle\"\n        disabled={!hasSelection}\n        onSelect={handleDelete}\n      >\n        <TrashIcon />\n      </ToolButton>\n    </Tooltip>\n  )\n}\n", "import * as React from 'react'\n\nexport function BoxIcon({\n  fill = 'none',\n  stroke = 'currentColor',\n  strokeWidth = 2,\n}: {\n  fill?: string\n  stroke?: string\n  strokeWidth?: number\n}) {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      stroke={stroke}\n      strokeWidth={strokeWidth}\n      fill={fill}\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <rect x=\"4\" y=\"4\" width=\"16\" height=\"16\" rx=\"2\" />\n    </svg>\n  )\n}\n", "import * as React from 'react'\n\nexport function CircleIcon(\n  props: Pick<React.SVGProps<SVGSVGElement>, 'strokeWidth' | 'stroke' | 'fill'> & {\n    size: number\n  }\n) {\n  const { size = 16, ...rest } = props\n  return (\n    <svg width={24} height={24} {...rest}>\n      <circle cx={12} cy={12} r={size / 2} />\n    </svg>\n  )\n}\n", "import * as React from 'react'\n\nexport function DashDashedIcon() {\n  return (\n    <svg width=\"24\" height=\"24\" stroke=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n      <circle\n        cx={12}\n        cy={12}\n        r={8}\n        fill=\"none\"\n        strokeWidth={2.5}\n        strokeLinecap=\"round\"\n        strokeDasharray={50.26548 * 0.1}\n      />\n    </svg>\n  )\n}\n", "import * as React from 'react'\n\nconst dottedDasharray = `${50.26548 * 0.025} ${50.26548 * 0.1}`\n\nexport function DashDottedIcon() {\n  return (\n    <svg width=\"24\" height=\"24\" stroke=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n      <circle\n        cx={12}\n        cy={12}\n        r={8}\n        fill=\"none\"\n        strokeWidth={2.5}\n        strokeLinecap=\"round\"\n        strokeDasharray={dottedDasharray}\n      />\n    </svg>\n  )\n}\n", "import * as React from 'react'\n\nexport function DashDrawIcon() {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"1 1.5 21 22\"\n      fill=\"currentColor\"\n      stroke=\"currentColor\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M10.0162 19.2768C10.0162 19.2768 9.90679 19.2517 9.6879 19.2017C9.46275 19.1454 9.12816 19.0422 8.68413 18.8921C8.23384 18.7358 7.81482 18.545 7.42707 18.3199C7.03307 18.101 6.62343 17.7883 6.19816 17.3818C5.77289 16.9753 5.33511 16.3718 4.88482 15.5713C4.43453 14.7645 4.1531 13.8545 4.04053 12.8414C3.92795 11.822 4.04991 10.8464 4.40639 9.91451C4.76286 8.98266 5.39452 8.10084 6.30135 7.26906C7.21444 6.44353 8.29325 5.83377 9.5378 5.43976C10.7823 5.05202 11.833 4.92068 12.6898 5.04576C13.5466 5.16459 14.3878 5.43664 15.2133 5.86191C16.0388 6.28718 16.7768 6.8688 17.4272 7.60678C18.0714 8.34475 18.5404 9.21406 18.8344 10.2147C19.1283 11.2153 19.1721 12.2598 18.9657 13.348C18.7593 14.4299 18.2872 15.4337 17.5492 16.3593C16.8112 17.2849 15.9263 18.0072 14.8944 18.5263C13.8624 19.0391 12.9056 19.3174 12.0238 19.3612C11.142 19.405 10.2101 19.2705 9.22823 18.9578C8.24635 18.6451 7.35828 18.151 6.56402 17.4756C5.77601 16.8002 6.08871 16.8658 7.50212 17.6726C8.90927 18.4731 10.1444 18.8484 11.2076 18.7983C12.2645 18.7545 13.2965 18.4825 14.3034 17.9822C15.3102 17.4819 16.1264 16.8221 16.7518 16.0028C17.3772 15.1835 17.7681 14.3111 17.9244 13.3855C18.0808 12.4599 18.0401 11.5781 17.8025 10.74C17.5586 9.902 17.1739 9.15464 16.6486 8.49797C16.1233 7.8413 15.2289 7.27844 13.9656 6.80939C12.7086 6.34034 11.4203 6.20901 10.1007 6.41539C8.78732 6.61552 7.69599 7.06893 6.82669 7.77564C5.96363 8.48859 5.34761 9.26409 4.97863 10.1021C4.60964 10.9402 4.45329 11.8376 4.50958 12.7945C4.56586 13.7513 4.79101 14.6238 5.18501 15.4118C5.57276 16.1998 5.96363 16.8002 6.35764 17.2129C6.75164 17.6257 7.13313 17.9509 7.50212 18.1886C7.87736 18.4325 8.28074 18.642 8.71227 18.8171C9.15005 18.9922 9.47839 19.111 9.69728 19.1736C9.91617 19.2361 10.0256 19.2705 10.0256 19.2768H10.0162Z\"\n        strokeWidth=\"2\"\n      />\n    </svg>\n  )\n}\n", "import * as React from 'react'\n\nexport function DashSolidIcon() {\n  return (\n    <svg width=\"24\" height=\"24\" stroke=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n      <circle cx={12} cy={12} r={8} fill=\"none\" strokeWidth={2} strokeLinecap=\"round\" />\n    </svg>\n  )\n}\n", "import * as React from 'react'\n\nexport function TrashIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      width={18}\n      height={18}\n      viewBox=\"0 0 15 15\"\n      fill=\"currentColor\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M2 4.656a.5.5 0 01.5-.5h9.7a.5.5 0 010 1H2.5a.5.5 0 01-.5-.5z\"\n      />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M6.272 3a.578.578 0 00-.578.578v.578h3.311v-.578A.578.578 0 008.428 3H6.272zm3.733 1.156v-.578A1.578 1.578 0 008.428 2H6.272a1.578 1.578 0 00-1.578 1.578v.578H3.578a.5.5 0 00-.5.5V12.2a1.578 1.578 0 001.577 1.578h5.39a1.578 1.578 0 001.577-1.578V4.656a.5.5 0 00-.5-.5h-1.117zm-5.927 1V12.2a.578.578 0 00.577.578h5.39a.578.578 0 00.577-.578V5.156H4.078z\"\n      />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M6.272 6.85a.5.5 0 01.5.5v3.233a.5.5 0 11-1 0V7.35a.5.5 0 01.5-.5zM8.428 6.85a.5.5 0 01.5.5v3.233a.5.5 0 11-1 0V7.35a.5.5 0 01.5-.5z\"\n      />\n    </svg>\n  )\n}\n", "import * as React from 'react'\n\nexport function UndoIcon({\n  flipHorizontal,\n  ...props\n}: React.SVGProps<SVGSVGElement> & { flipHorizontal?: boolean }) {\n  return (\n    <svg\n      width={24}\n      height={24}\n      viewBox=\"0 0 15 15\"\n      fill=\"currentColor\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      style={{\n        transform: flipHorizontal ? 'scale(-1, 1)' : 'scale(1, 1)',\n      }}\n      {...props}\n    >\n      <path d=\"M10.6707 8.5081C10.6707 10.1923 9.3004 11.5625 7.61631 11.5625H6.5351C6.35593 11.5625 6.21074 11.4173 6.21074 11.2382V11.13C6.21074 10.9508 6.35591 10.8057 6.5351 10.8057H7.61631C8.88313 10.8057 9.91387 9.77492 9.91387 8.5081C9.91387 7.24128 8.88313 6.21054 7.61631 6.21054H5.62155L6.99534 7.58433C7.14289 7.73183 7.14289 7.97195 6.99534 8.11944C6.85216 8.26251 6.60298 8.2623 6.46013 8.11944L4.44045 6.09971C4.36898 6.02824 4.32959 5.93321 4.32959 5.8321C4.32959 5.73106 4.36898 5.63598 4.44045 5.56454L6.46024 3.54472C6.60309 3.40176 6.85248 3.40176 6.99535 3.54472C7.14291 3.69218 7.14291 3.93234 6.99535 4.07979L5.62156 5.45368H7.61631C9.3004 5.45368 10.6707 6.82393 10.6707 8.5081Z\" />\n    </svg>\n  )\n}\n", "import * as React from 'react'\n\nexport function SizeSmallIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      width={24}\n      height={24}\n      viewBox=\"-2 -2 28 28\"\n      fill=\"currentColor\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path d=\"M12.4239 4.62C13.3572 4.62 14.1572 4.73333 14.8239 4.96C15.4906 5.17333 15.9772 5.43333 16.2839 5.74C16.3639 5.82 16.4039 5.94 16.4039 6.1V8.86H14.0639C13.9172 8.86 13.8439 8.78666 13.8439 8.64V7.26C13.4306 7.12666 12.9572 7.06 12.4239 7.06C11.6506 7.06 11.0639 7.18 10.6639 7.42C10.2639 7.66 10.0639 8.04666 10.0639 8.58V9C10.0639 9.38666 10.1639 9.69333 10.3639 9.92C10.5772 10.1333 11.0306 10.3467 11.7239 10.56L13.6439 11.14C14.4706 11.38 15.1172 11.66 15.5839 11.98C16.0506 12.3 16.3772 12.68 16.5639 13.12C16.7639 13.5467 16.8639 14.0733 16.8639 14.7V15.62C16.8639 16.7933 16.4039 17.7133 15.4839 18.38C14.5639 19.0467 13.2839 19.38 11.6439 19.38C10.6706 19.38 9.79723 19.2867 9.0239 19.1C8.2639 18.9133 7.71056 18.6533 7.3639 18.32C7.3239 18.28 7.29056 18.24 7.2639 18.2C7.25056 18.1467 7.2439 18.06 7.2439 17.94V15.74H7.6239C8.2239 16.1533 8.85056 16.4533 9.5039 16.64C10.1572 16.8267 10.9306 16.92 11.8239 16.92C12.6506 16.92 13.2506 16.7867 13.6239 16.52C14.0106 16.2533 14.2039 15.9333 14.2039 15.56V14.88C14.2039 14.6667 14.1639 14.48 14.0839 14.32C14.0172 14.16 13.8706 14.0133 13.6439 13.88C13.4172 13.7467 13.0572 13.6067 12.5639 13.46L10.6639 12.88C9.7839 12.6133 9.11056 12.3 8.6439 11.94C8.17723 11.58 7.85056 11.18 7.6639 10.74C7.49056 10.3 7.4039 9.83333 7.4039 9.34V8.38C7.4039 7.64666 7.61056 7 8.0239 6.44C8.43723 5.88 9.01723 5.44 9.7639 5.12C10.5239 4.78666 11.4106 4.62 12.4239 4.62Z\" />\n    </svg>\n  )\n}\n", "import * as React from 'react'\n\nexport function SizeMediumIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      width={24}\n      height={24}\n      viewBox=\"-2 -2 28 28\"\n      fill=\"currentColor\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path d=\"M8.16191 19H5.68191C5.53525 19 5.46191 18.9267 5.46191 18.78V5H8.76191C8.88191 5 8.97525 5.03333 9.04191 5.1C9.10858 5.15333 9.17525 5.27333 9.24191 5.46C9.72191 6.59333 10.1686 7.7 10.5819 8.78C11.0086 9.84667 11.4352 10.98 11.8619 12.18H12.1619C12.6019 10.9667 13.0352 9.79333 13.4619 8.66C13.8886 7.52667 14.3552 6.30667 14.8619 5H18.3219C18.4686 5 18.5419 5.07333 18.5419 5.22V19H16.0619C15.9152 19 15.8419 18.9267 15.8419 18.78V16.26C15.8419 15.5267 15.8486 14.8133 15.8619 14.12C15.8886 13.4267 15.9286 12.6867 15.9819 11.9C16.0486 11.1 16.1419 10.1933 16.2619 9.18H15.9019C15.4352 10.3533 14.9486 11.5667 14.4419 12.82C13.9486 14.06 13.4819 15.2333 13.0419 16.34H11.1019C11.0619 16.34 11.0152 16.3333 10.9619 16.32C10.9219 16.2933 10.8886 16.2467 10.8619 16.18C10.4619 15.18 10.0086 14.06 9.50191 12.82C9.00858 11.58 8.53525 10.3667 8.08191 9.18H7.70191C7.83525 10.18 7.93525 11.0733 8.00191 11.86C8.06858 12.6467 8.10858 13.3933 8.12191 14.1C8.14858 14.8067 8.16191 15.5267 8.16191 16.26V19Z\" />\n    </svg>\n  )\n}\n", "import * as React from 'react'\n\nexport function SizeLargeIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      width={24}\n      height={24}\n      viewBox=\"-2 -2 28 28\"\n      fill=\"currentColor\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path d=\"M7.68191 19C7.53525 19 7.46191 18.9267 7.46191 18.78V5H10.1219C10.2686 5 10.3419 5.07333 10.3419 5.22V16.56H13.4419V15.02H15.7619C15.9086 15.02 15.9819 15.0933 15.9819 15.24V19H7.68191Z\" />\n    </svg>\n  )\n}\n", "import * as React from 'react'\n\nexport function EraserIcon() {\n  return (\n    <svg width=\"15\" height=\"15\" viewBox=\"0 0 15 15\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path\n        d=\"M1.72838 9.33987L8.84935 2.34732C9.23874 1.96494 9.86279 1.96539 10.2516 2.34831L13.5636 5.60975C13.9655 6.00555 13.9607 6.65526 13.553 7.04507L8.13212 12.2278C7.94604 12.4057 7.69851 12.505 7.44107 12.505L6.06722 12.505L3.83772 12.505C3.5673 12.505 3.30842 12.3954 3.12009 12.2014L1.7114 10.7498C1.32837 10.3551 1.33596 9.72521 1.72838 9.33987Z\"\n        stroke=\"currentColor\"\n      />\n      <line\n        x1=\"6.01807\"\n        y1=\"12.5\"\n        x2=\"10.7959\"\n        y2=\"12.5\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n      />\n      <line x1=\"5.50834\" y1=\"5.74606\" x2=\"10.1984\" y2=\"10.4361\" stroke=\"currentColor\" />\n    </svg>\n  )\n}\n", "import * as React from 'react'\n\nexport function DiscordIcon() {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"16\"\n      height=\"16\"\n      fill=\"currentColor\"\n      viewBox=\"0 0 16 16\"\n    >\n      <path d=\"M13.545 2.907a13.227 13.227 0 0 0-3.257-1.011.05.05 0 0 0-.052.025c-.141.25-.297.577-.406.833a12.19 12.19 0 0 0-3.658 0 8.258 8.258 0 0 0-.412-.833.051.051 0 0 0-.052-.025c-1.125.194-2.22.534-3.257 1.011a.041.041 0 0 0-.021.018C.356 6.024-.213 9.047.066 12.032c.001.014.01.028.021.037a13.276 13.276 0 0 0 3.995 2.02.05.05 0 0 0 .056-.019c.308-.42.582-.863.818-1.329a.05.05 0 0 0-.01-.059.051.051 0 0 0-.018-.011 8.875 8.875 0 0 1-1.248-.595.05.05 0 0 1-.02-.066.051.051 0 0 1 .015-.019c.084-.063.168-.129.248-.195a.05.05 0 0 1 .051-.007c2.619 1.196 5.454 1.196 8.041 0a.052.052 0 0 1 .053.007c.08.066.164.132.248.195a.051.051 0 0 1-.004.085 8.254 8.254 0 0 1-1.249.594.05.05 0 0 0-.03.03.052.052 0 0 0 .003.041c.24.465.515.909.817 1.329a.05.05 0 0 0 .056.019 13.235 13.235 0 0 0 4.001-2.02.049.049 0 0 0 .021-.037c.334-3.451-.559-6.449-2.366-9.106a.034.034 0 0 0-.02-.019Zm-8.198 7.307c-.789 0-1.438-.724-1.438-1.612 0-.889.637-1.613 1.438-1.613.807 0 1.45.73 1.438 1.613 0 .888-.637 1.612-1.438 1.612Zm5.316 0c-.788 0-1.438-.724-1.438-1.612 0-.889.637-1.613 1.438-1.613.807 0 1.451.73 1.438 1.613 0 .888-.631 1.612-1.438 1.612Z\" />\n    </svg>\n  )\n}\n", "import * as React from 'react'\n\nexport function LineIcon() {\n  return (\n    <svg\n      width=\"15\"\n      height=\"15\"\n      viewBox=\"0 0 15 15\"\n      fill=\"currentColor\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M3.64645 11.3536C3.45118 11.1583 3.45118 10.8417 3.64645 10.6465L11.1464 3.14645C11.3417 2.95118 11.6583 2.95118 11.8536 3.14645C12.0488 3.34171 12.0488 3.65829 11.8536 3.85355L4.35355 11.3536C4.15829 11.5488 3.84171 11.5488 3.64645 11.3536Z\" />\n    </svg>\n  )\n}\n", "import * as DropdownMenu from '@radix-ui/react-dropdown-menu'\nimport {\n  ExternalLinkIcon,\n  GitHubLogoIcon,\n  HeartFilledIcon,\n  QuestionMarkIcon,\n  TwitterLogoIcon,\n} from '@radix-ui/react-icons'\nimport * as Popover from '@radix-ui/react-popover'\nimport * as React from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { Divider } from '~components/Primitives/Divider'\nimport { MenuContent } from '~components/Primitives/MenuContent'\nimport { RowButton } from '~components/Primitives/RowButton'\nimport { SmallIcon } from '~components/Primitives/SmallIcon'\nimport { DiscordIcon } from '~components/Primitives/icons'\nimport { LanguageMenu } from '~components/TopPanel/LanguageMenu/LanguageMenu'\nimport { breakpoints } from '~components/breakpoints'\nimport { useTldrawApp } from '~hooks'\nimport { styled } from '~styles'\nimport { TDSnapshot } from '~types'\nimport { KeyboardShortcutDialog } from './KeyboardShortcutDialog'\n\nconst isDebugModeSelector = (s: TDSnapshot) => s.settings.isDebugMode\nconst dockPositionState = (s: TDSnapshot) => s.settings.dockPosition\n\nexport function HelpPanel() {\n  const app = useTldrawApp()\n  const isDebugMode = app.useStore(isDebugModeSelector)\n  const side = app.useStore(dockPositionState)\n\n  const [isKeyboardShortcutsOpen, setIsKeyboardShortcutsOpen] = React.useState(false)\n\n  return (\n    <Popover.Root>\n      <PopoverAnchor dir=\"ltr\" debug={isDebugMode} side={side} bp={breakpoints}>\n        <Popover.Trigger dir=\"ltr\" asChild>\n          <HelpButton>\n            <QuestionMarkIcon />\n          </HelpButton>\n        </Popover.Trigger>\n      </PopoverAnchor>\n      <Popover.Content dir=\"ltr\" align=\"end\" side=\"top\" alignOffset={10} sideOffset={8} asChild>\n        <StyledContent style={{ visibility: isKeyboardShortcutsOpen ? 'hidden' : 'visible' }}>\n          <LanguageMenuDropdown />\n          <KeyboardShortcutDialog onOpenChange={setIsKeyboardShortcutsOpen} />\n          <Divider />\n          <Links />\n        </StyledContent>\n      </Popover.Content>\n    </Popover.Root>\n  )\n}\n\nconst LanguageMenuDropdown = () => {\n  return (\n    <DropdownMenu.Root dir=\"ltr\">\n      <DropdownMenu.Trigger asChild>\n        <RowButton variant=\"wide\" hasArrow>\n          <FormattedMessage id=\"language\" />\n        </RowButton>\n      </DropdownMenu.Trigger>\n      <LanguageMenu />\n    </DropdownMenu.Root>\n  )\n}\n\nconst linksData = [\n  { id: 'tldraw-beta', icon: ExternalLinkIcon, url: 'https://beta.tldraw.com' },\n  { id: 'github', icon: GitHubLogoIcon, url: 'https://github.com/tldraw/tldraw' },\n  { id: 'twitter', icon: TwitterLogoIcon, url: 'https://twitter.com/tldraw' },\n  { id: 'discord', icon: DiscordIcon, url: 'https://discord.gg/SBBEVCA4PG' },\n  {\n    id: 'become.a.sponsor',\n    icon: HeartFilledIcon,\n    url: 'https://github.com/sponsors/steveruizok',\n  },\n]\n\nconst Links = () => {\n  return (\n    <>\n      {linksData.map((item) => (\n        <a key={item.id} href={item.url} target=\"_blank\" rel=\"nofollow\">\n          <RowButton id={`TD-Link-${item.id}`} variant=\"wide\">\n            <FormattedMessage id={item.id} />\n            <SmallIcon>\n              <item.icon />\n            </SmallIcon>\n          </RowButton>\n        </a>\n      ))}\n    </>\n  )\n}\n\nconst HelpButton = styled('button', {\n  width: 32,\n  height: 32,\n  borderRadius: '100%',\n  display: 'flex',\n  padding: 0,\n  justifyContent: 'center',\n  alignItems: 'center',\n  outline: 'none',\n  backgroundColor: '$panel',\n  cursor: 'pointer',\n  boxShadow: '$panel',\n  border: '1px solid $panelContrast',\n  color: '$text',\n  '& svg': {\n    height: 12,\n    width: 12,\n  },\n})\n\nexport const StyledContent = styled(MenuContent, {\n  width: 'fit-content',\n  height: 'fit-content',\n  minWidth: 200,\n  maxHeight: 380,\n  overflowY: 'auto',\n  '& *': {\n    boxSizing: 'border-box',\n  },\n  '& a': {\n    outline: 'none',\n  },\n  variants: {\n    variant: {\n      horizontal: {\n        flexDirection: 'row',\n      },\n      menu: {\n        minWidth: 128,\n      },\n    },\n  },\n})\n\nconst PopoverAnchor = styled(Popover.Anchor, {\n  position: 'absolute',\n  zIndex: 999,\n  right: 10,\n  bottom: 10,\n  width: 32,\n  height: 32,\n  variants: {\n    debug: {\n      true: {},\n      false: {},\n    },\n    bp: {\n      mobile: {\n        bottom: 64,\n      },\n      small: {\n        bottom: 20,\n      },\n      medium: {},\n      large: {},\n    },\n    side: {\n      top: {},\n      left: {},\n      right: {},\n      bottom: {},\n    },\n  },\n  compoundVariants: [\n    {\n      debug: true,\n      css: {\n        bottom: 50,\n      },\n    },\n    {\n      bp: 'mobile',\n      side: 'bottom',\n      debug: true,\n      css: {\n        bottom: 104,\n      },\n    },\n    {\n      bp: 'small',\n      side: 'bottom',\n      debug: true,\n      css: {\n        bottom: 60,\n      },\n    },\n    {\n      bp: 'small',\n      side: 'bottom',\n      debug: true,\n      css: {\n        bottom: 60,\n      },\n    },\n  ],\n})\n", "import { ExternalLinkIcon } from '@radix-ui/react-icons'\nimport * as React from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { Divider } from '~components/Primitives/Divider'\nimport { DMCheckboxItem, DMContent, DMItem } from '~components/Primitives/DropdownMenu'\nimport { SmallIcon } from '~components/Primitives/SmallIcon'\nimport { useTldrawApp } from '~hooks'\nimport { TDLanguage, TRANSLATIONS } from '~translations'\nimport { TDSnapshot } from '~types'\n\nconst languageSelector = (s: TDSnapshot) => s.settings.language\n\nexport const LanguageMenu = () => {\n  const app = useTldrawApp()\n  const language = app.useStore(languageSelector)\n\n  const handleChangeLanguage = React.useCallback(\n    (locale: TDLanguage) => {\n      app.setSetting('language', locale)\n    },\n    [app]\n  )\n\n  return (\n    <DMContent variant=\"menu\" overflow id=\"language-menu\" side=\"left\" sideOffset={8}>\n      {TRANSLATIONS.map(({ locale, label }) => (\n        <DMCheckboxItem\n          key={locale}\n          checked={language === locale}\n          onCheckedChange={() => handleChangeLanguage(locale)}\n          id={`TD-MenuItem-Language-${locale}`}\n        >\n          {label}\n        </DMCheckboxItem>\n      ))}\n      <Divider />\n      <a\n        href=\"https://github.com/tldraw/tldraw/blob/main/guides/translation.md\"\n        target=\"_blank\"\n        rel=\"nofollow\"\n      >\n        <DMItem id=\"TD-MenuItem-Translation-Link\">\n          <FormattedMessage id=\"translation.link\" />\n          <SmallIcon>\n            <ExternalLinkIcon />\n          </SmallIcon>\n        </DMItem>\n      </a>\n    </DMContent>\n  )\n}\n", "import * as Dialog from '@radix-ui/react-dialog'\nimport { Cross2Icon } from '@radix-ui/react-icons'\nimport * as React from 'react'\nimport { FormattedMessage, useIntl } from 'react-intl'\nimport { IconButton } from '~components/Primitives/IconButton'\nimport { Kbd } from '~components/Primitives/Kbd'\nimport { RowButton } from '~components/Primitives/RowButton'\nimport { breakpoints } from '~components/breakpoints'\nimport { useContainer } from '~hooks'\nimport { styled } from '~styles'\n\nexport function KeyboardShortcutDialog({\n  onOpenChange,\n}: {\n  onOpenChange?: (open: boolean) => void\n}) {\n  const intl = useIntl()\n  const container = useContainer()\n\n  const shortcuts = {\n    Tools: [\n      { label: intl.formatMessage({ id: 'select' }), kbd: '1' },\n      { label: intl.formatMessage({ id: 'draw' }), kbd: '2' },\n      { label: intl.formatMessage({ id: 'eraser' }), kbd: '3' },\n      { label: intl.formatMessage({ id: 'rectangle' }), kbd: '4' },\n      { label: intl.formatMessage({ id: 'ellipse' }), kbd: '5' },\n      { label: intl.formatMessage({ id: 'triangle' }), kbd: '6' },\n      { label: intl.formatMessage({ id: 'line' }), kbd: '7' },\n      { label: intl.formatMessage({ id: 'arrow' }), kbd: '8' },\n      { label: intl.formatMessage({ id: 'text' }), kbd: '9' },\n      { label: intl.formatMessage({ id: 'sticky' }), kbd: '0' },\n    ],\n    View: [\n      { label: intl.formatMessage({ id: 'zoom.in' }), kbd: '#+' },\n      { label: intl.formatMessage({ id: 'zoom.out' }), kbd: '#-' },\n      { label: `${intl.formatMessage({ id: 'zoom.to' })} 100%`, kbd: '\u21E7+0' },\n      { label: intl.formatMessage({ id: 'zoom.to.fit' }), kbd: '\u21E7+1' },\n      { label: intl.formatMessage({ id: 'zoom.to.selection' }), kbd: '\u21E7+2' },\n      { label: intl.formatMessage({ id: 'preferences.dark.mode' }), kbd: '#\u21E7D' },\n      { label: intl.formatMessage({ id: 'preferences.focus.mode' }), kbd: '#.' },\n      { label: intl.formatMessage({ id: 'preferences.show.grid' }), kbd: '#\u21E7G' },\n    ],\n    Transform: [\n      { label: intl.formatMessage({ id: 'flip.horizontal' }), kbd: '\u21E7H' },\n      { label: intl.formatMessage({ id: 'flip.vertical' }), kbd: '\u21E7V' },\n      {\n        label: `${intl.formatMessage({ id: 'lock' })} / ${intl.formatMessage({ id: 'unlock' })}`,\n        kbd: '#\u21E7L',\n      },\n      {\n        label: `${intl.formatMessage({ id: 'move' })} ${intl.formatMessage({ id: 'to.front' })}`,\n        kbd: '\u21E7]',\n      },\n      {\n        label: `${intl.formatMessage({ id: 'move' })} ${intl.formatMessage({ id: 'forward' })}`,\n        kbd: ']',\n      },\n      {\n        label: `${intl.formatMessage({ id: 'move' })} ${intl.formatMessage({ id: 'backward' })}`,\n        kbd: '[',\n      },\n      {\n        label: `${intl.formatMessage({ id: 'move' })} ${intl.formatMessage({ id: 'back' })}`,\n        kbd: '\u21E7[',\n      },\n    ],\n    File: [\n      { label: intl.formatMessage({ id: 'new.project' }), kbd: '#N' },\n      { label: intl.formatMessage({ id: 'open' }), kbd: '#O' },\n      { label: intl.formatMessage({ id: 'save' }), kbd: '#S' },\n      { label: intl.formatMessage({ id: 'save.as' }), kbd: '#\u21E7S' },\n      { label: intl.formatMessage({ id: 'upload.media' }), kbd: '#U' },\n    ],\n    Edit: [\n      { label: intl.formatMessage({ id: 'undo' }), kbd: '#Z' },\n      { label: intl.formatMessage({ id: 'redo' }), kbd: '#\u21E7Z' },\n      { label: intl.formatMessage({ id: 'cut' }), kbd: '#X' },\n      { label: intl.formatMessage({ id: 'copy' }), kbd: '#C' },\n      { label: intl.formatMessage({ id: 'paste' }), kbd: '#V' },\n      { label: intl.formatMessage({ id: 'select.all' }), kbd: '#A' },\n      { label: intl.formatMessage({ id: 'delete' }), kbd: '\u232B' },\n      { label: intl.formatMessage({ id: 'duplicate' }), kbd: '#D' },\n    ],\n  }\n\n  return (\n    <Dialog.Root onOpenChange={onOpenChange}>\n      {/* // todo: hide if no keyboard is attached */}\n      <Dialog.Trigger asChild>\n        <RowButton id=\"TD-HelpItem-Keyboard\" variant=\"wide\">\n          <FormattedMessage id=\"keyboard.shortcuts\" />\n        </RowButton>\n      </Dialog.Trigger>\n      <Dialog.Portal container={container.current}>\n        <DialogOverlay />\n        <DialogContent>\n          <DialogTitle>\n            <FormattedMessage id=\"keyboard.shortcuts\" />\n            <Dialog.Close asChild>\n              <DialogIconButton>\n                <Cross2Icon />\n              </DialogIconButton>\n            </Dialog.Close>\n          </DialogTitle>\n          <StyledColumns bp={breakpoints}>\n            {Object.entries(shortcuts).map(([key, value]) => (\n              <StyledSection key={key}>\n                <Label>\n                  <FormattedMessage id={`menu.${key.toLocaleLowerCase()}`} />\n                </Label>\n                <ContentItem>\n                  {value.map((shortcut) => (\n                    <StyledItem key={shortcut.label}>\n                      {shortcut.label}\n                      <Kbd variant=\"menu\">{shortcut.kbd}</Kbd>\n                    </StyledItem>\n                  ))}\n                </ContentItem>\n              </StyledSection>\n            ))}\n          </StyledColumns>\n        </DialogContent>\n      </Dialog.Portal>\n    </Dialog.Root>\n  )\n}\n\nconst Label = styled('h3', {\n  fontSize: '$2',\n  color: '$text',\n  fontFamily: '$ui',\n  margin: 0,\n  paddingBottom: '$5',\n})\n\nconst StyledSection = styled('div', {\n  breakInside: 'avoid',\n  paddingBottom: 24,\n})\n\nconst ContentItem = styled('ul', {\n  listStyleType: 'none',\n  width: '100%',\n  padding: 0,\n  margin: 0,\n})\n\nconst StyledItem = styled('li', {\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n  height: 32,\n  minHeight: 32,\n  width: '100%',\n  outline: 'none',\n  color: '$text',\n  fontFamily: '$ui',\n  fontWeight: 400,\n  fontSize: '$1',\n  borderRadius: 4,\n  userSelect: 'none',\n  WebkitUserSelect: 'none',\n  margin: 0,\n  padding: '0 0',\n})\n\nconst DialogContent = styled(Dialog.Content, {\n  borderRadius: 6,\n  boxShadow: 'hsl(206 22% 7% / 35%) 0px 10px 38px -10px, hsl(206 22% 7% / 20%) 0px 10px 20px -15px',\n  position: 'fixed',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 'fit-content',\n  maxWidth: '90vw',\n  maxHeight: '74vh',\n  overflowY: 'auto',\n  padding: 25,\n  zIndex: 9999,\n  pointerEvents: 'all',\n  background: '$panel',\n  '&:focus': { outline: 'none' },\n})\n\nconst StyledColumns = styled('div', {\n  maxWidth: '100%',\n  width: 'fit-content',\n  height: 'fit-content',\n  overflowY: 'auto',\n  columnGap: 64,\n  variants: {\n    bp: {\n      mobile: {\n        columns: 1,\n        [`& ${StyledSection}`]: {\n          minWidth: '0px',\n        },\n      },\n      small: {\n        columns: 2,\n        [`& ${StyledSection}`]: {\n          minWidth: '200px',\n        },\n      },\n      medium: {\n        columns: 3,\n      },\n      large: {\n        columns: 3,\n      },\n    },\n  },\n})\n\nconst DialogOverlay = styled(Dialog.Overlay, {\n  backgroundColor: '$overlay',\n  position: 'fixed',\n  inset: 0,\n  zIndex: 9998,\n})\n\nconst DialogIconButton = styled(IconButton, {\n  fontFamily: 'inherit',\n  borderRadius: '100%',\n  height: 25,\n  width: 25,\n  display: 'inline-flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  color: '$text',\n  cursor: 'pointer',\n  '&:hover': { backgroundColor: '$hover' },\n})\n\nconst DialogTitle = styled(Dialog.Title, {\n  fontFamily: '$body',\n  fontSize: '$3',\n  color: '$text',\n  paddingBottom: 32,\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n  margin: 0,\n})\n", "import {\n  ArrowTopRightIcon,\n  CursorArrowIcon,\n  ImageIcon,\n  Pencil1Icon,\n  Pencil2Icon,\n  TextIcon,\n} from '@radix-ui/react-icons'\nimport * as React from 'react'\nimport { useIntl } from 'react-intl'\nimport { Panel } from '~components/Primitives/Panel'\nimport { ToolButtonWithTooltip } from '~components/Primitives/ToolButton'\nimport { EraserIcon } from '~components/Primitives/icons'\nimport { breakpoints } from '~components/breakpoints'\nimport { useTldrawApp } from '~hooks'\nimport { styled } from '~styles/stitches.config'\nimport { TDShapeType, TDSnapshot } from '~types'\nimport { ShapesMenu } from './ShapesMenu'\n\nconst activeToolSelector = (s: TDSnapshot) => s.appState.activeTool\nconst toolLockedSelector = (s: TDSnapshot) => s.appState.isToolLocked\nconst dockPositionState = (s: TDSnapshot) => s.settings.dockPosition\n\nexport const PrimaryTools = React.memo(function PrimaryTools() {\n  const app = useTldrawApp()\n  const intl = useIntl()\n\n  const activeTool = app.useStore(activeToolSelector)\n\n  const isToolLocked = app.useStore(toolLockedSelector)\n  const dockPosition = app.useStore(dockPositionState)\n\n  const selectSelectTool = React.useCallback(() => {\n    app.selectTool('select')\n  }, [app])\n\n  const selectEraseTool = React.useCallback(() => {\n    app.selectTool('erase')\n  }, [app])\n\n  const selectDrawTool = React.useCallback(() => {\n    app.selectTool(TDShapeType.Draw)\n  }, [app])\n\n  const selectArrowTool = React.useCallback(() => {\n    app.selectTool(TDShapeType.Arrow)\n  }, [app])\n\n  const selectTextTool = React.useCallback(() => {\n    app.selectTool(TDShapeType.Text)\n  }, [app])\n\n  const selectStickyTool = React.useCallback(() => {\n    app.selectTool(TDShapeType.Sticky)\n  }, [app])\n\n  const uploadMedias = React.useCallback(async () => {\n    app.openAsset()\n  }, [app])\n\n  const panelStyle = dockPosition === 'bottom' || dockPosition === 'top' ? 'row' : 'column'\n\n  return (\n    <StyledPanel\n      side=\"center\"\n      id=\"TD-PrimaryTools\"\n      style={{ flexDirection: panelStyle }}\n      bp={breakpoints}\n    >\n      <ToolButtonWithTooltip\n        kbd={'1'}\n        label={intl.formatMessage({ id: 'select' })}\n        onClick={selectSelectTool}\n        isActive={activeTool === 'select'}\n        variant=\"primary\"\n        id=\"TD-PrimaryTools-CursorArrow\"\n      >\n        <CursorArrowIcon />\n      </ToolButtonWithTooltip>\n      <ToolButtonWithTooltip\n        kbd={'2'}\n        label={intl.formatMessage({ id: 'draw' })}\n        onClick={selectDrawTool}\n        isActive={activeTool === TDShapeType.Draw}\n        variant=\"primary\"\n        id=\"TD-PrimaryTools-Pencil\"\n      >\n        <Pencil1Icon />\n      </ToolButtonWithTooltip>\n      <ToolButtonWithTooltip\n        kbd={'3'}\n        label={intl.formatMessage({ id: 'eraser' })}\n        onClick={selectEraseTool}\n        isActive={activeTool === 'erase'}\n        variant=\"primary\"\n        id=\"TD-PrimaryTools-Eraser\"\n      >\n        <EraserIcon />\n      </ToolButtonWithTooltip>\n      <ShapesMenu activeTool={activeTool} isToolLocked={isToolLocked} />\n      <ToolButtonWithTooltip\n        kbd={'8'}\n        label={intl.formatMessage({ id: 'arrow' })}\n        onClick={selectArrowTool}\n        isLocked={isToolLocked}\n        variant=\"primary\"\n        isActive={activeTool === TDShapeType.Arrow}\n        id=\"TD-PrimaryTools-ArrowTopRight\"\n      >\n        <ArrowTopRightIcon />\n      </ToolButtonWithTooltip>\n      <ToolButtonWithTooltip\n        kbd={'9'}\n        label={intl.formatMessage({ id: 'text' })}\n        onClick={selectTextTool}\n        isLocked={isToolLocked}\n        variant=\"primary\"\n        isActive={activeTool === TDShapeType.Text}\n        id=\"TD-PrimaryTools-Text\"\n      >\n        <TextIcon />\n      </ToolButtonWithTooltip>\n      <ToolButtonWithTooltip\n        kbd={'0'}\n        label={intl.formatMessage({ id: 'sticky' })}\n        onClick={selectStickyTool}\n        isActive={activeTool === TDShapeType.Sticky}\n        variant=\"primary\"\n        id=\"TD-PrimaryTools-Pencil2\"\n      >\n        <Pencil2Icon />\n      </ToolButtonWithTooltip>\n      <ToolButtonWithTooltip\n        label={intl.formatMessage({ id: 'image' })}\n        onClick={uploadMedias}\n        id=\"TD-PrimaryTools-Image\"\n        variant=\"primary\"\n      >\n        <ImageIcon />\n      </ToolButtonWithTooltip>\n    </StyledPanel>\n  )\n})\n\nconst StyledPanel = styled(Panel, {\n  variants: {\n    bp: {\n      mobile: {\n        padding: '$0',\n        borderRadius: '10px',\n      },\n      small: {\n        padding: '$2',\n      },\n    },\n  },\n})\n", "import { styled } from '~styles/stitches.config'\n\nexport const Panel = styled('div', {\n  backgroundColor: '$panel',\n  display: 'flex',\n  alignItems: 'center',\n  flexDirection: 'row',\n  boxShadow: '$panel',\n  padding: '$2',\n  border: '1px solid $panelContrast',\n  gap: 0,\n  overflow: 'hidden',\n  variants: {\n    side: {\n      center: {\n        borderRadius: 9,\n      },\n      left: {\n        padding: 0,\n        borderTop: 0,\n        borderLeft: 0,\n        borderTopRightRadius: 0,\n        borderBottomRightRadius: 9,\n        borderBottomLeftRadius: 0,\n      },\n      right: {\n        padding: 0,\n        borderTop: 0,\n        borderRight: 0,\n        borderTopLeftRadius: 0,\n        borderBottomLeftRadius: 9,\n        borderBottomRightRadius: 0,\n      },\n    },\n  },\n  '& hr': {\n    height: 10,\n    width: '100%',\n    backgroundColor: 'red',\n    border: 'none',\n  },\n})\n", "import * as DropdownMenu from '@radix-ui/react-dropdown-menu'\nimport { CircleIcon, SquareIcon, VercelLogoIcon } from '@radix-ui/react-icons'\nimport * as React from 'react'\nimport { useIntl } from 'react-intl'\nimport { Panel } from '~components/Primitives/Panel'\nimport { ToolButton } from '~components/Primitives/ToolButton'\nimport { Tooltip } from '~components/Primitives/Tooltip'\nimport { LineIcon } from '~components/Primitives/icons'\nimport { useTldrawApp } from '~hooks'\nimport { TDShapeType, TDSnapshot, TDToolType } from '~types'\n\ninterface ShapesMenuProps {\n  activeTool: TDToolType\n  isToolLocked: boolean\n}\n\ntype ShapeShape =\n  | TDShapeType.Rectangle\n  | TDShapeType.Ellipse\n  | TDShapeType.Triangle\n  | TDShapeType.Line\n\nconst shapeShapes: ShapeShape[] = [\n  TDShapeType.Rectangle,\n  TDShapeType.Ellipse,\n  TDShapeType.Triangle,\n  TDShapeType.Line,\n]\n\nconst shapeShapeIcons = {\n  [TDShapeType.Rectangle]: <SquareIcon />,\n  [TDShapeType.Ellipse]: <CircleIcon />,\n  [TDShapeType.Triangle]: <VercelLogoIcon />,\n  [TDShapeType.Line]: <LineIcon />,\n}\n\nconst dockPositionState = (s: TDSnapshot) => s.settings.dockPosition\n\nexport const ShapesMenu = React.memo(function ShapesMenu({\n  activeTool,\n  isToolLocked,\n}: ShapesMenuProps) {\n  const app = useTldrawApp()\n  const intl = useIntl()\n\n  const dockPosition = app.useStore(dockPositionState)\n\n  const [lastActiveTool, setLastActiveTool] = React.useState<ShapeShape>(TDShapeType.Rectangle)\n\n  React.useEffect(() => {\n    if (shapeShapes.includes(activeTool as ShapeShape) && lastActiveTool !== activeTool) {\n      setLastActiveTool(activeTool as ShapeShape)\n    }\n  }, [activeTool])\n\n  const selectShapeTool = React.useCallback(() => {\n    app.selectTool(lastActiveTool)\n  }, [activeTool, app])\n\n  const handleDoubleClick = React.useCallback(() => {\n    app.toggleToolLock()\n  }, [app])\n\n  const handleKeyDown = React.useCallback((e: React.KeyboardEvent<HTMLButtonElement>) => {\n    if (e.key === ' ') {\n      if (app.shiftKey) {\n        e.preventDefault()\n      }\n    }\n  }, [])\n\n  const isActive = shapeShapes.includes(activeTool as ShapeShape)\n  const contentSide = dockPosition === 'bottom' || dockPosition === 'top' ? 'top' : dockPosition\n\n  const panelStyle = dockPosition === 'bottom' || dockPosition === 'top' ? 'row' : 'column'\n\n  return (\n    <DropdownMenu.Root dir=\"ltr\" onOpenChange={selectShapeTool}>\n      <DropdownMenu.Trigger dir=\"ltr\" asChild id=\"TD-PrimaryTools-Shapes\">\n        <ToolButton\n          disabled={isActive && app.shiftKey} // otherwise this continuously opens and closes on \"SpacePanning\"\n          variant=\"primary\"\n          onDoubleClick={handleDoubleClick}\n          isToolLocked={isActive && isToolLocked}\n          isActive={isActive}\n          onKeyDown={handleKeyDown}\n          aria-label={intl.formatMessage({ id: 'shapes' })}\n        >\n          {shapeShapeIcons[lastActiveTool]}\n        </ToolButton>\n      </DropdownMenu.Trigger>\n      <DropdownMenu.Content asChild side={contentSide} sideOffset={12}>\n        <Panel side=\"center\" style={{ flexDirection: panelStyle }}>\n          {shapeShapes.map((shape, i) => (\n            <Tooltip\n              key={shape}\n              label={intl.formatMessage({ id: shape })}\n              kbd={(4 + i).toString()}\n              id={`TD-PrimaryTools-Shapes-${shape}`}\n            >\n              <DropdownMenu.Item asChild>\n                <ToolButton\n                  aria-label={intl.formatMessage({ id: shape })}\n                  variant=\"primary\"\n                  onClick={() => {\n                    app.selectTool(shape)\n                    setLastActiveTool(shape)\n                  }}\n                >\n                  {shapeShapeIcons[shape]}\n                </ToolButton>\n              </DropdownMenu.Item>\n            </Tooltip>\n          ))}\n        </Panel>\n      </DropdownMenu.Content>\n    </DropdownMenu.Root>\n  )\n})\n", "import * as React from 'react'\nimport { breakpoints } from '~components/breakpoints'\nimport { useTldrawApp } from '~hooks'\nimport { styled } from '~styles'\nimport type { TDSnapshot } from '~types'\n\nconst statusSelector = (s: TDSnapshot) => s.appState.status\nconst activeToolSelector = (s: TDSnapshot) => s.appState.activeTool\n\nexport function StatusBar() {\n  const app = useTldrawApp()\n  const status = app.useStore(statusSelector)\n  const activeTool = app.useStore(activeToolSelector)\n\n  return (\n    <StyledStatusBar bp={breakpoints} id=\"TD-StatusBar\">\n      <StyledSection>\n        {activeTool} | {status}\n      </StyledSection>\n    </StyledStatusBar>\n  )\n}\n\nconst StyledStatusBar = styled('div', {\n  height: 40,\n  userSelect: 'none',\n  WebkitUserSelect: 'none',\n  borderTop: '1px solid $panelContrast',\n  gridArea: 'status',\n  display: 'flex',\n  color: '$text',\n  justifyContent: 'space-between',\n  alignItems: 'center',\n  backgroundColor: '$panel',\n  gap: 8,\n  fontFamily: '$ui',\n  fontSize: '$0',\n  padding: '0 16px',\n\n  variants: {\n    bp: {\n      small: {\n        fontSize: '$1',\n      },\n    },\n  },\n})\n\nconst StyledSection = styled('div', {\n  whiteSpace: 'nowrap',\n  overflow: 'hidden',\n})\n", "import * as React from 'react'\nimport { useIntl } from 'react-intl'\nimport { Panel } from '~components/Primitives/Panel'\nimport { ToolButton, ToolButtonWithTooltip } from '~components/Primitives/ToolButton'\nimport { UndoIcon } from '~components/Primitives/icons'\nimport { useTldrawApp } from '~hooks'\nimport { styled } from '~styles'\nimport { Menu } from './Menu/Menu'\nimport { MultiplayerMenu } from './MultiplayerMenu'\nimport { PageMenu } from './PageMenu'\nimport { StyleMenu } from './StyleMenu'\nimport { ZoomMenu } from './ZoomMenu'\n\ninterface TopPanelProps {\n  readOnly: boolean\n  showPages: boolean\n  showMenu: boolean\n  showStyles: boolean\n  showZoom: boolean\n  showMultiplayerMenu: boolean\n}\n\nexport function _TopPanel({\n  readOnly,\n  showPages,\n  showMenu,\n  showStyles,\n  showZoom,\n  showMultiplayerMenu,\n}: TopPanelProps) {\n  const app = useTldrawApp()\n  const intl = useIntl()\n\n  return (\n    <StyledTopPanel>\n      {(showMenu || showPages) && (\n        <Panel side=\"left\" id=\"TD-MenuPanel\">\n          {showMenu && <Menu readOnly={readOnly} />}\n          {showMultiplayerMenu && <MultiplayerMenu />}\n          {showPages && <PageMenu />}\n        </Panel>\n      )}\n      <StyledSpacer />\n      {(showStyles || showZoom) && (\n        <Panel side=\"right\">\n          {app.readOnly ? (\n            <ReadOnlyLabel>Read Only</ReadOnlyLabel>\n          ) : (\n            <>\n              <ToolButtonWithTooltip\n                kbd={'#Z'}\n                label={intl.formatMessage({ id: 'undo' })}\n                onClick={app.undo}\n                id=\"TD-TopPanel-Undo\"\n                aria-label={intl.formatMessage({ id: 'undo' })}\n              >\n                <UndoIcon />\n              </ToolButtonWithTooltip>\n              <ToolButtonWithTooltip\n                kbd={'#\u21E7Z'}\n                label={intl.formatMessage({ id: 'redo' })}\n                onClick={app.redo}\n                id=\"TD-TopPanel-Redo\"\n                aria-label={intl.formatMessage({ id: 'redo' })}\n              >\n                <UndoIcon flipHorizontal />\n              </ToolButtonWithTooltip>\n            </>\n          )}\n          {showZoom && <ZoomMenu />}\n          {showStyles && !readOnly && <StyleMenu />}\n        </Panel>\n      )}\n    </StyledTopPanel>\n  )\n}\n\nconst StyledTopPanel = styled('div', {\n  width: '100%',\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  right: 0,\n  display: 'flex',\n  flexDirection: 'row',\n  pointerEvents: 'none',\n  '& > *': {\n    pointerEvents: 'all',\n  },\n})\n\nconst StyledSpacer = styled('div', {\n  flexGrow: 2,\n  pointerEvents: 'none',\n})\n\nconst ReadOnlyLabel = styled('div', {\n  width: '100%',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  fontFamily: '$ui',\n  fontSize: '$1',\n  paddingLeft: '$4',\n  paddingRight: '$1',\n  userSelect: 'none',\n  WebkitUserSelect: 'none',\n})\n\nexport const TopPanel = React.memo(_TopPanel)\n", "import * as DropdownMenu from '@radix-ui/react-dropdown-menu'\nimport { HamburgerMenuIcon } from '@radix-ui/react-icons'\nimport { supported } from 'browser-fs-access'\nimport * as React from 'react'\nimport { FormattedMessage, useIntl } from 'react-intl'\nimport { FilenameDialog } from '~components/Primitives/AlertDialog'\nimport { Divider } from '~components/Primitives/Divider'\nimport { DMContent, DMItem, DMSubMenu, DMTriggerIcon } from '~components/Primitives/DropdownMenu'\nimport { preventEvent } from '~components/preventEvent'\nimport { useTldrawApp } from '~hooks'\nimport { useFileSystemHandlers } from '~hooks'\nimport { TDExportType, TDSnapshot } from '~types'\nimport { PreferencesMenu } from '../PreferencesMenu'\n\ninterface MenuProps {\n  readOnly: boolean\n}\n\nconst numberOfSelectedIdsSelector = (s: TDSnapshot) => {\n  return s.document.pageStates[s.appState.currentPageId].selectedIds.length\n}\n\nconst disableAssetsSelector = (s: TDSnapshot) => {\n  return s.appState.disableAssets\n}\n\nexport const Menu = React.memo(function Menu({ readOnly }: MenuProps) {\n  const app = useTldrawApp()\n  const intl = useIntl()\n  const [openDialog, setOpenDialog] = React.useState(false)\n\n  const numberOfSelectedIds = app.useStore(numberOfSelectedIdsSelector)\n\n  const disableAssets = app.useStore(disableAssetsSelector)\n\n  const [_, setForce] = React.useState(0)\n\n  React.useEffect(() => setForce(1), [])\n\n  const { onNewProject, onOpenProject, onSaveProject, onSaveProjectAs } = useFileSystemHandlers()\n\n  const handleSaveProjectAs = React.useCallback(() => {\n    if (!supported) {\n      setOpenDialog(true)\n    } else {\n      app.saveProjectAs()\n    }\n  }, [app])\n\n  const handleDelete = React.useCallback(() => {\n    app.delete()\n  }, [app])\n\n  const handleCopySVG = React.useCallback(() => {\n    app.copyImage(TDExportType.SVG, { scale: 1, quality: 1, transparentBackground: false })\n  }, [app])\n\n  const handleCopyPNG = React.useCallback(() => {\n    app.copyImage(TDExportType.PNG, { scale: 2, quality: 1, transparentBackground: true })\n  }, [app])\n\n  const handleExportPNG = React.useCallback(async () => {\n    app.exportImage(TDExportType.PNG, { scale: 2, quality: 1 })\n  }, [app])\n\n  const handleExportJPG = React.useCallback(async () => {\n    app.exportImage(TDExportType.JPG, { scale: 2, quality: 1 })\n  }, [app])\n\n  const handleExportWEBP = React.useCallback(async () => {\n    app.exportImage(TDExportType.WEBP, { scale: 2, quality: 1 })\n  }, [app])\n\n  const handleExportSVG = React.useCallback(async () => {\n    app.exportImage(TDExportType.SVG, { scale: 2, quality: 1 })\n  }, [app])\n\n  const handleCopyJSON = React.useCallback(async () => {\n    app.copyJson()\n  }, [app])\n\n  const handleExportJSON = React.useCallback(async () => {\n    app.exportJson()\n  }, [app])\n\n  const handleCut = React.useCallback(() => {\n    app.cut()\n  }, [app])\n\n  const handleCopy = React.useCallback(() => {\n    app.copy()\n  }, [app])\n\n  const handlePaste = React.useCallback(() => {\n    app.paste()\n  }, [app])\n\n  const handleSelectAll = React.useCallback(() => {\n    app.selectAll()\n  }, [app])\n\n  const handleSelectNone = React.useCallback(() => {\n    app.selectNone()\n  }, [app])\n\n  const handleUploadMedia = React.useCallback(() => {\n    app.openAsset()\n  }, [app])\n\n  const handleZoomTo100 = React.useCallback(() => {\n    app.zoomTo(1)\n  }, [app])\n\n  const showFileMenu =\n    app.callbacks.onNewProject ||\n    app.callbacks.onOpenProject ||\n    app.callbacks.onSaveProject ||\n    app.callbacks.onSaveProjectAs ||\n    app.callbacks.onExport\n\n  const hasSelection = numberOfSelectedIds > 0\n\n  return (\n    <>\n      <DropdownMenu.Root dir=\"ltr\">\n        <DMTriggerIcon id=\"TD-MenuIcon\">\n          <HamburgerMenuIcon />\n        </DMTriggerIcon>\n        <DMContent\n          variant=\"menu\"\n          id=\"TD-Menu\"\n          side=\"bottom\"\n          align=\"start\"\n          sideOffset={4}\n          alignOffset={4}\n        >\n          {showFileMenu && (\n            <DMSubMenu\n              label={`${intl.formatMessage({ id: 'menu.file' })}...`}\n              id=\"TD-MenuItem-File\"\n            >\n              {app.callbacks.onNewProject && (\n                <DMItem onClick={onNewProject} kbd=\"#N\" id=\"TD-MenuItem-File-New_Project\">\n                  <FormattedMessage id=\"new.project\" />\n                </DMItem>\n              )}\n              {app.callbacks.onOpenProject && (\n                <DMItem onClick={onOpenProject} kbd=\"#O\" id=\"TD-MenuItem-File-Open\">\n                  <FormattedMessage id=\"open\" />\n                  ...\n                </DMItem>\n              )}\n              {app.callbacks.onSaveProject && (\n                <DMItem onClick={onSaveProject} kbd=\"#S\" id=\"TD-MenuItem-File-Save\">\n                  <FormattedMessage id=\"save\" />\n                </DMItem>\n              )}\n              {app.callbacks.onSaveProjectAs && (\n                <DMItem onClick={handleSaveProjectAs} kbd=\"#\u21E7S\" id=\"TD-MenuItem-File-Save_As\">\n                  <FormattedMessage id=\"save.as\" />\n                  ...\n                </DMItem>\n              )}\n              <DMSubMenu\n                label={`${intl.formatMessage({ id: 'export.as' })}...`}\n                size=\"small\"\n                id=\"TD-MenuItem-Export\"\n              >\n                <DMItem onClick={handleExportSVG} id=\"TD-MenuItem-Export-SVG\">\n                  SVG\n                </DMItem>\n                <DMItem onClick={handleExportPNG} id=\"TD-MenuItem-Export-PNG\">\n                  PNG\n                </DMItem>\n                <DMItem onClick={handleExportJPG} id=\"TD-MenuItem-Export-JPG\">\n                  JPG\n                </DMItem>\n                <DMItem onClick={handleExportWEBP} id=\"TD-MenuItem-Export-WEBP\">\n                  WEBP\n                </DMItem>\n                <DMItem onClick={handleExportJSON} id=\"TD-MenuItem-Export-JSON\">\n                  JSON\n                </DMItem>\n              </DMSubMenu>\n              {!disableAssets && (\n                <>\n                  <Divider />\n                  <DMItem onClick={handleUploadMedia} kbd=\"#U\" id=\"TD-MenuItem-File-Upload_Media\">\n                    <FormattedMessage id=\"upload.media\" />\n                  </DMItem>\n                </>\n              )}\n            </DMSubMenu>\n          )}\n          <DMSubMenu label={`${intl.formatMessage({ id: 'menu.edit' })}...`} id=\"TD-MenuItem-Edit\">\n            <DMItem\n              onSelect={preventEvent}\n              onClick={app.undo}\n              disabled={readOnly}\n              kbd=\"#Z\"\n              id=\"TD-MenuItem-Edit-Undo\"\n            >\n              <FormattedMessage id=\"undo\" />\n            </DMItem>\n            <DMItem\n              onSelect={preventEvent}\n              onClick={app.redo}\n              disabled={readOnly}\n              kbd=\"#\u21E7Z\"\n              id=\"TD-MenuItem-Edit-Redo\"\n            >\n              <FormattedMessage id=\"redo\" />\n            </DMItem>\n            <Divider />\n            <DMItem\n              onSelect={preventEvent}\n              disabled={!hasSelection || readOnly}\n              onClick={handleCut}\n              kbd=\"#X\"\n              id=\"TD-MenuItem-Edit-Cut\"\n            >\n              <FormattedMessage id=\"cut\" />\n            </DMItem>\n            <DMItem\n              onSelect={preventEvent}\n              disabled={!hasSelection}\n              onClick={handleCopy}\n              kbd=\"#C\"\n              id=\"TD-MenuItem-Edit-Copy\"\n            >\n              <FormattedMessage id=\"copy\" />\n            </DMItem>\n            <DMItem\n              onSelect={preventEvent}\n              onClick={handlePaste}\n              kbd=\"#V\"\n              id=\"TD-MenuItem-Edit-Paste\"\n            >\n              <FormattedMessage id=\"paste\" />\n            </DMItem>\n            <Divider />\n            <DMSubMenu\n              label={`${intl.formatMessage({ id: 'copy.as' })}...`}\n              size=\"small\"\n              id=\"TD-MenuItem-Copy-As\"\n            >\n              <DMItem onClick={handleCopySVG} id=\"TD-MenuItem-Copy-as-SVG\">\n                SVG\n              </DMItem>\n              <DMItem onClick={handleCopyPNG} id=\"TD-MenuItem-Copy-As-PNG\">\n                PNG\n              </DMItem>\n              <DMItem onClick={handleCopyJSON} id=\"TD-MenuItem-Copy_as_JSON\">\n                JSON\n              </DMItem>\n            </DMSubMenu>\n\n            <Divider />\n            <DMItem\n              onSelect={preventEvent}\n              onClick={handleSelectAll}\n              kbd=\"#A\"\n              id=\"TD-MenuItem-Select_All\"\n            >\n              <FormattedMessage id=\"select.all\" />\n            </DMItem>\n            <DMItem\n              onSelect={preventEvent}\n              disabled={!hasSelection}\n              onClick={handleSelectNone}\n              id=\"TD-MenuItem-Select_None\"\n            >\n              <FormattedMessage id=\"select.none\" />\n            </DMItem>\n            <Divider />\n            <DMItem\n              onSelect={handleDelete}\n              disabled={!hasSelection}\n              kbd=\"\u232B\"\n              id=\"TD-MenuItem-Delete\"\n            >\n              <FormattedMessage id=\"delete\" />\n            </DMItem>\n          </DMSubMenu>\n          <DMSubMenu label={intl.formatMessage({ id: 'menu.view' })} id=\"TD-MenuItem-Edit\">\n            <DMItem\n              onSelect={preventEvent}\n              onClick={app.zoomIn}\n              kbd=\"#+\"\n              id=\"TD-MenuItem-View-ZoomIn\"\n            >\n              <FormattedMessage id=\"zoom.in\" />\n            </DMItem>\n            <DMItem\n              onSelect={preventEvent}\n              onClick={app.zoomOut}\n              kbd=\"#-\"\n              id=\"TD-MenuItem-View-ZoomOut\"\n            >\n              <FormattedMessage id=\"zoom.out\" />\n            </DMItem>\n            <DMItem\n              onSelect={preventEvent}\n              onClick={handleZoomTo100}\n              kbd=\"\u21E7+0\"\n              id=\"TD-MenuItem-View-ZoomTo100\"\n            >\n              <FormattedMessage id=\"zoom.to\" /> 100%\n            </DMItem>\n            <DMItem\n              onSelect={preventEvent}\n              onClick={app.zoomToFit}\n              kbd=\"\u21E7+1\"\n              id=\"TD-MenuItem-View-ZoomToFit\"\n            >\n              <FormattedMessage id=\"zoom.to.fit\" />\n            </DMItem>\n            <DMItem\n              onSelect={preventEvent}\n              onClick={app.zoomToSelection}\n              kbd=\"\u21E7+2\"\n              id=\"TD-MenuItem-View-ZoomToSelection\"\n            >\n              <FormattedMessage id=\"zoom.to.selection\" />\n            </DMItem>\n          </DMSubMenu>\n          <Divider />\n          <PreferencesMenu />\n        </DMContent>\n      </DropdownMenu.Root>\n      <FilenameDialog isOpen={openDialog} onClose={() => setOpenDialog(false)} />\n    </>\n  )\n})\n", "import * as React from 'react'\nimport { FormattedMessage, useIntl } from 'react-intl'\nimport { Divider } from '~components/Primitives/Divider'\nimport { DMCheckboxItem, DMSubMenu } from '~components/Primitives/DropdownMenu'\nimport { useTldrawApp } from '~hooks'\nimport { styled } from '~styles'\nimport { TDDockPosition, TDExportBackground, TDSnapshot } from '~types'\n\nconst settingsSelector = (s: TDSnapshot) => s.settings\n\nconst DockPosition = ['bottom', 'left', 'right', 'top']\n\nexport function PreferencesMenu() {\n  const app = useTldrawApp()\n  const intl = useIntl()\n\n  const settings = app.useStore(settingsSelector)\n\n  const toggleDebugMode = React.useCallback(() => {\n    app.setSetting('isDebugMode', (v) => !v)\n  }, [app])\n\n  const toggleDarkMode = React.useCallback(() => {\n    app.setSetting('isDarkMode', (v) => !v)\n  }, [app])\n\n  const toggleFocusMode = React.useCallback(() => {\n    app.setSetting('isFocusMode', (v) => !v)\n  }, [app])\n\n  const toggleGrid = React.useCallback(() => {\n    app.setSetting('showGrid', (v) => !v)\n  }, [app])\n\n  const toggleKeepStyleMenuOpen = React.useCallback(() => {\n    app.setSetting('keepStyleMenuOpen', (v) => !v)\n  }, [app])\n\n  const toggleCadSelectMode = React.useCallback(() => {\n    app.setSetting('isCadSelectMode', (v) => !v)\n  }, [app])\n\n  const handleChangeDockPosition = React.useCallback(\n    (position: TDDockPosition) => {\n      app.setSetting('dockPosition', position)\n    },\n    [app]\n  )\n\n  const selectExportBackground = React.useCallback(\n    (background: TDExportBackground) => {\n      app.setSetting('exportBackground', background)\n    },\n    [app]\n  )\n\n  return (\n    <DMSubMenu label={intl.formatMessage({ id: 'menu.preferences' })} id=\"TD-MenuItem-Preferences\">\n      <DMCheckboxItem\n        checked={settings.isDarkMode}\n        onCheckedChange={toggleDarkMode}\n        kbd=\"#\u21E7D\"\n        id=\"TD-MenuItem-Preferences-Dark_Mode\"\n        ariaLabel={intl.formatMessage({ id: 'preferences.dark.mode' })}\n      >\n        <FormattedMessage id=\"preferences.dark.mode\" />\n      </DMCheckboxItem>\n      <DMCheckboxItem\n        checked={settings.isFocusMode}\n        onCheckedChange={toggleFocusMode}\n        kbd=\"#.\"\n        id=\"TD-MenuItem-Preferences-Focus_Mode\"\n        ariaLabel={intl.formatMessage({ id: 'preferences.focus.mode' })}\n      >\n        <FormattedMessage id=\"preferences.focus.mode\" />\n      </DMCheckboxItem>\n      <DMCheckboxItem\n        checked={settings.isDebugMode}\n        onCheckedChange={toggleDebugMode}\n        id=\"TD-MenuItem-Preferences-Debug_Mode\"\n        ariaLabel={intl.formatMessage({ id: 'preferences.debug.mode' })}\n      >\n        <FormattedMessage id=\"preferences.debug.mode\" />\n      </DMCheckboxItem>\n      <Divider />\n      <DMCheckboxItem\n        checked={settings.showGrid}\n        onCheckedChange={toggleGrid}\n        kbd=\"#\u21E7G\"\n        id=\"TD-MenuItem-Preferences-Grid\"\n        ariaLabel={intl.formatMessage({ id: 'preferences.show.grid' })}\n      >\n        <FormattedMessage id=\"preferences.show.grid\" />\n      </DMCheckboxItem>\n      <DMCheckboxItem\n        checked={settings.isCadSelectMode}\n        onCheckedChange={toggleCadSelectMode}\n        id=\"TD-MenuItem-Preferences-Cad_Selection\"\n        ariaLabel={intl.formatMessage({ id: 'preferences.use.cad.selection' })}\n      >\n        <FormattedMessage id=\"preferences.use.cad.selection\" />\n      </DMCheckboxItem>\n      <DMCheckboxItem\n        checked={settings.keepStyleMenuOpen}\n        onCheckedChange={toggleKeepStyleMenuOpen}\n        id=\"TD-MenuItem-Preferences-Style_menu\"\n        ariaLabel={intl.formatMessage({ id: 'preferences.keep.stylemenu.open' })}\n      >\n        <FormattedMessage id=\"preferences.keep.stylemenu.open\" />\n      </DMCheckboxItem>\n      <DMSubMenu label={intl.formatMessage({ id: 'dock.position' })}>\n        {DockPosition.map((position) => (\n          <DMCheckboxItem\n            key={position}\n            checked={settings.dockPosition === position}\n            onCheckedChange={() => handleChangeDockPosition(position as TDDockPosition)}\n            id={`TD-MenuItem-DockPosition-${position}`}\n            ariaLabel={`DockPosition-${position}`}\n          >\n            <StyledText>\n              <FormattedMessage id={position} />\n            </StyledText>\n          </DMCheckboxItem>\n        ))}\n      </DMSubMenu>\n      <DMSubMenu label={intl.formatMessage({ id: 'export.background' })}>\n        {Object.values(TDExportBackground).map((exportBackground) => (\n          <DMCheckboxItem\n            key={exportBackground}\n            checked={settings.exportBackground === exportBackground}\n            onCheckedChange={() => selectExportBackground(exportBackground as TDExportBackground)}\n            id={`TD-MenuItem-ExportBackground-${exportBackground}`}\n            ariaLabel={`ExportBackground-${exportBackground}`}\n          >\n            <StyledText>\n              <FormattedMessage id={exportBackground as string} />\n            </StyledText>\n          </DMCheckboxItem>\n        ))}\n      </DMSubMenu>\n    </DMSubMenu>\n  )\n}\n\nconst StyledText = styled('span', {\n  textTransform: 'capitalize',\n})\n", "import * as DropdownMenu from '@radix-ui/react-dropdown-menu'\nimport { CheckIcon, ClipboardIcon } from '@radix-ui/react-icons'\nimport { Utils } from '@tldraw/core'\nimport * as React from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { Divider } from '~components/Primitives/Divider'\nimport { DMContent, DMItem, DMTriggerIcon } from '~components/Primitives/DropdownMenu'\nimport { SmallIcon } from '~components/Primitives/SmallIcon'\nimport { MultiplayerIcon2 } from '~components/Primitives/icons/MultiplayerIcon2'\nimport { useTldrawApp } from '~hooks'\nimport { TLDR } from '~state/TLDR'\nimport { TDAssetType, TDSnapshot } from '~types'\n\nconst roomSelector = (state: TDSnapshot) => state.room\n\nexport const MultiplayerMenu = function MultiplayerMenu() {\n  const app = useTldrawApp()\n\n  const room = app.useStore(roomSelector)\n\n  const [copied, setCopied] = React.useState(false)\n\n  const rTimeout = React.useRef<any>(0)\n\n  const handleCopySelect = React.useCallback(() => {\n    setCopied(true)\n    TLDR.copyStringToClipboard(window.location.href)\n    clearTimeout(rTimeout.current)\n    rTimeout.current = setTimeout(() => setCopied(false), 1200)\n  }, [])\n\n  const handleCopyReadOnlySelect = React.useCallback(() => {\n    setCopied(true)\n    const segs = window.location.href.split('/')\n    segs[segs.length - 2] = 'v'\n    segs[segs.length - 1] = Utils.lns(segs[segs.length - 1])\n    TLDR.copyStringToClipboard(segs.join('/'))\n    clearTimeout(rTimeout.current)\n    rTimeout.current = setTimeout(() => setCopied(false), 1200)\n  }, [])\n\n  const handleCreateMultiplayerProject = React.useCallback(async () => {\n    if (app.isDirty) {\n      if (app.fileSystemHandle) {\n        if (window.confirm('Do you want to save changes to your current project?')) {\n          await app.saveProject()\n        }\n      } else {\n        if (window.confirm('Do you want to save your current project?')) {\n          await app.saveProject()\n        }\n      }\n    } else if (!app.fileSystemHandle) {\n      if (window.confirm('Do you want to save your current project?')) {\n        await app.saveProject()\n      }\n    }\n  }, [])\n\n  const handleCopyToMultiplayerProject = React.useCallback(async () => {\n    const nextDocument = Utils.deepClone(app.document)\n\n    app.setIsLoading(true)\n\n    try {\n      if (app.callbacks.onAssetUpload) {\n        for (const id in nextDocument.assets) {\n          const asset = nextDocument.assets[id]\n          if (asset.src.includes('base64')) {\n            const file = dataURLtoFile(\n              asset.src,\n              asset.fileName ?? asset.type === TDAssetType.Video ? 'image.png' : 'image.mp4'\n            )\n            const newSrc = await app.callbacks.onAssetUpload(app, file, id)\n            if (newSrc) {\n              asset.src = newSrc\n            } else {\n              asset.src = ''\n            }\n          }\n        }\n      }\n\n      const result = await fetch(`/api/create`, {\n        method: 'POST',\n        mode: 'no-cors',\n        headers: {\n          'Access-Control-Allow-Origin': '*',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          roomId: Utils.uniqueId(),\n          pageId: app.currentPageId,\n          document: nextDocument,\n        }),\n      }).then((d) => d.json())\n\n      if (result?.url) {\n        window.location.href = result.url\n      } else {\n        TLDR.warn(result?.message)\n      }\n    } catch (e) {\n      TLDR.warn((e as any).message)\n    }\n\n    app.setIsLoading(false)\n  }, [])\n\n  return (\n    <DropdownMenu.Root dir=\"ltr\">\n      <DMTriggerIcon id=\"TD-MultiplayerMenuIcon\" isActive={!!room}>\n        <MultiplayerIcon2 />\n      </DMTriggerIcon>\n      <DMContent variant=\"menu\" id=\"TD-MultiplayerMenu\" side=\"bottom\" align=\"start\" sideOffset={4}>\n        <DMItem id=\"TD-Multiplayer-CopyInviteLink\" onClick={handleCopySelect} disabled={!room}>\n          <FormattedMessage id=\"copy.invite.link\" />\n          <SmallIcon>{copied ? <CheckIcon /> : <ClipboardIcon />}</SmallIcon>\n        </DMItem>\n        <DMItem\n          id=\"TD-Multiplayer-CopyReadOnlyLink\"\n          onClick={handleCopyReadOnlySelect}\n          disabled={!room}\n        >\n          <FormattedMessage id=\"copy.readonly.link\" />\n          <SmallIcon>{copied ? <CheckIcon /> : <ClipboardIcon />}</SmallIcon>\n        </DMItem>\n        <Divider />\n        <DMItem\n          id=\"TD-Multiplayer-CreateMultiplayerProject\"\n          onClick={handleCreateMultiplayerProject}\n        >\n          <a href={`${window.location.origin}/r`}>\n            <FormattedMessage id=\"create.multiplayer.project\" />\n          </a>\n        </DMItem>\n        <DMItem\n          id=\"TD-Multiplayer-CopyToMultiplayerProject\"\n          onClick={handleCopyToMultiplayerProject}\n        >\n          <FormattedMessage id=\"copy.multiplayer.project\" />\n        </DMItem>\n      </DMContent>\n    </DropdownMenu.Root>\n  )\n}\n\nfunction dataURLtoFile(dataurl: string, filename: string) {\n  const arr = dataurl.split(',')\n  const mime = arr[0]?.match(/:(.*?);/)?.[1]\n  const bstr = window.atob(arr[1])\n  let n = bstr.length\n  const u8arr = new Uint8Array(n)\n\n  while (n--) {\n    u8arr[n] = bstr.charCodeAt(n)\n  }\n\n  return new File([u8arr], filename, { type: mime })\n}\n", "import * as React from 'react'\n\nexport function MultiplayerIcon2() {\n  return (\n    <svg\n      width=\"15\"\n      height=\"15\"\n      viewBox=\"0 0 15 15\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"currentColor\"\n      fillRule=\"evenodd\"\n      clipRule=\"evenodd\"\n    >\n      <path d=\"M1.36482 4.71089C1.36482 3.21371 2.57853 2 4.07572 2C5.5729 2 6.78661 3.21371 6.78661 4.71089C6.78661 5.76842 6.18106 6.68452 5.29779 7.13136C5.80465 7.24611 6.26407 7.44186 6.66028 7.73182C7.18674 8.11711 7.57215 8.64722 7.81073 9.30983C7.81452 9.30606 7.81832 9.3023 7.82212 9.29855C8.30448 8.82317 8.91325 8.52463 9.60905 8.37275C8.68812 7.922 8.05394 6.97569 8.05394 5.88126C8.05394 4.35017 9.29513 3.10898 10.8262 3.10898C12.3573 3.10898 13.5985 4.35017 13.5985 5.88126C13.5985 6.97561 12.9644 7.92186 12.0436 8.37265C12.7396 8.52449 13.3486 8.82306 13.831 9.29854C14.5795 10.0361 14.9481 11.1249 14.9481 12.5176C14.9481 12.7799 14.7354 12.9926 14.473 12.9926C14.2107 12.9926 13.9981 12.7799 13.9981 12.5175C13.9981 11.2848 13.6738 10.4774 13.1642 9.97518C12.6532 9.4716 11.8802 9.20024 10.8266 9.20024C9.77294 9.20024 8.99993 9.4716 8.48896 9.97518C7.97939 10.4774 7.65513 11.2848 7.65513 12.5176C7.65513 12.7799 7.44247 12.9926 7.18013 12.9926C6.9178 12.9926 6.70513 12.7799 6.70513 12.5176C6.70513 11.6734 6.84053 10.941 7.11384 10.3307C7.0922 10.2895 7.0763 10.2444 7.06737 10.1962C6.91739 9.38749 6.57392 8.84586 6.09923 8.49845C5.61626 8.14499 4.94481 7.95427 4.07574 7.95427C3.05232 7.95427 2.30368 8.21784 1.80952 8.70485C1.31675 9.19047 1.00176 9.97257 1.00176 11.1702C1.00176 11.4326 0.789093 11.6452 0.526758 11.6452C0.264423 11.6452 0.0517578 11.4326 0.0517578 11.1702C0.0517578 9.81263 0.411052 8.74925 1.14268 8.02821C1.60624 7.57137 2.18892 7.28191 2.85378 7.13142C1.97043 6.68461 1.36482 5.76848 1.36482 4.71089ZM4.07572 2.95C3.1032 2.95 2.31482 3.73838 2.31482 4.71089C2.31482 5.68341 3.1032 6.47178 4.07572 6.47178C5.04823 6.47178 5.83661 5.68341 5.83661 4.71089C5.83661 3.73838 5.04823 2.95 4.07572 2.95ZM10.8262 4.05898C9.8198 4.05898 9.00394 4.87484 9.00394 5.88126C9.00394 6.88768 9.8198 7.70355 10.8262 7.70355C11.8326 7.70355 12.6485 6.88768 12.6485 5.88126C12.6485 4.87484 11.8326 4.05898 10.8262 4.05898Z\" />\n    </svg>\n  )\n}\n", "import { TLBounds, TLPageState, TLTransformInfo, Utils } from '@tldraw/core'\nimport { intersectRayBounds, intersectRayEllipse, intersectRayLineSegment } from '@tldraw/intersect'\nimport { Vec } from '@tldraw/vec'\nimport { BINDING_DISTANCE } from '~constants'\nimport {\n  ArrowShape,\n  ShapesWithProp,\n  TDBinding,\n  TDExportType,\n  TDHandle,\n  TDPage,\n  TDShape,\n  TDShapeType,\n  TDSnapshot,\n  TldrawCommand,\n  TldrawPatch,\n} from '~types'\nimport { deepCopy } from './StateManager/copy'\nimport { getShapeUtil } from './shapes'\nimport type { TDShapeUtil } from './shapes/TDShapeUtil'\nimport { getTrianglePoints } from './shapes/TriangleUtil/triangleHelpers'\n\nconst isDev = process.env.NODE_ENV === 'development'\nexport class TLDR {\n  static getShapeUtil<T extends TDShape>(type: T['type']): TDShapeUtil<T>\n  static getShapeUtil<T extends TDShape>(shape: T): TDShapeUtil<T>\n  static getShapeUtil<T extends TDShape>(shape: T | T['type']) {\n    return getShapeUtil<T>(shape)\n  }\n\n  static getSelectedShapes(data: TDSnapshot, pageId: string) {\n    const page = TLDR.getPage(data, pageId)\n    const selectedIds = TLDR.getSelectedIds(data, pageId)\n    return selectedIds.map((id) => page.shapes[id])\n  }\n\n  static screenToWorld(data: TDSnapshot, point: number[]) {\n    const camera = TLDR.getPageState(data, data.appState.currentPageId).camera\n    return Vec.sub(Vec.div(point, camera.zoom), camera.point)\n  }\n\n  static getCameraZoom(zoom: number) {\n    return Utils.clamp(zoom, 0.1, 5)\n  }\n\n  static getPage(data: TDSnapshot, pageId: string): TDPage {\n    return data.document.pages[pageId]\n  }\n\n  static getPageState(data: TDSnapshot, pageId: string): TLPageState {\n    return data.document.pageStates[pageId]\n  }\n\n  static getSelectedIds(data: TDSnapshot, pageId: string): string[] {\n    return TLDR.getPageState(data, pageId).selectedIds\n  }\n\n  static getShapes(data: TDSnapshot, pageId: string): TDShape[] {\n    return Object.values(TLDR.getPage(data, pageId).shapes)\n  }\n\n  static getCamera(data: TDSnapshot, pageId: string): TLPageState['camera'] {\n    return TLDR.getPageState(data, pageId).camera\n  }\n\n  static getShape<T extends TDShape = TDShape>(\n    data: TDSnapshot,\n    shapeId: string,\n    pageId: string\n  ): T {\n    return TLDR.getPage(data, pageId).shapes[shapeId] as T\n  }\n\n  static getCenter<T extends TDShape>(shape: T) {\n    return TLDR.getShapeUtil(shape).getCenter(shape)\n  }\n\n  static getBounds<T extends TDShape>(shape: T) {\n    return TLDR.getShapeUtil(shape).getBounds(shape)\n  }\n\n  static getRotatedBounds<T extends TDShape>(shape: T) {\n    return TLDR.getShapeUtil(shape).getRotatedBounds(shape)\n  }\n\n  static getSelectedBounds(data: TDSnapshot): TLBounds {\n    return Utils.getCommonBounds(\n      TLDR.getSelectedShapes(data, data.appState.currentPageId).map((shape) =>\n        TLDR.getShapeUtil(shape).getBounds(shape)\n      )\n    )\n  }\n\n  static getParentId(data: TDSnapshot, id: string, pageId: string) {\n    return TLDR.getShape(data, id, pageId).parentId\n  }\n\n  // static getPointedId(data: TDSnapshot, id: string, pageId: string): string {\n  //   const page = TLDR.getPage(data, pageId)\n  //   const pageState = TLDR.getPageState(data, data.appState.currentPageId)\n  //   const shape = TLDR.getShape(data, id, pageId)\n  //   if (!shape) return id\n\n  //   return shape.parentId === pageState.currentParentId || shape.parentId === page.id\n  //     ? id\n  //     : TLDR.getPointedId(data, shape.parentId, pageId)\n  // }\n\n  // static getDrilledPointedId(data: TDSnapshot, id: string, pageId: string): string {\n  //   const shape = TLDR.getShape(data, id, pageId)\n  //   const { currentPageId } = data.appState\n  //   const { currentParentId, pointedId } = TLDR.getPageState(data, data.appState.currentPageId)\n\n  //   return shape.parentId === currentPageId ||\n  //     shape.parentId === pointedId ||\n  //     shape.parentId === currentParentId\n  //     ? id\n  //     : TLDR.getDrilledPointedId(data, shape.parentId, pageId)\n  // }\n\n  // static getTopParentId(data: TDSnapshot, id: string, pageId: string): string {\n  //   const page = TLDR.getPage(data, pageId)\n  //   const pageState = TLDR.getPageState(data, pageId)\n  //   const shape = TLDR.getShape(data, id, pageId)\n\n  //   if (shape.parentId === shape.id) {\n  //     throw Error(`Shape has the same id as its parent! ${shape.id}`)\n  //   }\n\n  //   return shape.parentId === page.id || shape.parentId === pageState.currentParentId\n  //     ? id\n  //     : TLDR.getTopParentId(data, shape.parentId, pageId)\n  // }\n\n  // Get an array of a shape id and its descendant shapes' ids\n  static getDocumentBranch(data: TDSnapshot, id: string, pageId: string): string[] {\n    const shape = TLDR.getShape(data, id, pageId)\n\n    if (shape.children === undefined) return [id]\n\n    return [\n      id,\n      ...shape.children.flatMap((childId) => TLDR.getDocumentBranch(data, childId, pageId)),\n    ]\n  }\n\n  // Get a deep array of unproxied shapes and their descendants\n  static getSelectedBranchSnapshot<K>(\n    data: TDSnapshot,\n    pageId: string,\n    fn: (shape: TDShape) => K\n  ): ({ id: string } & K)[]\n  static getSelectedBranchSnapshot(data: TDSnapshot, pageId: string): TDShape[]\n  static getSelectedBranchSnapshot<K>(\n    data: TDSnapshot,\n    pageId: string,\n    fn?: (shape: TDShape) => K\n  ): (TDShape | K)[] {\n    const page = TLDR.getPage(data, pageId)\n\n    const copies = TLDR.getSelectedIds(data, pageId)\n      .flatMap((id) => TLDR.getDocumentBranch(data, id, pageId).map((id) => page.shapes[id]))\n      .filter((shape) => !shape.isLocked)\n      .map(Utils.deepClone)\n\n    if (fn !== undefined) {\n      return copies.map((shape) => ({ id: shape.id, ...fn(shape) }))\n    }\n\n    return copies\n  }\n\n  // Get a shallow array of unproxied shapes\n  static getSelectedShapeSnapshot(data: TDSnapshot, pageId: string): TDShape[]\n  static getSelectedShapeSnapshot<K>(\n    data: TDSnapshot,\n    pageId: string,\n    fn?: (shape: TDShape) => K\n  ): ({ id: string } & K)[]\n  static getSelectedShapeSnapshot<K>(\n    data: TDSnapshot,\n    pageId: string,\n    fn?: (shape: TDShape) => K\n  ): (TDShape | K)[] {\n    const copies = TLDR.getSelectedShapes(data, pageId)\n      .filter((shape) => !shape.isLocked)\n      .map(Utils.deepClone)\n\n    if (fn !== undefined) {\n      return copies.map((shape) => ({ id: shape.id, ...fn(shape) }))\n    }\n\n    return copies\n  }\n\n  // For a given array of shape ids, an array of all other shapes that may be affected by a mutation to it.\n  // Use this to decide which shapes to clone as before / after for a command.\n  static getAllEffectedShapeIds(data: TDSnapshot, ids: string[], pageId: string): string[] {\n    const page = TLDR.getPage(data, pageId)\n\n    const visited = new Set(ids)\n\n    ids.forEach((id) => {\n      const shape = page.shapes[id]\n\n      // Add descendant shapes\n      function collectDescendants(shape: TDShape): void {\n        if (shape.children === undefined) return\n        shape.children\n          .filter((childId) => !visited.has(childId))\n          .forEach((childId) => {\n            visited.add(childId)\n            collectDescendants(page.shapes[childId])\n          })\n      }\n\n      collectDescendants(shape)\n\n      // Add asecendant shapes\n      function collectAscendants(shape: TDShape): void {\n        const parentId = shape.parentId\n        if (parentId === page.id) return\n        if (visited.has(parentId)) return\n        visited.add(parentId)\n        collectAscendants(page.shapes[parentId])\n      }\n\n      collectAscendants(shape)\n\n      // Add bindings that are to or from any of the visited shapes (this does not have to be recursive)\n      visited.forEach((id) => {\n        Object.values(page.bindings)\n          .filter((binding) => binding.fromId === id || binding.toId === id)\n          .forEach((binding) => visited.add(binding.fromId === id ? binding.toId : binding.fromId))\n      })\n    })\n\n    // Return the unique array of visited shapes\n    return Array.from(visited.values())\n  }\n\n  static getLinkedShapeIds(\n    data: TDSnapshot,\n    pageId: string,\n    direction: 'center' | 'left' | 'right',\n    includeArrows = true\n  ) {\n    const selectedIds = TLDR.getSelectedIds(data, pageId)\n\n    const page = TLDR.getPage(data, pageId)\n\n    const linkedIds = new Set<string>(selectedIds)\n\n    const checkedIds = new Set<string>()\n\n    const idsToCheck = [...selectedIds]\n\n    const arrows = new Set(\n      Object.values(page.shapes).filter((shape) => {\n        return (\n          shape.type === TDShapeType.Arrow &&\n          (shape.handles.start.bindingId || shape.handles?.end.bindingId)\n        )\n      }) as ArrowShape[]\n    )\n\n    while (idsToCheck.length) {\n      const id = idsToCheck.pop()\n\n      if (!(id && arrows.size)) break\n\n      if (checkedIds.has(id)) continue\n\n      checkedIds.add(id)\n\n      arrows.forEach((arrow) => {\n        const {\n          handles: {\n            start: { bindingId: startBindingId },\n            end: { bindingId: endBindingId },\n          },\n        } = arrow\n\n        const startBinding = startBindingId ? page.bindings[startBindingId] : null\n        const endBinding = endBindingId ? page.bindings[endBindingId] : null\n\n        let hit = false\n\n        if (startBinding && startBinding.toId === id) {\n          if (direction === 'center') {\n            hit = true\n          } else if (arrow.decorations?.start && endBinding) {\n            // The arrow is pointing to this shape at its start\n            hit = direction === 'left'\n          } else {\n            // The arrow is pointing away from this shape\n            hit = direction === 'right'\n          }\n\n          if (hit) {\n            // This arrow is bound to this shape\n            if (includeArrows) linkedIds.add(arrow.id)\n            linkedIds.add(id)\n\n            if (endBinding) {\n              linkedIds.add(endBinding.toId)\n              idsToCheck.push(endBinding.toId)\n            }\n          }\n        } else if (endBinding && endBinding.toId === id) {\n          // This arrow is bound to this shape at its end\n          if (direction === 'center') {\n            hit = true\n          } else if (arrow.decorations?.end && startBinding) {\n            // The arrow is pointing to this shape\n            hit = direction === 'left'\n          } else {\n            // The arrow is pointing away from this shape\n            hit = direction === 'right'\n          }\n\n          if (hit) {\n            if (includeArrows) linkedIds.add(arrow.id)\n            linkedIds.add(id)\n\n            if (startBinding) {\n              linkedIds.add(startBinding.toId)\n              idsToCheck.push(startBinding.toId)\n            }\n          }\n        }\n\n        if (\n          (!startBinding || linkedIds.has(startBinding.toId)) &&\n          (!endBinding || linkedIds.has(endBinding.toId))\n        ) {\n          arrows.delete(arrow)\n        }\n      })\n    }\n\n    return Array.from(linkedIds.values())\n  }\n\n  static getChildIndexAbove(data: TDSnapshot, id: string, pageId: string): number {\n    const page = data.document.pages[pageId]\n    const shape = page.shapes[id]\n\n    let siblings: TDShape[]\n\n    if (shape.parentId === page.id) {\n      siblings = Object.values(page.shapes)\n        .filter((shape) => shape.parentId === page.id)\n        .sort((a, b) => a.childIndex - b.childIndex)\n    } else {\n      const parent = page.shapes[shape.parentId]\n      if (!parent.children) throw Error('No children in parent!')\n      siblings = parent.children\n        .map((childId) => page.shapes[childId])\n        .sort((a, b) => a.childIndex - b.childIndex)\n    }\n\n    const index = siblings.indexOf(shape)\n\n    const nextSibling = siblings[index + 1]\n\n    if (!nextSibling) return shape.childIndex + 1\n\n    return nextSibling.childIndex\n  }\n\n  /* -------------------------------------------------- */\n  /*                      Mutations                     */\n  /* -------------------------------------------------- */\n\n  static getBeforeShape<T extends TDShape>(shape: T, change: Partial<T>): Partial<T> {\n    return Object.fromEntries(\n      Object.keys(change).map((k) => [k, shape[k as keyof T]])\n    ) as Partial<T>\n  }\n\n  static mutateShapes<T extends TDShape>(\n    data: TDSnapshot,\n    ids: string[],\n    fn: (shape: T, i: number) => Partial<T> | void,\n    pageId: string,\n    forceChildrenTraversal = false\n  ): {\n    before: Record<string, Partial<T>>\n    after: Record<string, Partial<T>>\n    data: TDSnapshot\n  } {\n    const beforeShapes: Record<string, Partial<T>> = {}\n    const afterShapes: Record<string, Partial<T>> = {}\n\n    ids.forEach((id, i) => {\n      const shape = TLDR.getShape<T>(data, id, pageId)\n      if (shape.isLocked) return\n      if (shape?.type === 'group' && (ids.length === 1 || forceChildrenTraversal)) {\n        shape.children.forEach((id, i) => {\n          const shape = TLDR.getShape<T>(data, id, pageId)\n          if (shape.isLocked) return\n          const change = fn(shape, i)\n          if (change) {\n            beforeShapes[id] = TLDR.getBeforeShape(shape, change)\n            afterShapes[id] = change\n          }\n        })\n      }\n      const change = fn(shape, i)\n      if (change) {\n        beforeShapes[id] = TLDR.getBeforeShape(shape, change)\n        afterShapes[id] = change\n      }\n    })\n\n    const dataWithMutations = Utils.deepMerge(data, {\n      document: {\n        pages: {\n          [data.appState.currentPageId]: {\n            shapes: afterShapes,\n          },\n        },\n      },\n    })\n\n    return {\n      before: beforeShapes,\n      after: afterShapes,\n      data: dataWithMutations,\n    }\n  }\n\n  static createShapes(data: TDSnapshot, shapes: TDShape[], pageId: string): TldrawCommand {\n    const before: TldrawPatch = {\n      document: {\n        pages: {\n          [pageId]: {\n            shapes: {\n              ...Object.fromEntries(\n                shapes.flatMap((shape) => {\n                  const results: [string, Partial<TDShape> | undefined][] = [[shape.id, undefined]]\n\n                  // If the shape is a child of another shape, also save that shape\n                  if (shape.parentId !== pageId) {\n                    const parent = TLDR.getShape(data, shape.parentId, pageId)\n                    if (!parent.children) throw Error('No children in parent!')\n                    results.push([parent.id, { children: parent.children }])\n                  }\n\n                  return results\n                })\n              ),\n            },\n          },\n        },\n      },\n    }\n\n    const after: TldrawPatch = {\n      document: {\n        pages: {\n          [pageId]: {\n            shapes: {\n              shapes: {\n                ...Object.fromEntries(\n                  shapes.flatMap((shape) => {\n                    const results: [string, Partial<TDShape> | undefined][] = [[shape.id, shape]]\n\n                    // If the shape is a child of a different shape, update its parent\n                    if (shape.parentId !== pageId) {\n                      const parent = TLDR.getShape(data, shape.parentId, pageId)\n                      if (!parent.children) throw Error('No children in parent!')\n                      results.push([parent.id, { children: [...parent.children, shape.id] }])\n                    }\n\n                    return results\n                  })\n                ),\n              },\n            },\n          },\n        },\n      },\n    }\n\n    return {\n      before,\n      after,\n    }\n  }\n\n  static deleteShapes(\n    data: TDSnapshot,\n    shapes: TDShape[] | string[],\n    pageId?: string\n  ): TldrawCommand {\n    pageId = pageId ? pageId : data.appState.currentPageId\n\n    const page = TLDR.getPage(data, pageId)\n\n    const shapeIds =\n      typeof shapes[0] === 'string'\n        ? (shapes as string[])\n        : (shapes as TDShape[]).map((shape) => shape.id)\n\n    const before: TldrawPatch = {\n      document: {\n        pages: {\n          [pageId]: {\n            shapes: {\n              // These are the shapes that we're going to delete\n              ...Object.fromEntries(\n                shapeIds.flatMap((id) => {\n                  const shape = page.shapes[id]\n                  const results: [string, Partial<TDShape> | undefined][] = [[shape.id, shape]]\n\n                  // If the shape is a child of another shape, also add that shape\n                  if (shape.parentId !== pageId) {\n                    const parent = page.shapes[shape.parentId]\n                    if (!parent.children) throw Error('No children in parent!')\n                    results.push([parent.id, { children: parent.children }])\n                  }\n\n                  return results\n                })\n              ),\n            },\n            bindings: {\n              // These are the bindings that we're going to delete\n              ...Object.fromEntries(\n                Object.values(page.bindings)\n                  .filter((binding) => {\n                    return shapeIds.includes(binding.fromId) || shapeIds.includes(binding.toId)\n                  })\n                  .map((binding) => {\n                    return [binding.id, binding]\n                  })\n              ),\n            },\n          },\n        },\n      },\n    }\n\n    const after: TldrawPatch = {\n      document: {\n        pages: {\n          [pageId]: {\n            shapes: {\n              ...Object.fromEntries(\n                shapeIds.flatMap((id) => {\n                  const shape = page.shapes[id]\n                  const results: [string, Partial<TDShape> | undefined][] = [[shape.id, undefined]]\n\n                  // If the shape is a child of a different shape, update its parent\n                  if (shape.parentId !== page.id) {\n                    const parent = page.shapes[shape.parentId]\n\n                    if (!parent.children) throw Error('No children in parent!')\n\n                    results.push([\n                      parent.id,\n                      { children: parent.children.filter((id) => id !== shape.id) },\n                    ])\n                  }\n\n                  return results\n                })\n              ),\n            },\n          },\n        },\n      },\n    }\n\n    return {\n      before,\n      after,\n    }\n  }\n\n  static onSessionComplete<T extends TDShape>(shape: T) {\n    const delta = TLDR.getShapeUtil(shape).onSessionComplete?.(shape)\n    if (!delta) return shape\n    return { ...shape, ...delta }\n  }\n\n  static onChildrenChange<T extends TDShape>(data: TDSnapshot, shape: T, pageId: string) {\n    if (!shape.children) return\n\n    const delta = TLDR.getShapeUtil(shape).onChildrenChange?.(\n      shape,\n      shape.children.map((id) => TLDR.getShape(data, id, pageId))\n    )\n\n    if (!delta) return shape\n\n    return { ...shape, ...delta }\n  }\n\n  static updateArrowBindings(page: TDPage, arrowShape: ArrowShape) {\n    const result = {\n      start: deepCopy(arrowShape.handles.start),\n      end: deepCopy(arrowShape.handles.end),\n    }\n    type HandleInfo = {\n      handle: TDHandle\n      point: number[] // in page space\n    } & (\n      | {\n          isBound: false\n        }\n      | {\n          isBound: true\n          hasDecoration: boolean\n          binding: TDBinding\n          util: TDShapeUtil<TDShape, any>\n          target: TDShape\n          bounds: TLBounds\n          expandedBounds: TLBounds\n          intersectBounds: TLBounds\n          center: number[]\n        }\n    )\n    let start: HandleInfo = {\n      isBound: false,\n      handle: arrowShape.handles.start,\n      point: Vec.add(arrowShape.handles.start.point, arrowShape.point),\n    }\n    let end: HandleInfo = {\n      isBound: false,\n      handle: arrowShape.handles.end,\n      point: Vec.add(arrowShape.handles.end.point, arrowShape.point),\n    }\n    if (arrowShape.handles.start.bindingId) {\n      const hasDecoration = arrowShape.decorations?.start !== undefined\n      const handle = arrowShape.handles.start\n      const binding = page.bindings[arrowShape.handles.start.bindingId]\n      if (!binding)\n        throw Error(\n          \"Could not find a binding to match the start handle's bindingId: \" +\n            arrowShape.handles.start.bindingId\n        )\n      const target = page.shapes[binding.toId]\n      const util = TLDR.getShapeUtil(target)\n      const bounds = util.getBounds(target)\n      const expandedBounds = util.getExpandedBounds(target)\n      const intersectBounds = hasDecoration ? Utils.expandBounds(bounds, binding.distance) : bounds\n      const { minX, minY, width, height } = expandedBounds\n      const anchorPoint = Vec.add(\n        [minX, minY],\n        Vec.mulV([width, height], Vec.rotWith(binding.point, [0.5, 0.5], target.rotation || 0))\n      )\n      start = {\n        isBound: true,\n        hasDecoration,\n        binding,\n        handle,\n        point: anchorPoint,\n        util,\n        target,\n        bounds,\n        expandedBounds,\n        intersectBounds,\n        center: util.getCenter(target),\n      }\n    }\n    if (arrowShape.handles.end.bindingId) {\n      const hasDecoration = arrowShape.decorations?.end !== undefined\n      const handle = arrowShape.handles.end\n      const binding = page.bindings[arrowShape.handles.end.bindingId]\n      if (!binding) throw Error(\"Could not find a binding to match the end handle's bindingId\")\n      const target = page.shapes[binding.toId]\n      const util = TLDR.getShapeUtil(target)\n      const bounds = util.getBounds(target)\n      const expandedBounds = util.getExpandedBounds(target)\n      const intersectBounds = hasDecoration ? Utils.expandBounds(bounds, binding.distance) : bounds\n      const { minX, minY, width, height } = expandedBounds\n      const anchorPoint = Vec.add(\n        [minX, minY],\n        Vec.mulV([width, height], Vec.rotWith(binding.point, [0.5, 0.5], target.rotation || 0))\n      )\n      end = {\n        isBound: true,\n        hasDecoration,\n        binding,\n        handle,\n        point: anchorPoint,\n        util,\n        target,\n        bounds,\n        expandedBounds,\n        intersectBounds,\n        center: util.getCenter(target),\n      }\n    }\n\n    for (const ID of ['end', 'start'] as const) {\n      const A = ID === 'start' ? start : end\n      const B = ID === 'start' ? end : start\n      if (A.isBound) {\n        if (!A.binding.distance) {\n          // If the binding distance is zero, then the arrow is bound to a specific point\n          // in the target shape. The resulting handle should be exactly at that point.\n          result[ID].point = Vec.sub(A.point, arrowShape.point)\n        } else {\n          // We'll need to figure out the handle's true point based on some intersections\n          // between the opposite handle point and this handle point. This is different\n          // for each type of shape.\n          const direction = Vec.uni(Vec.sub(A.point, B.point))\n          switch (A.target.type) {\n            case TDShapeType.Ellipse: {\n              const hits = intersectRayEllipse(\n                B.point,\n                direction,\n                A.center,\n                A.target.radius[0] + (A.hasDecoration ? A.binding.distance : 0),\n                A.target.radius[1] + (A.hasDecoration ? A.binding.distance : 0),\n                A.target.rotation || 0\n              ).points.sort((a, b) => Vec.dist(a, B.point) - Vec.dist(b, B.point))\n              if (hits[0] !== undefined) {\n                result[ID].point = Vec.toFixed(Vec.sub(hits[0], arrowShape.point))\n              }\n              break\n            }\n            case TDShapeType.Triangle: {\n              const targetPoint = A.target.point\n              const points = getTrianglePoints(\n                A.target.size,\n                A.hasDecoration ? BINDING_DISTANCE : 0,\n                A.target.rotation\n              ).map((pt) => Vec.add(pt, targetPoint))\n              const hits = Utils.pointsToLineSegments(points, true)\n                .map(([p0, p1]) => intersectRayLineSegment(B.point, direction, p0, p1))\n                .filter((intersection) => intersection.didIntersect)\n                .flatMap((intersection) => intersection.points)\n                .sort((a, b) => Vec.dist(a, B.point) - Vec.dist(b, B.point))\n              if (hits[0] !== undefined) {\n                result[ID].point = Vec.toFixed(Vec.sub(hits[0], arrowShape.point))\n              }\n              break\n            }\n            default: {\n              const hits = intersectRayBounds(\n                B.point,\n                direction,\n                A.intersectBounds,\n                A.target.rotation\n              )\n                .filter((int) => int.didIntersect)\n                .map((int) => int.points[0])\n                .sort((a, b) => Vec.dist(a, B.point) - Vec.dist(b, B.point))\n              if (!hits[0]) continue\n              let bHit: number[] | undefined = undefined\n              if (B.isBound) {\n                const bHits = intersectRayBounds(\n                  B.point,\n                  direction,\n                  B.intersectBounds,\n                  B.target.rotation\n                )\n                  .filter((int) => int.didIntersect)\n                  .map((int) => int.points[0])\n                  .sort((a, b) => Vec.dist(a, B.point) - Vec.dist(b, B.point))\n                bHit = bHits[0]\n              }\n              if (\n                B.isBound &&\n                (hits.length < 2 ||\n                  (bHit &&\n                    hits[0] &&\n                    Math.ceil(Vec.dist(hits[0], bHit)) < BINDING_DISTANCE * 2.5) ||\n                  Utils.boundsContain(A.expandedBounds, B.expandedBounds) ||\n                  Utils.boundsCollide(A.expandedBounds, B.expandedBounds))\n              ) {\n                // If the other handle is bound, and if we need to fallback to the short arrow method...\n                const shortArrowDirection = Vec.uni(Vec.sub(B.point, A.point))\n                const shortArrowHits = intersectRayBounds(\n                  A.point,\n                  shortArrowDirection,\n                  A.bounds,\n                  A.target.rotation\n                )\n                  .filter((int) => int.didIntersect)\n                  .map((int) => int.points[0])\n                if (!shortArrowHits[0]) continue\n                result[ID].point = Vec.toFixed(Vec.sub(shortArrowHits[0], arrowShape.point))\n                result[ID === 'start' ? 'end' : 'start'].point = Vec.toFixed(\n                  Vec.add(\n                    Vec.sub(shortArrowHits[0], arrowShape.point),\n                    Vec.mul(\n                      shortArrowDirection,\n                      Math.min(\n                        Vec.dist(shortArrowHits[0], B.point),\n                        BINDING_DISTANCE *\n                          2.5 *\n                          (Utils.boundsContain(B.bounds, A.intersectBounds) ? -1 : 1)\n                      )\n                    )\n                  )\n                )\n              } else if (\n                !B.isBound &&\n                ((hits[0] && Vec.dist(hits[0], B.point) < BINDING_DISTANCE * 2.5) ||\n                  Utils.pointInBounds(B.point, A.intersectBounds))\n              ) {\n                // Short arrow time!\n                const shortArrowDirection = Vec.uni(Vec.sub(A.center, B.point))\n                return TLDR.getShapeUtil<ArrowShape>(arrowShape).onHandleChange?.(arrowShape, {\n                  [ID]: {\n                    ...arrowShape.handles[ID],\n                    point: Vec.toFixed(\n                      Vec.add(\n                        Vec.sub(B.point, arrowShape.point),\n                        Vec.mul(shortArrowDirection, BINDING_DISTANCE * 2.5)\n                      )\n                    ),\n                  },\n                })\n              } else if (hits[0]) {\n                result[ID].point = Vec.toFixed(Vec.sub(hits[0], arrowShape.point))\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return TLDR.getShapeUtil<ArrowShape>(arrowShape).onHandleChange?.(arrowShape, result)\n  }\n\n  static transform<T extends TDShape>(shape: T, bounds: TLBounds, info: TLTransformInfo<T>) {\n    const delta = TLDR.getShapeUtil(shape).transform(shape, bounds, info)\n    if (!delta) return shape\n    return { ...shape, ...delta }\n  }\n\n  static transformSingle<T extends TDShape>(shape: T, bounds: TLBounds, info: TLTransformInfo<T>) {\n    const delta = TLDR.getShapeUtil(shape).transformSingle(shape, bounds, info)\n    if (!delta) return shape\n    return { ...shape, ...delta }\n  }\n\n  /**\n   * Rotate a shape around an origin point.\n   * @param shape a shape.\n   * @param center the shape's center in page space.\n   * @param origin the page point to rotate around.\n   * @param rotation the amount to rotate the shape.\n   */\n  static getRotatedShapeMutation<T extends TDShape>(\n    shape: T, // in page space\n    center: number[], // in page space\n    origin: number[], // in page space (probably the center of common bounds)\n    delta: number // The shape's rotation delta\n  ): Partial<T> | void {\n    // The shape's center relative to the shape's point\n    const relativeCenter = Vec.sub(center, shape.point)\n\n    // Rotate the center around the origin\n    const rotatedCenter = Vec.rotWith(center, origin, delta)\n\n    // Get the top left point relative to the rotated center\n    const nextPoint = Vec.toFixed(Vec.sub(rotatedCenter, relativeCenter))\n\n    // If the shape has handles, we need to rotate the handles instead\n    // of rotating the shape. Shapes with handles should never be rotated,\n    // because that makes a lot of other things incredible difficult.\n    if (shape.handles !== undefined) {\n      const change = this.getShapeUtil(shape).onHandleChange?.(\n        // Base the change on a shape with the next point\n        { ...shape, point: nextPoint },\n        Object.fromEntries(\n          Object.entries(shape.handles).map(([handleId, handle]) => {\n            // Rotate each handle's point around the shape's center\n            // (in relative shape space, as the handle's point will be).\n            const point = Vec.toFixed(Vec.rotWith(handle.point, relativeCenter, delta))\n            return [handleId, { ...handle, point }]\n          })\n        ) as T['handles']\n      )\n\n      return change\n    }\n\n    // If the shape has no handles, move the shape to the new point\n    // and set the rotation.\n\n    // Clamp the next rotation between 0 and PI2\n    const nextRotation = Utils.clampRadians((shape.rotation || 0) + delta)\n\n    return {\n      point: nextPoint,\n      rotation: nextRotation,\n    } as Partial<T>\n  }\n\n  /* -------------------------------------------------- */\n  /*                       Parents                      */\n  /* -------------------------------------------------- */\n\n  static updateParents(data: TDSnapshot, pageId: string, changedShapeIds: string[]): void {\n    const page = TLDR.getPage(data, pageId)\n\n    if (changedShapeIds.length === 0) return\n\n    const { shapes } = TLDR.getPage(data, pageId)\n\n    const parentToUpdateIds = Array.from(\n      new Set(changedShapeIds.map((id) => shapes[id].parentId).values())\n    ).filter((id) => id !== page.id)\n\n    for (const parentId of parentToUpdateIds) {\n      const parent = shapes[parentId]\n\n      if (!parent.children) {\n        throw Error('A shape is parented to a shape without a children array.')\n      }\n\n      TLDR.onChildrenChange(data, parent, pageId)\n    }\n\n    TLDR.updateParents(data, pageId, parentToUpdateIds)\n  }\n\n  /* -------------------------------------------------- */\n  /*                      Bindings                      */\n  /* -------------------------------------------------- */\n\n  static getBinding(data: TDSnapshot, id: string, pageId: string): TDBinding {\n    return TLDR.getPage(data, pageId).bindings[id]\n  }\n\n  static getBindings(data: TDSnapshot, pageId: string): TDBinding[] {\n    const page = TLDR.getPage(data, pageId)\n    return Object.values(page.bindings)\n  }\n\n  static getBindableShapeIds(data: TDSnapshot) {\n    return TLDR.getShapes(data, data.appState.currentPageId)\n      .filter((shape) => TLDR.getShapeUtil(shape).canBind)\n      .sort((a, b) => b.childIndex - a.childIndex)\n      .map((shape) => shape.id)\n  }\n\n  static getBindingsWithShapeIds(data: TDSnapshot, ids: string[], pageId: string): TDBinding[] {\n    return Array.from(\n      new Set(\n        TLDR.getBindings(data, pageId).filter((binding) => {\n          return ids.includes(binding.toId) || ids.includes(binding.fromId)\n        })\n      ).values()\n    )\n  }\n\n  static getRelatedBindings(data: TDSnapshot, ids: string[], pageId: string): TDBinding[] {\n    const changedShapeIds = new Set(ids)\n\n    const page = TLDR.getPage(data, pageId)\n\n    // Find all bindings that we need to update\n    const bindingsArr = Object.values(page.bindings)\n\n    // Start with bindings that are directly bound to our changed shapes\n    const bindingsToUpdate = new Set(\n      bindingsArr.filter(\n        (binding) => changedShapeIds.has(binding.toId) || changedShapeIds.has(binding.fromId)\n      )\n    )\n\n    // Next, look for other bindings that effect the same shapes\n    let prevSize = bindingsToUpdate.size\n    let delta = -1\n\n    while (delta !== 0) {\n      bindingsToUpdate.forEach((binding) => {\n        const fromId = binding.fromId\n\n        for (const otherBinding of bindingsArr) {\n          if (otherBinding.fromId === fromId) {\n            bindingsToUpdate.add(otherBinding)\n          }\n\n          if (otherBinding.toId === fromId) {\n            bindingsToUpdate.add(otherBinding)\n          }\n        }\n      })\n\n      // Continue until we stop finding new bindings to update\n      delta = bindingsToUpdate.size - prevSize\n\n      prevSize = bindingsToUpdate.size\n    }\n\n    return Array.from(bindingsToUpdate.values())\n  }\n\n  static copyStringToClipboard = (string: string) => {\n    try {\n      if (navigator.clipboard) {\n        navigator.clipboard.write([\n          new ClipboardItem({\n            'text/plain': new Blob([string], { type: 'text/plain' }),\n          }),\n        ])\n      }\n    } catch (e) {\n      const textarea = document.createElement('textarea')\n      textarea.setAttribute('position', 'fixed')\n      textarea.setAttribute('top', '0')\n      textarea.setAttribute('readonly', 'true')\n      textarea.setAttribute('contenteditable', 'true')\n      textarea.style.position = 'fixed'\n      textarea.value = string\n      document.body.appendChild(textarea)\n      textarea.focus()\n      textarea.select()\n\n      try {\n        const range = document.createRange()\n        range.selectNodeContents(textarea)\n        const sel = window.getSelection()\n        if (sel) {\n          sel.removeAllRanges()\n          sel.addRange(range)\n          textarea.setSelectionRange(0, textarea.value.length)\n        }\n        document.execCommand('copy')\n      } catch (err) {\n        null // Could not copy to clipboard\n      } finally {\n        document.body.removeChild(textarea)\n      }\n    }\n  }\n\n  /* -------------------------------------------------- */\n  /*                       Groups                       */\n  /* -------------------------------------------------- */\n\n  static flattenShape = (data: TDSnapshot, shape: TDShape): TDShape[] => {\n    return [\n      shape,\n      ...(shape.children ?? [])\n        .map((childId) => TLDR.getShape(data, childId, data.appState.currentPageId))\n        .sort((a, b) => a.childIndex - b.childIndex)\n        .flatMap((shape) => TLDR.flattenShape(data, shape)),\n    ]\n  }\n\n  static flattenPage = (data: TDSnapshot, pageId: string): TDShape[] => {\n    return Object.values(data.document.pages[pageId].shapes)\n      .sort((a, b) => a.childIndex - b.childIndex)\n      .reduce<TDShape[]>((acc, shape) => [...acc, ...TLDR.flattenShape(data, shape)], [])\n  }\n\n  static getTopChildIndex = (data: TDSnapshot, pageId: string): number => {\n    const shapes = TLDR.getShapes(data, pageId)\n    return shapes.length === 0\n      ? 1\n      : shapes\n          .filter((shape) => shape.parentId === pageId)\n          .sort((a, b) => b.childIndex - a.childIndex)[0].childIndex + 1\n  }\n\n  /* -------------------------------------------------- */\n  /*                        Text                        */\n  /* -------------------------------------------------- */\n\n  static fixNewLines = /\\r?\\n|\\r/g\n\n  static normalizeText(text: string) {\n    return text\n      .replace(TLDR.fixNewLines, '\\n')\n      .split('\\n')\n      .map((x) => x || ' ')\n      .join('\\n')\n  }\n\n  /* -------------------------------------------------- */\n  /*                     Assertions                     */\n  /* -------------------------------------------------- */\n\n  static assertShapeHasProperty<P extends keyof TDShape>(\n    shape: TDShape,\n    prop: P\n  ): asserts shape is ShapesWithProp<P> {\n    if (shape[prop] === undefined) {\n      throw new Error()\n    }\n  }\n\n  static warn(e: any) {\n    if (isDev) {\n      console.warn(e)\n    }\n  }\n  static error(e: any) {\n    if (isDev) {\n      console.error(e)\n    }\n  }\n\n  /* -------------------------------------------------- */\n  /*                       Export                       */\n  /* -------------------------------------------------- */\n\n  static getSvgString(svg: SVGElement, scale = 1) {\n    const clone = svg.cloneNode(true) as SVGGraphicsElement\n\n    svg.setAttribute('width', +svg.getAttribute('width')! * scale + '')\n    svg.setAttribute('height', +svg.getAttribute('height')! * scale + '')\n\n    return new XMLSerializer()\n      .serializeToString(clone)\n      .replaceAll('&#10;      ', '')\n      .replaceAll(/((\\s|\")[0-9]*\\.[0-9]{2})([0-9]*)(\\b|\"|\\))/g, '$1')\n  }\n\n  static getSvgAsDataUrl(svg: SVGElement, scale = 1) {\n    const svgString = TLDR.getSvgString(svg, scale)\n\n    const base64SVG = window.btoa(unescape(svgString))\n\n    return `data:image/svg+xml;base64,${base64SVG}`\n  }\n\n  static async getImageForSvg(\n    svg: SVGElement,\n    type: Exclude<TDExportType, TDExportType.JSON> = TDExportType.PNG,\n    opts = {} as Partial<{\n      scale: number\n      quality: number\n    }>\n  ) {\n    const { scale = 2, quality = 1 } = opts\n\n    const svgString = TLDR.getSvgString(svg, scale)\n\n    if (!svgString) return\n\n    const canvas = await new Promise<HTMLCanvasElement>((resolve) => {\n      const image = new Image()\n\n      image.crossOrigin = 'anonymous'\n\n      const base64SVG = window.btoa(unescape(encodeURIComponent(svgString)))\n\n      const dataUrl = `data:image/svg+xml;base64,${base64SVG}`\n\n      image.onload = () => {\n        const canvas = document.createElement('canvas') as HTMLCanvasElement\n        const context = canvas.getContext('2d')!\n\n        const imageWidth = image.width\n        const imageHeight = image.height\n\n        canvas.width = imageWidth\n        canvas.height = imageHeight\n        context.drawImage(image, 0, 0, imageWidth, imageHeight)\n\n        URL.revokeObjectURL(dataUrl)\n\n        resolve(canvas)\n      }\n\n      image.onerror = () => {\n        console.warn('Could not convert that SVG to an image.')\n      }\n\n      image.src = dataUrl\n    })\n\n    const blob = await new Promise<Blob>((resolve) =>\n      canvas.toBlob((blob) => resolve(blob!), 'image/' + type, quality)\n    )\n\n    return blob\n  }\n}\n", "import type { Easing } from '~types'\n\nexport const LETTER_SPACING = '-0.03em'\nexport const LINE_HEIGHT = 1\nexport const GRID_SIZE = 8\nexport const SVG_EXPORT_PADDING = 16\nexport const BINDING_DISTANCE = 16\nexport const CLONING_DISTANCE = 32\nexport const FIT_TO_SCREEN_PADDING = 128\nexport const SNAP_DISTANCE = 5\nexport const EMPTY_ARRAY = [] as any[]\nexport const SLOW_SPEED = 10\nexport const VERY_SLOW_SPEED = 2.5\nexport const GHOSTED_OPACITY = 0.3\nexport const DEAD_ZONE = 3\nexport const LABEL_POINT = [0.5, 0.5]\n\nexport const PI2 = Math.PI * 2\n\nexport const FILE_EXTENSION = '.tldr'\n\nexport const EASINGS: Record<Easing, (t: number) => number> = {\n  linear: (t) => t,\n  easeInQuad: (t) => t * t,\n  easeOutQuad: (t) => t * (2 - t),\n  easeInOutQuad: (t) => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t),\n  easeInCubic: (t) => t * t * t,\n  easeOutCubic: (t) => --t * t * t + 1,\n  easeInOutCubic: (t) => (t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1),\n  easeInQuart: (t) => t * t * t * t,\n  easeOutQuart: (t) => 1 - --t * t * t * t,\n  easeInOutQuart: (t) => (t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t),\n  easeInQuint: (t) => t * t * t * t * t,\n  easeOutQuint: (t) => 1 + --t * t * t * t * t,\n  easeInOutQuint: (t) => (t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t),\n  easeInSine: (t) => 1 - Math.cos((t * Math.PI) / 2),\n  easeOutSine: (t) => Math.sin((t * Math.PI) / 2),\n  easeInOutSine: (t) => -(Math.cos(Math.PI * t) - 1) / 2,\n  easeInExpo: (t) => (t <= 0 ? 0 : Math.pow(2, 10 * t - 10)),\n  easeOutExpo: (t) => (t >= 1 ? 1 : 1 - Math.pow(2, -10 * t)),\n  easeInOutExpo: (t) =>\n    t <= 0\n      ? 0\n      : t >= 1\n      ? 1\n      : t < 0.5\n      ? Math.pow(2, 20 * t - 10) / 2\n      : (2 - Math.pow(2, -20 * t + 10)) / 2,\n}\n\nexport const EASING_STRINGS: Record<Easing, string> = {\n  linear: `(t) => t`,\n  easeInQuad: `(t) => t * t`,\n  easeOutQuad: `(t) => t * (2 - t)`,\n  easeInOutQuad: `(t) => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t)`,\n  easeInCubic: `(t) => t * t * t`,\n  easeOutCubic: `(t) => --t * t * t + 1`,\n  easeInOutCubic: `(t) => t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1`,\n  easeInQuart: `(t) => t * t * t * t`,\n  easeOutQuart: `(t) => 1 - --t * t * t * t`,\n  easeInOutQuart: `(t) => t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t`,\n  easeInQuint: `(t) => t * t * t * t * t`,\n  easeOutQuint: `(t) => 1 + --t * t * t * t * t`,\n  easeInOutQuint: `(t) => t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t`,\n  easeInSine: `(t) => 1 - Math.cos((t * Math.PI) / 2)`,\n  easeOutSine: `(t) => Math.sin((t * Math.PI) / 2)`,\n  easeInOutSine: `(t) => -(Math.cos(Math.PI * t) - 1) / 2`,\n  easeInExpo: `(t) => (t <= 0 ? 0 : Math.pow(2, 10 * t - 10))`,\n  easeOutExpo: `(t) => (t >= 1 ? 1 : 1 - Math.pow(2, -10 * t))`,\n  easeInOutExpo: `(t) => t <= 0 ? 0 : t >= 1 ? 1 : t < 0.5 ? Math.pow(2, 20 * t - 10) / 2 : (2 - Math.pow(2, -20 * t + 10)) / 2`,\n}\n\nexport const USER_COLORS = [\n  '#EC5E41',\n  '#F2555A',\n  '#F04F88',\n  '#E34BA9',\n  '#BD54C6',\n  '#9D5BD2',\n  '#7B66DC',\n  '#02B1CC',\n  '#11B3A3',\n  '#39B178',\n  '#55B467',\n  '#FF802B',\n]\n\nexport const isSafari =\n  typeof Window === 'undefined' ? false : /^((?!chrome|android).)*safari/i.test(navigator.userAgent)\n\nexport const isLinux = typeof Window === 'undefined' ? false : /linux/i.test(navigator.userAgent)\n\nexport const IMAGE_EXTENSIONS = ['.png', '.svg', '.jpg', '.jpeg', '.gif']\n\nexport const VIDEO_EXTENSIONS = isSafari ? [] : ['.mp4', '.webm']\n", "/**\n * Deep copy function for TypeScript.\n * @param T Generic type of target/copied value.\n * @param target Target value to be copied.\n * @see Source project, ts-deeply https://github.com/ykdr2017/ts-deepcopy\n * @see Code pen https://codepen.io/erikvullings/pen/ejyBYg\n */\nexport function deepCopy<T>(target: T): T {\n  if (target === null) {\n    return target\n  }\n  if (target instanceof Date) {\n    return new Date(target.getTime()) as any\n  }\n\n  // First part is for array and second part is for Realm.Collection\n  // if (target instanceof Array || typeof (target as any).type === 'string') {\n  if (typeof target === 'object') {\n    if (typeof target[Symbol.iterator as keyof T] === 'function') {\n      const cp = [] as any[]\n      if ((target as any as any[]).length > 0) {\n        for (const arrayMember of target as any as any[]) {\n          cp.push(deepCopy(arrayMember))\n        }\n      }\n      return cp as any as T\n    } else {\n      const targetKeys = Object.keys(target)\n      const cp = {} as T\n      if (targetKeys.length > 0) {\n        for (const key of targetKeys) {\n          cp[key as keyof T] = deepCopy(target[key as keyof T])\n        }\n      }\n      return cp\n    }\n  }\n\n  // Means that object is atomic\n  return target\n}\n", "import { SVGContainer, TLBounds, Utils } from '@tldraw/core'\nimport {\n  intersectArcBounds,\n  intersectLineSegmentBounds,\n  intersectLineSegmentLineSegment,\n} from '@tldraw/intersect'\nimport { Vec } from '@tldraw/vec'\nimport * as React from 'react'\nimport { GHOSTED_OPACITY } from '~constants'\nimport { TDShapeUtil } from '~state/shapes/TDShapeUtil'\nimport {\n  LabelMask,\n  TextLabel,\n  defaultStyle,\n  getFontFace,\n  getFontSize,\n  getFontStyle,\n  getShapeStyle,\n  getTextLabelSize,\n  getTextSvgElement,\n} from '~state/shapes/shared'\nimport { styled } from '~styles'\nimport {\n  AlignStyle,\n  ArrowShape,\n  DashStyle,\n  Decoration,\n  TDMeta,\n  TDShapeType,\n  TransformInfo,\n} from '~types'\nimport {\n  getArcLength,\n  getArcPoints,\n  getArrowPath,\n  getBendPoint,\n  getCtp,\n  isAngleBetween,\n} from './arrowHelpers'\nimport { CurvedArrow } from './components/CurvedArrow.tsx'\nimport { StraightArrow } from './components/StraightArrow'\n\ntype T = ArrowShape\ntype E = HTMLDivElement\n\nexport class ArrowUtil extends TDShapeUtil<T, E> {\n  type = TDShapeType.Arrow as const\n\n  hideBounds = true\n\n  canEdit = true\n\n  pathCache = new WeakMap<T, string>()\n\n  getShape = (props: Partial<T>): T => {\n    return {\n      id: 'id',\n      type: TDShapeType.Arrow,\n      name: 'Arrow',\n      parentId: 'page',\n      childIndex: 1,\n      point: [0, 0],\n      rotation: 0,\n      bend: 0,\n      handles: {\n        start: {\n          id: 'start',\n          index: 0,\n          point: [0, 0],\n          canBind: true,\n          ...props.handles?.start,\n        },\n        end: {\n          id: 'end',\n          index: 1,\n          point: [1, 1],\n          canBind: true,\n          ...props.handles?.end,\n        },\n        bend: {\n          id: 'bend',\n          index: 2,\n          point: [0.5, 0.5],\n          ...props.handles?.bend,\n        },\n      },\n      decorations: props.decorations ?? {\n        end: Decoration.Arrow,\n      },\n      style: {\n        ...defaultStyle,\n        isFilled: false,\n        ...props.style,\n      },\n      label: '',\n      labelPoint: [0.5, 0.5],\n      ...props,\n    }\n  }\n\n  Component = TDShapeUtil.Component<T, E, TDMeta>(\n    ({ shape, isEditing, isGhost, meta, events, onShapeChange, onShapeBlur }, ref) => {\n      const {\n        id,\n        label = '',\n        handles: { start, bend, end },\n        decorations = {},\n        style,\n      } = shape\n\n      const hasLabel = label?.trim()?.length ?? 0 > 0\n\n      const isStraightLine = Vec.dist(bend.point, Vec.toFixed(Vec.med(start.point, end.point))) < 1\n\n      const font = getFontStyle(style)\n\n      const styles = getShapeStyle(style, meta.isDarkMode)\n\n      const labelSize = hasLabel || isEditing ? getTextLabelSize(label, font) : [0, 0]\n\n      const bounds = this.getBounds(shape)\n\n      const dist = React.useMemo(() => {\n        const { start, bend, end } = shape.handles\n        if (isStraightLine) return Vec.dist(start.point, end.point)\n        const circle = getCtp(start.point, bend.point, end.point)\n        const center = circle.slice(0, 2)\n        const radius = circle[2]\n        const length = getArcLength(center, radius, start.point, end.point)\n        return Math.abs(length)\n      }, [shape.handles])\n\n      const scale = Math.max(\n        0.5,\n        Math.min(1, Math.max(dist / (labelSize[1] + 128), dist / (labelSize[0] + 128)))\n      )\n\n      const offset = React.useMemo(() => {\n        const bounds = this.getBounds(shape)\n        const offset = Vec.sub(\n          shape.handles.bend.point,\n          Vec.toFixed([bounds.width / 2, bounds.height / 2])\n        )\n        return offset\n      }, [shape, scale])\n\n      const handleLabelChange = React.useCallback(\n        (label: string) => {\n          onShapeChange?.({ id, label })\n        },\n        [onShapeChange]\n      )\n\n      const Component = isStraightLine ? StraightArrow : CurvedArrow\n\n      return (\n        <FullWrapper ref={ref} {...events}>\n          <TextLabel\n            font={font}\n            text={label}\n            color={styles.stroke}\n            offsetX={offset[0]}\n            offsetY={offset[1]}\n            scale={scale}\n            isEditing={isEditing}\n            onChange={handleLabelChange}\n            onBlur={onShapeBlur}\n          />\n          <SVGContainer id={shape.id + '_svg'}>\n            <defs>\n              <mask id={shape.id + '_clip'}>\n                <rect\n                  x={-100}\n                  y={-100}\n                  width={bounds.width + 200}\n                  height={bounds.height + 200}\n                  fill=\"white\"\n                />\n                <rect\n                  x={bounds.width / 2 - (labelSize[0] / 2) * scale + offset[0]}\n                  y={bounds.height / 2 - (labelSize[1] / 2) * scale + offset[1]}\n                  width={labelSize[0] * scale}\n                  height={labelSize[1] * scale}\n                  rx={4 * scale}\n                  ry={4 * scale}\n                  fill=\"black\"\n                  opacity={1}\n                />\n              </mask>\n            </defs>\n            <g\n              pointerEvents=\"none\"\n              opacity={isGhost ? GHOSTED_OPACITY : 1}\n              mask={hasLabel || isEditing ? `url(#${shape.id}_clip)` : ``}\n            >\n              <Component\n                id={id}\n                style={style}\n                start={start.point}\n                end={end.point}\n                bend={bend.point}\n                arrowBend={shape.bend}\n                decorationStart={decorations?.start}\n                decorationEnd={decorations?.end}\n                isDraw={style.dash === DashStyle.Draw}\n                isDarkMode={meta.isDarkMode}\n              />\n            </g>\n          </SVGContainer>\n        </FullWrapper>\n      )\n    }\n  )\n\n  Indicator = TDShapeUtil.Indicator<ArrowShape>(({ shape, bounds }) => {\n    const {\n      style,\n      decorations,\n      label,\n      handles: { start, bend, end },\n    } = shape\n\n    const hasLabel = label?.trim()?.length ?? 0 > 0\n\n    const font = getFontStyle(style)\n    const labelSize = hasLabel ? getTextLabelSize(label!, font) : [0, 0]\n    const isStraightLine = Vec.dist(bend.point, Vec.toFixed(Vec.med(start.point, end.point))) < 1\n\n    const dist = React.useMemo(() => {\n      const { start, bend, end } = shape.handles\n      if (isStraightLine) return Vec.dist(start.point, end.point)\n      const circle = getCtp(start.point, bend.point, end.point)\n      const center = circle.slice(0, 2)\n      const radius = circle[2]\n      const length = getArcLength(center, radius, start.point, end.point)\n      return Math.abs(length)\n    }, [shape.handles])\n\n    const scale = Math.max(\n      0.5,\n      Math.min(1, Math.max(dist / (labelSize[1] + 128), dist / (labelSize[0] + 128)))\n    )\n\n    const offset = React.useMemo(() => {\n      const bounds = this.getBounds(shape)\n      const offset = Vec.sub(shape.handles.bend.point, [bounds.width / 2, bounds.height / 2])\n      return offset\n    }, [shape, scale])\n\n    return (\n      <>\n        {hasLabel && (\n          <LabelMask\n            id={shape.id}\n            scale={scale}\n            offset={offset}\n            bounds={bounds}\n            labelSize={labelSize}\n          />\n        )}\n        <path\n          d={getArrowPath(\n            style,\n            start.point,\n            bend.point,\n            end.point,\n            decorations?.start,\n            decorations?.end\n          )}\n          mask={hasLabel ? `url(#${shape.id}_clip)` : ``}\n        />\n        {hasLabel && (\n          <rect\n            x={bounds.width / 2 - (labelSize[0] / 2) * scale + offset[0]}\n            y={bounds.height / 2 - (labelSize[1] / 2) * scale + offset[1]}\n            width={labelSize[0] * scale}\n            height={labelSize[1] * scale}\n            rx={4 * scale}\n            ry={4 * scale}\n            fill=\"transparent\"\n          />\n        )}\n      </>\n    )\n  })\n\n  getBounds = (shape: T) => {\n    const bounds = Utils.getFromCache(this.boundsCache, shape, () => {\n      const {\n        handles: { start, bend, end },\n      } = shape\n      return Utils.getBoundsFromPoints(getArcPoints(start.point, bend.point, end.point))\n    })\n    return Utils.translateBounds(bounds, shape.point)\n  }\n\n  getRotatedBounds = (shape: T) => {\n    const {\n      handles: { start, bend, end },\n    } = shape\n    let points = getArcPoints(start.point, bend.point, end.point)\n    const { minX, minY, maxX, maxY } = Utils.getBoundsFromPoints(points)\n    if (shape.rotation !== 0) {\n      points = points.map((pt) =>\n        Vec.rotWith(pt, [(minX + maxX) / 2, (minY + maxY) / 2], shape.rotation || 0)\n      )\n    }\n\n    return Utils.translateBounds(Utils.getBoundsFromPoints(points), shape.point)\n  }\n\n  getCenter = (shape: T) => {\n    const { start, end } = shape.handles\n    return Vec.add(shape.point, Vec.med(start.point, end.point))\n  }\n\n  shouldRender = (prev: T, next: T) => {\n    return (\n      next.decorations !== prev.decorations ||\n      next.handles !== prev.handles ||\n      next.style !== prev.style ||\n      next.label !== prev.label\n    )\n  }\n\n  hitTestPoint = (shape: T, point: number[]): boolean => {\n    const {\n      handles: { start, bend, end },\n    } = shape\n    const pt = Vec.sub(point, shape.point)\n    const points = getArcPoints(start.point, bend.point, end.point)\n    for (let i = 1; i < points.length; i++) {\n      if (Vec.distanceToLineSegment(points[i - 1], points[i], pt) < 1) {\n        return true\n      }\n    }\n    return false\n  }\n\n  hitTestLineSegment = (shape: T, A: number[], B: number[]): boolean => {\n    const {\n      handles: { start, bend, end },\n    } = shape\n    const ptA = Vec.sub(A, shape.point)\n    const ptB = Vec.sub(B, shape.point)\n    const points = getArcPoints(start.point, bend.point, end.point)\n    for (let i = 1; i < points.length; i++) {\n      if (intersectLineSegmentLineSegment(points[i - 1], points[i], ptA, ptB).didIntersect) {\n        return true\n      }\n    }\n    return false\n  }\n\n  hitTestBounds = (shape: T, bounds: TLBounds) => {\n    const { start, end, bend } = shape.handles\n    const sp = Vec.add(shape.point, start.point)\n    const ep = Vec.add(shape.point, end.point)\n    if (Utils.pointInBounds(sp, bounds) || Utils.pointInBounds(ep, bounds)) {\n      return true\n    }\n    if (Vec.isEqual(Vec.med(start.point, end.point), bend.point)) {\n      return intersectLineSegmentBounds(sp, ep, bounds).length > 0\n    } else {\n      const [cx, cy, r] = getCtp(start.point, bend.point, end.point)\n      const cp = Vec.add(shape.point, [cx, cy])\n      return intersectArcBounds(cp, r, sp, ep, bounds).length > 0\n    }\n  }\n\n  transform = (\n    shape: T,\n    bounds: TLBounds,\n    { initialShape, scaleX, scaleY }: TransformInfo<T>\n  ): Partial<T> => {\n    const initialShapeBounds = this.getBounds(initialShape)\n    const handles: (keyof T['handles'])[] = ['start', 'end']\n    const nextHandles = { ...initialShape.handles }\n\n    handles.forEach((handle) => {\n      if (handle === 'bend') return\n\n      const [x, y] = nextHandles[handle].point\n      const nw = x / initialShapeBounds.width\n      const nh = y / initialShapeBounds.height\n      nextHandles[handle] = {\n        ...nextHandles[handle],\n        point: [\n          bounds.width * (scaleX < 0 ? 1 - nw : nw),\n          bounds.height * (scaleY < 0 ? 1 - nh : nh),\n        ],\n      }\n    })\n\n    // If we've flipped one of the dimensions (but not both) then invert shape.bend\n\n    const nextBend =\n      (scaleX > 0 && scaleY < 0) || (scaleX < 0 && scaleY > 0)\n        ? -initialShape.bend\n        : initialShape.bend\n\n    // Find the position of the bend handle based on the new start / end handles and the new bend\n    const bendPoint = getBendPoint(nextHandles, nextBend)\n    nextHandles.bend.point = bendPoint\n\n    return {\n      point: Vec.toFixed([bounds.minX, bounds.minY]),\n      handles: nextHandles,\n      bend: nextBend, // does this change?\n    }\n  }\n\n  onDoubleClickHandle = (shape: T, handle: Partial<T['handles']>): Partial<T> | void => {\n    switch (handle) {\n      case 'bend': {\n        return {\n          bend: 0,\n          handles: {\n            ...shape.handles,\n            bend: {\n              ...shape.handles.bend,\n              point: getBendPoint(shape.handles, shape.bend),\n            },\n          },\n        }\n      }\n      case 'start': {\n        return {\n          decorations: {\n            ...shape.decorations,\n            start: shape.decorations?.start ? undefined : Decoration.Arrow,\n          },\n        }\n      }\n      case 'end': {\n        return {\n          decorations: {\n            ...shape.decorations,\n            end: shape.decorations?.end ? undefined : Decoration.Arrow,\n          },\n        }\n      }\n    }\n\n    return this\n  }\n\n  onHandleChange = (shape: T, handles: Partial<T['handles']>): Partial<T> | void => {\n    let nextHandles = Utils.deepMerge<ArrowShape['handles']>(shape.handles, handles)\n    let nextBend = shape.bend\n\n    nextHandles = Utils.deepMerge(nextHandles, {\n      start: {\n        point: Vec.toFixed(nextHandles.start.point),\n      },\n      end: {\n        point: Vec.toFixed(nextHandles.end.point),\n      },\n    })\n\n    // This will produce NaN values\n    if (Vec.isEqual(nextHandles.start.point, nextHandles.end.point)) return\n\n    // If the user is moving the bend handle, we want to move the bend point\n    if ('bend' in handles) {\n      const { start, end, bend } = nextHandles\n\n      const distance = Vec.dist(start.point, end.point)\n      const midPoint = Vec.med(start.point, end.point)\n      const angle = Vec.angle(start.point, end.point)\n      const u = Vec.uni(Vec.vec(start.point, end.point))\n\n      // Create a line segment perendicular to the line between the start and end points\n      const ap = Vec.add(midPoint, Vec.mul(Vec.per(u), distance))\n      const bp = Vec.sub(midPoint, Vec.mul(Vec.per(u), distance))\n\n      const bendPoint = Vec.nearestPointOnLineSegment(ap, bp, bend.point, true)\n\n      // Find the distance between the midpoint and the nearest point on the\n      // line segment to the bend handle's dragged point\n      const bendDist = Vec.dist(midPoint, bendPoint)\n\n      // The shape's \"bend\" is the ratio of the bend to the distance between\n      // the start and end points. If the bend is below a certain amount, the\n      // bend should be zero.\n      const realBend = bendDist / (distance / 2)\n\n      nextBend = Utils.clamp(realBend, -0.99, 0.99)\n\n      // If the point is to the left of the line segment, we make the bend\n      // negative, otherwise it's positive.\n      const angleToBend = Vec.angle(start.point, bendPoint)\n\n      // If resulting bend is low enough that the handle will snap to center,\n      // then also snap the bend to center\n\n      if (Vec.isEqual(midPoint, getBendPoint(nextHandles, nextBend))) {\n        nextBend = 0\n      } else if (isAngleBetween(angle, angle + Math.PI, angleToBend)) {\n        // Otherwise, fix the bend direction\n        nextBend *= -1\n      }\n    }\n\n    const nextShape = {\n      point: shape.point,\n      bend: nextBend,\n      handles: {\n        ...nextHandles,\n        bend: {\n          ...nextHandles.bend,\n          point: getBendPoint(nextHandles, nextBend),\n        },\n      },\n    }\n\n    // Zero out the handles to prevent handles with negative points. If a handle's x or y\n    // is below zero, we need to move the shape left or up to make it zero.\n    const topLeft = shape.point\n\n    const nextBounds = this.getBounds({ ...nextShape } as ArrowShape)\n\n    const offset = Vec.sub([nextBounds.minX, nextBounds.minY], topLeft)\n\n    if (!Vec.isEqual(offset, [0, 0])) {\n      Object.values(nextShape.handles).forEach((handle) => {\n        handle.point = Vec.toFixed(Vec.sub(handle.point, offset))\n      })\n      nextShape.point = Vec.toFixed(Vec.add(nextShape.point, offset))\n    }\n\n    return nextShape\n  }\n\n  getSvgElement = (shape: ArrowShape, isDarkMode: boolean): SVGElement | void => {\n    const elm = document.getElementById(shape.id + '_svg')?.cloneNode(true) as SVGElement\n    if (!elm) return // possibly in test mode\n    const hasLabel = shape.label?.trim()?.length ?? 0 > 0\n    if (hasLabel) {\n      const s = shape as ArrowShape\n      const g = document.createElementNS('http://www.w3.org/2000/svg', 'g')\n\n      const font = getFontStyle(shape.style)\n      const labelSize = getTextLabelSize(shape.label!, font)\n      const fontSize = getFontSize(shape.style.size, shape.style.font) * (shape.style.scale ?? 1)\n      const fontFamily = getFontFace(shape.style.font).slice(1, -1)\n\n      const labelElm = getTextSvgElement(\n        s.label!,\n        fontSize,\n        fontFamily,\n        AlignStyle.Start,\n        labelSize[0],\n        false\n      )\n\n      let dist: number\n\n      const { start, bend, end } = shape.handles\n      const isStraightLine = Vec.dist(bend.point, Vec.toFixed(Vec.med(start.point, end.point))) < 1\n      if (isStraightLine) {\n        dist = Vec.dist(start.point, end.point)\n      } else {\n        const circle = getCtp(start.point, bend.point, end.point)\n        const center = circle.slice(0, 2)\n        const radius = circle[2]\n        const length = getArcLength(center, radius, start.point, end.point)\n        dist = Math.abs(length)\n      }\n\n      const scale = Math.max(\n        0.5,\n        Math.min(1, Math.max(dist / (labelSize[1] + 128), dist / (labelSize[0] + 128)))\n      )\n      const bounds = this.getBounds(shape)\n\n      const offset = Vec.sub(shape.handles.bend.point, [bounds.width / 2, bounds.height / 2])\n      const x = bounds.width / 2 - (labelSize[0] / 2) * scale + offset[0]\n      const y = bounds.height / 2 - (labelSize[1] / 2) * scale + offset[1]\n\n      labelElm.setAttribute('transform', `translate(${x}, ${y})`)\n      labelElm.setAttribute('fill', getShapeStyle(shape.style, isDarkMode).stroke)\n      labelElm.setAttribute('transform-origin', 'center center')\n      g.setAttribute('text-align', 'center')\n      g.setAttribute('text-anchor', 'middle')\n      g.appendChild(elm)\n      g.appendChild(labelElm)\n      return g\n    }\n    return elm\n  }\n}\n\nconst FullWrapper = styled('div', { width: '100%', height: '100%' })\n", "import { TLShapeUtil, Utils } from '@tldraw/core'\nimport type { TLBounds, TLPointerInfo } from '@tldraw/core'\nimport {\n  intersectLineSegmentBounds,\n  intersectLineSegmentPolyline,\n  intersectRayBounds,\n} from '@tldraw/intersect'\nimport { Vec } from '@tldraw/vec'\nimport * as React from 'react'\nimport { BINDING_DISTANCE } from '~constants'\nimport { AlignStyle, ShapesWithProp, TDBinding, TDMeta, TDShape, TransformInfo } from '~types'\nimport { getFontFace, getFontSize, getFontStyle, getShapeStyle } from './shared'\nimport { getTextLabelSize } from './shared/getTextSize'\nimport { getTextSvgElement } from './shared/getTextSvgElement'\n\nexport abstract class TDShapeUtil<T extends TDShape, E extends Element = any> extends TLShapeUtil<\n  T,\n  E,\n  TDMeta\n> {\n  abstract type: T['type']\n\n  canBind = false\n\n  canEdit = false\n\n  canClone = false\n\n  isAspectRatioLocked = false\n\n  hideResizeHandles = false\n\n  bindingDistance = BINDING_DISTANCE\n\n  abstract getShape: (props: Partial<T>) => T\n\n  hitTestPoint = (shape: T, point: number[]): boolean => {\n    return Utils.pointInBounds(point, this.getRotatedBounds(shape))\n  }\n\n  hitTestLineSegment = (shape: T, A: number[], B: number[]): boolean => {\n    const box = Utils.getBoundsFromPoints([A, B])\n    const bounds = this.getBounds(shape)\n\n    return Utils.boundsContain(bounds, box) || shape.rotation\n      ? intersectLineSegmentPolyline(A, B, Utils.getRotatedCorners(this.getBounds(shape)))\n          .didIntersect\n      : intersectLineSegmentBounds(A, B, this.getBounds(shape)).length > 0\n  }\n\n  create = (props: { id: string } & Partial<T>) => {\n    this.refMap.set(props.id, React.createRef())\n    return this.getShape(props)\n  }\n\n  getCenter = (shape: T) => {\n    return Utils.getBoundsCenter(this.getBounds(shape))\n  }\n\n  getExpandedBounds = (shape: T) => {\n    return Utils.expandBounds(this.getBounds(shape), this.bindingDistance)\n  }\n\n  getBindingPoint = <K extends TDShape>(\n    shape: T,\n    fromShape: K,\n    point: number[],\n    origin: number[],\n    direction: number[],\n    bindAnywhere: boolean\n  ) => {\n    // Algorithm time! We need to find the binding point (a normalized point inside of the shape, or around the shape, where the arrow will point to) and the distance from the binding shape to the anchor.\n\n    const bounds = this.getBounds(shape)\n    const expandedBounds = this.getExpandedBounds(shape)\n\n    // The point must be inside of the expanded bounding box\n    if (!Utils.pointInBounds(point, expandedBounds)) return\n\n    const intersections = intersectRayBounds(origin, direction, expandedBounds)\n      .filter((int) => int.didIntersect)\n      .map((int) => int.points[0])\n\n    if (!intersections.length) return\n\n    // The center of the shape\n    const center = this.getCenter(shape)\n\n    // Find furthest intersection between ray from origin through point and expanded bounds. TODO: What if the shape has a curve? In that case, should we intersect the circle-from-three-points instead?\n    const intersection = intersections.sort((a, b) => Vec.dist(b, origin) - Vec.dist(a, origin))[0]\n\n    // The point between the handle and the intersection\n    const middlePoint = Vec.med(point, intersection)\n\n    // The anchor is the point in the shape where the arrow will be pointing\n    let anchor: number[]\n\n    // The distance is the distance from the anchor to the handle\n    let distance: number\n\n    if (bindAnywhere) {\n      // If the user is indicating that they want to bind inside of the shape, we just use the handle's point\n      anchor = Vec.dist(point, center) < BINDING_DISTANCE / 2 ? center : point\n      distance = 0\n    } else {\n      if (Vec.distanceToLineSegment(point, middlePoint, center) < BINDING_DISTANCE / 2) {\n        // If the line segment would pass near to the center, snap the anchor the center point\n        anchor = center\n      } else {\n        // Otherwise, the anchor is the middle point between the handle and the intersection\n        anchor = middlePoint\n      }\n\n      if (Utils.pointInBounds(point, bounds)) {\n        // If the point is inside of the shape, use the shape's binding distance\n\n        distance = this.bindingDistance\n      } else {\n        // Otherwise, use the actual distance from the handle point to nearest edge\n        distance = Math.max(\n          this.bindingDistance,\n          Utils.getBoundsSides(bounds)\n            .map((side) => Vec.distanceToLineSegment(side[1][0], side[1][1], point))\n            .sort((a, b) => a - b)[0]\n        )\n      }\n    }\n\n    // The binding point is a normalized point indicating the position of the anchor.\n    // An anchor at the middle of the shape would be (0.5, 0.5). When the shape's bounds\n    // changes, we will re-recalculate the actual anchor point by multiplying the\n    // normalized point by the shape's new bounds.\n    const bindingPoint = Vec.divV(Vec.sub(anchor, [expandedBounds.minX, expandedBounds.minY]), [\n      expandedBounds.width,\n      expandedBounds.height,\n    ])\n\n    return {\n      point: Vec.clampV(bindingPoint, 0, 1),\n      distance,\n    }\n  }\n\n  mutate = (shape: T, props: Partial<T>): Partial<T> => {\n    return props\n  }\n\n  transform = (shape: T, bounds: TLBounds, info: TransformInfo<T>): Partial<T> => {\n    return { ...shape, point: [bounds.minX, bounds.minY] }\n  }\n\n  transformSingle = (shape: T, bounds: TLBounds, info: TransformInfo<T>): Partial<T> | void => {\n    return this.transform(shape, bounds, info)\n  }\n\n  updateChildren?: <K extends TDShape>(shape: T, children: K[]) => Partial<K>[] | void\n\n  onChildrenChange?: (shape: T, children: TDShape[]) => Partial<T> | void\n\n  onHandleChange?: (shape: T, handles: Partial<T['handles']>) => Partial<T> | void\n\n  onRightPointHandle?: (\n    shape: T,\n    handles: Partial<T['handles']>,\n    info: Partial<TLPointerInfo>\n  ) => Partial<T> | void\n\n  onDoubleClickHandle?: (\n    shape: T,\n    handles: Partial<T['handles']>,\n    info: Partial<TLPointerInfo>\n  ) => Partial<T> | void\n\n  onDoubleClickBoundsHandle?: (shape: T) => Partial<T> | void\n\n  onSessionComplete?: (shape: T) => Partial<T> | void\n\n  getSvgElement = (shape: T, isDarkMode: boolean): SVGElement | void => {\n    const elm = document.getElementById(shape.id + '_svg')?.cloneNode(true) as SVGElement\n    if (!elm) return // possibly in test mode\n    const hasLabel = shape.label?.trim()?.length ?? 0 > 0\n    if (hasLabel) {\n      const s = shape as TDShape & { label: string }\n      const g = document.createElementNS('http://www.w3.org/2000/svg', 'g')\n\n      const font = getFontStyle(shape.style)\n      const labelSize = getTextLabelSize(shape.label!, font)\n      const fontSize = getFontSize(shape.style.size, shape.style.font) * (shape.style.scale ?? 1)\n      const fontFamily = getFontFace(shape.style.font).slice(1, -1)\n\n      const labelElm = getTextSvgElement(\n        s['label'],\n        fontSize,\n        fontFamily,\n        AlignStyle.Middle,\n        labelSize[0],\n        false\n      )\n\n      const bounds = this.getBounds(shape)\n\n      labelElm.setAttribute(\n        'transform',\n        `translate(${bounds.width / 2 - labelSize[0] / 2}, ${bounds.height / 2 - labelSize[1] / 2})`\n      )\n      labelElm.setAttribute('fill', getShapeStyle(shape.style, isDarkMode).stroke)\n      labelElm.setAttribute('transform-origin', 'center center')\n      g.setAttribute('text-align', 'center')\n      g.setAttribute('text-anchor', 'middle')\n      g.appendChild(elm)\n      g.appendChild(labelElm)\n      return g\n    }\n    return elm\n  }\n}\n", "import { TLBounds, TLShape, Utils } from '@tldraw/core'\n\n/**\n * Find the bounds of a rectangular shape.\n * @param shape\n * @param boundsCache\n */\nexport function getBoundsRectangle<T extends TLShape & { size: number[] }>(\n  shape: T,\n  boundsCache: WeakMap<T, TLBounds>\n) {\n  const bounds = Utils.getFromCache(boundsCache, shape, () => {\n    const [width, height] = shape.size\n    return {\n      minX: 0,\n      maxX: width,\n      minY: 0,\n      maxY: height,\n      width,\n      height,\n    }\n  })\n\n  return Utils.translateBounds(bounds, shape.point)\n}\n", "import { AlignStyle } from '~types'\n\nconst ALIGN_VALUES = {\n  [AlignStyle.Start]: 'left',\n  [AlignStyle.Middle]: 'center',\n  [AlignStyle.End]: 'right',\n  [AlignStyle.Justify]: 'justify',\n} as const\n\nexport function getTextAlign(alignStyle: AlignStyle = AlignStyle.Start) {\n  return ALIGN_VALUES[alignStyle]\n}\n", "import { LETTER_SPACING } from '~constants'\nimport { FontStyle } from '~types'\n\nlet melm: any\n\nfunction getMeasurementDiv() {\n  // A div used for measurement\n  document.getElementById('__textLabelMeasure')?.remove()\n\n  const pre = document.createElement('pre')\n  pre.id = '__textLabelMeasure'\n\n  Object.assign(pre.style, {\n    whiteSpace: 'pre',\n    width: 'auto',\n    border: '1px solid transparent',\n    padding: '4px',\n    margin: '0px',\n    letterSpacing: LETTER_SPACING,\n    opacity: '0',\n    position: 'absolute',\n    top: '-500px',\n    left: '0px',\n    zIndex: '9999',\n    pointerEvents: 'none',\n    userSelect: 'none',\n    '-webkit-user-select': 'none',\n    alignmentBaseline: 'mathematical',\n    dominantBaseline: 'mathematical',\n  })\n\n  pre.tabIndex = -1\n\n  document.body.appendChild(pre)\n  return pre\n}\n\nif (typeof window !== 'undefined') {\n  melm = getMeasurementDiv()\n}\n\nlet prevText = ''\nlet prevFont = ''\nlet prevSize = [0, 0]\n\nexport function clearPrevSize() {\n  prevText = ''\n}\n\nexport function getTextLabelSize(text: string, font: string) {\n  if (!text) {\n    return [16, 32]\n  }\n\n  if (!melm) {\n    // We're in SSR\n    return [10, 10]\n  }\n\n  if (!melm.parent) document.body.appendChild(melm)\n\n  if (text === prevText && font === prevFont) {\n    return prevSize\n  }\n\n  prevText = text\n  prevFont = font\n\n  melm.textContent = text\n  melm.style.font = font\n\n  // In tests, offsetWidth and offsetHeight will be 0\n  const width = melm.offsetWidth || 1\n  const height = melm.offsetHeight || 1\n\n  prevSize = [width, height]\n  return prevSize\n}\n", "import { LETTER_SPACING } from '~constants'\nimport { AlignStyle } from '~types'\n\n// https://drafts.csswg.org/css-text/#word-separator\n// split on any of these characters\nconst wordSeparator = new RegExp(\n  `${[0x0020, 0x00a0, 0x1361, 0x10100, 0x10101, 0x1039, 0x1091]\n    .map((c) => String.fromCodePoint(c))\n    .join('|')}`\n)\n\nexport function getTextSvgElement(\n  text: string,\n  fontSize: number,\n  fontFamily: string,\n  textAlign: AlignStyle,\n  width: number,\n  wrap = false\n) {\n  const fontWeight = 'normal'\n  const lineHeight = 1\n  const letterSpacingPct = LETTER_SPACING\n\n  // Collect lines\n\n  const lines = breakText({\n    text,\n    wrap,\n    width,\n    fontSize,\n    fontWeight,\n    fontFamily,\n    fontStyle: 'normal',\n    textAlign: 'left',\n    letterSpacing: LETTER_SPACING,\n    lineHeight: 1,\n  })\n\n  const textElm = document.createElementNS('http://www.w3.org/2000/svg', 'text')\n  textElm.setAttribute('font-size', fontSize + 'px')\n  textElm.setAttribute('font-family', fontFamily)\n  textElm.setAttribute('font-weight', fontWeight)\n  textElm.setAttribute('line-height', lineHeight * fontSize + 'px')\n  textElm.setAttribute('letter-spacing', letterSpacingPct)\n  textElm.setAttribute('text-align', textAlign ?? 'left')\n  textElm.setAttribute('dominant-baseline', 'mathematical')\n  textElm.setAttribute('alignment-baseline', 'mathematical')\n\n  const textLines = lines.map((line, i) => {\n    const tspan = document.createElementNS('http://www.w3.org/2000/svg', 'tspan')\n    tspan.textContent = line + '\\n'\n    tspan.setAttribute('y', lineHeight * fontSize * (i + 0.5) + 'px')\n    textElm.appendChild(tspan)\n    return tspan\n  })\n\n  switch (textAlign) {\n    case AlignStyle.Middle: {\n      textElm.setAttribute('text-align', 'center')\n      textElm.setAttribute('text-anchor', 'middle')\n      textLines.forEach((textElm) => textElm.setAttribute('x', width / 2 + ''))\n      break\n    }\n    case AlignStyle.End: {\n      textElm.setAttribute('text-align', 'right')\n      textElm.setAttribute('text-anchor', 'end')\n      textLines.forEach((textElm) => textElm.setAttribute('x', -4 + width + ''))\n      break\n    }\n    default: {\n      textElm.setAttribute('text-align', 'left')\n      textElm.setAttribute('text-anchor', 'start')\n      textLines.forEach((textElm) => textElm.setAttribute('x', 4 + ''))\n    }\n  }\n\n  return textElm\n}\n\nfunction breakText(opts: {\n  text: string\n  wrap: boolean\n  width: number\n  fontSize: number\n  fontWeight: string\n  fontFamily: string\n  fontStyle: string\n  lineHeight: number\n  letterSpacing: string\n  textAlign: string\n}): string[] {\n  const textElm = document.createElement('div')\n  textElm.style.setProperty('position', 'absolute')\n  textElm.style.setProperty('top', '-9999px')\n  textElm.style.setProperty('left', '-9999px')\n  textElm.style.setProperty('width', opts.width + 'px')\n  textElm.style.setProperty('height', 'min-content')\n  textElm.style.setProperty('font-size', opts.fontSize + 'px')\n  textElm.style.setProperty('font-family', opts.fontFamily)\n  textElm.style.setProperty('font-weight', opts.fontWeight)\n  textElm.style.setProperty('line-height', opts.lineHeight * opts.fontSize + 'px')\n  textElm.style.setProperty('letter-spacing', opts.letterSpacing)\n  textElm.style.setProperty('text-align', opts.textAlign)\n  document.body.appendChild(textElm)\n\n  // Collect lines\n\n  // Split the text into words\n  const words = opts.text\n    .split(wordSeparator)\n    .flatMap((word) => word.replace('\\n', ' \\n'))\n    .join(' ')\n    .split(' ')\n\n  // Iterate through the words looking for either line breaks, or\n  // when the measured line exceeds the width of the container (minus\n  // its padding); at either point, create a new line.\n\n  textElm.innerText = words[0]\n  let prevHeight = textElm.offsetHeight\n\n  let currentLine = [words[0]]\n  const lines: string[][] = [currentLine]\n\n  for (let i = 1; i < words.length; i++) {\n    const word = words[i]\n    textElm.innerText += ' ' + word\n    const newHeight = textElm.offsetHeight\n    if (newHeight > prevHeight) {\n      prevHeight = newHeight\n      currentLine = []\n      lines.push(currentLine)\n    }\n\n    // Push the current word to the current line\n    currentLine.push(word)\n  }\n\n  textElm.remove()\n\n  return lines.map((line) => line.join(' '))\n}\n", "import type { TLBounds } from '@tldraw/core'\nimport * as React from 'react'\n\ninterface WithLabelMaskProps {\n  id: string\n  bounds: TLBounds\n  labelSize: number[]\n  offset?: number[]\n  scale?: number\n}\n\nexport function LabelMask({ id, bounds, labelSize, offset, scale = 1 }: WithLabelMaskProps) {\n  return (\n    <defs>\n      <mask id={id + '_clip'}>\n        <rect\n          x={-100}\n          y={-100}\n          width={bounds.width + 200}\n          height={bounds.height + 200}\n          fill=\"white\"\n        />\n        <rect\n          x={bounds.width / 2 - (labelSize[0] / 2) * scale + (offset?.[0] || 0)}\n          y={bounds.height / 2 - (labelSize[1] / 2) * scale + (offset?.[1] || 0)}\n          width={labelSize[0] * scale}\n          height={labelSize[1] * scale}\n          rx={4 * scale}\n          ry={4 * scale}\n          fill=\"black\"\n          opacity={Math.max(scale, 0.8)}\n        />\n      </mask>\n    </defs>\n  )\n}\n", "import { intersectLineLine } from '@tldraw/intersect'\nimport Vec from '@tldraw/vec'\n\nconst PI2 = Math.PI * 2\n\ntype Vert = number[]\ntype Edge = Vert[]\ntype Polygon = Vert[]\n\nexport class PolygonUtils {\n  static inwardEdgeNormal(edge: Edge) {\n    // Assuming that polygon vertices are in clockwise order\n    const delta = Vec.sub(edge[1], edge[0])\n    const len = Vec.len2(delta)\n    return [-delta[0] / len, delta[1] / len]\n  }\n\n  static outwardEdgeNormal(edge: Edge) {\n    return Vec.neg(PolygonUtils.inwardEdgeNormal(edge))\n  }\n\n  // If the slope of line v1,v2 greater than the slope of v1,p then p is on the left side of v1,v2 and the return value is > 0.\n  // If p is colinear with v1,v2 then return 0, otherwise return a value < 0.\n\n  static leftSide = Vec.isLeft\n\n  static isReflexVertex(polygon: Polygon, index: number) {\n    const len = polygon.length\n    // Assuming that polygon vertices are in clockwise order\n    const v0 = polygon[(index + len - 1) % len]\n    const v1 = polygon[index]\n    const v2 = polygon[(index + 1) % len]\n    if (PolygonUtils.leftSide(v0, v2, v1) < 0) return true\n    return false\n  }\n\n  static getEdges(vertices: Vert[]) {\n    return vertices.map((vert, i) => [vert, vertices[(i + 1) % vertices.length]])\n  }\n\n  // based on http://local.wasp.uwa.edu.au/~pbourke/geometry/lineline2d/, A => \"line a\", B => \"line b\"\n  static edgesIntersection([A1, A2]: number[][], [B1, B2]: number[][]) {\n    const den = (B2[1] - B1[1]) * (A2[0] - A1[0]) - (B2[0] - B1[0]) * (A2[1] - A1[1])\n\n    if (den == 0) return null // lines are parallel or conincident\n\n    const ua = ((B2[0] - B1[0]) * (A1[1] - B1[1]) - (B2[1] - B1[1]) * (A1[0] - B1[0])) / den\n\n    const ub = ((A2[0] - A1[0]) * (A1[1] - B1[1]) - (A2[1] - A1[1]) * (A1[0] - B1[0])) / den\n\n    if (ua < 0 || ub < 0 || ua > 1 || ub > 1) return null\n\n    return [A1[0] + ua * (A2[0] - A1[0]), A1[1] + ua * (A2[1] - A1[1])]\n  }\n\n  static appendArc(\n    polygon: number[][],\n    center: number[],\n    radius: number,\n    startVertex: number[],\n    endVertex: number[],\n    isPaddingBoundary = false\n  ) {\n    const vertices = [...polygon]\n    let startAngle = Math.atan2(startVertex[1] - center[1], startVertex[0] - center[0])\n    let endAngle = Math.atan2(endVertex[1] - center[1], endVertex[0] - center[0])\n    if (startAngle < 0) startAngle += PI2\n    if (endAngle < 0) endAngle += PI2\n    const arcSegmentCount = 5 // An odd number so that one arc vertex will be eactly arcRadius from center.\n    const angle = startAngle > endAngle ? startAngle - endAngle : startAngle + PI2 - endAngle\n    const angle5 = (isPaddingBoundary ? -angle : PI2 - angle) / arcSegmentCount\n\n    vertices.push(startVertex)\n    for (let i = 1; i < arcSegmentCount; ++i) {\n      const angle = startAngle + angle5 * i\n      vertices.push([center[0] + Math.cos(angle) * radius, center[1] + Math.sin(angle) * radius])\n    }\n    vertices.push(endVertex)\n\n    return vertices\n  }\n\n  static createOffsetEdge(edge: Edge, offset: number[]) {\n    return edge.map((vert) => Vec.add(vert, offset))\n  }\n\n  static getOffsetPolygon(polygon: Polygon, offset = 0) {\n    const edges = PolygonUtils.getEdges(polygon)\n\n    const offsetEdges = edges.map((edge) =>\n      PolygonUtils.createOffsetEdge(edge, Vec.mul(PolygonUtils.outwardEdgeNormal(edge), offset))\n    )\n\n    const vertices = []\n\n    for (let i = 0; i < offsetEdges.length; i++) {\n      const thisEdge = offsetEdges[i]\n      const prevEdge = offsetEdges[(i + offsetEdges.length - 1) % offsetEdges.length]\n      const vertex = PolygonUtils.edgesIntersection(prevEdge, thisEdge)\n      if (vertex) vertices.push(vertex)\n      else {\n        PolygonUtils.appendArc(vertices, edges[i][0], offset, prevEdge[1], thisEdge[0], false)\n      }\n    }\n\n    // var marginPolygon = PolygonUtils.createPolygon(vertices)\n    // marginPolygon.offsetEdges = offsetEdges\n    return vertices\n  }\n\n  static createPaddingPolygon(polygon: number[][][], shapePadding = 0) {\n    const offsetEdges = polygon.map((edge) =>\n      PolygonUtils.createOffsetEdge(edge, PolygonUtils.inwardEdgeNormal(edge))\n    )\n\n    const vertices = []\n    for (let i = 0; i < offsetEdges.length; i++) {\n      const thisEdge = offsetEdges[i]\n      const prevEdge = offsetEdges[(i + offsetEdges.length - 1) % offsetEdges.length]\n      const vertex = PolygonUtils.edgesIntersection(prevEdge, thisEdge)\n      if (vertex) vertices.push(vertex)\n      else {\n        PolygonUtils.appendArc(\n          vertices,\n          polygon[i][0],\n          shapePadding,\n          prevEdge[1],\n          thisEdge[0],\n          true\n        )\n      }\n    }\n\n    return vertices\n  }\n}\n\nexport function getOffsetPolygon(points: number[][], offset: number) {\n  if (points.length < 3) throw Error('Polygon must have at least 3 points')\n  const len = points.length\n  return points\n    .map((point, i) => [point, points[(i + 1) % len]])\n    .map(([A, B]) => {\n      const offsetVector = Vec.mul(Vec.per(Vec.uni(Vec.sub(B, A))), offset)\n      return [Vec.add(A, offsetVector), Vec.add(B, offsetVector)]\n    })\n    .map((edge, i, edges) => {\n      const intersection = intersectLineLine(edge, edges[(i + 1) % edges.length])\n      if (intersection === undefined) throw Error('Expected an intersection')\n      return intersection\n    })\n}\n", "import { Utils } from '@tldraw/core'\nimport { AlignStyle, ColorStyle, DashStyle, FontStyle, ShapeStyles, SizeStyle, Theme } from '~types'\n\nconst canvasLight = '#fafafa'\n\nconst canvasDark = '#343d45'\n\nconst colors = {\n  [ColorStyle.White]: '#f0f1f3',\n  [ColorStyle.LightGray]: '#c6cbd1',\n  [ColorStyle.Gray]: '#788492',\n  [ColorStyle.Black]: '#1d1d1d',\n  [ColorStyle.Green]: '#36b24d',\n  [ColorStyle.Cyan]: '#0e98ad',\n  [ColorStyle.Blue]: '#1c7ed6',\n  [ColorStyle.Indigo]: '#4263eb',\n  [ColorStyle.Violet]: '#7746f1',\n  [ColorStyle.Red]: '#ff2133',\n  [ColorStyle.Orange]: '#ff9433',\n  [ColorStyle.Yellow]: '#ffc936',\n}\n\nexport const stickyFills: Record<Theme, Record<ColorStyle, string>> = {\n  light: {\n    ...(Object.fromEntries(\n      Object.entries(colors).map(([k, v]) => [k, Utils.lerpColor(v, canvasLight, 0.45)])\n    ) as Record<ColorStyle, string>),\n    [ColorStyle.White]: '#ffffff',\n    [ColorStyle.Black]: '#3d3d3d',\n  },\n  dark: {\n    ...(Object.fromEntries(\n      Object.entries(colors).map(([k, v]) => [\n        k,\n        Utils.lerpColor(Utils.lerpColor(v, '#999999', 0.3), canvasDark, 0.4),\n      ])\n    ) as Record<ColorStyle, string>),\n    [ColorStyle.White]: '#1d1d1d',\n    [ColorStyle.Black]: '#bbbbbb',\n  },\n}\n\nexport const strokes: Record<Theme, Record<ColorStyle, string>> = {\n  light: {\n    ...colors,\n    [ColorStyle.White]: '#1d1d1d',\n  },\n  dark: {\n    ...(Object.fromEntries(\n      Object.entries(colors).map(([k, v]) => [k, Utils.lerpColor(v, canvasDark, 0.1)])\n    ) as Record<ColorStyle, string>),\n    [ColorStyle.White]: '#cecece',\n    [ColorStyle.Black]: '#cecece',\n  },\n}\n\nexport const fills: Record<Theme, Record<ColorStyle, string>> = {\n  light: {\n    ...(Object.fromEntries(\n      Object.entries(colors).map(([k, v]) => [k, Utils.lerpColor(v, canvasLight, 0.82)])\n    ) as Record<ColorStyle, string>),\n    [ColorStyle.White]: '#fefefe',\n  },\n  dark: {\n    ...(Object.fromEntries(\n      Object.entries(colors).map(([k, v]) => [k, Utils.lerpColor(v, canvasDark, 0.82)])\n    ) as Record<ColorStyle, string>),\n    [ColorStyle.White]: 'rgb(30,33,37)',\n    [ColorStyle.Black]: '#1e1e1f',\n  },\n}\n\nconst strokeWidths = {\n  [SizeStyle.Small]: 2,\n  [SizeStyle.Medium]: 3.5,\n  [SizeStyle.Large]: 5,\n}\n\nconst fontSizes = {\n  [SizeStyle.Small]: 28,\n  [SizeStyle.Medium]: 48,\n  [SizeStyle.Large]: 96,\n  auto: 'auto',\n}\n\nconst fontFaces = {\n  [FontStyle.Script]: '\"Caveat Brush\"',\n  [FontStyle.Sans]: '\"Source Sans Pro\"',\n  [FontStyle.Serif]: '\"Crimson Pro\"',\n  [FontStyle.Mono]: '\"Source Code Pro\"',\n}\n\nconst fontSizeModifiers = {\n  [FontStyle.Script]: 1,\n  [FontStyle.Sans]: 1,\n  [FontStyle.Serif]: 1,\n  [FontStyle.Mono]: 1,\n}\n\nconst stickyFontSizes = {\n  [SizeStyle.Small]: 24,\n  [SizeStyle.Medium]: 36,\n  [SizeStyle.Large]: 48,\n  auto: 'auto',\n}\n\nexport function getStrokeWidth(size: SizeStyle): number {\n  return strokeWidths[size]\n}\n\nexport function getFontSize(size: SizeStyle, fontStyle: FontStyle = FontStyle.Script): number {\n  return fontSizes[size] * fontSizeModifiers[fontStyle]\n}\n\nexport function getFontFace(font: FontStyle = FontStyle.Script): string {\n  return fontFaces[font]\n}\n\nexport function getStickyFontSize(size: SizeStyle): number {\n  return stickyFontSizes[size]\n}\n\nexport function getFontStyle(style: ShapeStyles): string {\n  const fontSize = getFontSize(style.size, style.font)\n  const fontFace = getFontFace(style.font)\n  const { scale = 1 } = style\n\n  return `${fontSize * scale}px/1 ${fontFace}`\n}\n\nexport function getStickyFontStyle(style: ShapeStyles): string {\n  const fontSize = getStickyFontSize(style.size)\n  const fontFace = getFontFace(style.font)\n  const { scale = 1 } = style\n\n  return `${fontSize * scale}px/1 ${fontFace}`\n}\n\nexport function getStickyShapeStyle(style: ShapeStyles, isDarkMode = false) {\n  const { color } = style\n\n  const theme: Theme = isDarkMode ? 'dark' : 'light'\n  const adjustedColor =\n    color === ColorStyle.White || color === ColorStyle.Black ? ColorStyle.Yellow : color\n\n  return {\n    fill: stickyFills[theme][adjustedColor],\n    stroke: strokes[theme][adjustedColor],\n    color: isDarkMode ? '#1d1d1d' : '#0d0d0d',\n  }\n}\n\nexport function getShapeStyle(\n  style: ShapeStyles,\n  isDarkMode?: boolean\n): {\n  stroke: string\n  fill: string\n  strokeWidth: number\n} {\n  const { color, size, isFilled } = style\n\n  const strokeWidth = getStrokeWidth(size)\n\n  const theme: Theme = isDarkMode ? 'dark' : 'light'\n\n  return {\n    stroke: strokes[theme][color],\n    fill: isFilled ? fills[theme][color] : 'none',\n    strokeWidth,\n  }\n}\n\nexport const defaultStyle: ShapeStyles = {\n  color: ColorStyle.Black,\n  size: SizeStyle.Small,\n  isFilled: false,\n  dash: DashStyle.Draw,\n  scale: 1,\n}\n\nexport const defaultTextStyle: ShapeStyles = {\n  ...defaultStyle,\n  font: FontStyle.Script,\n  textAlign: AlignStyle.Middle,\n}\n", "// Adapted (mostly copied) the work of https://github.com/fregante\n// Copyright (c) Federico Brigante <opensource@bfred.it> (bfred.it)\n\ntype ReplacerCallback = (substring: string, ...args: unknown[]) => string\n\nconst INDENT = '  '\n\nexport class TextAreaUtils {\n  static insertTextFirefox(field: HTMLTextAreaElement | HTMLInputElement, text: string): void {\n    // Found on https://www.everythingfrontend.com/posts/insert-text-into-textarea-at-cursor-position.html \uD83C\uDF88\n    field.setRangeText(\n      text,\n      field.selectionStart || 0,\n      field.selectionEnd || 0,\n      'end' // Without this, the cursor is either at the beginning or `text` remains selected\n    )\n\n    field.dispatchEvent(\n      new InputEvent('input', {\n        data: text,\n        inputType: 'insertText',\n        isComposing: false, // TODO: fix @types/jsdom, this shouldn't be required\n      })\n    )\n  }\n\n  /** Inserts `text` at the cursor\u2019s position, replacing any selection, with **undo** support and by firing the `input` event. */\n  static insert(field: HTMLTextAreaElement | HTMLInputElement, text: string): void {\n    const document = field.ownerDocument\n    const initialFocus = document.activeElement\n    if (initialFocus !== field) {\n      field.focus()\n    }\n\n    if (!document.execCommand('insertText', false, text)) {\n      TextAreaUtils.insertTextFirefox(field, text)\n    }\n\n    if (initialFocus === document.body) {\n      field.blur()\n    } else if (initialFocus instanceof HTMLElement && initialFocus !== field) {\n      initialFocus.focus()\n    }\n  }\n\n  /** Replaces the entire content, equivalent to `field.value = text` but with **undo** support and by firing the `input` event. */\n  static set(field: HTMLTextAreaElement | HTMLInputElement, text: string): void {\n    field.select()\n    TextAreaUtils.insert(field, text)\n  }\n\n  /** Get the selected text in a field or an empty string if nothing is selected. */\n  static getSelection(field: HTMLTextAreaElement | HTMLInputElement): string {\n    const { selectionStart, selectionEnd } = field\n    return field.value.slice(\n      selectionStart ? selectionStart : undefined,\n      selectionEnd ? selectionEnd : undefined\n    )\n  }\n\n  /** Adds the `wrappingText` before and after field\u2019s selection (or cursor). If `endWrappingText` is provided, it will be used instead of `wrappingText` at on the right. */\n  static wrapSelection(\n    field: HTMLTextAreaElement | HTMLInputElement,\n    wrap: string,\n    wrapEnd?: string\n  ): void {\n    const { selectionStart, selectionEnd } = field\n    const selection = TextAreaUtils.getSelection(field)\n    TextAreaUtils.insert(field, wrap + selection + (wrapEnd ?? wrap))\n\n    // Restore the selection around the previously-selected text\n    field.selectionStart = (selectionStart || 0) + wrap.length\n    field.selectionEnd = (selectionEnd || 0) + wrap.length\n  }\n\n  /** Finds and replaces strings and regex in the field\u2019s value, like `field.value = field.value.replace()` but better */\n  static replace(\n    field: HTMLTextAreaElement | HTMLInputElement,\n    searchValue: string | RegExp,\n    replacer: string | ReplacerCallback\n  ): void {\n    /** Remembers how much each match offset should be adjusted */\n    let drift = 0\n\n    field.value.replace(searchValue, (...args): string => {\n      // Select current match to replace it later\n      const matchStart = drift + (args[args.length - 2] as number)\n      const matchLength = args[0].length\n      field.selectionStart = matchStart\n      field.selectionEnd = matchStart + matchLength\n\n      const replacement = typeof replacer === 'string' ? replacer : replacer(...args)\n      TextAreaUtils.insert(field, replacement)\n\n      // Select replacement. Without this, the cursor would be after the replacement\n      field.selectionStart = matchStart\n      drift += replacement.length - matchLength\n      return replacement\n    })\n  }\n\n  static findLineEnd(value: string, currentEnd: number): number {\n    // Go to the beginning of the last line\n    const lastLineStart = value.lastIndexOf('\\n', currentEnd - 1) + 1\n\n    // There's nothing to unindent after the last cursor, so leave it as is\n    if (value.charAt(lastLineStart) !== '\\t') {\n      return currentEnd\n    }\n\n    return lastLineStart + 1 // Include the first character, which will be a tab\n  }\n\n  static indent(element: HTMLTextAreaElement): void {\n    const { selectionStart, selectionEnd, value } = element\n    const selectedContrast = value.slice(selectionStart, selectionEnd)\n    // The first line should be indented, even if it starts with `\\n`\n    // The last line should only be indented if includes any character after `\\n`\n    const lineBreakCount = /\\n/g.exec(selectedContrast)?.length\n\n    if (lineBreakCount && lineBreakCount > 0) {\n      // Select full first line to replace everything at once\n      const firstLineStart = value.lastIndexOf('\\n', selectionStart - 1) + 1\n\n      const newSelection = element.value.slice(firstLineStart, selectionEnd - 1)\n      const indentedText = newSelection.replace(\n        /^|\\n/g, // Match all line starts\n        `$&${INDENT}`\n      )\n      const replacementsCount = indentedText.length - newSelection.length\n\n      // Replace newSelection with indentedText\n      element.setSelectionRange(firstLineStart, selectionEnd - 1)\n      TextAreaUtils.insert(element, indentedText)\n\n      // Restore selection position, including the indentation\n      element.setSelectionRange(selectionStart + 1, selectionEnd + replacementsCount)\n    } else {\n      TextAreaUtils.insert(element, INDENT)\n    }\n  }\n\n  // The first line should always be unindented\n  // The last line should only be unindented if the selection includes any characters after `\\n`\n  static unindent(element: HTMLTextAreaElement): void {\n    const { selectionStart, selectionEnd, value } = element\n\n    // Select the whole first line because it might contain \\t\n    const firstLineStart = value.lastIndexOf('\\n', selectionStart - 1) + 1\n    const minimumSelectionEnd = TextAreaUtils.findLineEnd(value, selectionEnd)\n\n    const newSelection = element.value.slice(firstLineStart, minimumSelectionEnd)\n    const indentedText = newSelection.replace(/(^|\\n)(\\t| {1,2})/g, '$1')\n    const replacementsCount = newSelection.length - indentedText.length\n\n    // Replace newSelection with indentedText\n    element.setSelectionRange(firstLineStart, minimumSelectionEnd)\n    TextAreaUtils.insert(element, indentedText)\n\n    // Restore selection position, including the indentation\n    const firstLineIndentation = /\\t| {1,2}/.exec(value.slice(firstLineStart, selectionStart))\n\n    const difference = firstLineIndentation ? firstLineIndentation[0].length : 0\n\n    const newSelectionStart = selectionStart - difference\n    element.setSelectionRange(\n      selectionStart - difference,\n      Math.max(newSelectionStart, selectionEnd - replacementsCount)\n    )\n  }\n}\n", "import * as React from 'react'\nimport { stopPropagation } from '~components/stopPropagation'\nimport { GHOSTED_OPACITY, LETTER_SPACING } from '~constants'\nimport { TLDR } from '~state/TLDR'\nimport { styled } from '~styles'\nimport { TextAreaUtils } from './TextAreaUtils'\nimport { getTextLabelSize } from './getTextSize'\n\nexport interface TextLabelProps {\n  font: string\n  text: string\n  color: string\n  onBlur?: () => void\n  onChange: (text: string) => void\n  offsetY?: number\n  offsetX?: number\n  scale?: number\n  isEditing?: boolean\n}\n\nexport const TextLabel = React.memo(function TextLabel({\n  font,\n  text,\n  color,\n  offsetX = 0,\n  offsetY = 0,\n  scale = 1,\n  isEditing = false,\n  onBlur,\n  onChange,\n}: TextLabelProps) {\n  const rInput = React.useRef<HTMLTextAreaElement>(null)\n  const rIsMounted = React.useRef(false)\n\n  const handleChange = React.useCallback(\n    (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n      onChange(TLDR.normalizeText(e.currentTarget.value))\n    },\n    [onChange]\n  )\n  const handleKeyDown = React.useCallback(\n    (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n      if (e.key === 'Escape') {\n        e.preventDefault()\n        e.stopPropagation()\n        onBlur?.()\n        return\n      }\n\n      if (e.key === 'Tab' && text.length === 0) {\n        e.preventDefault()\n        return\n      }\n\n      if (!(e.key === 'Meta' || e.metaKey)) {\n        e.stopPropagation()\n      } else if (e.key === 'z' && e.metaKey) {\n        if (e.shiftKey) {\n          document.execCommand('redo', false)\n        } else {\n          document.execCommand('undo', false)\n        }\n        e.stopPropagation()\n        e.preventDefault()\n        return\n      }\n\n      if ((e.metaKey || e.ctrlKey) && e.key === '=') {\n        e.preventDefault()\n      }\n\n      if (e.key === 'Tab') {\n        e.preventDefault()\n        if (e.shiftKey) {\n          TextAreaUtils.unindent(e.currentTarget)\n        } else {\n          TextAreaUtils.indent(e.currentTarget)\n        }\n\n        onChange?.(TLDR.normalizeText(e.currentTarget.value))\n      }\n    },\n    [onChange]\n  )\n\n  const handleBlur = React.useCallback(\n    (e: React.FocusEvent<HTMLTextAreaElement>) => {\n      e.currentTarget.setSelectionRange(0, 0)\n      onBlur?.()\n    },\n    [onBlur]\n  )\n\n  const handleFocus = React.useCallback(\n    (e: React.FocusEvent<HTMLTextAreaElement>) => {\n      if (!isEditing) return\n      if (!rIsMounted.current) return\n\n      if (document.activeElement === e.currentTarget) {\n        e.currentTarget.select()\n      }\n    },\n    [isEditing]\n  )\n\n  const handlePointerDown = React.useCallback(\n    (e: React.PointerEvent<HTMLTextAreaElement | HTMLDivElement>) => {\n      if (isEditing) {\n        e.stopPropagation()\n      }\n    },\n    [isEditing]\n  )\n\n  const rWasEditing = React.useRef(isEditing)\n\n  React.useEffect(() => {\n    if (isEditing) {\n      rWasEditing.current = true\n      requestAnimationFrame(() => {\n        rIsMounted.current = true\n        const elm = rInput.current\n        if (elm) {\n          elm.focus()\n          elm.select()\n        }\n      })\n    } else if (rWasEditing.current) {\n      onBlur?.()\n      rWasEditing.current = false\n    }\n  }, [isEditing, onBlur])\n\n  const rInnerWrapper = React.useRef<HTMLDivElement>(null)\n\n  React.useLayoutEffect(() => {\n    const elm = rInnerWrapper.current\n    if (!elm) return\n    const size = getTextLabelSize(text, font)\n    elm.style.transform = `scale(${scale}, ${scale}) translate(${offsetX}px, ${offsetY}px)`\n    elm.style.width = size[0] + 1 + 'px'\n    elm.style.height = size[1] + 1 + 'px'\n  }, [text, font, offsetY, offsetX, scale])\n\n  return (\n    <TextWrapper>\n      <InnerWrapper\n        ref={rInnerWrapper}\n        hasText={!!text}\n        isEditing={isEditing}\n        style={{\n          font,\n          color,\n        }}\n      >\n        {isEditing ? (\n          <TextArea\n            ref={rInput}\n            style={{\n              font,\n              color,\n            }}\n            name=\"text\"\n            tabIndex={-1}\n            autoComplete=\"false\"\n            autoCapitalize=\"false\"\n            autoCorrect=\"false\"\n            autoSave=\"false\"\n            autoFocus\n            placeholder=\"\"\n            spellCheck=\"true\"\n            wrap=\"off\"\n            dir=\"auto\"\n            datatype=\"wysiwyg\"\n            defaultValue={text}\n            color={color}\n            onFocus={handleFocus}\n            onChange={handleChange}\n            onKeyDown={handleKeyDown}\n            onBlur={handleBlur}\n            onPointerDown={handlePointerDown}\n            onContextMenu={stopPropagation}\n            onCopy={stopPropagation}\n            onPaste={stopPropagation}\n            onCut={stopPropagation}\n          />\n        ) : (\n          text\n        )}\n        &#8203;\n      </InnerWrapper>\n    </TextWrapper>\n  )\n})\n\nconst TextWrapper = styled('div', {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  width: '100%',\n  height: '100%',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  pointerEvents: 'none',\n  userSelect: 'none',\n  variants: {\n    isGhost: {\n      false: { opacity: 1 },\n      true: { transition: 'opacity .2s', opacity: GHOSTED_OPACITY },\n    },\n  },\n})\n\nconst commonTextWrapping = {\n  whiteSpace: 'pre-wrap',\n  overflowWrap: 'break-word',\n  letterSpacing: LETTER_SPACING,\n}\n\nconst InnerWrapper = styled('div', {\n  position: 'absolute',\n  padding: '4px',\n  zIndex: 1,\n  minHeight: 1,\n  minWidth: 1,\n  lineHeight: 1,\n  outline: 0,\n  fontWeight: '500',\n  textAlign: 'center',\n  backfaceVisibility: 'hidden',\n  userSelect: 'none',\n  WebkitUserSelect: 'none',\n  WebkitTouchCallout: 'none',\n  variants: {\n    hasText: {\n      false: {\n        pointerEvents: 'none',\n      },\n      true: {\n        pointerEvents: 'all',\n      },\n    },\n    isEditing: {\n      false: {\n        userSelect: 'none',\n      },\n      true: {\n        background: '$boundsBg',\n        userSelect: 'text',\n        WebkitUserSelect: 'text',\n      },\n    },\n  },\n  ...commonTextWrapping,\n})\n\nconst TextArea = styled('textarea', {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  zIndex: 1,\n  width: '100%',\n  height: '100%',\n  border: 'none',\n  padding: '4px',\n  resize: 'none',\n  textAlign: 'inherit',\n  minHeight: 'inherit',\n  minWidth: 'inherit',\n  lineHeight: 'inherit',\n  outline: 0,\n  fontWeight: 'inherit',\n  overflow: 'hidden',\n  backfaceVisibility: 'hidden',\n  display: 'inline-block',\n  pointerEvents: 'all',\n  background: '$boundsBg',\n  userSelect: 'text',\n  WebkitUserSelect: 'text',\n  fontSmooth: 'always',\n  WebkitFontSmoothing: 'subpixel-antialiased',\n  MozOsxFontSmoothing: 'auto',\n  ...commonTextWrapping,\n  '&:focus': {\n    outline: 'none',\n    border: 'none',\n  },\n})\n", "import type { TLBounds, TLShape, TLTransformInfo } from '@tldraw/core'\nimport Vec from '@tldraw/vec'\n\n/**\n * Transform a rectangular shape.\n * @param shape\n * @param bounds\n * @param param2\n */\nexport function transformRectangle<T extends TLShape & { size: number[] }>(\n  shape: T,\n  bounds: TLBounds,\n  { initialShape, transformOrigin, scaleX, scaleY }: TLTransformInfo<T>\n) {\n  if (shape.rotation || initialShape.isAspectRatioLocked) {\n    const size = Vec.toFixed(\n      Vec.mul(initialShape.size, Math.min(Math.abs(scaleX), Math.abs(scaleY)))\n    )\n    const point = Vec.toFixed([\n      bounds.minX +\n        (bounds.width - shape.size[0]) * (scaleX < 0 ? 1 - transformOrigin[0] : transformOrigin[0]),\n      bounds.minY +\n        (bounds.height - shape.size[1]) *\n          (scaleY < 0 ? 1 - transformOrigin[1] : transformOrigin[1]),\n    ])\n    const rotation =\n      (scaleX < 0 && scaleY >= 0) || (scaleY < 0 && scaleX >= 0)\n        ? initialShape.rotation\n          ? -initialShape.rotation\n          : 0\n        : initialShape.rotation\n    return {\n      size,\n      point,\n      rotation,\n    }\n  } else {\n    return {\n      point: Vec.toFixed([bounds.minX, bounds.minY]),\n      size: Vec.toFixed([bounds.width, bounds.height]),\n    }\n  }\n}\n", "import type { TLBounds, TLShape } from '@tldraw/core'\nimport Vec from '@tldraw/vec'\n\n/**\n * Transform a single rectangular shape.\n * @param shape\n * @param bounds\n */\nexport function transformSingleRectangle<T extends TLShape & { size: number[] }>(\n  shape: T,\n  bounds: TLBounds\n) {\n  return {\n    size: Vec.toFixed([bounds.width, bounds.height]),\n    point: Vec.toFixed([bounds.minX, bounds.minY]),\n  }\n}\n", "import { Utils } from '@tldraw/core'\nimport { intersectCircleCircle, intersectCircleLineSegment } from '@tldraw/intersect'\nimport Vec from '@tldraw/vec'\nimport getStroke from 'perfect-freehand'\nimport { EASINGS } from '~constants'\nimport { TLDR } from '~state/TLDR'\nimport { getShapeStyle } from '~state/shapes/shared'\nimport type { ArrowShape, Decoration, ShapeStyles } from '~types'\n\nexport function getArrowArcPath(start: number[], end: number[], circle: number[], bend: number) {\n  return [\n    'M',\n    start[0],\n    start[1],\n    'A',\n    circle[2],\n    circle[2],\n    0,\n    0,\n    bend < 0 ? 0 : 1,\n    end[0],\n    end[1],\n  ].join(' ')\n}\n\nexport function getBendPoint(handles: ArrowShape['handles'], bend: number) {\n  const { start, end } = handles\n\n  const dist = Vec.dist(start.point, end.point)\n\n  const midPoint = Vec.med(start.point, end.point)\n\n  const bendDist = (dist / 2) * bend\n\n  const u = Vec.uni(Vec.vec(start.point, end.point))\n\n  const point = Vec.toFixed(\n    Math.abs(bendDist) < 10 ? midPoint : Vec.add(midPoint, Vec.mul(Vec.per(u), bendDist))\n  )\n\n  return point\n}\n\nexport function renderFreehandArrowShaft(\n  id: string,\n  style: ShapeStyles,\n  start: number[],\n  end: number[],\n  decorationStart: Decoration | undefined,\n  decorationEnd: Decoration | undefined\n) {\n  const getRandom = Utils.rng(id)\n  const strokeWidth = getShapeStyle(style).strokeWidth\n  const startPoint = decorationStart ? Vec.nudge(start, end, strokeWidth) : start\n  const endPoint = decorationEnd ? Vec.nudge(end, start, strokeWidth) : end\n  const stroke = getStroke([startPoint, endPoint], {\n    size: strokeWidth,\n    thinning: 0.618 + getRandom() * 0.2,\n    easing: EASINGS.easeOutQuad,\n    simulatePressure: true,\n    streamline: 0,\n    last: true,\n  })\n  return Utils.getSvgPathFromStroke(stroke)\n}\n\nexport function renderCurvedFreehandArrowShaft(\n  id: string,\n  style: ShapeStyles,\n  start: number[],\n  end: number[],\n  decorationStart: Decoration | undefined,\n  decorationEnd: Decoration | undefined,\n  center: number[],\n  radius: number,\n  length: number,\n  easing: (t: number) => number\n) {\n  const getRandom = Utils.rng(id)\n  const strokeWidth = getShapeStyle(style).strokeWidth\n  const startPoint = decorationStart ? Vec.rotWith(start, center, strokeWidth / length) : start\n  const endPoint = decorationEnd ? Vec.rotWith(end, center, -(strokeWidth / length)) : end\n  const startAngle = Vec.angle(center, startPoint)\n  const endAngle = Vec.angle(center, endPoint)\n  const points: number[][] = []\n  const count = 8 + Math.floor((Math.abs(length) / 20) * 1 + getRandom() / 2)\n  for (let i = 0; i < count; i++) {\n    const t = easing(i / count)\n    const angle = Utils.lerpAngles(startAngle, endAngle, t)\n    points.push(Vec.toFixed(Vec.nudgeAtAngle(center, angle, radius)))\n  }\n  const stroke = getStroke([startPoint, ...points, endPoint], {\n    size: 1 + strokeWidth,\n    thinning: 0.618 + getRandom() * 0.2,\n    easing: EASINGS.easeOutQuad,\n    simulatePressure: false,\n    streamline: 0,\n    last: true,\n  })\n  return Utils.getSvgPathFromStroke(stroke)\n}\n\nexport function getCtp(start: number[], bend: number[], end: number[]) {\n  return Utils.circleFromThreePoints(start, end, bend)\n}\n\nexport function getCurvedArrowHeadPoints(\n  A: number[],\n  r1: number,\n  C: number[],\n  r2: number,\n  sweep: boolean\n) {\n  const ints = intersectCircleCircle(A, r1 * 0.618, C, r2).points\n  if (!ints) {\n    TLDR.warn('Could not find an intersection for the arrow head.')\n    return { left: A, right: A }\n  }\n  const int = sweep ? ints[0] : ints[1]\n  const left = int ? Vec.nudge(Vec.rotWith(int, A, Math.PI / 6), A, r1 * -0.382) : A\n  const right = int ? Vec.nudge(Vec.rotWith(int, A, -Math.PI / 6), A, r1 * -0.382) : A\n  return { left, right }\n}\n\nexport function getStraightArrowHeadPoints(A: number[], B: number[], r: number) {\n  const ints = intersectCircleLineSegment(A, r, A, B).points\n  if (!ints) {\n    TLDR.warn('Could not find an intersection for the arrow head.')\n    return { left: A, right: A }\n  }\n  const int = ints[0]\n  const left = int ? Vec.rotWith(int, A, Math.PI / 6) : A\n  const right = int ? Vec.rotWith(int, A, -Math.PI / 6) : A\n  return { left, right }\n}\n\nexport function getCurvedArrowHeadPath(\n  A: number[],\n  r1: number,\n  C: number[],\n  r2: number,\n  sweep: boolean\n) {\n  const { left, right } = getCurvedArrowHeadPoints(A, r1, C, r2, sweep)\n  return `M ${left} L ${A} ${right}`\n}\n\nexport function getStraightArrowHeadPath(A: number[], B: number[], r: number) {\n  const { left, right } = getStraightArrowHeadPoints(A, B, r)\n  return `M ${left} L ${A} ${right}`\n}\n\nexport function getArrowPath(\n  style: ShapeStyles,\n  start: number[],\n  bend: number[],\n  end: number[],\n  decorationStart: Decoration | undefined,\n  decorationEnd: Decoration | undefined\n) {\n  const { strokeWidth } = getShapeStyle(style, false)\n  const arrowDist = Vec.dist(start, end)\n  const arrowHeadLength = Math.min(arrowDist / 3, strokeWidth * 8)\n  const path: (string | number)[] = []\n  const isStraightLine = Vec.dist(bend, Vec.toFixed(Vec.med(start, end))) < 1\n  if (isStraightLine) {\n    path.push(`M ${start} L ${end}`)\n    if (decorationStart) {\n      path.push(getStraightArrowHeadPath(start, end, arrowHeadLength))\n    }\n    if (decorationEnd) {\n      path.push(getStraightArrowHeadPath(end, start, arrowHeadLength))\n    }\n  } else {\n    const circle = getCtp(start, bend, end)\n    const center = [circle[0], circle[1]]\n    const radius = circle[2]\n    const length = getArcLength(center, radius, start, end)\n    path.push(`M ${start} A ${radius} ${radius} 0 0 ${length > 0 ? '1' : '0'} ${end}`)\n    if (decorationStart)\n      path.push(getCurvedArrowHeadPath(start, arrowHeadLength, center, radius, length < 0))\n    if (decorationEnd) {\n      path.push(getCurvedArrowHeadPath(end, arrowHeadLength, center, radius, length >= 0))\n    }\n  }\n  return path.join(' ')\n}\n\nexport function getArcPoints(start: number[], bend: number[], end: number[]) {\n  if (Vec.dist2(bend, Vec.med(start, end)) <= 4) return [start, end]\n  // The arc is curved; calculate twenty points along the arc\n  const points: number[][] = []\n  const circle = getCtp(start, bend, end)\n  const center = [circle[0], circle[1]]\n  const radius = circle[2]\n  const startAngle = Vec.angle(center, start)\n  const endAngle = Vec.angle(center, end)\n  for (let i = 0; i < 20; i++) {\n    const t = i / 19\n    const angle = Utils.lerpAngles(startAngle, endAngle, t)\n    points.push(Vec.nudgeAtAngle(center, angle, radius))\n  }\n  return points\n}\n\nexport function isAngleBetween(a: number, b: number, c: number): boolean {\n  if (c === a || c === b) return true\n  const PI2 = Math.PI * 2\n  const AB = (b - a + PI2) % PI2\n  const AC = (c - a + PI2) % PI2\n  return AB <= Math.PI !== AC > AB\n}\n\nexport function getArcLength(C: number[], r: number, A: number[], B: number[]): number {\n  const sweep = Utils.getSweep(C, A, B)\n  return r * (2 * Math.PI) * (sweep / (2 * Math.PI))\n}\n", "import { Utils } from '@tldraw/core'\nimport Vec from '@tldraw/vec'\nimport * as React from 'react'\nimport { EASINGS } from '~constants'\nimport { getShapeStyle } from '~state/shapes/shared'\nimport type { Decoration, ShapeStyles } from '~types'\nimport {\n  getArcLength,\n  getArrowArcPath,\n  getCtp,\n  getCurvedArrowHeadPoints,\n  renderCurvedFreehandArrowShaft,\n} from '../arrowHelpers'\nimport { Arrowhead } from './ArrowHead'\n\ninterface ArrowSvgProps {\n  id: string\n  style: ShapeStyles\n  start: number[]\n  bend: number[]\n  end: number[]\n  arrowBend: number\n  decorationStart: Decoration | undefined\n  decorationEnd: Decoration | undefined\n  isDarkMode: boolean\n  isDraw: boolean\n}\n\nexport const CurvedArrow = React.memo(function CurvedArrow({\n  id,\n  style,\n  start,\n  bend,\n  end,\n  arrowBend,\n  decorationStart,\n  decorationEnd,\n  isDraw,\n  isDarkMode,\n}: ArrowSvgProps) {\n  const arrowDist = Vec.dist(start, end)\n  if (arrowDist < 2) return null\n  const styles = getShapeStyle(style, isDarkMode)\n  const { strokeWidth } = styles\n  const sw = 1 + strokeWidth * 1.618\n  // Calculate a path as a segment of a circle passing through the three points start, bend, and end\n  const circle = getCtp(start, bend, end)\n  const center = [circle[0], circle[1]]\n  const radius = circle[2]\n  const length = getArcLength(center, radius, start, end)\n  const getRandom = Utils.rng(id)\n  const easing = EASINGS[getRandom() > 0 ? 'easeInOutSine' : 'easeInOutCubic']\n  const path = isDraw\n    ? renderCurvedFreehandArrowShaft(\n        id,\n        style,\n        start,\n        end,\n        decorationStart,\n        decorationEnd,\n        center,\n        radius,\n        length,\n        easing\n      )\n    : getArrowArcPath(start, end, circle, arrowBend)\n  const { strokeDasharray, strokeDashoffset } = Utils.getPerfectDashProps(\n    Math.abs(length),\n    sw,\n    style.dash,\n    2,\n    false\n  )\n  // Arrowheads\n  const arrowHeadLength = Math.min(arrowDist / 3, strokeWidth * 8)\n  const startArrowHead = decorationStart\n    ? getCurvedArrowHeadPoints(start, arrowHeadLength, center, radius, length < 0)\n    : null\n  const endArrowHead = decorationEnd\n    ? getCurvedArrowHeadPoints(end, arrowHeadLength, center, radius, length >= 0)\n    : null\n  return (\n    <>\n      <path className=\"tl-stroke-hitarea\" d={path} />\n      <path\n        d={path}\n        fill={isDraw ? styles.stroke : 'none'}\n        stroke={styles.stroke}\n        strokeWidth={isDraw ? 0 : sw}\n        strokeDasharray={strokeDasharray}\n        strokeDashoffset={strokeDashoffset}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        pointerEvents=\"none\"\n      />\n      {startArrowHead && (\n        <Arrowhead\n          left={startArrowHead.left}\n          middle={start}\n          right={startArrowHead.right}\n          stroke={styles.stroke}\n          strokeWidth={sw}\n        />\n      )}\n      {endArrowHead && (\n        <Arrowhead\n          left={endArrowHead.left}\n          middle={end}\n          right={endArrowHead.right}\n          stroke={styles.stroke}\n          strokeWidth={sw}\n        />\n      )}\n    </>\n  )\n})\n", "import * as React from 'react'\n\nexport interface ArrowheadProps {\n  left: number[]\n  middle: number[]\n  right: number[]\n  stroke: string\n  strokeWidth: number\n}\n\nexport function Arrowhead({ left, middle, right, stroke, strokeWidth }: ArrowheadProps) {\n  return (\n    <g>\n      <path className=\"tl-stroke-hitarea\" d={`M ${left} L ${middle} ${right}`} />\n      <path\n        d={`M ${left} L ${middle} ${right}`}\n        fill=\"none\"\n        stroke={stroke}\n        strokeWidth={strokeWidth}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        pointerEvents=\"none\"\n      />\n    </g>\n  )\n}\n", "import { Utils } from '@tldraw/core'\nimport Vec from '@tldraw/vec'\nimport * as React from 'react'\nimport { getShapeStyle } from '~state/shapes/shared'\nimport type { Decoration, ShapeStyles } from '~types'\nimport { getStraightArrowHeadPoints, renderFreehandArrowShaft } from '../arrowHelpers'\nimport { Arrowhead } from './ArrowHead'\n\ninterface ArrowSvgProps {\n  id: string\n  style: ShapeStyles\n  start: number[]\n  bend: number[]\n  end: number[]\n  arrowBend: number\n  decorationStart: Decoration | undefined\n  decorationEnd: Decoration | undefined\n  isDarkMode: boolean\n  isDraw: boolean\n}\n\nexport const StraightArrow = React.memo(function StraightArrow({\n  id,\n  style,\n  start,\n  end,\n  decorationStart,\n  decorationEnd,\n  isDraw,\n  isDarkMode,\n}: ArrowSvgProps) {\n  const arrowDist = Vec.dist(start, end)\n  if (arrowDist < 2) return null\n  const styles = getShapeStyle(style, isDarkMode)\n  const { strokeWidth } = styles\n  const sw = 1 + strokeWidth * 1.618\n  // Path between start and end points\n  const path = isDraw\n    ? renderFreehandArrowShaft(id, style, start, end, decorationStart, decorationEnd)\n    : 'M' + Vec.toFixed(start) + 'L' + Vec.toFixed(end)\n  const { strokeDasharray, strokeDashoffset } = Utils.getPerfectDashProps(\n    arrowDist,\n    strokeWidth * 1.618,\n    style.dash,\n    2,\n    false\n  )\n  // Arrowheads\n  const arrowHeadLength = Math.min(arrowDist / 3, strokeWidth * 8)\n  const startArrowHead = decorationStart\n    ? getStraightArrowHeadPoints(start, end, arrowHeadLength)\n    : null\n  const endArrowHead = decorationEnd\n    ? getStraightArrowHeadPoints(end, start, arrowHeadLength)\n    : null\n  return (\n    <>\n      <path className=\"tl-stroke-hitarea\" d={path} />\n      <path\n        d={path}\n        fill={styles.stroke}\n        stroke={styles.stroke}\n        strokeWidth={isDraw ? sw / 2 : sw}\n        strokeDasharray={strokeDasharray}\n        strokeDashoffset={strokeDashoffset}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        pointerEvents=\"stroke\"\n      />\n      {startArrowHead && (\n        <Arrowhead\n          left={startArrowHead.left}\n          middle={start}\n          right={startArrowHead.right}\n          stroke={styles.stroke}\n          strokeWidth={sw}\n        />\n      )}\n      {endArrowHead && (\n        <Arrowhead\n          left={endArrowHead.left}\n          middle={end}\n          right={endArrowHead.right}\n          stroke={styles.stroke}\n          strokeWidth={sw}\n        />\n      )}\n    </>\n  )\n})\n", "import { SVGContainer, TLBounds, Utils } from '@tldraw/core'\nimport {\n  intersectBoundsBounds,\n  intersectBoundsPolyline,\n  intersectLineSegmentBounds,\n  intersectLineSegmentLineSegment,\n} from '@tldraw/intersect'\nimport { Vec } from '@tldraw/vec'\nimport * as React from 'react'\nimport { GHOSTED_OPACITY } from '~constants'\nimport { TDShapeUtil } from '~state/shapes/TDShapeUtil'\nimport { defaultStyle, getShapeStyle } from '~state/shapes/shared'\nimport { DashStyle, DrawShape, TDMeta, TDShapeType, TransformInfo } from '~types'\nimport {\n  getDrawStrokePathTDSnapshot,\n  getFillPath,\n  getSolidStrokePathTDSnapshot,\n} from './drawHelpers'\n\ntype T = DrawShape\ntype E = SVGSVGElement\n\nexport class DrawUtil extends TDShapeUtil<T, E> {\n  type = TDShapeType.Draw as const\n\n  pointsBoundsCache = new WeakMap<T['points'], TLBounds>([])\n\n  shapeBoundsCache = new Map<string, TLBounds>()\n\n  rotatedCache = new WeakMap<T, number[][]>([])\n\n  pointCache: Record<string, number[]> = {}\n\n  canClone = true\n\n  getShape = (props: Partial<T>): T => {\n    return Utils.deepMerge<T>(\n      {\n        id: 'id',\n        type: TDShapeType.Draw,\n        name: 'Draw',\n        parentId: 'page',\n        childIndex: 1,\n        point: [0, 0],\n        rotation: 0,\n        style: defaultStyle,\n        points: [],\n        isComplete: false,\n      },\n      props\n    )\n  }\n\n  Component = TDShapeUtil.Component<T, E, TDMeta>(\n    ({ shape, meta, isSelected, isGhost, events }, ref) => {\n      const { points, style, isComplete } = shape\n\n      const polygonPathTDSnapshot = React.useMemo(() => {\n        return getFillPath(shape)\n      }, [points, style.size])\n\n      const pathTDSnapshot = React.useMemo(() => {\n        return style.dash === DashStyle.Draw\n          ? getDrawStrokePathTDSnapshot(shape)\n          : getSolidStrokePathTDSnapshot(shape)\n      }, [points, style.size, style.dash, isComplete])\n\n      const styles = getShapeStyle(style, meta.isDarkMode)\n      const { stroke, fill, strokeWidth } = styles\n\n      // For very short lines, draw a point instead of a line\n      const bounds = this.getBounds(shape)\n\n      const verySmall = bounds.width <= strokeWidth / 2 && bounds.height <= strokeWidth / 2\n\n      if (verySmall) {\n        const sw = 1 + strokeWidth\n\n        return (\n          <SVGContainer ref={ref} id={shape.id + '_svg'} {...events}>\n            <circle\n              r={sw}\n              fill={stroke}\n              stroke={stroke}\n              pointerEvents=\"all\"\n              opacity={isGhost ? GHOSTED_OPACITY : 1}\n            />\n          </SVGContainer>\n        )\n      }\n\n      const shouldFill =\n        style.isFilled &&\n        points.length > 3 &&\n        Vec.dist(points[0], points[points.length - 1]) < strokeWidth * 2\n\n      if (shape.style.dash === DashStyle.Draw) {\n        return (\n          <SVGContainer ref={ref} id={shape.id + '_svg'} {...events}>\n            <g opacity={isGhost ? GHOSTED_OPACITY : 1}>\n              <path\n                className={shouldFill || isSelected ? 'tl-fill-hitarea' : 'tl-stroke-hitarea'}\n                d={pathTDSnapshot}\n              />\n              {shouldFill && (\n                <path\n                  d={polygonPathTDSnapshot}\n                  stroke=\"none\"\n                  fill={fill}\n                  strokeLinejoin=\"round\"\n                  strokeLinecap=\"round\"\n                  pointerEvents=\"none\"\n                />\n              )}\n              <path\n                d={pathTDSnapshot}\n                fill={stroke}\n                stroke={stroke}\n                strokeWidth={strokeWidth / 2}\n                strokeLinejoin=\"round\"\n                strokeLinecap=\"round\"\n                pointerEvents=\"none\"\n              />\n            </g>\n          </SVGContainer>\n        )\n      }\n\n      // For solid, dash and dotted lines, draw a regular stroke path\n\n      const strokeDasharray = {\n        [DashStyle.Draw]: 'none',\n        [DashStyle.Solid]: `none`,\n        [DashStyle.Dotted]: `0.1 ${strokeWidth * 4}`,\n        [DashStyle.Dashed]: `${strokeWidth * 4} ${strokeWidth * 4}`,\n      }[style.dash as DashStyle]\n\n      const strokeDashoffset = {\n        [DashStyle.Draw]: 'none',\n        [DashStyle.Solid]: `none`,\n        [DashStyle.Dotted]: `0`,\n        [DashStyle.Dashed]: `0`,\n      }[style.dash as DashStyle]\n\n      const sw = 1 + strokeWidth * 1.5\n\n      return (\n        <SVGContainer ref={ref} id={shape.id + '_svg'} {...events}>\n          <g opacity={isGhost ? GHOSTED_OPACITY : 1}>\n            <path\n              className={shouldFill && isSelected ? 'tl-fill-hitarea' : 'tl-stroke-hitarea'}\n              d={pathTDSnapshot}\n            />\n            <path\n              d={pathTDSnapshot}\n              fill={shouldFill ? fill : 'none'}\n              stroke=\"none\"\n              strokeWidth={Math.min(4, strokeWidth * 2)}\n              strokeLinejoin=\"round\"\n              strokeLinecap=\"round\"\n              pointerEvents=\"none\"\n            />\n            <path\n              d={pathTDSnapshot}\n              fill=\"none\"\n              stroke={stroke}\n              strokeWidth={sw}\n              strokeDasharray={strokeDasharray}\n              strokeDashoffset={strokeDashoffset}\n              strokeLinejoin=\"round\"\n              strokeLinecap=\"round\"\n              pointerEvents=\"none\"\n            />\n          </g>\n        </SVGContainer>\n      )\n    }\n  )\n\n  Indicator = TDShapeUtil.Indicator<T>(({ shape }) => {\n    const { points } = shape\n\n    const pathTDSnapshot = React.useMemo(() => {\n      return getSolidStrokePathTDSnapshot(shape)\n    }, [points])\n\n    const bounds = this.getBounds(shape)\n\n    const verySmall = bounds.width < 4 && bounds.height < 4\n\n    if (verySmall) {\n      return <circle x={bounds.width / 2} y={bounds.height / 2} r={1} />\n    }\n\n    return <path d={pathTDSnapshot} />\n  })\n\n  transform = (\n    shape: T,\n    bounds: TLBounds,\n    { initialShape, scaleX, scaleY }: TransformInfo<T>\n  ): Partial<T> => {\n    const initialShapeBounds = Utils.getFromCache(this.boundsCache, initialShape, () =>\n      Utils.getBoundsFromPoints(initialShape.points)\n    )\n\n    const points = initialShape.points.map(([x, y, r]) => {\n      return [\n        bounds.width *\n          (scaleX < 0 // * sin?\n            ? 1 - x / initialShapeBounds.width\n            : x / initialShapeBounds.width),\n        bounds.height *\n          (scaleY < 0 // * cos?\n            ? 1 - y / initialShapeBounds.height\n            : y / initialShapeBounds.height),\n        r,\n      ]\n    })\n\n    const newBounds = Utils.getBoundsFromPoints(shape.points)\n\n    const point = Vec.sub([bounds.minX, bounds.minY], [newBounds.minX, newBounds.minY])\n\n    return {\n      points,\n      point,\n    }\n  }\n\n  getBounds = (shape: T) => {\n    // The goal here is to avoid recalculating the bounds from the\n    // points array, which is expensive. However, we still need a\n    // new bounds if the point has changed, but we will reuse the\n    // previous bounds-from-points result if we can.\n\n    const pointsHaveChanged = !this.pointsBoundsCache.has(shape.points)\n    const pointHasChanged = !(this.pointCache[shape.id] === shape.point)\n\n    if (pointsHaveChanged) {\n      // If the points have changed, then bust the points cache\n      const bounds = Utils.getBoundsFromPoints(shape.points)\n      this.pointsBoundsCache.set(shape.points, bounds)\n      this.shapeBoundsCache.set(shape.id, Utils.translateBounds(bounds, shape.point))\n      this.pointCache[shape.id] = shape.point\n    } else if (pointHasChanged && !pointsHaveChanged) {\n      // If the point have has changed, then bust the point cache\n      this.pointCache[shape.id] = shape.point\n      this.shapeBoundsCache.set(\n        shape.id,\n        Utils.translateBounds(this.pointsBoundsCache.get(shape.points)!, shape.point)\n      )\n    }\n\n    return this.shapeBoundsCache.get(shape.id)!\n  }\n\n  shouldRender = (prev: T, next: T) => {\n    return (\n      next.points !== prev.points ||\n      next.style !== prev.style ||\n      next.isComplete !== prev.isComplete\n    )\n  }\n\n  hitTestPoint = (shape: T, point: number[]) => {\n    const ptA = Vec.sub(point, shape.point)\n    return Utils.pointInPolyline(ptA, shape.points)\n  }\n\n  hitTestLineSegment = (shape: T, A: number[], B: number[]): boolean => {\n    const { points, point } = shape\n    const ptA = Vec.sub(A, point)\n    const ptB = Vec.sub(B, point)\n    const bounds = this.getBounds(shape)\n\n    if (bounds.width < 8 && bounds.height < 8) {\n      return Vec.distanceToLineSegment(A, B, Utils.getBoundsCenter(bounds)) < 5 // divide by zoom\n    }\n\n    if (intersectLineSegmentBounds(ptA, ptB, bounds)) {\n      for (let i = 1; i < points.length; i++) {\n        if (intersectLineSegmentLineSegment(points[i - 1], points[i], ptA, ptB).didIntersect) {\n          return true\n        }\n      }\n    }\n\n    return false\n  }\n\n  hitTestBounds = (shape: T, bounds: TLBounds) => {\n    // Test axis-aligned shape\n    if (!shape.rotation) {\n      const shapeBounds = this.getBounds(shape)\n\n      return (\n        Utils.boundsContain(bounds, shapeBounds) ||\n        ((Utils.boundsContain(shapeBounds, bounds) ||\n          intersectBoundsBounds(shapeBounds, bounds).length > 0) &&\n          intersectBoundsPolyline(Utils.translateBounds(bounds, Vec.neg(shape.point)), shape.points)\n            .length > 0)\n      )\n    }\n\n    // Test rotated shape\n    const rBounds = this.getRotatedBounds(shape)\n\n    const rotatedBounds = Utils.getFromCache(this.rotatedCache, shape, () => {\n      const c = Utils.getBoundsCenter(Utils.getBoundsFromPoints(shape.points))\n      return shape.points.map((pt) => Vec.rotWith(pt, c, shape.rotation || 0))\n    })\n\n    return (\n      Utils.boundsContain(bounds, rBounds) ||\n      intersectBoundsPolyline(Utils.translateBounds(bounds, Vec.neg(shape.point)), rotatedBounds)\n        .length > 0\n    )\n  }\n}\n", "import { Utils } from '@tldraw/core'\nimport Vec from '@tldraw/vec'\nimport {\n  StrokeOptions,\n  StrokePoint,\n  getStrokeOutlinePoints,\n  getStrokePoints,\n} from 'perfect-freehand'\nimport { getShapeStyle } from '~state/shapes/shared'\nimport type { DrawShape } from '~types'\n\nconst simulatePressureSettings: StrokeOptions = {\n  easing: (t) => Math.sin((t * Math.PI) / 2),\n  simulatePressure: true,\n}\n\nconst realPressureSettings: StrokeOptions = {\n  easing: (t) => t * t,\n  simulatePressure: false,\n}\n\nexport function getFreehandOptions(shape: DrawShape) {\n  const styles = getShapeStyle(shape.style)\n\n  const options: StrokeOptions = {\n    size: 1 + styles.strokeWidth * 1.5,\n    thinning: 0.65,\n    streamline: 0.65,\n    smoothing: 0.65,\n    ...(shape.points[1][2] === 0.5 ? simulatePressureSettings : realPressureSettings),\n    last: shape.isComplete,\n  }\n\n  return options\n}\n\nexport function getFillPath(shape: DrawShape) {\n  if (shape.points.length < 2) return ''\n\n  return Utils.getSvgPathFromStroke(\n    getStrokePoints(shape.points, getFreehandOptions(shape)).map((pt) => pt.point)\n  )\n}\n\nexport function getDrawStrokePoints(shape: DrawShape, options: StrokeOptions) {\n  return getStrokePoints(shape.points, options)\n}\n\n/**\n * Get path data for a stroke with the DashStyle.Draw dash style.\n */\nexport function getDrawStrokePathTDSnapshot(shape: DrawShape) {\n  if (shape.points.length < 2) return ''\n  const options = getFreehandOptions(shape)\n  const strokePoints = getDrawStrokePoints(shape, options)\n  const path = Utils.getSvgPathFromStroke(getStrokeOutlinePoints(strokePoints, options))\n  return path\n}\n\n/**\n * Get SVG path data for a shape that has a DashStyle other than DashStyles.Draw.\n */\nexport function getSolidStrokePathTDSnapshot(shape: DrawShape) {\n  const { points } = shape\n  if (points.length < 2) return 'M 0 0 L 0 0'\n  const options = getFreehandOptions(shape)\n  const strokePoints = getDrawStrokePoints(shape, options)\n  const last = points[points.length - 1]\n  if (!Vec.isEqual(strokePoints[0].point, last)) strokePoints.push({ point: last } as StrokePoint)\n  const path = Utils.getSvgPathFromStrokePoints(strokePoints)\n  return path\n}\n", "import { SVGContainer, TLBounds, Utils } from '@tldraw/core'\nimport {\n  intersectEllipseBounds,\n  intersectLineSegmentEllipse,\n  intersectRayEllipse,\n} from '@tldraw/intersect'\nimport { Vec } from '@tldraw/vec'\nimport * as React from 'react'\nimport { GHOSTED_OPACITY, LABEL_POINT } from '~constants'\nimport { TDShapeUtil } from '~state/shapes/TDShapeUtil'\nimport { TextLabel, defaultStyle, getFontStyle, getShapeStyle } from '~state/shapes/shared'\nimport { styled } from '~styles'\nimport { DashStyle, EllipseShape, TDMeta, TDShape, TDShapeType, TransformInfo } from '~types'\nimport { DashedEllipse } from './components/DashedEllipse'\nimport { DrawEllipse } from './components/DrawEllipse'\nimport { getEllipseIndicatorPath } from './ellipseHelpers'\n\ntype T = EllipseShape\ntype E = HTMLDivElement\ntype M = TDMeta\n\nexport class EllipseUtil extends TDShapeUtil<T, E> {\n  type = TDShapeType.Ellipse as const\n\n  canBind = true\n\n  canClone = true\n\n  canEdit = true\n\n  getShape = (props: Partial<T>): T => {\n    return Utils.deepMerge<T>(\n      {\n        id: 'id',\n        type: TDShapeType.Ellipse,\n        name: 'Ellipse',\n        parentId: 'page',\n        childIndex: 1,\n        point: [0, 0],\n        radius: [1, 1],\n        rotation: 0,\n        style: defaultStyle,\n        label: '',\n        labelPoint: [0.5, 0.5],\n      },\n      props\n    )\n  }\n\n  Component = TDShapeUtil.Component<T, E, TDMeta>(\n    (\n      {\n        shape,\n        isGhost,\n        isSelected,\n        isBinding,\n        isEditing,\n        meta,\n        bounds,\n        events,\n        onShapeChange,\n        onShapeBlur,\n      },\n      ref\n    ) => {\n      const { id, radius, style, label = '', labelPoint = LABEL_POINT } = shape\n      const font = getFontStyle(shape.style)\n      const styles = getShapeStyle(style, meta.isDarkMode)\n      const strokeWidth = styles.strokeWidth\n      const sw = 1 + strokeWidth * 1.618\n      const rx = Math.max(0, radius[0] - sw / 2)\n      const ry = Math.max(0, radius[1] - sw / 2)\n      const Component = style.dash === DashStyle.Draw ? DrawEllipse : DashedEllipse\n      const handleLabelChange = React.useCallback(\n        (label: string) => onShapeChange?.({ id, label }),\n        [onShapeChange]\n      )\n      return (\n        <FullWrapper ref={ref} {...events}>\n          <TextLabel\n            isEditing={isEditing}\n            onChange={handleLabelChange}\n            onBlur={onShapeBlur}\n            font={font}\n            text={label}\n            color={styles.stroke}\n            offsetX={(labelPoint[0] - 0.5) * bounds.width}\n            offsetY={(labelPoint[1] - 0.5) * bounds.height}\n          />\n          <SVGContainer id={shape.id + '_svg'} opacity={isGhost ? GHOSTED_OPACITY : 1}>\n            {isBinding && (\n              <ellipse\n                className=\"tl-binding-indicator\"\n                cx={radius[0]}\n                cy={radius[1]}\n                rx={rx}\n                ry={ry}\n                strokeWidth={this.bindingDistance}\n              />\n            )}\n            <Component\n              id={id}\n              radius={radius}\n              style={style}\n              isSelected={isSelected}\n              isDarkMode={meta.isDarkMode}\n            />\n          </SVGContainer>\n        </FullWrapper>\n      )\n    }\n  )\n\n  Indicator = TDShapeUtil.Indicator<T, M>(({ shape }) => {\n    const { id, radius, style } = shape\n    const styles = getShapeStyle(style)\n    const strokeWidth = styles.strokeWidth\n    const sw = 1 + strokeWidth * 1.618\n    const rx = Math.max(0, radius[0] - sw / 2)\n    const ry = Math.max(0, radius[1] - sw / 2)\n    return style.dash === DashStyle.Draw ? (\n      <path d={getEllipseIndicatorPath(id, radius, style)} />\n    ) : (\n      <ellipse cx={radius[0]} cy={radius[1]} rx={rx} ry={ry} />\n    )\n  })\n\n  hitTestPoint = (shape: T, point: number[]): boolean => {\n    return (\n      Utils.pointInBounds(point, this.getRotatedBounds(shape)) &&\n      Utils.pointInEllipse(\n        point,\n        this.getCenter(shape),\n        shape.radius[0],\n        shape.radius[1],\n        shape.rotation || 0\n      )\n    )\n  }\n\n  hitTestLineSegment = (shape: T, A: number[], B: number[]): boolean => {\n    return intersectLineSegmentEllipse(\n      A,\n      B,\n      this.getCenter(shape),\n      shape.radius[0],\n      shape.radius[1],\n      shape.rotation || 0\n    ).didIntersect\n  }\n\n  getBounds = (shape: T) => {\n    return Utils.getFromCache(this.boundsCache, shape, () => {\n      return Utils.getRotatedEllipseBounds(\n        shape.point[0],\n        shape.point[1],\n        shape.radius[0],\n        shape.radius[1],\n        0\n      )\n    })\n  }\n\n  getRotatedBounds = (shape: T): TLBounds => {\n    return Utils.getRotatedEllipseBounds(\n      shape.point[0],\n      shape.point[1],\n      shape.radius[0],\n      shape.radius[1],\n      shape.rotation\n    )\n  }\n\n  hitTestBounds = (shape: T, bounds: TLBounds): boolean => {\n    const shapeBounds = this.getBounds(shape)\n\n    return (\n      Utils.boundsContained(shapeBounds, bounds) ||\n      intersectEllipseBounds(\n        this.getCenter(shape),\n        shape.radius[0],\n        shape.radius[1],\n        shape.rotation || 0,\n        bounds\n      ).length > 0\n    )\n  }\n\n  shouldRender = (prev: T, next: T): boolean => {\n    return next.radius !== prev.radius || next.style !== prev.style || next.label !== prev.label\n  }\n\n  getCenter = (shape: T): number[] => {\n    return Vec.add(shape.point, shape.radius)\n  }\n\n  getBindingPoint = <K extends TDShape>(\n    shape: T,\n    fromShape: K,\n    point: number[],\n    origin: number[],\n    direction: number[],\n    bindAnywhere: boolean\n  ) => {\n    {\n      const expandedBounds = this.getExpandedBounds(shape)\n      const center = this.getCenter(shape)\n      let bindingPoint: number[]\n      let distance: number\n      if (\n        !Utils.pointInEllipse(\n          point,\n          center,\n          shape.radius[0] + this.bindingDistance,\n          shape.radius[1] + this.bindingDistance\n        )\n      ) {\n        return\n      }\n      if (bindAnywhere) {\n        if (Vec.dist(point, this.getCenter(shape)) < 12) {\n          bindingPoint = [0.5, 0.5]\n        } else {\n          bindingPoint = Vec.divV(Vec.sub(point, [expandedBounds.minX, expandedBounds.minY]), [\n            expandedBounds.width,\n            expandedBounds.height,\n          ])\n        }\n        distance = 0\n      } else {\n        let intersection = intersectRayEllipse(\n          origin,\n          direction,\n          center,\n          shape.radius[0],\n          shape.radius[1],\n          shape.rotation || 0\n        ).points.sort((a, b) => Vec.dist(a, origin) - Vec.dist(b, origin))[0]\n        if (!intersection) {\n          intersection = intersectLineSegmentEllipse(\n            point,\n            center,\n            center,\n            shape.radius[0],\n            shape.radius[1],\n            shape.rotation || 0\n          ).points.sort((a, b) => Vec.dist(a, point) - Vec.dist(b, point))[0]\n        }\n        if (!intersection) {\n          return undefined\n        }\n        // The anchor is a point between the handle and the intersection\n        const anchor = Vec.med(point, intersection)\n        if (Vec.distanceToLineSegment(point, anchor, this.getCenter(shape)) < 12) {\n          // If we're close to the center, snap to the center\n          bindingPoint = [0.5, 0.5]\n        } else {\n          // Or else calculate a normalized point\n          bindingPoint = Vec.divV(Vec.sub(anchor, [expandedBounds.minX, expandedBounds.minY]), [\n            expandedBounds.width,\n            expandedBounds.height,\n          ])\n        }\n        if (\n          Utils.pointInEllipse(point, center, shape.radius[0], shape.radius[1], shape.rotation || 0)\n        ) {\n          // Pad the arrow out by 16 points\n          distance = this.bindingDistance / 2\n        } else {\n          // Find the distance between the point and the ellipse\n          const innerIntersection = intersectLineSegmentEllipse(\n            point,\n            center,\n            center,\n            shape.radius[0],\n            shape.radius[1],\n            shape.rotation || 0\n          ).points[0]\n          if (!innerIntersection) return undefined\n          distance = Math.max(this.bindingDistance / 2, Vec.dist(point, innerIntersection))\n        }\n      }\n      return {\n        point: bindingPoint,\n        distance,\n      }\n    }\n  }\n\n  transform = (\n    shape: T,\n    bounds: TLBounds,\n    { scaleX, scaleY, initialShape }: TransformInfo<T>\n  ): Partial<T> => {\n    const { rotation = 0 } = initialShape\n    return {\n      point: [bounds.minX, bounds.minY],\n      radius: [bounds.width / 2, bounds.height / 2],\n      rotation:\n        (scaleX < 0 && scaleY >= 0) || (scaleY < 0 && scaleX >= 0)\n          ? -(rotation || 0)\n          : rotation || 0,\n    }\n  }\n\n  transformSingle = (shape: T, bounds: TLBounds): Partial<T> => {\n    return {\n      point: Vec.toFixed([bounds.minX, bounds.minY]),\n      radius: Vec.div([bounds.width, bounds.height], 2),\n    }\n  }\n}\n\nconst FullWrapper = styled('div', { width: '100%', height: '100%' })\n", "import { Utils } from '@tldraw/core'\nimport * as React from 'react'\nimport { getShapeStyle } from '~state/shapes/shared'\nimport type { ShapeStyles } from '~types'\n\ninterface EllipseSvgProps {\n  radius: number[]\n  style: ShapeStyles\n  isSelected: boolean\n  isDarkMode: boolean\n}\n\nexport const DashedEllipse = React.memo(function DashedEllipse({\n  radius,\n  style,\n  isSelected,\n  isDarkMode,\n}: EllipseSvgProps) {\n  const { stroke, strokeWidth, fill } = getShapeStyle(style, isDarkMode)\n  const sw = 1 + strokeWidth * 1.618\n  const rx = Math.max(0, radius[0] - sw / 2)\n  const ry = Math.max(0, radius[1] - sw / 2)\n  const perimeter = Utils.perimeterOfEllipse(rx, ry)\n  const { strokeDasharray, strokeDashoffset } = Utils.getPerfectDashProps(\n    perimeter < 64 ? perimeter * 2 : perimeter,\n    strokeWidth * 1.618,\n    style.dash,\n    4\n  )\n\n  return (\n    <>\n      <ellipse\n        className={style.isFilled || isSelected ? 'tl-fill-hitarea' : 'tl-stroke-hitarea'}\n        cx={radius[0]}\n        cy={radius[1]}\n        rx={radius[0]}\n        ry={radius[1]}\n      />\n      <ellipse\n        cx={radius[0]}\n        cy={radius[1]}\n        rx={rx}\n        ry={ry}\n        fill={fill}\n        stroke={stroke}\n        strokeWidth={sw}\n        strokeDasharray={strokeDasharray}\n        strokeDashoffset={strokeDashoffset}\n        pointerEvents=\"none\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </>\n  )\n})\n", "import * as React from 'react'\nimport { getShapeStyle } from '~state/shapes/shared'\nimport type { ShapeStyles } from '~types'\nimport { getEllipseIndicatorPath, getEllipsePath } from '../ellipseHelpers'\n\ninterface EllipseSvgProps {\n  id: string\n  radius: number[]\n  style: ShapeStyles\n  isSelected: boolean\n  isDarkMode: boolean\n}\n\nexport const DrawEllipse = React.memo(function DrawEllipse({\n  id,\n  radius,\n  style,\n  isSelected,\n  isDarkMode,\n}: EllipseSvgProps) {\n  const { stroke, strokeWidth, fill } = getShapeStyle(style, isDarkMode)\n  const innerPath = getEllipsePath(id, radius, style)\n\n  return (\n    <>\n      <ellipse\n        className={style.isFilled || isSelected ? 'tl-fill-hitarea' : 'tl-stroke-hitarea'}\n        cx={radius[0]}\n        cy={radius[1]}\n        rx={radius[0]}\n        ry={radius[1]}\n      />\n      {style.isFilled && (\n        <path\n          d={getEllipseIndicatorPath(id, radius, style)}\n          stroke=\"none\"\n          fill={fill}\n          pointerEvents=\"none\"\n        />\n      )}\n      <path\n        d={innerPath}\n        fill={stroke}\n        stroke={stroke}\n        strokeWidth={strokeWidth}\n        pointerEvents=\"none\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </>\n  )\n})\n", "import { Utils } from '@tldraw/core'\nimport { getStrokeOutlinePoints, getStrokePoints } from 'perfect-freehand'\nimport { EASINGS } from '~constants'\nimport { getShapeStyle } from '~state/shapes/shared'\nimport type { ShapeStyles } from '~types'\n\nexport function getEllipseStrokePoints(id: string, radius: number[], style: ShapeStyles) {\n  const { strokeWidth } = getShapeStyle(style)\n  const getRandom = Utils.rng(id)\n  const rx = radius[0] + getRandom() * strokeWidth * 2\n  const ry = radius[1] + getRandom() * strokeWidth * 2\n  const perimeter = Utils.perimeterOfEllipse(rx, ry)\n  const points: number[][] = []\n  const start = Math.PI + Math.PI * getRandom()\n  const extra = Math.abs(getRandom())\n  const count = Math.max(16, perimeter / 10)\n  for (let i = 0; i < count; i++) {\n    const t = EASINGS.easeInOutSine(i / (count + 1))\n    const rads = start * 2 + Math.PI * (2 + extra) * t\n    const c = Math.cos(rads)\n    const s = Math.sin(rads)\n    points.push([rx * c + radius[0], ry * s + radius[1], t + 0.5 + getRandom() / 2])\n  }\n  return getStrokePoints(points, {\n    size: 1 + strokeWidth * 2,\n    thinning: 0.618,\n    end: { taper: perimeter / 8 },\n    start: { taper: perimeter / 12 },\n    streamline: 0,\n    simulatePressure: true,\n  })\n}\n\nexport function getEllipsePath(id: string, radius: number[], style: ShapeStyles) {\n  const { strokeWidth } = getShapeStyle(style)\n  const getRandom = Utils.rng(id)\n  const rx = radius[0] + getRandom() * strokeWidth * 2\n  const ry = radius[1] + getRandom() * strokeWidth * 2\n  const perimeter = Utils.perimeterOfEllipse(rx, ry)\n  return Utils.getSvgPathFromStroke(\n    getStrokeOutlinePoints(getEllipseStrokePoints(id, radius, style), {\n      size: 2 + strokeWidth * 2,\n      thinning: 0.618,\n      end: { taper: perimeter / 8 },\n      start: { taper: perimeter / 12 },\n      streamline: 0,\n      simulatePressure: true,\n    })\n  )\n}\n\nexport function getEllipseIndicatorPath(id: string, radius: number[], style: ShapeStyles) {\n  return Utils.getSvgPathFromStrokePoints(getEllipseStrokePoints(id, radius, style))\n}\n", "import { SVGContainer, Utils } from '@tldraw/core'\nimport * as React from 'react'\nimport { GHOSTED_OPACITY } from '~constants'\nimport { TDShapeUtil } from '~state/shapes/TDShapeUtil'\nimport { defaultStyle, getBoundsRectangle } from '~state/shapes/shared'\nimport { styled } from '~styles'\nimport { ColorStyle, GroupShape, TDMeta, TDShapeType } from '~types'\n\ntype T = GroupShape\ntype E = SVGSVGElement\n\nexport class GroupUtil extends TDShapeUtil<T, E> {\n  type = TDShapeType.Group as const\n\n  canBind = true\n\n  getShape = (props: Partial<T>): T => {\n    return Utils.deepMerge<T>(\n      {\n        id: 'id',\n        type: TDShapeType.Group,\n        name: 'Group',\n        parentId: 'page',\n        childIndex: 1,\n        point: [0, 0],\n        size: [100, 100],\n        rotation: 0,\n        children: [],\n        style: defaultStyle,\n      },\n      props\n    )\n  }\n\n  Component = TDShapeUtil.Component<T, E, TDMeta>(\n    ({ shape, isBinding, isGhost, isHovered, isSelected, events }, ref) => {\n      const { id, size } = shape\n\n      const sw = 2\n      const w = Math.max(0, size[0] - sw / 2)\n      const h = Math.max(0, size[1] - sw / 2)\n\n      const strokes: [number[], number[], number][] = [\n        [[sw / 2, sw / 2], [w, sw / 2], w - sw / 2],\n        [[w, sw / 2], [w, h], h - sw / 2],\n        [[w, h], [sw / 2, h], w - sw / 2],\n        [[sw / 2, h], [sw / 2, sw / 2], h - sw / 2],\n      ]\n\n      const paths = strokes.map(([start, end], i) => {\n        return <line key={id + '_' + i} x1={start[0]} y1={start[1]} x2={end[0]} y2={end[1]} />\n      })\n\n      return (\n        <SVGContainer ref={ref} {...events}>\n          {isBinding && (\n            <rect className=\"tl-binding-indicator\" strokeWidth={this.bindingDistance} />\n          )}\n          <g opacity={isGhost ? GHOSTED_OPACITY : 1}>\n            <rect\n              x={0}\n              y={0}\n              width={size[0]}\n              height={size[1]}\n              fill=\"transparent\"\n              pointerEvents=\"all\"\n            />\n            <ScaledLines\n              stroke={ColorStyle.Black}\n              opacity={isHovered || isSelected ? 1 : 0}\n              strokeLinecap=\"round\"\n              pointerEvents=\"stroke\"\n            >\n              {paths}\n            </ScaledLines>\n          </g>\n        </SVGContainer>\n      )\n    }\n  )\n\n  Indicator = TDShapeUtil.Indicator<T>(({ shape }) => {\n    const { id, size } = shape\n\n    const sw = 2\n    const w = Math.max(0, size[0] - sw / 2)\n    const h = Math.max(0, size[1] - sw / 2)\n\n    const strokes: [number[], number[], number][] = [\n      [[sw / 2, sw / 2], [w, sw / 2], w - sw / 2],\n      [[w, sw / 2], [w, h], h - sw / 2],\n      [[w, h], [sw / 2, h], w - sw / 2],\n      [[sw / 2, h], [sw / 2, sw / 2], h - sw / 2],\n    ]\n\n    const paths = strokes.map(([start, end], i) => {\n      return <line key={id + '_' + i} x1={start[0]} y1={start[1]} x2={end[0]} y2={end[1]} />\n    })\n\n    return (\n      <ScaledLines strokeLinecap=\"round\" pointerEvents=\"stroke\">\n        {paths}\n      </ScaledLines>\n    )\n  })\n\n  getBounds = (shape: T) => {\n    return getBoundsRectangle(shape, this.boundsCache)\n  }\n\n  shouldRender = (prev: T, next: T) => {\n    return next.size !== prev.size || next.style !== prev.style\n  }\n}\n\nconst ScaledLines = styled('g', {\n  strokeWidth: 'calc(1.5px * var(--tl-scale))',\n  strokeDasharray: `calc(1px * var(--tl-scale)), calc(3px * var(--tl-scale))`,\n})\n", "import { styled } from '@stitches/react'\nimport { HTMLContainer, Utils } from '@tldraw/core'\nimport * as React from 'react'\nimport { GHOSTED_OPACITY } from '~constants'\nimport { TDShapeUtil } from '~state/shapes/TDShapeUtil'\nimport {\n  defaultStyle,\n  getBoundsRectangle,\n  transformRectangle,\n  transformSingleRectangle,\n} from '~state/shapes/shared'\nimport { ImageShape, TDImageAsset, TDMeta, TDShapeType } from '~types'\n\ntype T = ImageShape\ntype E = HTMLDivElement\n\nexport class ImageUtil extends TDShapeUtil<T, E> {\n  type = TDShapeType.Image as const\n\n  canBind = true\n\n  canClone = true\n\n  isAspectRatioLocked = true\n\n  showCloneHandles = false\n\n  getShape = (props: Partial<T>): T => {\n    return Utils.deepMerge<T>(\n      {\n        id: 'image',\n        type: TDShapeType.Image,\n        name: 'Image',\n        parentId: 'page',\n        childIndex: 1,\n        point: [0, 0],\n        size: [1, 1],\n        rotation: 0,\n        style: { ...defaultStyle, isFilled: true },\n        assetId: 'assetId',\n      },\n      props\n    )\n  }\n\n  Component = TDShapeUtil.Component<T, E, TDMeta>(\n    ({ shape, asset = { src: '' }, isBinding, isGhost, meta, events, onShapeChange }, ref) => {\n      const { size, style } = shape\n      const { bindingDistance } = this\n\n      const rImage = React.useRef<HTMLImageElement>(null)\n      const rWrapper = React.useRef<HTMLDivElement>(null)\n\n      React.useLayoutEffect(() => {\n        const wrapper = rWrapper.current\n        if (!wrapper) return\n        const [width, height] = size\n        wrapper.style.width = `${width}px`\n        wrapper.style.height = `${height}px`\n      }, [size])\n\n      return (\n        <HTMLContainer ref={ref} {...events}>\n          {isBinding && (\n            <div\n              className=\"tl-binding-indicator\"\n              style={{\n                position: 'absolute',\n                top: `calc(${-bindingDistance}px * var(--tl-zoom))`,\n                left: `calc(${-bindingDistance}px * var(--tl-zoom))`,\n                width: `calc(100% + ${bindingDistance * 2}px * var(--tl-zoom))`,\n                height: `calc(100% + ${bindingDistance * 2}px * var(--tl-zoom))`,\n                backgroundColor: 'var(--tl-selectFill)',\n              }}\n            />\n          )}\n          <Wrapper\n            ref={rWrapper}\n            isDarkMode={meta.isDarkMode} //\n            isFilled={style.isFilled}\n            isGhost={isGhost}\n          >\n            <ImageElement\n              id={shape.id + '_image'}\n              ref={rImage}\n              src={(asset as TDImageAsset).src}\n              alt=\"tl_image_asset\"\n              draggable={false}\n            />\n          </Wrapper>\n        </HTMLContainer>\n      )\n    }\n  )\n\n  Indicator = TDShapeUtil.Indicator<T>(({ shape }) => {\n    const {\n      size: [width, height],\n    } = shape\n\n    return (\n      <rect x={0} y={0} rx={2} ry={2} width={Math.max(1, width)} height={Math.max(1, height)} />\n    )\n  })\n\n  getBounds = (shape: T) => {\n    return getBoundsRectangle(shape, this.boundsCache)\n  }\n\n  shouldRender = (prev: T, next: T) => {\n    return next.size !== prev.size || next.style !== prev.style\n  }\n\n  transform = transformRectangle\n\n  transformSingle = transformSingleRectangle\n\n  getSvgElement = (shape: ImageShape) => {\n    const bounds = this.getBounds(shape)\n    const elm = document.createElementNS('http://www.w3.org/2000/svg', 'image')\n    elm.setAttribute('width', `${bounds.width}`)\n    elm.setAttribute('height', `${bounds.height}`)\n    elm.setAttribute('xmlns:xlink', `http://www.w3.org/1999/xlink`)\n    return elm\n  }\n}\n\nconst Wrapper = styled('div', {\n  pointerEvents: 'all',\n  position: 'relative',\n  fontFamily: 'sans-serif',\n  fontSize: '2em',\n  height: '100%',\n  width: '100%',\n  borderRadius: '3px',\n  perspective: '800px',\n  overflow: 'hidden',\n  p: {\n    userSelect: 'none',\n  },\n  img: {\n    userSelect: 'none',\n  },\n  variants: {\n    isGhost: {\n      false: { opacity: 1 },\n      true: { transition: 'opacity .2s', opacity: GHOSTED_OPACITY },\n    },\n    isFilled: {\n      true: {},\n      false: {},\n    },\n    isDarkMode: {\n      true: {},\n      false: {},\n    },\n  },\n  compoundVariants: [\n    {\n      isFilled: true,\n      isDarkMode: true,\n      css: {\n        boxShadow:\n          '2px 3px 12px -2px rgba(0,0,0,.3), 1px 1px 4px rgba(0,0,0,.3), 1px 1px 2px rgba(0,0,0,.3)',\n      },\n    },\n    {\n      isFilled: true,\n      isDarkMode: false,\n      css: {\n        boxShadow:\n          '2px 3px 12px -2px rgba(0,0,0,.2), 1px 1px 4px rgba(0,0,0,.16),  1px 1px 2px rgba(0,0,0,.16)',\n      },\n    },\n  ],\n})\n\nconst ImageElement = styled('img', {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  width: '100%',\n  height: '100%',\n  maxWidth: '100%',\n  minWidth: '100%',\n  pointerEvents: 'none',\n  objectFit: 'cover',\n  userSelect: 'none',\n  borderRadius: 2,\n})\n", "import { SVGContainer, Utils } from '@tldraw/core'\nimport * as React from 'react'\nimport { GHOSTED_OPACITY, LABEL_POINT } from '~constants'\nimport { TDShapeUtil } from '~state/shapes/TDShapeUtil'\nimport {\n  TextLabel,\n  defaultStyle,\n  getBoundsRectangle,\n  getFontStyle,\n  getShapeStyle,\n  transformRectangle,\n  transformSingleRectangle,\n} from '~state/shapes/shared'\nimport { styled } from '~styles'\nimport { DashStyle, RectangleShape, TDMeta, TDShapeType } from '~types'\nimport { BindingIndicator } from './components/BindingIndicator'\nimport { DashedRectangle } from './components/DashedRectangle'\nimport { DrawRectangle } from './components/DrawRectangle'\nimport { getRectangleIndicatorPathTDSnapshot } from './rectangleHelpers'\n\ntype T = RectangleShape\ntype E = HTMLDivElement\n\nexport class RectangleUtil extends TDShapeUtil<T, E> {\n  type = TDShapeType.Rectangle as const\n\n  canBind = true\n\n  canClone = true\n\n  canEdit = true\n\n  getShape = (props: Partial<T>): T => {\n    return Utils.deepMerge<T>(\n      {\n        id: 'id',\n        type: TDShapeType.Rectangle,\n        name: 'Rectangle',\n        parentId: 'page',\n        childIndex: 1,\n        point: [0, 0],\n        size: [1, 1],\n        rotation: 0,\n        style: defaultStyle,\n        label: '',\n        labelPoint: [0.5, 0.5],\n      },\n      props\n    )\n  }\n\n  Component = TDShapeUtil.Component<T, E, TDMeta>(\n    (\n      {\n        shape,\n        isEditing,\n        isBinding,\n        isSelected,\n        isGhost,\n        meta,\n        bounds,\n        events,\n        onShapeBlur,\n        onShapeChange,\n      },\n      ref\n    ) => {\n      const { id, size, style, label = '', labelPoint = LABEL_POINT } = shape\n      const font = getFontStyle(style)\n      const styles = getShapeStyle(style, meta.isDarkMode)\n      const Component = style.dash === DashStyle.Draw ? DrawRectangle : DashedRectangle\n      const handleLabelChange = React.useCallback(\n        (label: string) => onShapeChange?.({ id, label }),\n        [onShapeChange]\n      )\n      return (\n        <FullWrapper ref={ref} {...events}>\n          <TextLabel\n            isEditing={isEditing}\n            onChange={handleLabelChange}\n            onBlur={onShapeBlur}\n            font={font}\n            text={label}\n            color={styles.stroke}\n            offsetX={(labelPoint[0] - 0.5) * bounds.width}\n            offsetY={(labelPoint[1] - 0.5) * bounds.height}\n          />\n          <SVGContainer id={shape.id + '_svg'} opacity={isGhost ? GHOSTED_OPACITY : 1}>\n            {isBinding && <BindingIndicator strokeWidth={styles.strokeWidth} size={size} />}\n            <Component\n              id={id}\n              style={style}\n              size={size}\n              isSelected={isSelected}\n              isDarkMode={meta.isDarkMode}\n            />\n          </SVGContainer>\n        </FullWrapper>\n      )\n    }\n  )\n\n  Indicator = TDShapeUtil.Indicator<T>(({ shape }) => {\n    const { id, style, size } = shape\n\n    const styles = getShapeStyle(style, false)\n    const sw = styles.strokeWidth\n\n    if (style.dash === DashStyle.Draw) {\n      return <path d={getRectangleIndicatorPathTDSnapshot(id, style, size)} />\n    }\n\n    return (\n      <rect\n        x={sw}\n        y={sw}\n        rx={1}\n        ry={1}\n        width={Math.max(1, size[0] - sw * 2)}\n        height={Math.max(1, size[1] - sw * 2)}\n      />\n    )\n  })\n\n  getBounds = (shape: T) => {\n    return getBoundsRectangle(shape, this.boundsCache)\n  }\n\n  shouldRender = (prev: T, next: T) => {\n    return next.size !== prev.size || next.style !== prev.style || next.label !== prev.label\n  }\n\n  transform = transformRectangle\n\n  transformSingle = transformSingleRectangle\n}\n\nconst FullWrapper = styled('div', { width: '100%', height: '100%' })\n", "import * as React from 'react'\nimport { BINDING_DISTANCE } from '~constants'\n\ninterface BindingIndicatorProps {\n  strokeWidth: number\n  size: number[]\n}\nexport function BindingIndicator({ strokeWidth, size }: BindingIndicatorProps) {\n  return (\n    <rect\n      className=\"tl-binding-indicator\"\n      x={strokeWidth}\n      y={strokeWidth}\n      width={Math.max(0, size[0] - strokeWidth / 2)}\n      height={Math.max(0, size[1] - strokeWidth / 2)}\n      strokeWidth={BINDING_DISTANCE * 2}\n    />\n  )\n}\n", "import { Utils } from '@tldraw/core'\nimport * as React from 'react'\nimport { BINDING_DISTANCE } from '~constants'\nimport { getShapeStyle } from '~state/shapes/shared'\nimport type { ShapeStyles } from '~types'\n\ninterface RectangleSvgProps {\n  id: string\n  style: ShapeStyles\n  isSelected: boolean\n  size: number[]\n  isDarkMode: boolean\n}\n\nexport const DashedRectangle = React.memo(function DashedRectangle({\n  id,\n  style,\n  size,\n  isSelected,\n  isDarkMode,\n}: RectangleSvgProps) {\n  const { stroke, strokeWidth, fill } = getShapeStyle(style, isDarkMode)\n\n  const sw = 1 + strokeWidth * 1.618\n\n  const w = Math.max(0, size[0] - sw / 2)\n  const h = Math.max(0, size[1] - sw / 2)\n\n  const strokes: [number[], number[], number][] = [\n    [[sw / 2, sw / 2], [w, sw / 2], w - sw / 2],\n    [[w, sw / 2], [w, h], h - sw / 2],\n    [[w, h], [sw / 2, h], w - sw / 2],\n    [[sw / 2, h], [sw / 2, sw / 2], h - sw / 2],\n  ]\n\n  const paths = strokes.map(([start, end, length], i) => {\n    const { strokeDasharray, strokeDashoffset } = Utils.getPerfectDashProps(\n      length,\n      strokeWidth * 1.618,\n      style.dash\n    )\n\n    return (\n      <line\n        key={id + '_' + i}\n        x1={start[0]}\n        y1={start[1]}\n        x2={end[0]}\n        y2={end[1]}\n        strokeDasharray={strokeDasharray}\n        strokeDashoffset={strokeDashoffset}\n      />\n    )\n  })\n\n  return (\n    <>\n      <rect\n        className={isSelected || style.isFilled ? 'tl-fill-hitarea' : 'tl-stroke-hitarea'}\n        x={sw / 2}\n        y={sw / 2}\n        width={w}\n        height={h}\n        strokeWidth={BINDING_DISTANCE}\n      />\n      {style.isFilled && (\n        <rect x={sw / 2} y={sw / 2} width={w} height={h} fill={fill} pointerEvents=\"none\" />\n      )}\n      <g pointerEvents=\"none\" stroke={stroke} strokeWidth={sw} strokeLinecap=\"round\">\n        {paths}\n      </g>\n    </>\n  )\n})\n", "import * as React from 'react'\nimport { getShapeStyle } from '~state/shapes/shared'\nimport type { ShapeStyles } from '~types'\nimport { getRectangleIndicatorPathTDSnapshot, getRectanglePath } from '../rectangleHelpers'\n\ninterface RectangleSvgProps {\n  id: string\n  style: ShapeStyles\n  isSelected: boolean\n  isDarkMode: boolean\n  size: number[]\n}\n\nexport const DrawRectangle = React.memo(function DrawRectangle({\n  id,\n  style,\n  size,\n  isSelected,\n  isDarkMode,\n}: RectangleSvgProps) {\n  const { isFilled } = style\n  const { stroke, strokeWidth, fill } = getShapeStyle(style, isDarkMode)\n  const pathTDSnapshot = getRectanglePath(id, style, size)\n  const innerPath = getRectangleIndicatorPathTDSnapshot(id, style, size)\n\n  return (\n    <>\n      <path\n        className={style.isFilled || isSelected ? 'tl-fill-hitarea' : 'tl-stroke-hitarea'}\n        d={innerPath}\n      />\n      {isFilled && <path d={innerPath} fill={fill} pointerEvents=\"none\" />}\n      <path\n        d={pathTDSnapshot}\n        fill={stroke}\n        stroke={stroke}\n        strokeWidth={strokeWidth}\n        pointerEvents=\"none\"\n      />\n    </>\n  )\n})\n", "import { Utils } from '@tldraw/core'\nimport Vec from '@tldraw/vec'\nimport getStroke, { getStrokePoints } from 'perfect-freehand'\nimport { getShapeStyle } from '~state/shapes/shared'\nimport type { ShapeStyles } from '~types'\n\nfunction getRectangleDrawPoints(id: string, style: ShapeStyles, size: number[]) {\n  const styles = getShapeStyle(style)\n\n  const getRandom = Utils.rng(id)\n\n  const sw = styles.strokeWidth\n\n  // Dimensions\n  const w = Math.max(0, size[0])\n  const h = Math.max(0, size[1])\n\n  // Random corner offsets\n  const offsets = Array.from(Array(4)).map(() => {\n    return [getRandom() * sw * 0.75, getRandom() * sw * 0.75]\n  })\n\n  // Corners\n  const tl = Vec.add([sw / 2, sw / 2], offsets[0])\n  const tr = Vec.add([w - sw / 2, sw / 2], offsets[1])\n  const br = Vec.add([w - sw / 2, h - sw / 2], offsets[2])\n  const bl = Vec.add([sw / 2, h - sw / 2], offsets[3])\n\n  // Which side to start drawing first\n  const rm = Math.round(Math.abs(getRandom() * 2 * 4))\n\n  // Corner radii\n  const rx = Math.min(w / 4, sw * 2)\n  const ry = Math.min(h / 4, sw * 2)\n\n  // Number of points per side\n  const px = Math.max(8, Math.floor(w / 16))\n  const py = Math.max(8, Math.floor(h / 16))\n\n  // Inset each line by the corner radii and let the freehand algo\n  // interpolate points for the corners.\n  const lines = Utils.rotateArray(\n    [\n      Vec.pointsBetween(Vec.add(tl, [rx, 0]), Vec.sub(tr, [rx, 0]), px),\n      Vec.pointsBetween(Vec.add(tr, [0, ry]), Vec.sub(br, [0, ry]), py),\n      Vec.pointsBetween(Vec.sub(br, [rx, 0]), Vec.add(bl, [rx, 0]), px),\n      Vec.pointsBetween(Vec.sub(bl, [0, ry]), Vec.add(tl, [0, ry]), py),\n    ],\n    rm\n  )\n\n  // For the final points, include the first half of the first line again,\n  // so that the line wraps around and avoids ending on a sharp corner.\n  // This has a bit of finesse and magic\u2014if you change the points between\n  // function, then you'll likely need to change this one too.\n\n  const points = [...lines.flat(), ...lines[0]].slice(\n    5,\n    Math.floor((rm % 2 === 0 ? px : py) / -2) + 3\n  )\n\n  return {\n    points,\n  }\n}\n\nfunction getDrawStrokeInfo(id: string, style: ShapeStyles, size: number[]) {\n  const { points } = getRectangleDrawPoints(id, style, size)\n  const { strokeWidth } = getShapeStyle(style)\n  const options = {\n    size: strokeWidth,\n    thinning: 0.65,\n    streamline: 0.3,\n    smoothing: 1,\n    simulatePressure: false,\n    last: true,\n  }\n  return { points, options }\n}\n\nexport function getRectanglePath(id: string, style: ShapeStyles, size: number[]) {\n  const { points, options } = getDrawStrokeInfo(id, style, size)\n  const stroke = getStroke(points, options)\n  return Utils.getSvgPathFromStroke(stroke)\n}\n\nexport function getRectangleIndicatorPathTDSnapshot(\n  id: string,\n  style: ShapeStyles,\n  size: number[]\n) {\n  const { points, options } = getDrawStrokeInfo(id, style, size)\n  return Utils.getSvgPathFromStrokePoints(getStrokePoints(points, options))\n}\n", "import { HTMLContainer, TLBounds, Utils } from '@tldraw/core'\nimport { Vec } from '@tldraw/vec'\nimport * as React from 'react'\nimport { stopPropagation } from '~components/stopPropagation'\nimport { GHOSTED_OPACITY, LETTER_SPACING } from '~constants'\nimport { TLDR } from '~state/TLDR'\nimport { TDShapeUtil } from '~state/shapes/TDShapeUtil'\nimport {\n  TextAreaUtils,\n  defaultTextStyle,\n  getBoundsRectangle,\n  getFontFace,\n  getStickyFontSize,\n  getStickyFontStyle,\n  getStickyShapeStyle,\n  getTextSvgElement,\n} from '~state/shapes/shared'\nimport { styled } from '~styles'\nimport { AlignStyle, StickyShape, TDMeta, TDShapeType, TransformInfo } from '~types'\n\ntype T = StickyShape\ntype E = HTMLDivElement\n\nexport class StickyUtil extends TDShapeUtil<T, E> {\n  type = TDShapeType.Sticky as const\n\n  canBind = true\n\n  canEdit = true\n\n  canClone = true\n\n  hideResizeHandles = true\n\n  showCloneHandles = true\n\n  getShape = (props: Partial<T>): T => {\n    return Utils.deepMerge<T>(\n      {\n        id: 'id',\n        type: TDShapeType.Sticky,\n        name: 'Sticky',\n        parentId: 'page',\n        childIndex: 1,\n        point: [0, 0],\n        size: [200, 200],\n        text: '',\n        rotation: 0,\n        style: defaultTextStyle,\n      },\n      props\n    )\n  }\n\n  Component = TDShapeUtil.Component<T, E, TDMeta>(\n    ({ shape, meta, events, isGhost, isBinding, isEditing, onShapeBlur, onShapeChange }, ref) => {\n      const font = getStickyFontStyle(shape.style)\n\n      const { color, fill } = getStickyShapeStyle(shape.style, meta.isDarkMode)\n\n      const rContainer = React.useRef<HTMLDivElement>(null)\n\n      const rTextArea = React.useRef<HTMLTextAreaElement>(null)\n\n      const rText = React.useRef<HTMLDivElement>(null)\n\n      const rIsMounted = React.useRef(false)\n\n      const handlePointerDown = React.useCallback((e: React.PointerEvent) => {\n        e.stopPropagation()\n      }, [])\n\n      const onChange = React.useCallback(\n        (text: string) => {\n          onShapeChange?.({\n            id: shape.id,\n            type: shape.type,\n            text: TLDR.normalizeText(text),\n          })\n        },\n        [shape.id]\n      )\n\n      const handleTextChange = React.useCallback(\n        (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n          onChange(e.currentTarget.value)\n        },\n        [onShapeChange, onChange]\n      )\n\n      const handleKeyDown = React.useCallback(\n        (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n          if (e.key === 'Escape') {\n            e.preventDefault()\n            e.stopPropagation()\n            onShapeBlur?.()\n            return\n          }\n\n          if (e.key === 'Tab' && shape.text.length === 0) {\n            e.preventDefault()\n            return\n          }\n\n          if (!(e.key === 'Meta' || e.metaKey)) {\n            e.stopPropagation()\n          } else if (e.key === 'z' && e.metaKey) {\n            if (e.shiftKey) {\n              document.execCommand('redo', false)\n            } else {\n              document.execCommand('undo', false)\n            }\n            e.stopPropagation()\n            e.preventDefault()\n            return\n          }\n          if ((e.metaKey || e.ctrlKey) && e.key === '=') {\n            e.preventDefault()\n          }\n          if (e.key === 'Tab') {\n            e.preventDefault()\n            if (e.shiftKey) {\n              TextAreaUtils.unindent(e.currentTarget)\n            } else {\n              TextAreaUtils.indent(e.currentTarget)\n            }\n\n            onShapeChange?.({ ...shape, text: TLDR.normalizeText(e.currentTarget.value) })\n          }\n        },\n        [shape, onShapeChange]\n      )\n\n      const handleBlur = React.useCallback((e: React.FocusEvent<HTMLTextAreaElement>) => {\n        e.currentTarget.setSelectionRange(0, 0)\n        onShapeBlur?.()\n      }, [])\n\n      const handleFocus = React.useCallback(\n        (e: React.FocusEvent<HTMLTextAreaElement>) => {\n          if (!isEditing) return\n          if (!rIsMounted.current) return\n          e.currentTarget.select()\n        },\n        [isEditing]\n      )\n\n      // Focus when editing changes to true\n      React.useEffect(() => {\n        if (isEditing) {\n          rIsMounted.current = true\n          const elm = rTextArea.current!\n          elm.focus()\n          elm.select()\n        }\n      }, [isEditing])\n\n      // Resize to fit text\n      React.useEffect(() => {\n        const text = rText.current!\n\n        const { size } = shape\n        const { offsetHeight: currTextHeight } = text\n        const minTextHeight = MIN_CONTAINER_HEIGHT - PADDING * 2\n        const prevTextHeight = size[1] - PADDING * 2\n\n        // Same size? We can quit here\n        if (currTextHeight === prevTextHeight) return\n\n        if (currTextHeight > minTextHeight) {\n          // Snap the size to the text content if the text only when the\n          // text is larger than the minimum text height.\n          onShapeChange?.({ id: shape.id, size: [size[0], currTextHeight + PADDING * 2] })\n          return\n        }\n\n        if (currTextHeight < minTextHeight && size[1] > MIN_CONTAINER_HEIGHT) {\n          // If we're smaller than the minimum height and the container\n          // is too tall, snap it down to the minimum container height\n          onShapeChange?.({ id: shape.id, size: [size[0], MIN_CONTAINER_HEIGHT] })\n          return\n        }\n\n        const textarea = rTextArea.current\n        textarea?.focus()\n      }, [shape.text, shape.size[1], shape.style])\n\n      const style = {\n        font,\n        color,\n        textShadow: meta.isDarkMode\n          ? `0.5px 0.5px 2px rgba(255, 255, 255,.25)`\n          : `0.5px 0.5px 2px rgba(255, 255, 255,.5)`,\n      }\n\n      return (\n        <HTMLContainer ref={ref} {...events}>\n          <StyledStickyContainer\n            ref={rContainer}\n            isDarkMode={meta.isDarkMode}\n            isGhost={isGhost}\n            style={{ backgroundColor: fill, ...style }}\n          >\n            {isBinding && (\n              <div\n                className=\"tl-binding-indicator\"\n                style={{\n                  position: 'absolute',\n                  top: -this.bindingDistance,\n                  left: -this.bindingDistance,\n                  width: `calc(100% + ${this.bindingDistance * 2}px)`,\n                  height: `calc(100% + ${this.bindingDistance * 2}px)`,\n                  backgroundColor: 'var(--tl-selectFill)',\n                }}\n              />\n            )}\n            <StyledText ref={rText} isEditing={isEditing} alignment={shape.style.textAlign}>\n              {shape.text}&#8203;\n            </StyledText>\n            {isEditing && (\n              <StyledTextArea\n                ref={rTextArea}\n                onPointerDown={handlePointerDown}\n                value={shape.text}\n                onChange={handleTextChange}\n                onKeyDown={handleKeyDown}\n                onFocus={handleFocus}\n                onBlur={handleBlur}\n                tabIndex={-1}\n                autoComplete=\"false\"\n                autoCapitalize=\"false\"\n                autoCorrect=\"false\"\n                autoSave=\"false\"\n                autoFocus\n                spellCheck={true}\n                alignment={shape.style.textAlign}\n                onContextMenu={stopPropagation}\n                onCopy={stopPropagation}\n                onPaste={stopPropagation}\n                onCut={stopPropagation}\n              />\n            )}\n          </StyledStickyContainer>\n        </HTMLContainer>\n      )\n    }\n  )\n\n  Indicator = TDShapeUtil.Indicator<T>(({ shape }) => {\n    const {\n      size: [width, height],\n    } = shape\n\n    return (\n      <rect x={0} y={0} rx={3} ry={3} width={Math.max(1, width)} height={Math.max(1, height)} />\n    )\n  })\n\n  getBounds = (shape: T) => {\n    return getBoundsRectangle(shape, this.boundsCache)\n  }\n\n  shouldRender = (prev: T, next: T) => {\n    return next.size !== prev.size || next.style !== prev.style || next.text !== prev.text\n  }\n\n  transform = (\n    shape: T,\n    bounds: TLBounds,\n    { scaleX, scaleY, transformOrigin }: TransformInfo<T>\n  ): Partial<T> => {\n    const point = Vec.toFixed([\n      bounds.minX +\n        (bounds.width - shape.size[0]) * (scaleX < 0 ? 1 - transformOrigin[0] : transformOrigin[0]),\n      bounds.minY +\n        (bounds.height - shape.size[1]) *\n          (scaleY < 0 ? 1 - transformOrigin[1] : transformOrigin[1]),\n    ])\n\n    return {\n      point,\n    }\n  }\n\n  transformSingle = (shape: T): Partial<T> => {\n    return shape\n  }\n\n  getSvgElement = (shape: T, isDarkMode: boolean): SVGElement | void => {\n    const bounds = this.getBounds(shape)\n\n    const style = getStickyShapeStyle(shape.style, isDarkMode)\n\n    const fontSize = getStickyFontSize(shape.style.size) * (shape.style.scale ?? 1)\n    const fontFamily = getFontFace(shape.style.font).slice(1, -1)\n    const textAlign = shape.style.textAlign ?? AlignStyle.Start\n\n    const textElm = getTextSvgElement(\n      shape.text,\n      fontSize,\n      fontFamily,\n      textAlign,\n      bounds.width - PADDING * 2,\n      true\n    )\n\n    textElm.setAttribute('fill', style.color)\n    textElm.setAttribute('transform', `translate(${PADDING}, ${PADDING})`)\n\n    const g = document.createElementNS('http://www.w3.org/2000/svg', 'g')\n    const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect')\n    rect.setAttribute('width', bounds.width + '')\n    rect.setAttribute('height', bounds.height + '')\n    rect.setAttribute('fill', style.fill)\n    rect.setAttribute('rx', '3')\n    rect.setAttribute('ry', '3')\n\n    g.appendChild(rect)\n    g.appendChild(textElm)\n\n    return g\n  }\n}\n\n/* -------------------------------------------------- */\n/*                       Helpers                      */\n/* -------------------------------------------------- */\n\nconst PADDING = 16\nconst MIN_CONTAINER_HEIGHT = 200\n\nconst StyledStickyContainer = styled('div', {\n  pointerEvents: 'all',\n  position: 'relative',\n  backgroundColor: 'rgba(255, 220, 100)',\n  fontFamily: 'sans-serif',\n  height: '100%',\n  width: '100%',\n  padding: PADDING + 'px',\n  borderRadius: '3px',\n  perspective: '800px',\n  variants: {\n    isGhost: {\n      false: { opacity: 1 },\n      true: { transition: 'opacity .2s', opacity: GHOSTED_OPACITY },\n    },\n    isDarkMode: {\n      true: {\n        boxShadow:\n          '2px 3px 12px -2px rgba(0,0,0,.3), 1px 1px 4px rgba(0,0,0,.3), 1px 1px 2px rgba(0,0,0,.3)',\n      },\n      false: {\n        boxShadow:\n          '2px 3px 12px -2px rgba(0,0,0,.2), 1px 1px 4px rgba(0,0,0,.16),  1px 1px 2px rgba(0,0,0,.16)',\n      },\n    },\n  },\n})\n\nconst commonTextWrapping = {\n  whiteSpace: 'pre-wrap',\n  overflowWrap: 'break-word',\n  letterSpacing: LETTER_SPACING,\n}\n\nconst StyledText = styled('div', {\n  position: 'absolute',\n  top: PADDING,\n  left: PADDING,\n  width: `calc(100% - ${PADDING * 2}px)`,\n  height: 'fit-content',\n  font: 'inherit',\n  pointerEvents: 'none',\n  userSelect: 'none',\n  variants: {\n    isEditing: {\n      true: {\n        opacity: 1,\n      },\n      false: {\n        opacity: 1,\n      },\n    },\n    alignment: {\n      [AlignStyle.Start]: {\n        textAlign: 'left',\n      },\n      [AlignStyle.Middle]: {\n        textAlign: 'center',\n      },\n      [AlignStyle.End]: {\n        textAlign: 'right',\n      },\n      [AlignStyle.Justify]: {\n        textAlign: 'justify',\n      },\n    },\n  },\n  ...commonTextWrapping,\n})\n\nconst StyledTextArea = styled('textarea', {\n  width: '100%',\n  height: '100%',\n  border: 'none',\n  overflow: 'hidden',\n  background: 'none',\n  outline: 'none',\n  textAlign: 'left',\n  font: 'inherit',\n  padding: 0,\n  color: 'transparent',\n  verticalAlign: 'top',\n  resize: 'none',\n  caretColor: 'black',\n  ...commonTextWrapping,\n  variants: {\n    alignment: {\n      [AlignStyle.Start]: {\n        textAlign: 'left',\n      },\n      [AlignStyle.Middle]: {\n        textAlign: 'center',\n      },\n      [AlignStyle.End]: {\n        textAlign: 'right',\n      },\n      [AlignStyle.Justify]: {\n        textAlign: 'justify',\n      },\n    },\n  },\n  '&:focus': {\n    outline: 'none',\n    border: 'none',\n  },\n})\n", "import { HTMLContainer, TLBounds, Utils } from '@tldraw/core'\nimport { Vec } from '@tldraw/vec'\nimport * as React from 'react'\nimport { stopPropagation } from '~components/stopPropagation'\nimport { BINDING_DISTANCE, GHOSTED_OPACITY, LETTER_SPACING } from '~constants'\nimport { TLDR } from '~state/TLDR'\nimport { TDShapeUtil } from '~state/shapes/TDShapeUtil'\nimport {\n  TextAreaUtils,\n  defaultTextStyle,\n  getFontFace,\n  getFontSize,\n  getFontStyle,\n  getShapeStyle,\n  getTextAlign,\n  getTextSvgElement,\n} from '~state/shapes/shared'\nimport { styled } from '~styles'\nimport { AlignStyle, TDMeta, TDShapeType, TextShape, TransformInfo } from '~types'\n\ntype T = TextShape\ntype E = HTMLDivElement\n\nexport class TextUtil extends TDShapeUtil<T, E> {\n  type = TDShapeType.Text as const\n\n  isAspectRatioLocked = true\n\n  canEdit = true\n\n  canBind = true\n\n  canClone = true\n\n  bindingDistance = BINDING_DISTANCE / 2\n\n  getShape = (props: Partial<T>): T => {\n    return Utils.deepMerge<T>(\n      {\n        id: 'id',\n        type: TDShapeType.Text,\n        name: 'Text',\n        parentId: 'page',\n        childIndex: 1,\n        point: [0, 0],\n        rotation: 0,\n        text: ' ',\n        style: defaultTextStyle,\n      },\n      props\n    )\n  }\n\n  texts = new Map<string, string>()\n\n  Component = TDShapeUtil.Component<T, E, TDMeta>(\n    ({ shape, isBinding, isGhost, isEditing, onShapeBlur, onShapeChange, meta, events }, ref) => {\n      const { text, style } = shape\n      const styles = getShapeStyle(style, meta.isDarkMode)\n      const font = getFontStyle(shape.style)\n      const rInput = React.useRef<HTMLTextAreaElement>(null)\n      const rIsMounted = React.useRef(false)\n\n      const rEditedText = React.useRef(text)\n\n      React.useLayoutEffect(() => {\n        if (text !== rEditedText.current) {\n          let delta = [0, 0]\n          this.texts.set(shape.id, text)\n          const currentBounds = this.getBounds(shape)\n          const nextBounds = this.getBounds(shape)\n          switch (shape.style.textAlign) {\n            case AlignStyle.Start: {\n              break\n            }\n            case AlignStyle.Middle: {\n              delta = Vec.div([nextBounds.width - currentBounds.width, 0], 2)\n              break\n            }\n            case AlignStyle.End: {\n              delta = [nextBounds.width - currentBounds.width, 0]\n              break\n            }\n          }\n\n          rEditedText.current = text\n\n          onShapeChange?.({\n            ...shape,\n            id: shape.id,\n            point: Vec.sub(shape.point, delta),\n            text,\n          })\n        }\n      }, [text])\n\n      const handleChange = React.useCallback(\n        (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n          let delta = [0, 0]\n          const newText = TLDR.normalizeText(e.currentTarget.value)\n          const currentBounds = this.getBounds(shape)\n          this.texts.set(shape.id, newText)\n          const nextBounds = this.getBounds({\n            ...shape,\n            text: newText,\n          })\n\n          switch (shape.style.textAlign) {\n            case AlignStyle.Start: {\n              break\n            }\n            case AlignStyle.Middle: {\n              delta = Vec.div([nextBounds.width - currentBounds.width, 0], 2)\n              break\n            }\n            case AlignStyle.End: {\n              delta = [nextBounds.width - currentBounds.width, 0]\n              break\n            }\n          }\n\n          rEditedText.current = newText\n\n          onShapeChange?.({\n            ...shape,\n            id: shape.id,\n            point: Vec.sub(shape.point, delta),\n            text: newText,\n          })\n        },\n        [shape.id, shape.point]\n      )\n\n      const handleKeyDown = React.useCallback(\n        (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n          if (e.key === 'Escape') {\n            e.preventDefault()\n            e.stopPropagation()\n            onShapeBlur?.()\n            return\n          }\n\n          if (e.key === 'Tab' && shape.text.length === 0) {\n            e.preventDefault()\n            return\n          }\n\n          if (e.key === 'Enter' && (e.metaKey || e.ctrlKey)) {\n            e.preventDefault()\n            e.stopPropagation()\n            rInput.current!.blur()\n            return\n          }\n\n          if (!(e.key === 'Meta' || e.metaKey)) {\n            e.stopPropagation()\n          } else if (e.key === 'z' && e.metaKey) {\n            if (e.shiftKey) {\n              document.execCommand('redo', false)\n            } else {\n              document.execCommand('undo', false)\n            }\n            e.stopPropagation()\n            e.preventDefault()\n            return\n          }\n          if ((e.metaKey || e.ctrlKey) && e.key === '=') {\n            e.preventDefault()\n          }\n          if (e.key === 'Tab') {\n            e.preventDefault()\n            if (e.shiftKey) {\n              TextAreaUtils.unindent(e.currentTarget)\n            } else {\n              TextAreaUtils.indent(e.currentTarget)\n            }\n\n            onShapeChange?.({ ...shape, text: TLDR.normalizeText(e.currentTarget.value) })\n          }\n        },\n        [shape, onShapeChange]\n      )\n\n      const handleBlur = React.useCallback((e: React.FocusEvent<HTMLTextAreaElement>) => {\n        e.currentTarget.setSelectionRange(0, 0)\n        onShapeBlur?.()\n      }, [])\n\n      const handleFocus = React.useCallback(\n        (e: React.FocusEvent<HTMLTextAreaElement>) => {\n          if (!isEditing) return\n          if (!rIsMounted.current) return\n          if (document.activeElement === e.currentTarget) {\n            e.currentTarget.select()\n          }\n        },\n        [isEditing]\n      )\n\n      const handlePointerDown = React.useCallback(\n        (e: React.PointerEvent<HTMLDivElement | HTMLTextAreaElement>) => {\n          if (isEditing) {\n            e.stopPropagation()\n          }\n        },\n        [isEditing]\n      )\n\n      const rWasEditing = React.useRef(isEditing)\n\n      React.useEffect(() => {\n        if (isEditing) {\n          rWasEditing.current = true\n          this.texts.set(shape.id, text)\n          requestAnimationFrame(() => {\n            rIsMounted.current = true\n            const elm = rInput.current\n            if (elm) {\n              elm.focus()\n              elm.select()\n            }\n          })\n        } else if (rWasEditing.current) {\n          rWasEditing.current = false\n          onShapeBlur?.()\n        }\n      }, [isEditing])\n\n      return (\n        <HTMLContainer ref={ref} {...events}>\n          <Wrapper isGhost={isGhost} isEditing={isEditing} onPointerDown={handlePointerDown}>\n            <InnerWrapper\n              style={{\n                font,\n                color: styles.stroke,\n                textAlign: getTextAlign(style.textAlign),\n              }}\n            >\n              {isBinding && (\n                <div\n                  className=\"tl-binding-indicator\"\n                  style={{\n                    position: 'absolute',\n                    top: -this.bindingDistance,\n                    left: -this.bindingDistance,\n                    width: `calc(100% + ${this.bindingDistance * 2}px)`,\n                    height: `calc(100% + ${this.bindingDistance * 2}px)`,\n                    backgroundColor: 'var(--tl-selectFill)',\n                  }}\n                />\n              )}\n              {isEditing ? (\n                <TextArea\n                  ref={rInput}\n                  style={{\n                    font,\n                    color: styles.stroke,\n                  }}\n                  name=\"text\"\n                  tabIndex={-1}\n                  autoComplete=\"false\"\n                  autoCapitalize=\"false\"\n                  autoCorrect=\"false\"\n                  autoSave=\"false\"\n                  autoFocus\n                  placeholder=\"\"\n                  spellCheck=\"true\"\n                  wrap=\"off\"\n                  dir=\"auto\"\n                  datatype=\"wysiwyg\"\n                  defaultValue={text}\n                  color={styles.stroke}\n                  onFocus={handleFocus}\n                  onChange={handleChange}\n                  onKeyDown={handleKeyDown}\n                  onBlur={handleBlur}\n                  onPointerDown={handlePointerDown}\n                  onContextMenu={stopPropagation}\n                  onCopy={stopPropagation}\n                  onPaste={stopPropagation}\n                  onCut={stopPropagation}\n                />\n              ) : (\n                text\n              )}\n              &#8203;\n            </InnerWrapper>\n          </Wrapper>\n        </HTMLContainer>\n      )\n    }\n  )\n\n  Indicator = TDShapeUtil.Indicator<T>(({ shape }) => {\n    const { width, height } = this.getBounds(shape)\n    return <rect x={0} y={0} width={width} height={height} />\n  })\n\n  getBounds = (shape: T) => {\n    const bounds = Utils.getFromCache(this.boundsCache, shape, () => {\n      if (!melm) {\n        // We're in SSR\n        return { minX: 0, minY: 0, maxX: 10, maxY: 10, width: 10, height: 10 }\n      }\n\n      if (!melm.parentNode) document.body.appendChild(melm)\n\n      melm.style.font = getFontStyle(shape.style)\n      melm.textContent = this.texts.get(shape.id) ?? shape.text\n\n      // In tests, offsetWidth and offsetHeight will be 0\n      const width = melm.offsetWidth || 1\n      const height = melm.offsetHeight || 1\n\n      return {\n        minX: 0,\n        maxX: width,\n        minY: 0,\n        maxY: height,\n        width,\n        height,\n      }\n    })\n\n    return Utils.translateBounds(bounds, shape.point)\n  }\n\n  shouldRender = (prev: T, next: T): boolean => {\n    return (\n      next.text !== prev.text || next.style.scale !== prev.style.scale || next.style !== prev.style\n    )\n  }\n\n  transform = (\n    shape: T,\n    bounds: TLBounds,\n    { initialShape, scaleX, scaleY }: TransformInfo<T>\n  ): Partial<T> => {\n    const {\n      rotation = 0,\n      style: { scale = 1 },\n    } = initialShape\n\n    const nextScale = scale * Math.abs(Math.min(scaleX, scaleY))\n\n    return {\n      point: [bounds.minX, bounds.minY],\n      rotation:\n        (scaleX < 0 && scaleY >= 0) || (scaleY < 0 && scaleX >= 0) ? -(rotation || 0) : rotation,\n      style: {\n        ...initialShape.style,\n        scale: nextScale,\n      },\n    }\n  }\n\n  transformSingle = (\n    shape: T,\n    bounds: TLBounds,\n    { initialShape, scaleX, scaleY }: TransformInfo<T>\n  ): Partial<T> | void => {\n    const {\n      style: { scale = 1 },\n    } = initialShape\n\n    return {\n      point: Vec.toFixed([bounds.minX, bounds.minY]),\n      style: {\n        ...initialShape.style,\n        scale: scale * Math.max(Math.abs(scaleY), Math.abs(scaleX)),\n      },\n    }\n  }\n\n  onDoubleClickBoundsHandle = (shape: T) => {\n    const center = this.getCenter(shape)\n\n    const newCenter = this.getCenter({\n      ...shape,\n      style: {\n        ...shape.style,\n        scale: 1,\n      },\n    })\n\n    return {\n      style: {\n        ...shape.style,\n        scale: 1,\n      },\n      point: Vec.toFixed(Vec.add(shape.point, Vec.sub(center, newCenter))),\n    }\n  }\n\n  getSvgElement = (shape: T, isDarkMode: boolean): SVGElement | void => {\n    const bounds = this.getBounds(shape)\n    const style = getShapeStyle(shape.style, isDarkMode)\n\n    const fontSize = getFontSize(shape.style.size, shape.style.font) * (shape.style.scale ?? 1)\n    const fontFamily = getFontFace(shape.style.font).slice(1, -1)\n    const textAlign = shape.style.textAlign ?? AlignStyle.Middle\n\n    const textElm = getTextSvgElement(\n      shape.text,\n      fontSize,\n      fontFamily,\n      textAlign,\n      bounds.width,\n      false\n    )\n\n    textElm.setAttribute('fill', style.stroke)\n\n    return textElm\n  }\n}\n\n/* -------------------------------------------------- */\n/*                       Helpers                      */\n/* -------------------------------------------------- */\n\nlet melm: any\n\nfunction getMeasurementDiv() {\n  // A div used for measurement\n  document.getElementById('__textMeasure')?.remove()\n\n  const pre = document.createElement('pre')\n  pre.id = '__textMeasure'\n\n  Object.assign(pre.style, {\n    whiteSpace: 'pre',\n    width: 'auto',\n    border: '1px solid transparent',\n    padding: '4px',\n    margin: '0px',\n    letterSpacing: LETTER_SPACING,\n    opacity: '0',\n    position: 'absolute',\n    top: '-500px',\n    left: '0px',\n    zIndex: '9999',\n    pointerEvents: 'none',\n    userSelect: 'none',\n    alignmentBaseline: 'mathematical',\n    dominantBaseline: 'mathematical',\n  })\n\n  pre.tabIndex = -1\n\n  document.body.appendChild(pre)\n  return pre\n}\n\nif (typeof window !== 'undefined') {\n  melm = getMeasurementDiv()\n}\n\nconst Wrapper = styled('div', {\n  width: '100%',\n  height: '100%',\n  variants: {\n    isGhost: {\n      false: { opacity: 1 },\n      true: { transition: 'opacity .2s', opacity: GHOSTED_OPACITY },\n    },\n    isEditing: {\n      false: {\n        pointerEvents: 'all',\n        userSelect: 'all',\n      },\n      true: {\n        pointerEvents: 'none',\n        userSelect: 'none',\n      },\n    },\n  },\n})\n\nconst commonTextWrapping = {\n  whiteSpace: 'pre-wrap',\n  overflowWrap: 'break-word',\n}\n\nconst InnerWrapper = styled('div', {\n  position: 'absolute',\n  width: '100%',\n  height: '100%',\n  padding: '4px',\n  zIndex: 1,\n  minHeight: 1,\n  minWidth: 1,\n  lineHeight: 1,\n  letterSpacing: LETTER_SPACING,\n  outline: 0,\n  fontWeight: '500',\n  backfaceVisibility: 'hidden',\n  userSelect: 'none',\n  pointerEvents: 'none',\n  WebkitUserSelect: 'none',\n  WebkitTouchCallout: 'none',\n  isEditing: {\n    false: {},\n    true: {\n      pointerEvents: 'all',\n      background: '$boundsBg',\n      userSelect: 'text',\n      WebkitUserSelect: 'text',\n    },\n  },\n  ...commonTextWrapping,\n})\n\nconst TextArea = styled('textarea', {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  zIndex: 1,\n  width: '100%',\n  height: '100%',\n  border: 'none',\n  padding: '4px',\n  resize: 'none',\n  textAlign: 'inherit',\n  minHeight: 'inherit',\n  minWidth: 'inherit',\n  lineHeight: 'inherit',\n  letterSpacing: 'inherit',\n  outline: 0,\n  fontWeight: 'inherit',\n  overflow: 'hidden',\n  backfaceVisibility: 'hidden',\n  display: 'inline-block',\n  pointerEvents: 'all',\n  background: '$boundsBg',\n  userSelect: 'text',\n  WebkitUserSelect: 'text',\n  ...commonTextWrapping,\n  '&:focus': {\n    outline: 'none',\n    border: 'none',\n  },\n})\n", "import { SVGContainer, TLBounds, Utils } from '@tldraw/core'\nimport {\n  intersectBoundsPolygon,\n  intersectLineSegmentPolyline,\n  intersectRayLineSegment,\n} from '@tldraw/intersect'\nimport Vec from '@tldraw/vec'\nimport * as React from 'react'\nimport { BINDING_DISTANCE, GHOSTED_OPACITY, LABEL_POINT } from '~constants'\nimport { TDShapeUtil } from '~state/shapes/TDShapeUtil'\nimport {\n  TextLabel,\n  defaultStyle,\n  getBoundsRectangle,\n  getFontStyle,\n  getShapeStyle,\n  transformRectangle,\n  transformSingleRectangle,\n} from '~state/shapes/shared'\nimport { styled } from '~styles'\nimport { DashStyle, TDMeta, TDShape, TDShapeType, TriangleShape } from '~types'\nimport { DashedTriangle } from './components/DashedTriangle'\nimport { DrawTriangle } from './components/DrawTriangle'\nimport { TriangleBindingIndicator } from './components/TriangleBindingIndicator'\nimport { getTriangleCentroid, getTrianglePoints } from './triangleHelpers'\n\ntype T = TriangleShape\ntype E = HTMLDivElement\n\nexport class TriangleUtil extends TDShapeUtil<T, E> {\n  type = TDShapeType.Triangle as const\n\n  canBind = true\n\n  canClone = true\n\n  canEdit = true\n\n  getShape = (props: Partial<T>): T => {\n    return Utils.deepMerge<T>(\n      {\n        id: 'id',\n        type: TDShapeType.Triangle,\n        name: 'Triangle',\n        parentId: 'page',\n        childIndex: 1,\n        point: [0, 0],\n        size: [1, 1],\n        rotation: 0,\n        style: defaultStyle,\n        label: '',\n        labelPoint: [0.5, 0.5],\n      },\n      props\n    )\n  }\n\n  Component = TDShapeUtil.Component<T, E, TDMeta>(\n    (\n      {\n        shape,\n        bounds,\n        isBinding,\n        isEditing,\n        isSelected,\n        isGhost,\n        meta,\n        events,\n        onShapeChange,\n        onShapeBlur,\n      },\n      ref\n    ) => {\n      const { id, label = '', size, style, labelPoint = LABEL_POINT } = shape\n      const font = getFontStyle(style)\n      const styles = getShapeStyle(style, meta.isDarkMode)\n      const Component = style.dash === DashStyle.Draw ? DrawTriangle : DashedTriangle\n      const handleLabelChange = React.useCallback(\n        (label: string) => onShapeChange?.({ id, label }),\n        [onShapeChange]\n      )\n      const offsetY = React.useMemo(() => {\n        const center = Vec.div(size, 2)\n        const centroid = getTriangleCentroid(size)\n        return (centroid[1] - center[1]) * 0.72\n      }, [size])\n      return (\n        <FullWrapper ref={ref} {...events}>\n          <TextLabel\n            font={font}\n            text={label}\n            color={styles.stroke}\n            offsetX={(labelPoint[0] - 0.5) * bounds.width}\n            offsetY={offsetY + (labelPoint[1] - 0.5) * bounds.height}\n            isEditing={isEditing}\n            onChange={handleLabelChange}\n            onBlur={onShapeBlur}\n          />\n          <SVGContainer id={shape.id + '_svg'} opacity={isGhost ? GHOSTED_OPACITY : 1}>\n            {isBinding && <TriangleBindingIndicator size={size} />}\n            <Component\n              id={id}\n              style={style}\n              size={size}\n              isSelected={isSelected}\n              isDarkMode={meta.isDarkMode}\n            />\n          </SVGContainer>\n        </FullWrapper>\n      )\n    }\n  )\n\n  Indicator = TDShapeUtil.Indicator<T>(({ shape }) => {\n    const { size } = shape\n    return <polygon points={getTrianglePoints(size).join()} />\n  })\n\n  private getPoints(shape: T) {\n    const {\n      rotation = 0,\n      point: [x, y],\n      size: [w, h],\n    } = shape\n    return [\n      [x + w / 2, y],\n      [x, y + h],\n      [x + w, y + h],\n    ].map((pt) => Vec.rotWith(pt, this.getCenter(shape), rotation))\n  }\n\n  shouldRender = (prev: T, next: T) => {\n    return next.size !== prev.size || next.style !== prev.style || next.label !== prev.label\n  }\n\n  getBounds = (shape: T) => {\n    return getBoundsRectangle(shape, this.boundsCache)\n  }\n\n  getExpandedBounds = (shape: T) => {\n    return Utils.getBoundsFromPoints(\n      getTrianglePoints(shape.size, this.bindingDistance).map((pt) => Vec.add(pt, shape.point))\n    )\n  }\n\n  hitTestLineSegment = (shape: T, A: number[], B: number[]): boolean => {\n    return intersectLineSegmentPolyline(A, B, this.getPoints(shape)).didIntersect\n  }\n\n  hitTestBounds = (shape: T, bounds: TLBounds): boolean => {\n    return (\n      Utils.boundsContained(this.getBounds(shape), bounds) ||\n      intersectBoundsPolygon(bounds, this.getPoints(shape)).length > 0\n    )\n  }\n\n  getBindingPoint = <K extends TDShape>(\n    shape: T,\n    fromShape: K,\n    point: number[],\n    origin: number[],\n    direction: number[],\n    bindAnywhere: boolean\n  ) => {\n    // Algorithm time! We need to find the binding point (a normalized point inside of the shape, or around the shape, where the arrow will point to) and the distance from the binding shape to the anchor.\n\n    const expandedBounds = this.getExpandedBounds(shape)\n\n    if (!Utils.pointInBounds(point, expandedBounds)) return\n\n    const points = getTrianglePoints(shape.size).map((pt) => Vec.add(pt, shape.point))\n\n    const expandedPoints = getTrianglePoints(shape.size, this.bindingDistance).map((pt) =>\n      Vec.add(pt, shape.point)\n    )\n\n    const closestDistanceToEdge = Utils.pointsToLineSegments(points, true)\n      .map(([a, b]) => Vec.distanceToLineSegment(a, b, point))\n      .sort((a, b) => a - b)[0]\n\n    if (\n      !(Utils.pointInPolygon(point, expandedPoints) || closestDistanceToEdge < this.bindingDistance)\n    )\n      return\n\n    const intersections = Utils.pointsToLineSegments(expandedPoints.concat([expandedPoints[0]]))\n      .map((segment) => intersectRayLineSegment(origin, direction, segment[0], segment[1]))\n      .filter((intersection) => intersection.didIntersect)\n      .flatMap((intersection) => intersection.points)\n\n    if (!intersections.length) return\n\n    // The center of the triangle\n    const center = Vec.add(getTriangleCentroid(shape.size), shape.point)\n\n    // Find furthest intersection between ray from origin through point and expanded bounds. TODO: What if the shape has a curve? In that case, should we intersect the circle-from-three-points instead?\n    const intersection = intersections.sort((a, b) => Vec.dist(b, origin) - Vec.dist(a, origin))[0]\n\n    // The point between the handle and the intersection\n    const middlePoint = Vec.med(point, intersection)\n\n    let anchor: number[]\n    let distance: number\n\n    if (bindAnywhere) {\n      anchor = Vec.dist(point, center) < BINDING_DISTANCE / 2 ? center : point\n      distance = 0\n    } else {\n      if (Vec.distanceToLineSegment(point, middlePoint, center) < BINDING_DISTANCE / 2) {\n        anchor = center\n      } else {\n        anchor = middlePoint\n      }\n\n      if (Utils.pointInPolygon(point, points)) {\n        distance = this.bindingDistance\n      } else {\n        distance = Math.max(this.bindingDistance, closestDistanceToEdge)\n      }\n    }\n\n    const bindingPoint = Vec.divV(Vec.sub(anchor, [expandedBounds.minX, expandedBounds.minY]), [\n      expandedBounds.width,\n      expandedBounds.height,\n    ])\n\n    return {\n      point: Vec.clampV(bindingPoint, 0, 1),\n      distance,\n    }\n  }\n\n  transform = transformRectangle\n\n  transformSingle = transformSingleRectangle\n}\n\nconst FullWrapper = styled('div', { width: '100%', height: '100%' })\n", "import { Utils } from '@tldraw/core'\nimport Vec from '@tldraw/vec'\nimport * as React from 'react'\nimport { getShapeStyle } from '~state/shapes/shared'\nimport type { ShapeStyles } from '~types'\nimport { getTrianglePoints } from '../triangleHelpers'\n\ninterface TriangleSvgProps {\n  id: string\n  size: number[]\n  style: ShapeStyles\n  isSelected: boolean\n  isDarkMode: boolean\n}\n\nexport const DashedTriangle = React.memo(function DashedTriangle({\n  id,\n  size,\n  style,\n  isSelected,\n  isDarkMode,\n}: TriangleSvgProps) {\n  const { stroke, strokeWidth, fill } = getShapeStyle(style, isDarkMode)\n  const sw = 1 + strokeWidth * 1.618\n  const points = getTrianglePoints(size)\n  const sides = Utils.pointsToLineSegments(points, true)\n  const paths = sides.map(([start, end], i) => {\n    const { strokeDasharray, strokeDashoffset } = Utils.getPerfectDashProps(\n      Vec.dist(start, end),\n      strokeWidth * 1.618,\n      style.dash\n    )\n\n    return (\n      <line\n        key={id + '_' + i}\n        x1={start[0]}\n        y1={start[1]}\n        x2={end[0]}\n        y2={end[1]}\n        stroke={stroke}\n        strokeWidth={sw}\n        strokeLinecap=\"round\"\n        strokeDasharray={strokeDasharray}\n        strokeDashoffset={strokeDashoffset}\n      />\n    )\n  })\n\n  const bgPath = points.join()\n\n  return (\n    <>\n      <polygon\n        className={style.isFilled || isSelected ? 'tl-fill-hitarea' : 'tl-stroke-hitarea'}\n        points={bgPath}\n      />\n      {style.isFilled && <polygon fill={fill} points={bgPath} pointerEvents=\"none\" />}\n      <g pointerEvents=\"stroke\">{paths}</g>\n    </>\n  )\n})\n", "import { Utils } from '@tldraw/core'\nimport Vec from '@tldraw/vec'\nimport getStroke, { getStrokePoints } from 'perfect-freehand'\nimport { getOffsetPolygon, getShapeStyle } from '~state/shapes/shared'\nimport type { ShapeStyles } from '~types'\n\nexport function getTrianglePoints(size: number[], offset = 0, rotation = 0) {\n  const [w, h] = size\n  let points = [\n    [w / 2, 0],\n    [w, h],\n    [0, h],\n  ]\n  if (offset) points = getOffsetPolygon(points, offset)\n  if (rotation) points = points.map((pt) => Vec.rotWith(pt, [w / 2, h / 2], rotation))\n\n  return points\n}\n\nexport function getTriangleCentroid(size: number[]) {\n  const [w, h] = size\n  const points = [\n    [w / 2, 0],\n    [w, h],\n    [0, h],\n  ]\n  return [\n    (points[0][0] + points[1][0] + points[2][0]) / 3,\n    (points[0][1] + points[1][1] + points[2][1]) / 3,\n  ]\n}\n\nfunction getTriangleDrawPoints(id: string, size: number[], strokeWidth: number) {\n  const [w, h] = size\n  const getRandom = Utils.rng(id)\n  // Random corner offsets\n  const offsets = Array.from(Array(3)).map(() => {\n    return [getRandom() * strokeWidth * 0.75, getRandom() * strokeWidth * 0.75]\n  })\n  // Corners\n  const corners = [\n    Vec.add([w / 2, 0], offsets[0]),\n    Vec.add([w, h], offsets[1]),\n    Vec.add([0, h], offsets[2]),\n  ]\n  // Which side to start drawing first\n  const rm = Math.round(Math.abs(getRandom() * 2 * 3))\n  // Number of points per side\n  // Inset each line by the corner radii and let the freehand algo\n  // interpolate points for the corners.\n  const lines = Utils.rotateArray(\n    [\n      Vec.pointsBetween(corners[0], corners[1], 32),\n      Vec.pointsBetween(corners[1], corners[2], 32),\n      Vec.pointsBetween(corners[2], corners[0], 32),\n    ],\n    rm\n  )\n  // For the final points, include the first half of the first line again,\n  // so that the line wraps around and avoids ending on a sharp corner.\n  // This has a bit of finesse and magic\u2014if you change the points between\n  // function, then you'll likely need to change this one too.\n  const points = [...lines.flat(), ...lines[0]]\n  return {\n    points,\n  }\n}\n\nfunction getDrawStrokeInfo(id: string, size: number[], style: ShapeStyles) {\n  const { strokeWidth } = getShapeStyle(style)\n  const { points } = getTriangleDrawPoints(id, size, strokeWidth)\n  const options = {\n    size: strokeWidth,\n    thinning: 0.65,\n    streamline: 0.3,\n    smoothing: 1,\n    simulatePressure: false,\n    last: true,\n  }\n  return { points, options }\n}\n\nexport function getTrianglePath(id: string, size: number[], style: ShapeStyles) {\n  const { points, options } = getDrawStrokeInfo(id, size, style)\n  const stroke = getStroke(points, options)\n  return Utils.getSvgPathFromStroke(stroke)\n}\n\nexport function getTriangleIndicatorPathTDSnapshot(id: string, size: number[], style: ShapeStyles) {\n  const { points, options } = getDrawStrokeInfo(id, size, style)\n  return Utils.getSvgPathFromStrokePoints(getStrokePoints(points, options))\n}\n", "import * as React from 'react'\nimport { getShapeStyle } from '~state/shapes/shared'\nimport type { ShapeStyles } from '~types'\nimport { getTriangleIndicatorPathTDSnapshot, getTrianglePath } from '../triangleHelpers'\n\ninterface TriangleSvgProps {\n  id: string\n  size: number[]\n  style: ShapeStyles\n  isSelected: boolean\n  isDarkMode: boolean\n}\n\nexport const DrawTriangle = React.memo(function DrawTriangle({\n  id,\n  size,\n  style,\n  isSelected,\n  isDarkMode,\n}: TriangleSvgProps) {\n  const { stroke, strokeWidth, fill } = getShapeStyle(style, isDarkMode)\n  const pathTDSnapshot = getTrianglePath(id, size, style)\n  const indicatorPath = getTriangleIndicatorPathTDSnapshot(id, size, style)\n  return (\n    <>\n      <path\n        className={style.isFilled || isSelected ? 'tl-fill-hitarea' : 'tl-stroke-hitarea'}\n        d={indicatorPath}\n      />\n      {style.isFilled && <path d={indicatorPath} fill={fill} pointerEvents=\"none\" />}\n      <path\n        d={pathTDSnapshot}\n        fill={stroke}\n        stroke={stroke}\n        strokeWidth={strokeWidth}\n        pointerEvents=\"none\"\n      />\n    </>\n  )\n})\n", "import * as React from 'react'\nimport { BINDING_DISTANCE } from '~constants'\nimport { getTrianglePoints } from '../triangleHelpers'\n\ninterface TriangleBindingIndicatorProps {\n  size: number[]\n}\n\nexport function TriangleBindingIndicator({ size }: TriangleBindingIndicatorProps) {\n  const trianglePoints = getTrianglePoints(size).join()\n  return (\n    <polygon\n      className=\"tl-binding-indicator\"\n      points={trianglePoints}\n      strokeWidth={BINDING_DISTANCE * 2}\n    />\n  )\n}\n", "import { styled } from '@stitches/react'\nimport { HTMLContainer, Utils } from '@tldraw/core'\nimport * as React from 'react'\nimport { GHOSTED_OPACITY } from '~constants'\nimport { TDShapeUtil } from '~state/shapes/TDShapeUtil'\nimport {\n  defaultStyle,\n  getBoundsRectangle,\n  transformRectangle,\n  transformSingleRectangle,\n} from '~state/shapes/shared'\nimport { TDMeta, TDShapeType, TDVideoAsset, VideoShape } from '~types'\n\ntype T = VideoShape\ntype E = HTMLDivElement\n\nexport class VideoUtil extends TDShapeUtil<T, E> {\n  type = TDShapeType.Video as const\n  canBind = true\n  canEdit = true\n  canClone = true\n  isAspectRatioLocked = true\n  showCloneHandles = false\n  isStateful = true // don't unmount\n\n  getShape = (props: Partial<T>): T => {\n    return Utils.deepMerge<T>(\n      {\n        id: 'video',\n        type: TDShapeType.Video,\n        name: 'Video',\n        parentId: 'page',\n        childIndex: 1,\n        point: [0, 0],\n        size: [1, 1],\n        rotation: 0,\n        style: defaultStyle,\n        assetId: 'assetId',\n        isPlaying: true,\n        currentTime: 0,\n      },\n      props\n    )\n  }\n\n  Component = TDShapeUtil.Component<T, E, TDMeta>(\n    (\n      { shape, asset = { src: '' }, isBinding, isEditing, isGhost, meta, events, onShapeChange },\n      ref\n    ) => {\n      const rVideo = React.useRef<HTMLVideoElement>(null)\n      const rWrapper = React.useRef<HTMLDivElement>(null)\n\n      const { currentTime = 0, size, isPlaying, style } = shape\n\n      React.useLayoutEffect(() => {\n        const wrapper = rWrapper.current\n        if (!wrapper) return\n        const [width, height] = size\n        wrapper.style.width = `${width}px`\n        wrapper.style.height = `${height}px`\n      }, [size])\n\n      React.useLayoutEffect(() => {\n        const video = rVideo.current\n        if (!video) return\n        if (isPlaying) video.play()\n        // throws error on safari\n        else video.pause()\n      }, [isPlaying])\n\n      React.useLayoutEffect(() => {\n        const video = rVideo.current\n        if (!video) return\n        if (currentTime !== video.currentTime) {\n          video.currentTime = currentTime\n        }\n      }, [currentTime])\n\n      const handlePlay = React.useCallback(() => {\n        onShapeChange?.({ id: shape.id, isPlaying: true })\n      }, [])\n\n      const handlePause = React.useCallback(() => {\n        onShapeChange?.({ id: shape.id, isPlaying: false })\n      }, [])\n\n      const handleSetCurrentTime = React.useCallback(() => {\n        const video = rVideo.current\n        if (!video) return\n        if (!isEditing) return\n        onShapeChange?.({ id: shape.id, currentTime: video.currentTime })\n      }, [isEditing])\n\n      return (\n        <HTMLContainer ref={ref} {...events}>\n          {isBinding && (\n            <div\n              className=\"tl-binding-indicator\"\n              style={{\n                position: 'absolute',\n                top: -this.bindingDistance,\n                left: -this.bindingDistance,\n                width: `calc(100% + ${this.bindingDistance * 2}px)`,\n                height: `calc(100% + ${this.bindingDistance * 2}px)`,\n                backgroundColor: 'var(--tl-selectFill)',\n              }}\n            />\n          )}\n          <Wrapper\n            ref={rWrapper}\n            isDarkMode={meta.isDarkMode}\n            isGhost={isGhost}\n            isFilled={style.isFilled}\n          >\n            <VideoElement\n              ref={rVideo}\n              id={shape.id + '_video'}\n              muted\n              loop\n              playsInline\n              disableRemotePlayback\n              disablePictureInPicture\n              controls={isEditing}\n              autoPlay={isPlaying}\n              onPlay={handlePlay}\n              onPause={handlePause}\n              onTimeUpdate={handleSetCurrentTime}\n            >\n              <source src={(asset as TDVideoAsset).src} />\n            </VideoElement>\n          </Wrapper>\n        </HTMLContainer>\n      )\n    }\n  )\n\n  Indicator = TDShapeUtil.Indicator<T>(({ shape }) => {\n    const {\n      size: [width, height],\n    } = shape\n\n    return (\n      <rect x={0} y={0} rx={2} ry={2} width={Math.max(1, width)} height={Math.max(1, height)} />\n    )\n  })\n\n  getBounds = (shape: T) => {\n    return getBoundsRectangle(shape, this.boundsCache)\n  }\n\n  shouldRender = (prev: T, next: T) => {\n    return next.size !== prev.size || next.style !== prev.style || next.isPlaying !== prev.isPlaying\n  }\n\n  getSvgElement = (shape: VideoShape) => {\n    const bounds = this.getBounds(shape)\n    const elm = document.createElementNS('http://www.w3.org/2000/svg', 'image')\n    elm.setAttribute('width', `${bounds.width}`)\n    elm.setAttribute('height', `${bounds.height}`)\n    elm.setAttribute('xmlns:xlink', `http://www.w3.org/1999/xlink`)\n    return elm\n  }\n\n  transform = transformRectangle\n\n  transformSingle = transformSingleRectangle\n}\n\nconst Wrapper = styled('div', {\n  pointerEvents: 'all',\n  position: 'relative',\n  fontFamily: 'sans-serif',\n  fontSize: '2em',\n  height: '100%',\n  width: '100%',\n  borderRadius: '3px',\n  perspective: '800px',\n  overflow: 'hidden',\n  p: {\n    userSelect: 'none',\n  },\n  img: {\n    userSelect: 'none',\n  },\n  variants: {\n    isGhost: {\n      false: { opacity: 1 },\n      true: { transition: 'opacity .2s', opacity: GHOSTED_OPACITY },\n    },\n    isFilled: {\n      true: {},\n      false: {},\n    },\n    isDarkMode: {\n      true: {},\n      false: {},\n    },\n  },\n  compoundVariants: [\n    {\n      isFilled: true,\n      isDarkMode: true,\n      css: {\n        boxShadow:\n          '2px 3px 12px -2px rgba(0,0,0,.3), 1px 1px 4px rgba(0,0,0,.3), 1px 1px 2px rgba(0,0,0,.3)',\n      },\n    },\n    {\n      isFilled: true,\n      isDarkMode: false,\n      css: {\n        boxShadow:\n          '2px 3px 12px -2px rgba(0,0,0,.2), 1px 1px 4px rgba(0,0,0,.16),  1px 1px 2px rgba(0,0,0,.16)',\n      },\n    },\n  ],\n})\n\nconst VideoElement = styled('video', {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  width: '100%',\n  height: '100%',\n  maxWidth: '100%',\n  minWidth: '100%',\n  pointerEvents: 'none',\n  objectFit: 'cover',\n  userSelect: 'none',\n  borderRadius: 2,\n})\n", "import type { TDShapeUtil } from '~state/shapes/TDShapeUtil'\nimport { TDShape, TDShapeType } from '~types'\nimport { ArrowUtil } from './ArrowUtil'\nimport { DrawUtil } from './DrawUtil'\nimport { EllipseUtil } from './EllipseUtil'\nimport { GroupUtil } from './GroupUtil'\nimport { ImageUtil } from './ImageUtil'\nimport { RectangleUtil } from './RectangleUtil'\nimport { StickyUtil } from './StickyUtil'\nimport { TextUtil } from './TextUtil'\nimport { TriangleUtil } from './TriangleUtil'\nimport { VideoUtil } from './VideoUtil'\n\nexport const Rectangle = new RectangleUtil()\nexport const Triangle = new TriangleUtil()\nexport const Ellipse = new EllipseUtil()\nexport const Draw = new DrawUtil()\nexport const Arrow = new ArrowUtil()\nexport const Text = new TextUtil()\nexport const Group = new GroupUtil()\nexport const Sticky = new StickyUtil()\nexport const Image = new ImageUtil()\nexport const Video = new VideoUtil()\n\nexport const shapeUtils = {\n  [TDShapeType.Rectangle]: Rectangle,\n  [TDShapeType.Triangle]: Triangle,\n  [TDShapeType.Ellipse]: Ellipse,\n  [TDShapeType.Draw]: Draw,\n  [TDShapeType.Arrow]: Arrow,\n  [TDShapeType.Text]: Text,\n  [TDShapeType.Group]: Group,\n  [TDShapeType.Sticky]: Sticky,\n  [TDShapeType.Image]: Image,\n  [TDShapeType.Video]: Video,\n}\n\nexport const getShapeUtil = <T extends TDShape>(shape: T | T['type']) => {\n  if (typeof shape === 'string') return shapeUtils[shape] as unknown as TDShapeUtil<T>\n  return shapeUtils[shape.type] as unknown as TDShapeUtil<T>\n}\n", "import * as DropdownMenu from '@radix-ui/react-dropdown-menu'\nimport { CheckIcon, PlusIcon } from '@radix-ui/react-icons'\nimport * as React from 'react'\nimport { FormattedMessage, useIntl } from 'react-intl'\nimport { Divider } from '~components/Primitives/Divider'\nimport { DMContent } from '~components/Primitives/DropdownMenu'\nimport { RowButton } from '~components/Primitives/RowButton'\nimport { SmallIcon } from '~components/Primitives/SmallIcon'\nimport { ToolButton } from '~components/Primitives/ToolButton'\nimport { useTldrawApp } from '~hooks'\nimport { styled } from '~styles'\nimport type { TDSnapshot } from '~types'\nimport { PageOptionsDialog } from '../PageOptionsDialog'\n\nconst sortedSelector = (s: TDSnapshot) =>\n  Object.values(s.document.pages).sort((a, b) => (a.childIndex || 0) - (b.childIndex || 0))\n\nconst currentPageNameSelector = (s: TDSnapshot) => s.document.pages[s.appState.currentPageId].name\n\nconst currentPageIdSelector = (s: TDSnapshot) => s.document.pages[s.appState.currentPageId].id\n\nexport function PageMenu() {\n  const app = useTldrawApp()\n\n  const intl = useIntl()\n\n  const rIsOpen = React.useRef(false)\n\n  const [isOpen, setIsOpen] = React.useState(false)\n\n  React.useEffect(() => {\n    if (rIsOpen.current !== isOpen) {\n      rIsOpen.current = isOpen\n    }\n  }, [isOpen])\n\n  const handleClose = React.useCallback(() => {\n    setIsOpen(false)\n  }, [setIsOpen])\n\n  const handleOpenChange = React.useCallback(\n    (isOpen: boolean) => {\n      if (rIsOpen.current !== isOpen) {\n        setIsOpen(isOpen)\n      }\n    },\n    [setIsOpen]\n  )\n  const currentPageName = app.useStore(currentPageNameSelector)\n\n  return (\n    <DropdownMenu.Root dir=\"ltr\" open={isOpen} onOpenChange={handleOpenChange}>\n      <DropdownMenu.Trigger dir=\"ltr\" asChild id=\"TD-Page\">\n        <ToolButton variant=\"text\">{currentPageName || intl.formatMessage({ id: 'page' })}</ToolButton>\n      </DropdownMenu.Trigger>\n      <DMContent variant=\"menu\" align=\"start\" sideOffset={4}>\n        {isOpen && <PageMenuContent onClose={handleClose} />}\n      </DMContent>\n    </DropdownMenu.Root>\n  )\n}\n\nfunction PageMenuContent({ onClose }: { onClose: () => void }) {\n  const app = useTldrawApp()\n  const intl = useIntl()\n\n  const sortedPages = app.useStore(sortedSelector)\n\n  const currentPageId = app.useStore(currentPageIdSelector)\n\n  const defaultPageName = intl.formatMessage({ id: 'page' })\n\n  const handleCreatePage = React.useCallback(() => {\n    const pageName =\n    defaultPageName + ' ' + (Object.keys(app.document.pages).length + 1)\n    app.createPage(undefined, pageName)\n  }, [app])\n\n  const handleChangePage = React.useCallback(\n    (id: string) => {\n      onClose()\n      app.changePage(id)\n    },\n    [app]\n  )\n\n  const [dragId, setDragId] = React.useState<null | string>(null)\n\n  const [dropIndex, setDropIndex] = React.useState<null | number>(null)\n\n  const handleDragStart = React.useCallback((ev: React.DragEvent<HTMLDivElement>) => {\n    setDragId(ev.currentTarget.id)\n    setDropIndex(sortedPages.findIndex((p) => p.id === ev.currentTarget.id))\n    ev.dataTransfer.effectAllowed = 'move'\n  }, [])\n\n  const handleDrag = React.useCallback(\n    (ev: React.DragEvent<HTMLDivElement>) => {\n      ev.preventDefault()\n\n      let dropIndex = sortedPages.findIndex((p) => p.id === ev.currentTarget.id)\n\n      const rect = ev.currentTarget.getBoundingClientRect()\n      const ny = (ev.clientY - rect.top) / rect.height\n\n      dropIndex = ny < 0.5 ? dropIndex : dropIndex + 1\n\n      setDropIndex(dropIndex)\n    },\n    [dragId, sortedPages]\n  )\n\n  const handleDrop = React.useCallback(() => {\n    if (dragId !== null && dropIndex !== null) {\n      app.movePage(dragId, dropIndex)\n    }\n\n    setDragId(null)\n    setDropIndex(null)\n  }, [dragId, dropIndex])\n\n  return (\n    <>\n      <DropdownMenu.RadioGroup dir=\"ltr\" value={currentPageId} onValueChange={handleChangePage}>\n        {sortedPages.map((page, i) => (\n          <ButtonWithOptions\n            key={page.id}\n            isDropAbove={i === dropIndex && i === 0}\n            isDropBelow={dropIndex !== null && i === dropIndex - 1}\n          >\n            <DropdownMenu.RadioItem\n              title={page.name || defaultPageName}\n              value={page.id}\n              key={page.id}\n              id={page.id}\n              asChild\n              onDragOver={handleDrag}\n              onDragStart={handleDragStart}\n              // onDrag={handleDrag}\n              onDrop={handleDrop}\n              draggable={true}\n            >\n              <PageButton>\n                <span id={page.id}>{page.name || defaultPageName}</span>\n                <DropdownMenu.ItemIndicator>\n                  <SmallIcon>\n                    <CheckIcon />\n                  </SmallIcon>\n                </DropdownMenu.ItemIndicator>\n              </PageButton>\n            </DropdownMenu.RadioItem>\n            <PageOptionsDialog page={page} onClose={onClose} />\n          </ButtonWithOptions>\n        ))}\n      </DropdownMenu.RadioGroup>\n      <Divider />\n      <DropdownMenu.Item onSelect={handleCreatePage} asChild>\n        <RowButton>\n          <span>\n            <FormattedMessage id=\"create.page\" />\n          </span>\n          <SmallIcon>\n            <PlusIcon />\n          </SmallIcon>\n        </RowButton>\n      </DropdownMenu.Item>\n    </>\n  )\n}\n\nconst ButtonWithOptions = styled('div', {\n  position: 'relative',\n  display: 'grid',\n  gridTemplateColumns: '1fr auto',\n  gridAutoFlow: 'column',\n  margin: 0,\n\n  '& > *[data-shy=\"true\"]': {\n    opacity: 0,\n  },\n\n  '&:hover > *[data-shy=\"true\"]': {\n    opacity: 1,\n  },\n\n  variants: {\n    isDropAbove: {\n      true: {\n        '&::after': {\n          content: '',\n          display: 'block',\n          position: 'absolute',\n          top: 0,\n          width: '100%',\n          height: '1px',\n          backgroundColor: '$selected',\n          zIndex: 999,\n          pointerEvents: 'none',\n        },\n      },\n    },\n    isDropBelow: {\n      true: {\n        '&::after': {\n          content: '',\n          display: 'block',\n          position: 'absolute',\n          width: '100%',\n          height: '1px',\n          top: '100%',\n          backgroundColor: '$selected',\n          zIndex: 999,\n          pointerEvents: 'none',\n        },\n      },\n    },\n  },\n})\n\nexport const PageButton = styled(RowButton, {\n  minWidth: 128,\n})\n", "import * as Dialog from '@radix-ui/react-alert-dialog'\nimport { MixerVerticalIcon, Pencil1Icon } from '@radix-ui/react-icons'\nimport * as React from 'react'\nimport { FormattedMessage, useIntl } from 'react-intl'\nimport { Divider } from '~components/Primitives/Divider'\nimport { IconButton } from '~components/Primitives/IconButton/IconButton'\nimport { RowButton, RowButtonProps } from '~components/Primitives/RowButton'\nimport { SmallIcon } from '~components/Primitives/SmallIcon'\nimport { TextField } from '~components/Primitives/TextField'\nimport { breakpoints } from '~components/breakpoints'\nimport { useContainer, useTldrawApp } from '~hooks'\nimport { styled } from '~styles'\nimport type { TDPage, TDSnapshot } from '~types'\n\nconst canDeleteSelector = (s: TDSnapshot) => {\n  return Object.keys(s.document.pages).length > 1\n}\n\ninterface PageOptionsDialogProps {\n  page: TDPage\n  onOpen?: () => void\n  onClose?: () => void\n}\n\nexport function PageOptionsDialog({ page, onOpen, onClose }: PageOptionsDialogProps) {\n  const app = useTldrawApp()\n  const intl = useIntl()\n\n  const [isOpen, setIsOpen] = React.useState(false)\n  const [pageName, setPageName] = React.useState(page.name || 'Page')\n\n  const canDelete = app.useStore(canDeleteSelector)\n\n  const rInput = React.useRef<HTMLInputElement>(null)\n\n  const handleClose = React.useCallback(() => {\n    setIsOpen(false)\n  }, [])\n\n  const handleDuplicate = React.useCallback(() => {\n    app.duplicatePage(page.id)\n  }, [app])\n\n  const handleDelete = React.useCallback(() => {\n    if (window.confirm(`Are you sure you want to delete this page?`)) {\n      app.deletePage(page.id)\n    }\n  }, [app])\n\n  const handleOpenChange = React.useCallback(\n    (isOpen: boolean) => {\n      setIsOpen(isOpen)\n\n      if (isOpen) {\n        onOpen?.()\n        return\n      }\n    },\n    [app]\n  )\n\n  function stopPropagation(e: React.KeyboardEvent<HTMLDivElement>) {\n    e.stopPropagation()\n  }\n\n  const rInitialName = React.useRef(page.name || 'Page')\n  const rCurrentName = React.useRef(rInitialName.current)\n\n  const handleTextFieldChange = React.useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value.trimStart()\n    rCurrentName.current = value\n    setPageName(value)\n  }, [])\n\n  const handleTextFieldKeyDown = React.useCallback((e: React.KeyboardEvent<HTMLInputElement>) => {\n    switch (e.key) {\n      case 'Enter': {\n        if (rCurrentName.current === rInitialName.current) {\n          setIsOpen(false)\n        } else {\n          rInitialName.current = rCurrentName.current\n          app.renamePage(page.id, rCurrentName.current.trim())\n          setIsOpen(false)\n        }\n\n        break\n      }\n      case 'Escape': {\n        // If the name hasn't changed, close the menu\n        if (rCurrentName.current === rInitialName.current) {\n          setIsOpen(false)\n          return\n        }\n\n        // If the name has changed, revert the change\n        rCurrentName.current = rInitialName.current\n        setPageName(rInitialName.current)\n\n        // ...and refocus the input\n        requestAnimationFrame(() => {\n          const elm = rInput.current\n          if (elm) {\n            elm.focus()\n            elm.setSelectionRange(0, elm.value.length)\n          }\n        })\n        break\n      }\n    }\n  }, [])\n\n  const rWasOpen = React.useRef(false)\n\n  React.useEffect(() => {\n    if (isOpen) {\n      rWasOpen.current = true\n      rInitialName.current = page.name || 'Page'\n      rCurrentName.current = rInitialName.current\n\n      requestAnimationFrame(() => {\n        const elm = rInput.current\n        if (elm) {\n          elm.focus()\n          elm.setSelectionRange(0, elm.value.length)\n        }\n      })\n    } else if (rWasOpen.current) {\n      onClose?.()\n    }\n\n    return () => {\n      if (rCurrentName.current !== rInitialName.current) {\n        rInitialName.current = rCurrentName.current\n        app.renamePage(page.id, rCurrentName.current)\n      }\n    }\n  }, [isOpen])\n\n  const container = useContainer()\n\n  return (\n    <Dialog.Root open={isOpen} onOpenChange={handleOpenChange}>\n      <Dialog.Trigger asChild data-shy=\"true\">\n        <IconButton bp={breakpoints}>\n          <SmallIcon>\n            <MixerVerticalIcon />\n          </SmallIcon>\n        </IconButton>\n      </Dialog.Trigger>\n      <Dialog.Portal container={container.current}>\n        <StyledDialogOverlay onPointerDown={handleClose} />\n        <StyledDialogContent dir=\"ltr\" onKeyDown={stopPropagation} onKeyUp={stopPropagation}>\n          <TextField\n            ref={rInput}\n            placeholder={intl.formatMessage({ id: 'page.name' })}\n            value={pageName}\n            onChange={handleTextFieldChange}\n            onKeyDown={handleTextFieldKeyDown}\n            icon={<Pencil1Icon />}\n          />\n          <Divider />\n          <DialogAction onSelect={handleDuplicate}>\n            <FormattedMessage id=\"duplicate\" />\n          </DialogAction>\n          <DialogAction disabled={!canDelete} onSelect={handleDelete}>\n            <FormattedMessage id=\"delete\" />\n          </DialogAction>\n          <Divider />\n          <Dialog.Cancel asChild>\n            <RowButton>\n              <FormattedMessage id=\"cancel\" />\n            </RowButton>\n          </Dialog.Cancel>\n        </StyledDialogContent>\n      </Dialog.Portal>\n    </Dialog.Root>\n  )\n}\n\n/* -------------------------------------------------- */\n/*                       Dialog                       */\n/* -------------------------------------------------- */\n\nexport const StyledDialogContent = styled(Dialog.Content, {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  minWidth: 240,\n  maxWidth: 'fit-content',\n  maxHeight: '85vh',\n  marginTop: '-5vh',\n  pointerEvents: 'all',\n  backgroundColor: '$panel',\n  padding: '$1',\n  borderRadius: '$2',\n  font: '$ui',\n  zIndex: 999999,\n  '&:focus': {\n    outline: 'none',\n  },\n})\n\nexport const StyledDialogOverlay = styled(Dialog.Overlay, {\n  backgroundColor: 'rgba(0, 0, 0, .15)',\n  position: 'absolute',\n  pointerEvents: 'all',\n  inset: 0,\n  zIndex: 999998,\n})\n\nfunction DialogAction({\n  onSelect,\n  ...rest\n}: RowButtonProps & { onSelect: (e: React.SyntheticEvent<HTMLButtonElement, Event>) => void }) {\n  return (\n    <Dialog.Action asChild onClick={onSelect} onSelect={onSelect}>\n      <RowButton {...rest} />\n    </Dialog.Action>\n  )\n}\n", "import * as DropdownMenu from '@radix-ui/react-dropdown-menu'\nimport {\n  TextAlignCenterIcon,\n  TextAlignJustifyIcon,\n  TextAlignLeftIcon,\n  TextAlignRightIcon,\n} from '@radix-ui/react-icons'\nimport * as React from 'react'\nimport { FormattedMessage, useIntl } from 'react-intl'\nimport { Divider } from '~components/Primitives/Divider'\nimport { DMCheckboxItem, DMContent, DMRadioItem } from '~components/Primitives/DropdownMenu'\nimport { ToolButton } from '~components/Primitives/ToolButton'\nimport {\n  CircleIcon,\n  DashDashedIcon,\n  DashDottedIcon,\n  DashDrawIcon,\n  DashSolidIcon,\n  SizeLargeIcon,\n  SizeMediumIcon,\n  SizeSmallIcon,\n} from '~components/Primitives/icons'\nimport { breakpoints } from '~components/breakpoints'\nimport { preventEvent } from '~components/preventEvent'\nimport { useTldrawApp } from '~hooks'\nimport { defaultTextStyle, fills, strokes } from '~state/shapes/shared'\nimport { styled } from '~styles'\nimport {\n  AlignStyle,\n  ColorStyle,\n  DashStyle,\n  FontStyle,\n  ShapeStyles,\n  SizeStyle,\n  TDShapeType,\n  TDSnapshot,\n} from '~types'\n\nconst currentStyleSelector = (s: TDSnapshot) => s.appState.currentStyle\nconst selectedIdsSelector = (s: TDSnapshot) =>\n  s.document.pageStates[s.appState.currentPageId].selectedIds\n\nconst STYLE_KEYS = Object.keys(defaultTextStyle) as (keyof ShapeStyles)[]\n\nconst DASH_ICONS = {\n  [DashStyle.Draw]: <DashDrawIcon />,\n  [DashStyle.Solid]: <DashSolidIcon />,\n  [DashStyle.Dashed]: <DashDashedIcon />,\n  [DashStyle.Dotted]: <DashDottedIcon />,\n}\n\nconst SIZE_ICONS = {\n  [SizeStyle.Small]: <SizeSmallIcon />,\n  [SizeStyle.Medium]: <SizeMediumIcon />,\n  [SizeStyle.Large]: <SizeLargeIcon />,\n}\n\nconst ALIGN_ICONS = {\n  [AlignStyle.Start]: <TextAlignLeftIcon />,\n  [AlignStyle.Middle]: <TextAlignCenterIcon />,\n  [AlignStyle.End]: <TextAlignRightIcon />,\n  [AlignStyle.Justify]: <TextAlignJustifyIcon />,\n}\n\nconst themeSelector = (s: TDSnapshot) => (s.settings.isDarkMode ? 'dark' : 'light')\n\nconst keepOpenSelector = (s: TDSnapshot) => s.settings.keepStyleMenuOpen\n\nconst optionsSelector = (s: TDSnapshot) => {\n  const { activeTool, currentPageId: pageId } = s.appState\n  switch (activeTool) {\n    case 'select': {\n      const page = s.document.pages[pageId]\n      let hasText = false\n      let hasLabel = false\n      for (const id of s.document.pageStates[pageId].selectedIds) {\n        if ('text' in page.shapes[id]) hasText = true\n        if ('label' in page.shapes[id]) hasLabel = true\n      }\n      return hasText ? 'text' : hasLabel ? 'label' : ''\n    }\n    case TDShapeType.Text: {\n      return 'text'\n    }\n    case TDShapeType.Rectangle: {\n      return 'label'\n    }\n    case TDShapeType.Ellipse: {\n      return 'label'\n    }\n    case TDShapeType.Triangle: {\n      return 'label'\n    }\n    case TDShapeType.Arrow: {\n      return 'label'\n    }\n    case TDShapeType.Line: {\n      return 'label'\n    }\n  }\n\n  return false\n}\n\nexport const StyleMenu = React.memo(function ColorMenu() {\n  const app = useTldrawApp()\n\n  const intl = useIntl()\n\n  const theme = app.useStore(themeSelector)\n\n  const keepOpen = app.useStore(keepOpenSelector)\n\n  const options = app.useStore(optionsSelector)\n\n  const currentStyle = app.useStore(currentStyleSelector)\n\n  const selectedIds = app.useStore(selectedIdsSelector)\n\n  const [displayedStyle, setDisplayedStyle] = React.useState(currentStyle)\n\n  const rDisplayedStyle = React.useRef(currentStyle)\n\n  React.useEffect(() => {\n    const {\n      appState: { currentStyle },\n      page,\n      selectedIds,\n    } = app\n    let commonStyle = {} as ShapeStyles\n    if (selectedIds.length <= 0) {\n      commonStyle = currentStyle\n    } else {\n      const overrides = new Set<string>([])\n      app.selectedIds\n        .map((id) => page.shapes[id])\n        .forEach((shape) => {\n          STYLE_KEYS.forEach((key) => {\n            if (overrides.has(key)) return\n            if (commonStyle[key] === undefined) {\n              // @ts-ignore\n              commonStyle[key] = shape.style[key]\n            } else {\n              if (commonStyle[key] === shape.style[key]) return\n              // @ts-ignore\n              commonStyle[key] = shape.style[key]\n              overrides.add(key)\n            }\n          })\n        })\n    }\n    // Until we can work out the correct logic for deciding whether or not to\n    // update the selected style, do a string comparison. Yuck!\n    if (JSON.stringify(commonStyle) !== JSON.stringify(rDisplayedStyle.current)) {\n      rDisplayedStyle.current = commonStyle\n      setDisplayedStyle(commonStyle)\n    }\n  }, [currentStyle, selectedIds])\n\n  const handleToggleKeepOpen = React.useCallback((checked: boolean) => {\n    app.setSetting('keepStyleMenuOpen', checked)\n  }, [])\n\n  const handleToggleFilled = React.useCallback((checked: boolean) => {\n    app.style({ isFilled: checked })\n  }, [])\n\n  const handleDashChange = React.useCallback((value: string) => {\n    app.style({ dash: value as DashStyle })\n  }, [])\n\n  const handleSizeChange = React.useCallback((value: string) => {\n    app.style({ size: value as SizeStyle })\n  }, [])\n\n  const handleFontChange = React.useCallback((value: string) => {\n    app.style({ font: value as FontStyle })\n  }, [])\n\n  const handleTextAlignChange = React.useCallback((value: string) => {\n    app.style({ textAlign: value as AlignStyle })\n  }, [])\n\n  const handleMenuOpenChange = React.useCallback(\n    (open: boolean) => {\n      app.setMenuOpen(open)\n    },\n    [app]\n  )\n\n  return (\n    <DropdownMenu.Root\n      dir=\"ltr\"\n      onOpenChange={handleMenuOpenChange}\n      open={keepOpen ? true : undefined}\n      modal={false}\n    >\n      <DropdownMenu.Trigger asChild id=\"TD-Styles\">\n        <ToolButton aria-label={intl.formatMessage({ id: 'styles' })} variant=\"text\">\n          <FormattedMessage id=\"styles\" />\n          <OverlapIcons\n            style={{\n              color: strokes[theme][displayedStyle.color as ColorStyle],\n            }}\n          >\n            {displayedStyle.isFilled && (\n              <CircleIcon\n                size={16}\n                stroke=\"none\"\n                fill={fills[theme][displayedStyle.color as ColorStyle]}\n              />\n            )}\n            {DASH_ICONS[displayedStyle.dash]}\n          </OverlapIcons>\n        </ToolButton>\n      </DropdownMenu.Trigger>\n      <DMContent id=\"TD-StylesMenu\" side=\"bottom\" align=\"end\" sideOffset={4} alignOffset={4}>\n        <StyledRow variant=\"tall\" id=\"TD-Styles-Color-Container\">\n          <span>\n            <FormattedMessage id=\"style.menu.color\" />\n          </span>\n          <ColorGrid>\n            {Object.keys(strokes.light).map((style: string) => (\n              <DropdownMenu.Item\n                key={style}\n                onSelect={preventEvent}\n                asChild\n                id={`TD-Styles-Color-Swatch-${style}`}\n              >\n                <ToolButton\n                  variant=\"icon\"\n                  isActive={displayedStyle.color === style}\n                  onClick={() => app.style({ color: style as ColorStyle })}\n                  aria-label={intl.formatMessage({ id: style })}\n                >\n                  <CircleIcon\n                    size={18}\n                    strokeWidth={2.5}\n                    fill={\n                      displayedStyle.isFilled ? fills[theme][style as ColorStyle] : 'transparent'\n                    }\n                    stroke={strokes.light[style as ColorStyle]}\n                  />\n                </ToolButton>\n              </DropdownMenu.Item>\n            ))}\n          </ColorGrid>\n        </StyledRow>\n        <DMCheckboxItem\n          variant=\"styleMenu\"\n          checked={!!displayedStyle.isFilled}\n          onCheckedChange={handleToggleFilled}\n          id=\"TD-Styles-Fill\"\n        >\n          <FormattedMessage id=\"style.menu.fill\" />\n        </DMCheckboxItem>\n        <StyledRow id=\"TD-Styles-Dash-Container\">\n          <FormattedMessage id=\"style.menu.dash\" />\n          <StyledGroup dir=\"ltr\" value={displayedStyle.dash} onValueChange={handleDashChange}>\n            {Object.values(DashStyle).map((style) => (\n              <DMRadioItem\n                key={style}\n                isActive={style === displayedStyle.dash}\n                value={style}\n                onSelect={preventEvent}\n                bp={breakpoints}\n                id={`TD-Styles-Dash-${style}`}\n                aria-label={intl.formatMessage({ id: style })}\n              >\n                {DASH_ICONS[style as DashStyle]}\n              </DMRadioItem>\n            ))}\n          </StyledGroup>\n        </StyledRow>\n        <StyledRow id=\"TD-Styles-Size-Container\">\n          <FormattedMessage id=\"style.menu.size\" />\n          <StyledGroup dir=\"ltr\" value={displayedStyle.size} onValueChange={handleSizeChange}>\n            {Object.values(SizeStyle).map((sizeStyle) => (\n              <DMRadioItem\n                key={sizeStyle}\n                isActive={sizeStyle === displayedStyle.size}\n                value={sizeStyle}\n                onSelect={preventEvent}\n                bp={breakpoints}\n                id={`TD-Styles-Dash-${sizeStyle}`}\n                aria-label={intl.formatMessage({ id: sizeStyle })}\n              >\n                {SIZE_ICONS[sizeStyle as SizeStyle]}\n              </DMRadioItem>\n            ))}\n          </StyledGroup>\n        </StyledRow>\n        {(options === 'text' || options === 'label') && (\n          <>\n            <Divider />\n            <StyledRow id=\"TD-Styles-Font-Container\">\n              <FormattedMessage id=\"style.menu.font\" />\n              <StyledGroup dir=\"ltr\" value={displayedStyle.font} onValueChange={handleFontChange}>\n                {Object.values(FontStyle).map((fontStyle) => (\n                  <DMRadioItem\n                    key={fontStyle}\n                    isActive={fontStyle === displayedStyle.font}\n                    value={fontStyle}\n                    onSelect={preventEvent}\n                    bp={breakpoints}\n                    id={`TD-Styles-Font-${fontStyle}`}\n                  >\n                    <FontIcon fontStyle={fontStyle}>Aa</FontIcon>\n                  </DMRadioItem>\n                ))}\n              </StyledGroup>\n            </StyledRow>\n            {options === 'text' && (\n              <StyledRow id=\"TD-Styles-Align-Container\">\n                <FormattedMessage id=\"style.menu.align\" />\n                <StyledGroup\n                  dir=\"ltr\"\n                  value={displayedStyle.textAlign}\n                  onValueChange={handleTextAlignChange}\n                >\n                  {Object.values(AlignStyle).map((style) => (\n                    <DMRadioItem\n                      key={style}\n                      isActive={style === displayedStyle.textAlign}\n                      value={style}\n                      onSelect={preventEvent}\n                      bp={breakpoints}\n                      id={`TD-Styles-Align-${style}`}\n                    >\n                      {ALIGN_ICONS[style]}\n                    </DMRadioItem>\n                  ))}\n                </StyledGroup>\n              </StyledRow>\n            )}\n          </>\n        )}\n        <Divider />\n        <DMCheckboxItem\n          variant=\"styleMenu\"\n          checked={keepOpen}\n          onCheckedChange={handleToggleKeepOpen}\n          id=\"TD-Styles-Keep-Open\"\n        >\n          <FormattedMessage id=\"style.menu.keep.open\" />\n        </DMCheckboxItem>\n      </DMContent>\n    </DropdownMenu.Root>\n  )\n})\n\nconst ColorGrid = styled('div', {\n  display: 'grid',\n  gridTemplateColumns: 'repeat(4, auto)',\n  gap: 0,\n})\n\nexport const StyledRow = styled('div', {\n  position: 'relative',\n  width: '100%',\n  background: 'none',\n  border: 'none',\n  cursor: 'pointer',\n  minHeight: '32px',\n  outline: 'none',\n  color: '$text',\n  fontFamily: '$ui',\n  fontWeight: 400,\n  fontSize: '$1',\n  padding: '$2 0 $2 $3',\n  borderRadius: 4,\n  userSelect: 'none',\n  WebkitUserSelect: 'none',\n  margin: 0,\n  display: 'flex',\n  gap: '$3',\n  flexDirection: 'row',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n  variants: {\n    variant: {\n      tall: {\n        alignItems: 'flex-start',\n        padding: '0 0 0 $3',\n        '& > span': {\n          paddingTop: '$4',\n        },\n      },\n    },\n  },\n})\n\nconst StyledGroup = styled(DropdownMenu.DropdownMenuRadioGroup, {\n  display: 'flex',\n  flexDirection: 'row',\n  gap: '$1',\n})\n\nconst OverlapIcons = styled('div', {\n  display: 'grid',\n  '& > *': {\n    gridColumn: 1,\n    gridRow: 1,\n  },\n})\n\nconst FontIcon = styled('div', {\n  width: 32,\n  height: 32,\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  fontSize: '$3',\n  variants: {\n    fontStyle: {\n      [FontStyle.Script]: {\n        fontFamily: 'Caveat Brush',\n      },\n      [FontStyle.Sans]: {\n        fontFamily: 'Recursive',\n      },\n      [FontStyle.Serif]: {\n        fontFamily: 'Georgia',\n      },\n      [FontStyle.Mono]: {\n        fontFamily: 'Recursive Mono',\n      },\n    },\n  },\n})\n", "import * as DropdownMenu from '@radix-ui/react-dropdown-menu'\nimport * as React from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { DMContent, DMItem } from '~components/Primitives/DropdownMenu'\nimport { ToolButton } from '~components/Primitives/ToolButton'\nimport { preventEvent } from '~components/preventEvent'\nimport { useTldrawApp } from '~hooks'\nimport { styled } from '~styles'\nimport type { TDSnapshot } from '~types'\n\nconst zoomSelector = (s: TDSnapshot) => s.document.pageStates[s.appState.currentPageId].camera.zoom\n\nexport const ZoomMenu = function ZoomMenu() {\n  const app = useTldrawApp()\n\n  const zoom = app.useStore(zoomSelector)\n\n  return (\n    <DropdownMenu.Root dir=\"ltr\">\n      <DropdownMenu.Trigger dir=\"ltr\" asChild id=\"TD-Zoom\">\n        <FixedWidthToolButton onDoubleClick={app.resetZoom} variant=\"text\">\n          {Math.round(zoom * 100)}%\n        </FixedWidthToolButton>\n      </DropdownMenu.Trigger>\n      <DMContent align=\"end\">\n        <DMItem onSelect={preventEvent} onClick={app.zoomIn} kbd=\"#+\" id=\"TD-Zoom-Zoom_In\">\n          <FormattedMessage id=\"zoom.in\" />\n        </DMItem>\n        <DMItem onSelect={preventEvent} onClick={app.zoomOut} kbd=\"#\u2212\" id=\"TD-Zoom-Zoom_Out\">\n          <FormattedMessage id=\"zoom.out\" />\n        </DMItem>\n        <DMItem onSelect={preventEvent} onClick={app.resetZoom} kbd=\"\u21E70\" id=\"TD-Zoom-Zoom_To_100%\">\n          <FormattedMessage id=\"zoom.to\" /> 100%\n        </DMItem>\n        <DMItem onSelect={preventEvent} onClick={app.zoomToFit} kbd=\"\u21E71\" id=\"TD-Zoom-To_Fit\">\n          <FormattedMessage id=\"zoom.to.fit\" />\n        </DMItem>\n        <DMItem\n          onSelect={preventEvent}\n          onClick={app.zoomToSelection}\n          kbd=\"\u21E72\"\n          id=\"TD-Zoom-To_Selection\"\n        >\n          <FormattedMessage id=\"zoom.to.selection\" />\n        </DMItem>\n      </DMContent>\n    </DropdownMenu.Root>\n  )\n}\n\nconst FixedWidthToolButton = styled(ToolButton, {\n  minWidth: 56,\n})\n", "import React, { RefObject } from 'react'\n\nexport function useCursor(ref: RefObject<HTMLDivElement>) {\n  React.useEffect(() => {\n    let isPointing = false\n    let isSpacePanning = false\n\n    const elm = ref.current\n    if (!elm) return\n\n    const onKeyDown = (e: KeyboardEvent) => {\n      if (e.key === ' ' && !isSpacePanning) {\n        isSpacePanning = true\n\n        if (isPointing) {\n          elm.setAttribute('style', 'cursor: grabbing !important')\n        } else {\n          elm.setAttribute('style', 'cursor: grab !important')\n        }\n      }\n    }\n\n    const onKeyUp = (e: KeyboardEvent) => {\n      if (e.key === ' ') {\n        isSpacePanning = false\n        elm.setAttribute('style', 'cursor: initial')\n      }\n    }\n\n    const onPointerDown = (e: PointerEvent) => {\n      isPointing = true\n\n      // On middle mouse down\n      if (e.button === 1) {\n        elm.setAttribute('style', 'cursor: grabbing !important')\n      }\n\n      // On left mouse down\n      if (e.button === 0) {\n        if (isSpacePanning) {\n          elm.setAttribute('style', 'cursor: grabbing !important')\n        }\n      }\n    }\n\n    const onPointerUp = () => {\n      isPointing = false\n\n      if (isSpacePanning) {\n        elm.setAttribute('style', 'cursor: grab !important')\n      } else {\n        elm.setAttribute('style', 'cursor: initial')\n      }\n    }\n\n    elm.addEventListener('keydown', onKeyDown)\n    elm.addEventListener('keyup', onKeyUp)\n    elm.addEventListener('pointerdown', onPointerDown)\n    elm.addEventListener('pointerup', onPointerUp)\n\n    return () => {\n      elm.removeEventListener('keydown', onKeyDown)\n      elm.removeEventListener('keyup', onKeyUp)\n      elm.removeEventListener('pointerdown', onPointerDown)\n      elm.removeEventListener('pointerup', onPointerUp)\n    }\n  }, [ref.current])\n}\n", "import {\n  TLBounds,\n  TLBoundsEventHandler,\n  TLBoundsHandleEventHandler,\n  TLCanvasEventHandler,\n  TLDropEventHandler,\n  TLKeyboardEventHandler,\n  TLPageState,\n  TLPinchEventHandler,\n  TLPointerEventHandler,\n  TLShape,\n  TLShapeCloneHandler,\n  TLWheelEventHandler,\n  Utils,\n} from '@tldraw/core'\nimport { Vec } from '@tldraw/vec'\nimport {\n  FIT_TO_SCREEN_PADDING,\n  GRID_SIZE,\n  IMAGE_EXTENSIONS,\n  SVG_EXPORT_PADDING,\n  USER_COLORS,\n  VIDEO_EXTENSIONS,\n  isLinux,\n} from '~constants'\nimport { DialogState } from '~hooks'\nimport { shapeUtils } from '~state/shapes'\nimport { defaultStyle } from '~state/shapes/shared'\nimport {\n  AlignStyle,\n  AlignType,\n  ArrowShape,\n  DistributeType,\n  FlipType,\n  GroupShape,\n  MoveType,\n  SessionType,\n  ShapeStyles,\n  StretchType,\n  TDAsset,\n  TDAssetType,\n  TDAssets,\n  TDBinding,\n  TDDocument,\n  TDExport,\n  TDExportBackground,\n  TDExportType,\n  TDPage,\n  TDShape,\n  TDShapeType,\n  TDSnapshot,\n  TDStatus,\n  TDToolType,\n  TDUser,\n  TldrawCommand,\n  TldrawPatch,\n} from '~types'\nimport { getClipboard, setClipboard } from './IdbClipboard'\nimport { StateManager } from './StateManager'\nimport { deepCopy } from './StateManager/copy'\nimport { TLDR } from './TLDR'\nimport * as Commands from './commands'\nimport {\n  fileToBase64,\n  fileToText,\n  getImageSizeFromSrc,\n  getVideoSizeFromSrc,\n  loadFileHandle,\n  migrate,\n  openAssetsFromFileSystem,\n  openFromFileSystem,\n  saveToFileSystem,\n} from './data'\nimport { SessionArgsOfType, TldrawSession, getSession } from './sessions'\nimport { clearPrevSize } from './shapes/shared/getTextSize'\nimport { ArrowTool } from './tools/ArrowTool'\nimport type { BaseTool } from './tools/BaseTool'\nimport { DrawTool } from './tools/DrawTool'\nimport { EllipseTool } from './tools/EllipseTool'\nimport { EraseTool } from './tools/EraseTool'\nimport { LineTool } from './tools/LineTool'\nimport { RectangleTool } from './tools/RectangleTool'\nimport { SelectTool } from './tools/SelectTool'\nimport { StickyTool } from './tools/StickyTool'\nimport { TextTool } from './tools/TextTool'\nimport { TriangleTool } from './tools/TriangleTool'\n\nconst uuid = Utils.uniqueId()\n\nexport interface TDCallbacks {\n  /**\n   * (optional) A callback to run when the component mounts.\n   */\n  onMount?: (app: TldrawApp) => void\n  /**\n   * (optional) A callback to run when the component's state changes.\n   */\n  onChange?: (app: TldrawApp, reason?: string) => void\n  /**\n   * (optional) A callback to run when the user creates a new project through the menu or through a keyboard shortcut.\n   */\n  onNewProject?: (\n    app: TldrawApp,\n    openDialog: (\n      dialogState: DialogState,\n      onYes: () => void,\n      onNo: () => void,\n      onCancel: () => void\n    ) => void,\n    e?: KeyboardEvent\n  ) => void\n  /**\n   * (optional) A callback to run when the user saves a project through the menu or through a keyboard shortcut.\n   */\n  onSaveProject?: (app: TldrawApp, e?: KeyboardEvent) => void\n  /**\n   * (optional) A callback to run when the user saves a project as a new project through the menu or through a keyboard shortcut.\n   */\n  onSaveProjectAs?: (app: TldrawApp, e?: KeyboardEvent) => void\n  /**\n   * (optional) A callback to run when the user opens new project through the menu or through a keyboard shortcut.\n   */\n  onOpenProject?: (\n    app: TldrawApp,\n    openDialog: (\n      dialogState: DialogState,\n      onYes: () => void,\n      onNo: () => void,\n      onCancel: () => void\n    ) => void,\n    e?: KeyboardEvent\n  ) => void\n  /**\n   * (optional) A callback to run when the opens a file to upload.\n   */\n  onOpenMedia?: (app: TldrawApp) => void\n  /**\n   * (optional) A callback to run when the state is patched.\n   */\n  onPatch?: (app: TldrawApp, patch: TldrawPatch, reason?: string) => void\n  /**\n   * (optional) A callback to run when the state is changed with a command.\n   */\n  onCommand?: (app: TldrawApp, command: TldrawCommand, reason?: string) => void\n  /**\n   * (optional) A callback to run when the state is persisted.\n   */\n  onPersist?: (app: TldrawApp) => void\n  /**\n   * (optional) A callback to run when the user undos.\n   */\n  onUndo?: (app: TldrawApp) => void\n  /**\n   * (optional) A callback to run when the user redos.\n   */\n  onRedo?: (app: TldrawApp) => void\n  /**\n   * (optional) A callback to run when the user changes the current page's shapes.\n   */\n  onChangePage?: (\n    app: TldrawApp,\n    shapes: Record<string, TDShape | undefined>,\n    bindings: Record<string, TDBinding | undefined>,\n    assets: Record<string, TDAsset | undefined>,\n    addToHistory: boolean\n  ) => void\n  /**\n   * (optional) A callback to run when the user creates a new project.\n   */\n  onChangePresence?: (app: TldrawApp, user: TDUser) => void\n  /**\n   * (optional) A callback to run when an asset will be deleted.\n   */\n  onAssetDelete?: (app: TldrawApp, assetId: string) => void\n  /**\n   * (optional) A callback to run when an asset will be created. Should return the value for the image/video's `src` property.\n   */\n  onAssetCreate?: (app: TldrawApp, file: File, id: string) => Promise<string | false>\n  /**\n   * (optional) A callback to run when an asset will be uploaded. Should return the value for the image/video's `src` property.\n   */\n  onAssetUpload?: (app: TldrawApp, file: File, id: string) => Promise<string | false>\n  /**\n   * (optional) A callback to run when the user exports their page or selection.\n   */\n  onExport?: (app: TldrawApp, info: TDExport) => Promise<void>\n  /**\n   * (optional) A callback to run when a session begins.\n   */\n  onSessionStart?: (app: TldrawApp, id: string) => void\n  /**\n   * (optional) A callback to run when a session ends.\n   */\n  onSessionEnd?: (app: TldrawApp, id: string) => void\n}\n\nexport class TldrawApp extends StateManager<TDSnapshot> {\n  callbacks: TDCallbacks = {}\n\n  tools = {\n    select: new SelectTool(this),\n    erase: new EraseTool(this),\n    [TDShapeType.Text]: new TextTool(this),\n    [TDShapeType.Draw]: new DrawTool(this),\n    [TDShapeType.Ellipse]: new EllipseTool(this),\n    [TDShapeType.Rectangle]: new RectangleTool(this),\n    [TDShapeType.Triangle]: new TriangleTool(this),\n    [TDShapeType.Line]: new LineTool(this),\n    [TDShapeType.Arrow]: new ArrowTool(this),\n    [TDShapeType.Sticky]: new StickyTool(this),\n  }\n\n  currentTool: BaseTool = this.tools.select\n\n  session?: TldrawSession\n\n  readOnly = false\n\n  isDirty = false\n\n  isCreating = false\n\n  originPoint = [0, 0]\n\n  currentPoint = [0, 0]\n\n  previousPoint = [0, 0]\n\n  shiftKey = false\n\n  altKey = false\n\n  metaKey = false\n\n  ctrlKey = false\n\n  spaceKey = false\n\n  isPointing = false\n\n  isForcePanning = false\n\n  isErasingWithPen = false\n\n  isPastePrevented = false\n\n  editingStartTime = -1\n\n  fileSystemHandle: FileSystemFileHandle | null = null\n\n  viewport = Utils.getBoundsFromPoints([\n    [0, 0],\n    [100, 100],\n  ])\n\n  rendererBounds = Utils.getBoundsFromPoints([\n    [0, 0],\n    [100, 100],\n  ])\n\n  selectHistory = {\n    stack: [[]] as string[][],\n    pointer: 0,\n  }\n\n  clipboard?: {\n    shapes: TDShape[]\n    bindings: TDBinding[]\n    assets: TDAsset[]\n  }\n\n  rotationInfo = {\n    selectedIds: [] as string[],\n    center: [0, 0],\n  }\n\n  constructor(id?: string, callbacks = {} as TDCallbacks) {\n    super(TldrawApp.defaultState, id, TldrawApp.version, (prev, next, prevVersion) => {\n      return migrate(\n        {\n          ...next,\n          document: { ...next.document, ...prev.document, version: prevVersion },\n        },\n        TldrawApp.version\n      )\n    })\n\n    this.callbacks = callbacks\n  }\n\n  /* -------------------- Internal -------------------- */\n\n  protected migrate = (state: TDSnapshot): TDSnapshot => {\n    return migrate(state, TldrawApp.version)\n  }\n\n  protected onReady = () => {\n    this.loadDocument(this.document)\n\n    loadFileHandle().then((fileHandle) => {\n      this.fileSystemHandle = fileHandle\n    })\n\n    try {\n      this.patchState({\n        ...migrate(this.state, TldrawApp.version),\n        appState: {\n          status: TDStatus.Idle,\n        },\n      })\n    } catch (e) {\n      console.error('The data appears to be corrupted. Resetting!', e)\n      localStorage.setItem(this.document.id + '_corrupted', JSON.stringify(this.document))\n\n      this.patchState({\n        ...TldrawApp.defaultState,\n        appState: {\n          ...TldrawApp.defaultState.appState,\n          status: TDStatus.Idle,\n        },\n      })\n    }\n\n    this.callbacks.onMount?.(this)\n  }\n\n  /**\n   * Cleanup the state after each state change.\n   * @param state The new state\n   * @param prev The previous state\n   * @protected\n   * @returns The final state\n   */\n  protected cleanup = (state: TDSnapshot, prev: TDSnapshot): TDSnapshot => {\n    const next: TDSnapshot = { ...state }\n\n    // Remove deleted shapes and bindings (in Commands, these will be set to undefined)\n    if (next.document !== prev.document) {\n      Object.entries(next.document.pages).forEach(([pageId, page]) => {\n        if (page === undefined) {\n          // If page is undefined, delete the page and pagestate\n          delete next.document.pages[pageId]\n          delete next.document.pageStates[pageId]\n          return\n        }\n\n        const prevPage = prev.document.pages[pageId]\n\n        const changedShapes: Record<string, TDShape | undefined> = {}\n\n        if (!prevPage || page.shapes !== prevPage.shapes || page.bindings !== prevPage.bindings) {\n          page.shapes = { ...page.shapes }\n          page.bindings = { ...page.bindings }\n\n          const groupsToUpdate = new Set<GroupShape>()\n\n          // If shape is undefined, delete the shape\n          Object.entries(page.shapes).forEach(([id, shape]) => {\n            let parentId: string\n\n            if (!shape) {\n              parentId = prevPage?.shapes[id]?.parentId\n              delete page.shapes[id]\n            } else {\n              parentId = shape.parentId\n            }\n\n            if (page.id === next.appState.currentPageId) {\n              if (prevPage?.shapes[id] !== shape) {\n                changedShapes[id] = shape\n              }\n            }\n\n            // If the shape is the child of a group, then update the group\n            // (unless the group is being deleted too)\n            if (parentId && parentId !== pageId) {\n              const group = page.shapes[parentId]\n              if (group !== undefined) {\n                groupsToUpdate.add(page.shapes[parentId] as GroupShape)\n              }\n            }\n          })\n\n          // If binding is undefined, delete the binding\n          Object.keys(page.bindings).forEach((id) => {\n            if (!page.bindings[id]) {\n              delete page.bindings[id]\n            }\n          })\n\n          next.document.pages[pageId] = page\n\n          // Get bindings related to the changed shapes\n          const bindingsToUpdate = TLDR.getRelatedBindings(next, Object.keys(changedShapes), pageId)\n\n          const visitedShapes = new Set<ArrowShape>()\n\n          // Update all of the bindings we've just collected\n          bindingsToUpdate.forEach((binding) => {\n            if (!page.bindings[binding.id]) {\n              return\n            }\n\n            const toShape = page.shapes[binding.toId]\n            const fromShape = page.shapes[binding.fromId] as ArrowShape\n\n            if (!(toShape && fromShape)) {\n              delete next.document.pages[pageId].bindings[binding.id]\n              return\n            }\n\n            if (visitedShapes.has(fromShape)) {\n              return\n            }\n            // We only need to update the binding's \"from\" shape (an arrow)\n            const fromDelta = TLDR.updateArrowBindings(page, fromShape)\n            visitedShapes.add(fromShape)\n\n            if (fromDelta) {\n              const nextShape = {\n                ...fromShape,\n                ...fromDelta,\n              } as ArrowShape\n              page.shapes[fromShape.id] = nextShape\n            }\n          })\n\n          groupsToUpdate.forEach((group) => {\n            if (!group) throw Error('no group!')\n            const children = group.children.filter((id) => page.shapes[id] !== undefined)\n\n            const commonBounds = Utils.getCommonBounds(\n              children\n                .map((id) => page.shapes[id])\n                .filter(Boolean)\n                .map((shape) => TLDR.getRotatedBounds(shape))\n            )\n\n            page.shapes[group.id] = {\n              ...group,\n              point: [commonBounds.minX, commonBounds.minY],\n              size: [commonBounds.width, commonBounds.height],\n              children,\n            }\n          })\n        }\n\n        // Clean up page state, preventing hovers on deleted shapes\n\n        const nextPageState: TLPageState = {\n          ...next.document.pageStates[pageId],\n        }\n\n        if (!nextPageState.brush) {\n          delete nextPageState.brush\n        }\n\n        if (nextPageState.hoveredId && !page.shapes[nextPageState.hoveredId]) {\n          delete nextPageState.hoveredId\n        }\n\n        if (nextPageState.bindingId && !page.bindings[nextPageState.bindingId]) {\n          TLDR.warn(`Could not find the binding of ${pageId}`)\n          delete nextPageState.bindingId\n        }\n\n        if (nextPageState.editingId && !page.shapes[nextPageState.editingId]) {\n          TLDR.warn('Could not find the editing shape!')\n          delete nextPageState.editingId\n        }\n\n        next.document.pageStates[pageId] = nextPageState\n      })\n    }\n\n    Object.keys(next.document.assets ?? {}).forEach((id) => {\n      if (!next.document.assets?.[id]) {\n        delete next.document.assets?.[id]\n      }\n    })\n\n    const currentPageId = next.appState.currentPageId\n\n    const currentPageState = next.document.pageStates[currentPageId]\n\n    if (next.room && next.room !== prev.room) {\n      const room = { ...next.room, users: { ...next.room.users } }\n\n      // Remove any exited users\n      if (prev.room) {\n        Object.values(prev.room.users)\n          .filter(Boolean)\n          .forEach((user) => {\n            if (room.users[user.id] === undefined) {\n              delete room.users[user.id]\n            }\n          })\n      }\n\n      next.room = room\n    }\n\n    if (next.room) {\n      next.room.users[next.room.userId] = {\n        ...next.room.users[next.room.userId],\n        point: this.currentPoint,\n        selectedIds: currentPageState.selectedIds,\n      }\n    }\n\n    // Temporary block on editing pages while in readonly mode.\n    // This is a broad solution but not a very good one: the UX\n    // for interacting with a readOnly document will be more nuanced.\n    if (this.readOnly) {\n      next.document.pages = prev.document.pages\n    }\n\n    return next\n  }\n\n  private broadcastPatch = (patch: TldrawPatch, addToHistory: boolean) => {\n    const changedShapes: Record<string, TDShape | undefined> = {}\n    const changedBindings: Record<string, TDBinding | undefined> = {}\n    const changedAssets: Record<string, TDAsset | undefined> = {}\n\n    const shapes = patch?.document?.pages?.[this.currentPageId]?.shapes\n    const bindings = patch?.document?.pages?.[this.currentPageId]?.bindings\n    const assets = patch?.document?.assets\n\n    if (shapes) {\n      Object.keys(shapes).forEach((id) => {\n        changedShapes[id!] = this.getShape(id, this.currentPageId)\n      })\n    }\n\n    if (bindings) {\n      Object.keys(bindings).forEach((id) => {\n        changedBindings[id] = this.getBinding(id, this.currentPageId)\n      })\n    }\n\n    if (assets) {\n      Object.keys(assets).forEach((id) => {\n        changedAssets[id] = this.document.assets[id]\n      })\n    }\n\n    this.callbacks.onChangePage?.(this, changedShapes, changedBindings, changedAssets, addToHistory)\n  }\n\n  onPatch = (state: TDSnapshot, patch: TldrawPatch, id?: string) => {\n    if (\n      (this.callbacks.onChangePage && patch?.document?.pages?.[this.currentPageId]) ||\n      patch?.document?.assets\n    ) {\n      if (\n        patch?.document?.assets ||\n        (this.session &&\n          this.session.type !== SessionType.Brush &&\n          this.session.type !== SessionType.Erase &&\n          this.session.type !== SessionType.Draw)\n      ) {\n        this.broadcastPatch(patch, false)\n      }\n    }\n\n    this.callbacks.onPatch?.(this, patch, id)\n  }\n\n  onCommand = (state: TDSnapshot, command: TldrawCommand, id?: string) => {\n    this.clearSelectHistory()\n    this.isDirty = true\n    this.callbacks.onCommand?.(this, command, id)\n  }\n\n  onReplace = () => {\n    this.clearSelectHistory()\n    this.isDirty = false\n  }\n\n  onUndo = () => {\n    this.rotationInfo.selectedIds = [...this.selectedIds]\n    this.callbacks.onUndo?.(this)\n  }\n\n  onRedo = () => {\n    this.rotationInfo.selectedIds = [...this.selectedIds]\n    this.callbacks.onRedo?.(this)\n  }\n\n  onPersist = (state: TDSnapshot, patch: TldrawPatch) => {\n    // If we are part of a room, send our changes to the server\n\n    this.callbacks.onPersist?.(this)\n    this.broadcastPatch(patch, true)\n  }\n\n  private prevSelectedIds = this.selectedIds\n\n  /**\n   * Clear the selection history after each new command, undo or redo.\n   * @param state\n   * @param id\n   */\n  protected onStateDidChange = (_state: TDSnapshot, id?: string): void => {\n    this.callbacks.onChange?.(this, id)\n\n    if (this.room && this.selectedIds !== this.prevSelectedIds) {\n      this.callbacks.onChangePresence?.(this, {\n        ...this.room.users[this.room.userId],\n        selectedIds: this.selectedIds,\n        session: !!this.session,\n      })\n      this.prevSelectedIds = this.selectedIds\n    }\n  }\n\n  private preventPaste = () => {\n    if (this.isPastePrevented) return\n\n    const prevent = (event: ClipboardEvent) => event.stopImmediatePropagation()\n\n    const enable = () => {\n      setTimeout(() => {\n        document.removeEventListener('paste', prevent, { capture: true })\n        this.isPastePrevented = false\n      }, 50)\n    }\n\n    document.addEventListener('paste', prevent, { capture: true })\n    window.addEventListener('pointerup', enable, { once: true })\n    this.isPastePrevented = true\n  }\n\n  /* ----------- Managing Multiplayer State ----------- */\n\n  private justSent = false\n\n  getReservedContent = (coreReservedIds: string[], pageId = this.currentPageId) => {\n    const { bindings } = this.document.pages[pageId]\n\n    // We want to know which shapes we need to\n    const reservedShapes: Record<string, TDShape> = {}\n    const reservedBindings: Record<string, TDBinding> = {}\n\n    // Quick lookup maps for bindings\n    const bindingsArr = Object.values(bindings)\n    const boundTos = new Map(bindingsArr.map((binding) => [binding.toId, binding]))\n    const boundFroms = new Map(bindingsArr.map((binding) => [binding.fromId, binding]))\n    const bindingMaps = [boundTos, boundFroms]\n\n    // Unique set of shape ids that are going to be reserved\n    const reservedShapeIds: string[] = []\n\n    if (this.session) coreReservedIds.forEach((id) => reservedShapeIds.push(id))\n    if (this.pageState.editingId) reservedShapeIds.push(this.pageState.editingId)\n\n    const strongReservedShapeIds = new Set(reservedShapeIds)\n\n    // Which shape ids have we already visited?\n    const visited = new Set<string>()\n\n    // Time to visit every reserved shape and every related shape and binding.\n    while (reservedShapeIds.length > 0) {\n      const id = reservedShapeIds.pop()\n      if (!id) break\n      if (visited.has(id)) continue\n\n      // Add to set so that we don't process this id a second time\n      visited.add(id)\n\n      // Get the shape and reserve it\n      const shape = this.getShape(id)\n      reservedShapes[id] = shape\n\n      if (shape.parentId !== pageId) reservedShapeIds.push(shape.parentId)\n\n      // If the shape has children, add the shape's children to the list of ids to process\n      if (shape.children) reservedShapeIds.push(...shape.children)\n\n      // If there are binding for this shape, reserve the bindings and\n      // add its related shapes to the list of ids to process\n      bindingMaps\n        .map((map) => map.get(shape.id)!)\n        .filter(Boolean)\n        .forEach((binding) => {\n          reservedBindings[binding.id] = binding\n          reservedShapeIds.push(binding.toId, binding.fromId)\n        })\n    }\n\n    return { reservedShapes, reservedBindings, strongReservedShapeIds }\n  }\n\n  /**\n   * Manually patch in page content.\n   */\n  public replacePageContent = (\n    shapes: Record<string, TDShape>,\n    bindings: Record<string, TDBinding>,\n    assets: Record<string, TDAsset>,\n    pageId = this.currentPageId\n  ): this => {\n    if (this.justSent) {\n      // The incoming update was caused by an update that the client sent, noop.\n      this.justSent = false\n      return this\n    }\n\n    const page = this.document.pages[this.currentPageId]\n\n    Object.values(shapes).forEach((shape) => {\n      if (shape.parentId !== pageId && !(page.shapes[shape.parentId] || shapes[shape.parentId])) {\n        console.warn('Added a shape without a parent on the page')\n        shape.parentId = pageId\n      }\n    })\n\n    this.useStore.setState((current) => {\n      const { hoveredId, editingId, bindingId, selectedIds } = current.document.pageStates[pageId]\n\n      const coreReservedIds = [...selectedIds]\n\n      const editingShape = editingId && current.document.pages[this.currentPageId].shapes[editingId]\n      if (editingShape) coreReservedIds.push(editingShape.id)\n\n      const { reservedShapes, reservedBindings, strongReservedShapeIds } = this.getReservedContent(\n        coreReservedIds,\n        this.currentPageId\n      )\n\n      // Merge in certain changes to reserved shapes\n      Object.values(reservedShapes)\n        // Don't merge updates to shapes with text (Text or Sticky)\n        .filter((reservedShape) => !('text' in reservedShape))\n        .forEach((reservedShape) => {\n          const incomingShape = shapes[reservedShape.id]\n          if (!incomingShape) return\n\n          // If the shape isn't \"strongly reserved\", then use the incoming shape;\n          // note that this is only if the incoming shape exists! If the shape was\n          // deleted in the incoming shapes, then we'll keep out reserved shape.\n          // This logic would need more work for arrows, because the incoming shape\n          // include a binding change that we'll need to resolve with our reserved bindings.\n          if (\n            !(\n              reservedShape.type === TDShapeType.Arrow ||\n              strongReservedShapeIds.has(reservedShape.id)\n            )\n          ) {\n            shapes[reservedShape.id] = incomingShape\n            return\n          }\n\n          // Only allow certain merges.\n\n          // Allow decorations (of an arrow) to be changed\n          if ('decorations' in incomingShape && 'decorations' in reservedShape) {\n            shapes[reservedShape.id] = { ...reservedShape, decorations: incomingShape.decorations }\n          }\n\n          // Allow the shape's style to be changed\n          reservedShape.style = incomingShape.style\n        })\n\n      // Use the incoming shapes / bindings as comparisons for what\n      // will have changed. This is important because we want to restore\n      // related shapes that may not have changed on our side, but which\n      // were deleted on the server.\n\n      const nextShapes = {\n        ...shapes,\n        ...reservedShapes,\n      }\n\n      if (editingShape) {\n        nextShapes[editingShape.id] = editingShape\n      }\n\n      const nextBindings = {\n        ...bindings,\n        ...reservedBindings,\n      }\n      const nextAssets = {\n        ...assets,\n      }\n\n      const next: TDSnapshot = {\n        ...current,\n        document: {\n          ...current.document,\n          pages: {\n            [pageId]: {\n              ...current.document.pages[pageId],\n              shapes: nextShapes,\n              bindings: nextBindings,\n            },\n          },\n          assets: nextAssets,\n          pageStates: {\n            ...current.document.pageStates,\n            [pageId]: {\n              ...current.document.pageStates[pageId],\n              selectedIds: selectedIds.filter((id) => nextShapes[id] !== undefined),\n              hoveredId: hoveredId\n                ? nextShapes[hoveredId] === undefined\n                  ? undefined\n                  : hoveredId\n                : undefined,\n              editingId: editingId,\n              bindingId: bindingId\n                ? nextBindings[bindingId] === undefined\n                  ? undefined\n                  : bindingId\n                : undefined,\n            },\n          },\n        },\n      }\n      const page = next.document.pages[pageId]\n\n      // Get bindings related to the changed shapes\n      const bindingsToUpdate = TLDR.getRelatedBindings(next, Object.keys(nextShapes), pageId)\n\n      const visitedShapes = new Set<ArrowShape>()\n\n      // Update all of the bindings we've just collected\n      bindingsToUpdate.forEach((binding) => {\n        if (!page.bindings[binding.id]) {\n          return\n        }\n\n        const fromShape = page.shapes[binding.fromId] as ArrowShape\n\n        if (visitedShapes.has(fromShape)) {\n          return\n        }\n\n        // We only need to update the binding's \"from\" shape (an arrow)\n        const fromDelta = TLDR.updateArrowBindings(page, fromShape)\n        visitedShapes.add(fromShape)\n\n        if (fromDelta) {\n          const nextShape = {\n            ...fromShape,\n            ...fromDelta,\n          } as TDShape\n\n          page.shapes[fromShape.id] = nextShape\n        }\n      })\n\n      Object.values(nextShapes).forEach((shape) => {\n        if (shape.type !== TDShapeType.Group) return\n\n        const children = shape.children.filter((id) => page.shapes[id] !== undefined)\n\n        const commonBounds = Utils.getCommonBounds(\n          children\n            .map((id) => page.shapes[id])\n            .filter(Boolean)\n            .map((shape) => TLDR.getRotatedBounds(shape))\n        )\n\n        page.shapes[shape.id] = {\n          ...shape,\n          point: [commonBounds.minX, commonBounds.minY],\n          size: [commonBounds.width, commonBounds.height],\n          children,\n        }\n      })\n\n      this.state.document = next.document\n\n      return next\n    }, true)\n\n    return this\n  }\n\n  /**\n   * Set the current status.\n   * @param status The new status to set.\n   * @private\n   * @returns\n   */\n  setStatus(status: string) {\n    return this.patchState(\n      {\n        appState: { status },\n      },\n      `set_status:${status}`\n    )\n  }\n\n  /**\n   * Update the bounding box when the renderer's bounds change.\n   * @param bounds\n   */\n  updateBounds = (bounds: TLBounds) => {\n    this.rendererBounds = bounds\n    const { point, zoom } = this.camera\n    this.updateViewport(point, zoom)\n\n    if (!this.readOnly && this.session) {\n      this.session.update()\n    }\n  }\n\n  updateViewport = (point: number[], zoom: number) => {\n    const { width, height } = this.rendererBounds\n    const [minX, minY] = Vec.sub(Vec.div([0, 0], zoom), point)\n    const [maxX, maxY] = Vec.sub(Vec.div([width, height], zoom), point)\n\n    this.viewport = {\n      minX,\n      minY,\n      maxX,\n      maxY,\n      width: maxX - minX,\n      height: maxY - minY,\n    }\n  }\n\n  /**\n   * Set or clear the editing id\n   * @param id [string]\n   */\n  setEditingId = (id?: string, isCreating = false) => {\n    if (this.readOnly) return\n\n    if (id) {\n      // Start a new editing session\n      this.startSession(SessionType.Edit, id, isCreating)\n    } else {\n      // If we're clearing the editing id and we don't have one, bail\n      if (!this.pageState.editingId) return\n\n      // If we're clearing the editing id and we do have one, complete the session\n      this.completeSession()\n    }\n\n    this.editingStartTime = performance.now()\n\n    this.patchState(\n      {\n        document: {\n          pageStates: {\n            [this.currentPageId]: {\n              editingId: id,\n            },\n          },\n        },\n      },\n      `set_editing_id`\n    )\n  }\n\n  /**\n   * Set or clear the hovered id\n   * @param id [string]\n   */\n  setHoveredId = (id?: string) => {\n    this.patchState(\n      {\n        document: {\n          pageStates: {\n            [this.currentPageId]: {\n              hoveredId: id,\n            },\n          },\n        },\n      },\n      `set_hovered_id`\n    )\n  }\n\n  /* -------------------------------------------------- */\n  /*                    Settings & UI                   */\n  /* -------------------------------------------------- */\n\n  /**\n   * Set a setting.\n   */\n  setSetting = <T extends keyof TDSnapshot['settings'], V extends TDSnapshot['settings'][T]>(\n    name: T,\n    value: V | ((value: V) => V)\n  ): this => {\n    if (this.session) return this\n\n    const patch = {\n      settings: {\n        [name]: typeof value === 'function' ? value(this.settings[name] as V) : value,\n      },\n    }\n\n    this.patchState(patch, `settings:${name}`)\n\n    this.persist(patch)\n    return this\n  }\n\n  /**\n   * Toggle pen mode.\n   */\n  toggleFocusMode = (): this => {\n    if (this.session) return this\n    const patch = {\n      settings: {\n        isFocusMode: !this.settings.isFocusMode,\n      },\n    }\n\n    this.patchState(patch, `settings:toggled_focus_mode`)\n\n    this.persist(patch)\n    return this\n  }\n\n  /**\n   * Toggle pen mode.\n   */\n  togglePenMode = (): this => {\n    if (this.session) return this\n    const patch = {\n      settings: {\n        isPenMode: !this.settings.isPenMode,\n      },\n    }\n    this.patchState(patch, `settings:toggled_pen_mode`)\n    this.persist(patch)\n    return this\n  }\n\n  /**\n   * Toggle dark mode.\n   */\n  toggleDarkMode = (): this => {\n    if (this.session) return this\n    const patch = { settings: { isDarkMode: !this.settings.isDarkMode } }\n    this.patchState(patch, `settings:toggled_dark_mode`)\n    this.persist(patch)\n    return this\n  }\n\n  /**\n   * Toggle zoom snap.\n   */\n  toggleZoomSnap = () => {\n    if (this.session) return this\n    const patch = { settings: { isZoomSnap: !this.settings.isZoomSnap } }\n    this.patchState(patch, `settings:toggled_zoom_snap`)\n    this.persist(patch)\n    return this\n  }\n\n  /**\n   * Toggle debug mode.\n   */\n  toggleDebugMode = () => {\n    if (this.session) return this\n    const patch = { settings: { isDebugMode: !this.settings.isDebugMode } }\n    this.patchState(patch, `settings:toggled_debug`)\n    this.persist(patch)\n    return this\n  }\n\n  /**\n   * Toggles the state if menu is opened\n   */\n  setMenuOpen = (isOpen: boolean): this => {\n    const patch = { appState: { isMenuOpen: isOpen } }\n    this.patchState(patch, 'ui:toggled_menu_opened')\n    this.persist(patch)\n    return this\n  }\n\n  /**\n   * Toggles the state if something is loading\n   */\n  setIsLoading = (isLoading: boolean): this => {\n    const patch = { appState: { isLoading } }\n    this.patchState(patch, 'ui:toggled_is_loading')\n    this.persist(patch)\n    return this\n  }\n\n  setDisableAssets = (disableAssets: boolean): this => {\n    this.patchState({ appState: { disableAssets } }, 'ui:toggled_disable_images')\n    return this\n  }\n\n  get isMenuOpen(): boolean {\n    return this.appState.isMenuOpen\n  }\n\n  get isLoading(): boolean {\n    return this.appState.isLoading\n  }\n\n  get disableAssets(): boolean {\n    return this.appState.disableAssets\n  }\n\n  /**\n   * Toggle grids.\n   */\n  toggleGrid = (): this => {\n    if (this.session) return this\n    const patch = { settings: { showGrid: !this.settings.showGrid } }\n    this.patchState(patch, 'settings:toggled_grid')\n    this.persist(patch)\n    return this\n  }\n\n  /**\n   * Select a tool.\n   * @param tool The tool to select, or \"select\".\n   */\n  selectTool = (type: TDToolType): this => {\n    if (this.readOnly || this.session) return this\n\n    this.isPointing = false // reset pointer state, in case something weird happened\n\n    const tool = this.tools[type]\n\n    if (tool === this.currentTool) {\n      this.patchState({\n        appState: {\n          isToolLocked: false,\n        },\n      })\n      return this\n    }\n\n    this.currentTool.onExit()\n    tool.previous = this.currentTool.type\n    this.currentTool = tool\n    this.currentTool.onEnter()\n\n    return this.patchState(\n      {\n        appState: {\n          activeTool: type,\n          isToolLocked: false,\n        },\n      },\n      `selected_tool:${type}`\n    )\n  }\n\n  /**\n   * Toggle the tool lock option.\n   */\n  toggleToolLock = (): this => {\n    if (this.session) return this\n    return this.patchState(\n      {\n        appState: {\n          isToolLocked: !this.appState.isToolLocked,\n        },\n      },\n      `toggled_tool_lock`\n    )\n  }\n\n  /* -------------------------------------------------- */\n  /*                      Document                      */\n  /* -------------------------------------------------- */\n\n  /**\n   * Reset the document to a blank state.\n   */\n  resetDocument = (): this => {\n    if (this.session) return this\n    this.session = undefined\n    this.currentTool = this.tools.select\n\n    const doc = TldrawApp.defaultDocument\n\n    // Set the default page name to the localized version of \"Page\"\n    doc.pages['page'].name = 'Page 1'\n\n    this.resetHistory().clearSelectHistory().loadDocument(TldrawApp.defaultDocument).persist({})\n\n    return this\n  }\n\n  /**\n   *\n   * @param document\n   */\n  updateUsers = (users: TDUser[], isOwnUpdate = false) => {\n    this.patchState(\n      {\n        room: {\n          users: Object.fromEntries(users.map((user) => [user.id, user])),\n        },\n      },\n      isOwnUpdate ? 'room:self:update' : 'room:user:update'\n    )\n  }\n\n  removeUser = (userId: string) => {\n    this.patchState({\n      room: {\n        users: {\n          [userId]: undefined,\n        },\n      },\n    })\n  }\n\n  /**\n   * Merge a new document patch into the current document.\n   * @param document\n   */\n  mergeDocument = (document: TDDocument): this => {\n    // If it's a new document, do a full change.\n    if (this.document.id !== document.id) {\n      this.replaceState({\n        ...migrate(\n          {\n            ...this.state,\n            document,\n          },\n          TldrawApp.version\n        ),\n        appState: {\n          ...this.appState,\n          currentPageId: Object.keys(document.pages)[0],\n        },\n      })\n      return this\n    }\n\n    // Have we deleted any pages? If so, drop everything and change\n    // to the first page. This is an edge case.\n    const currentPageStates = { ...this.document.pageStates }\n\n    // Update the app state's current page id if needed\n    const nextAppState = {\n      ...this.appState,\n      currentPageId: document.pages[this.currentPageId]\n        ? this.currentPageId\n        : Object.keys(document.pages)[0],\n      pages: Object.values(document.pages).map((page, i) => ({\n        id: page.id,\n        name: page.name,\n        childIndex: page.childIndex || i,\n      })),\n    }\n\n    // Reset the history (for now)\n    this.resetHistory()\n\n    Object.keys(this.document.pages).forEach((pageId) => {\n      if (!document.pages[pageId]) {\n        if (pageId === this.appState.currentPageId) {\n          this.cancelSession()\n          this.selectNone()\n        }\n\n        currentPageStates[pageId] = undefined as unknown as TLPageState\n      }\n    })\n\n    // Don't allow the selected ids to be deleted during a session\u2014if\n    // they've been removed, put them back in the client's document.\n    if (this.session) {\n      this.selectedIds\n        .filter((id) => !document.pages[this.currentPageId].shapes[id])\n        .forEach((id) => (document.pages[this.currentPageId].shapes[id] = this.page.shapes[id]))\n    }\n\n    // For other pages, remove any selected ids that were deleted.\n    Object.entries(currentPageStates).forEach(([pageId, pageState]) => {\n      pageState.selectedIds = pageState.selectedIds.filter(\n        (id) => !!document.pages[pageId].shapes[id]\n      )\n    })\n\n    // If the user is currently creating a shape (ie drawing), then put that\n    // shape back onto the page for the client.\n    const { editingId } = this.pageState\n\n    if (editingId) {\n      document.pages[this.currentPageId].shapes[editingId] = this.page.shapes[editingId]\n      currentPageStates[this.currentPageId].selectedIds = [editingId]\n    }\n\n    return this.replaceState(\n      {\n        ...migrate(\n          { ...this.state, document: { ...document, pageStates: currentPageStates } },\n          TldrawApp.version\n        ),\n        appState: nextAppState,\n      },\n      'merge'\n    )\n  }\n\n  /**\n   * Update the current document.\n   * @param document\n   */\n  updateDocument = (document: TDDocument, reason = 'updated_document'): this => {\n    const prevState = this.state\n\n    const nextState = {\n      ...prevState,\n      document: {\n        ...prevState.document,\n        assets: document.assets,\n      },\n    }\n\n    if (!document.pages[this.currentPageId]) {\n      nextState.appState = {\n        ...prevState.appState,\n        currentPageId: Object.keys(document.pages)[0],\n      }\n    }\n\n    let i = 1\n\n    for (const nextPage of Object.values(document.pages)) {\n      if (nextPage !== prevState.document.pages[nextPage.id]) {\n        nextState.document.pages[nextPage.id] = nextPage\n\n        if (!nextPage.name) {\n          nextState.document.pages[nextPage.id].name = `Page ${i + 1}`\n          i++\n        }\n      }\n    }\n\n    for (const nextPageState of Object.values(document.pageStates)) {\n      if (nextPageState !== prevState.document.pageStates[nextPageState.id]) {\n        nextState.document.pageStates[nextPageState.id] = nextPageState\n\n        const nextPage = document.pages[nextPageState.id]\n        const keysToCheck = ['bindingId', 'editingId', 'hoveredId', 'pointedId'] as const\n\n        for (const key of keysToCheck) {\n          if (!nextPage.shapes[key]) {\n            nextPageState[key] = undefined\n          }\n        }\n\n        nextPageState.selectedIds = nextPageState.selectedIds.filter(\n          (id) => !!document.pages[nextPage.id].shapes[id]\n        )\n      }\n    }\n\n    return this.replaceState(\n      migrate(nextState, nextState.document.version || 0),\n      `${reason}:${document.id}`\n    )\n  }\n\n  /**\n   * Load a fresh room into the state.\n   * @param roomId\n   */\n  loadRoom = (roomId: string): this => {\n    this.patchState({\n      room: {\n        id: roomId,\n        userId: uuid,\n        users: {\n          [uuid]: {\n            id: uuid,\n            color: USER_COLORS[Math.floor(Math.random() * USER_COLORS.length)],\n            point: [100, 100],\n            selectedIds: [],\n            activeShapes: [],\n          },\n        },\n      },\n    })\n    return this\n  }\n\n  /**\n   * Load a new document.\n   * @param document The document to load\n   */\n  loadDocument = (document: TDDocument): this => {\n    this.setIsLoading(true)\n    this.selectNone()\n    this.resetHistory()\n    this.clearSelectHistory()\n    this.session = undefined\n\n    const state = {\n      ...TldrawApp.defaultState,\n      settings: {\n        ...this.state.settings,\n      },\n      document,\n      appState: {\n        ...TldrawApp.defaultState.appState,\n        ...this.state.appState,\n        currentPageId: Object.keys(document.pages)[0],\n        disableAssets: this.disableAssets,\n      },\n    }\n\n    this.replaceState(migrate(state, TldrawApp.version), 'loaded_document')\n    const { point, zoom } = this.camera\n    this.updateViewport(point, zoom)\n    this.setIsLoading(false)\n    return this\n  }\n\n  /**\n   * load content from URL\n   * @param page\n   * @param pageState\n   * @returns\n   */\n  loadPageFromURL = (page: TDPage, pageState: Record<string, TLPageState>) => {\n    const pageId = page.id\n    const nextDocument = {\n      ...this.state.document,\n      pageStates: {\n        ...this.state.document.pageStates,\n        [pageId]: pageState,\n      },\n      pages: {\n        ...this.document.pages,\n        [pageId]: page,\n      },\n    }\n    this.loadDocument(nextDocument as TDDocument)\n    this.persist({})\n  }\n\n  // Should we move this to the app layer? onSave, onSaveAs, etc?\n\n  /**\n   * Create a new project.\n   */\n  newProject = () => {\n    if (!this.isLocal) return\n    this.fileSystemHandle = null\n    this.resetDocument()\n  }\n\n  /**\n   * Save the current project.\n   */\n  saveProject = async () => {\n    if (this.readOnly) return\n    const fileHandle = await saveToFileSystem(\n      migrate(this.state, TldrawApp.version).document,\n      this.fileSystemHandle\n    )\n    this.fileSystemHandle = fileHandle\n    this.persist({})\n    this.isDirty = false\n    return this\n  }\n\n  /**\n   * Save the current project as a new file.\n   */\n  saveProjectAs = async (filename?: string) => {\n    try {\n      const fileHandle = await saveToFileSystem(this.document, null, filename)\n      this.fileSystemHandle = fileHandle\n      this.persist({})\n      this.isDirty = false\n    } catch (e: any) {\n      // Likely cancelled\n      console.error(e.message)\n    }\n    return this\n  }\n\n  /**\n   * Load a project from the filesystem.\n   * @todo\n   */\n  openProject = async () => {\n    if (!this.isLocal) return\n\n    try {\n      const result = await openFromFileSystem()\n      if (!result) {\n        throw Error()\n      }\n\n      const { fileHandle, document } = result\n      this.loadDocument(document)\n      this.fileSystemHandle = fileHandle\n      this.zoomToFit()\n      this.persist({})\n    } catch (e) {\n      console.error(e)\n    } finally {\n      this.persist({})\n    }\n  }\n\n  /**\n   * Upload media from file\n   */\n  openAsset = async () => {\n    if (!this.disableAssets)\n      try {\n        const file = await openAssetsFromFileSystem()\n        if (Array.isArray(file)) {\n          this.addMediaFromFiles(file, this.centerPoint)\n        } else {\n          if (!file) return\n          this.addMediaFromFiles([file])\n        }\n      } catch (e) {\n        console.error(e)\n      } finally {\n        this.persist({})\n      }\n  }\n\n  /**\n   * Sign out of the current account.\n   * Should move to the www layer.\n   * @todo\n   */\n  signOut = () => {\n    // todo\n  }\n  /* -------------------- Getters --------------------- */\n\n  /**\n   * Get the current app state.\n   */\n  getAppState = (): TDSnapshot['appState'] => {\n    return this.appState\n  }\n\n  /**\n   * Get a page.\n   * @param pageId (optional) The page's id.\n   */\n  getPage = (pageId = this.currentPageId): TDPage => {\n    return TLDR.getPage(this.state, pageId || this.currentPageId)\n  }\n\n  /**\n   * Get the shapes (as an array) from a given page.\n   * @param pageId (optional) The page's id.\n   */\n  getShapes = (pageId = this.currentPageId): TDShape[] => {\n    return TLDR.getShapes(this.state, pageId || this.currentPageId)\n  }\n\n  /**\n   * Get the bindings from a given page.\n   * @param pageId (optional) The page's id.\n   */\n  getBindings = (pageId = this.currentPageId): TDBinding[] => {\n    return TLDR.getBindings(this.state, pageId || this.currentPageId)\n  }\n\n  /**\n   * Get a shape from a given page.\n   * @param id The shape's id.\n   * @param pageId (optional) The page's id.\n   */\n  getShape = <T extends TDShape = TDShape>(id: string, pageId = this.currentPageId): T => {\n    return TLDR.getShape<T>(this.state, id, pageId)\n  }\n\n  /**\n   * Get the bounds of a shape on a given page.\n   * @param id The shape's id.\n   * @param pageId (optional) The page's id.\n   */\n  getShapeBounds = (id: string, pageId = this.currentPageId): TLBounds => {\n    return TLDR.getBounds(this.getShape(id, pageId))\n  }\n\n  /**\n   * Get a binding from a given page.\n   * @param id The binding's id.\n   * @param pageId (optional) The page's id.\n   */\n  getBinding = (id: string, pageId = this.currentPageId): TDBinding => {\n    return TLDR.getBinding(this.state, id, pageId)\n  }\n\n  /**\n   * Get the page state for a given page.\n   * @param pageId (optional) The page's id.\n   */\n  getPageState = (pageId = this.currentPageId): TLPageState => {\n    return TLDR.getPageState(this.state, pageId || this.currentPageId)\n  }\n\n  /**\n   * Turn a screen point into a point on the page.\n   * @param point The screen point\n   * @param pageId (optional) The page to use\n   */\n  getPagePoint = (point: number[], pageId = this.currentPageId): number[] => {\n    const { camera } = this.getPageState(pageId)\n    return Vec.sub(Vec.div(point, camera.zoom), camera.point)\n  }\n\n  /**\n   * Get the current undo/redo stack.\n   */\n  get history() {\n    return this.stack.slice(0, this.pointer + 1)\n  }\n\n  /**\n   * Replace the current history stack.\n   */\n  set history(commands: TldrawCommand[]) {\n    this.replaceHistory(commands)\n  }\n\n  /**\n   * The current document.\n   */\n  get document(): TDDocument {\n    return this.state.document\n  }\n\n  /**\n   * The current app state.\n   */\n  get settings(): TDSnapshot['settings'] {\n    return this.state.settings\n  }\n\n  /**\n   * The current app state.\n   */\n  get appState(): TDSnapshot['appState'] {\n    return this.state.appState\n  }\n\n  /**\n   * The current page id.\n   */\n  get currentPageId(): string {\n    return this.state.appState.currentPageId\n  }\n\n  /**\n   * The current page.\n   */\n  get page(): TDPage {\n    return this.state.document.pages[this.currentPageId]\n  }\n\n  /**\n   * The current page's shapes (as an array).\n   */\n  get shapes(): TDShape[] {\n    return Object.values(this.page.shapes)\n  }\n\n  /**\n   * The current page's bindings.\n   */\n  get bindings(): TDBinding[] {\n    return Object.values(this.page.bindings)\n  }\n\n  /**\n   * The document's assets (as an array).\n   */\n  get assets(): TDAsset[] {\n    return Object.values(this.document.assets)\n  }\n\n  /**\n   * The current page's state.\n   */\n  get pageState(): TLPageState {\n    return this.state.document.pageStates[this.currentPageId]\n  }\n\n  get camera(): {\n    point: number[]\n    zoom: number\n  } {\n    return this.pageState.camera\n  }\n\n  get zoom(): number {\n    return this.pageState.camera.zoom\n  }\n\n  /**\n   * The page's current selected ids.\n   */\n  get selectedIds(): string[] {\n    return this.pageState.selectedIds\n  }\n\n  /* -------------------------------------------------- */\n  /*                        Pages                       */\n  /* -------------------------------------------------- */\n\n  /**\n   * Create a new page.\n   * @param pageId (optional) The new page's id.\n   */\n  createPage = (id?: string, name?: string): this => {\n    if (this.readOnly) return this\n    const { width, height } = this.rendererBounds\n    return this.setState(Commands.createPage(this, [-width / 2, -height / 2], id, name))\n  }\n\n  /**\n   * Change the current page.\n   * @param pageId The new current page's id.\n   */\n  changePage = (pageId: string): this => {\n    return this.setState(Commands.changePage(this, pageId))\n  }\n\n  /**\n   * Move a page above another.\n   * @param pageId The page to move.\n   * @param index The page above which to move.\n   */\n  movePage = (pageId: string, index: number): this => {\n    if (this.readOnly) return this\n\n    return this.setState(Commands.movePage(this, pageId, index))\n  }\n\n  /**\n   * Rename a page.\n   * @param pageId The id of the page to rename.\n   * @param name The page's new name\n   */\n  renamePage = (pageId: string, name: string): this => {\n    if (this.readOnly) return this\n    return this.setState(Commands.renamePage(this, pageId, name))\n  }\n\n  /**\n   * Duplicate a page.\n   * @param pageId The id of the page to duplicate.\n   */\n  duplicatePage = (pageId: string): this => {\n    if (this.readOnly) return this\n    return this.setState(Commands.duplicatePage(this, pageId))\n  }\n\n  /**\n   * Delete a page.\n   * @param pageId The id of the page to delete.\n   */\n  deletePage = (pageId?: string): this => {\n    if (this.readOnly) return this\n    if (Object.values(this.document.pages).length <= 1) return this\n    return this.setState(Commands.deletePage(this, pageId ? pageId : this.currentPageId))\n  }\n\n  /* -------------------------------------------------- */\n  /*                      Clipboard                     */\n  /* -------------------------------------------------- */\n\n  /**\n   * Cut (copy and delete) one or more shapes to the clipboard.\n   * @param ids The ids of the shapes to cut.\n   */\n  cut = (ids = this.selectedIds, e?: ClipboardEvent): this => {\n    e?.preventDefault()\n\n    this.copy(ids, e)\n\n    if (!this.readOnly) {\n      this.delete(ids)\n    }\n\n    return this\n  }\n\n  /**\n   * Copy one or more shapes to the clipboard.\n   * @param ids The ids of the shapes to copy.\n   */\n  copy = (ids = this.selectedIds, e?: ClipboardEvent): this => {\n    // Allow when in readOnly mode\n\n    e?.preventDefault()\n\n    this.clipboard = this.getContent(ids)\n\n    const jsonString = JSON.stringify({\n      type: 'tldr/clipboard',\n      shapes: [],\n      assets: [],\n      bindings: [],\n      ...this.clipboard,\n    })\n\n    const tldrawString = `<tldraw>${jsonString}</tldraw>`\n\n    setClipboard(tldrawString)\n\n    if (e) {\n      e.clipboardData?.setData('text/html', tldrawString)\n    }\n\n    if (navigator.clipboard && window.ClipboardItem) {\n      navigator.clipboard.write([\n        new ClipboardItem({\n          'text/html': new Blob([tldrawString], { type: 'text/html' }),\n        }),\n      ])\n    }\n\n    return this\n  }\n\n  /**\n   * Paste shapes (or text) from clipboard to a certain point.\n   * @param point\n   */\n  paste = async (point?: number[], e?: ClipboardEvent) => {\n    if (this.readOnly) return\n\n    const filesToPaste: File[] = []\n    const shapesToCreate: TDShape[] = []\n\n    let clipboardData: any\n\n    const getSvgFromText = async (text: string) => {\n      const div = document.createElement('div')\n      div.innerHTML = text\n      const svg = div.firstChild as SVGSVGElement\n\n      svg.style.setProperty('background-color', 'transparent')\n\n      const imageBlob = await TLDR.getImageForSvg(svg, TDExportType.SVG, {\n        scale: 1,\n        quality: 1,\n      })\n\n      if (imageBlob) {\n        const file = new File([imageBlob], 'image.svg')\n        filesToPaste.push(file)\n      } else {\n        getShapeFromText(text)\n      }\n    }\n\n    const getShapeFromText = (text: string) => {\n      const pagePoint = this.getPagePoint(point ?? this.centerPoint, this.currentPageId)\n\n      const isMultiline = text.includes('\\n')\n\n      shapesToCreate.push(\n        TLDR.getShapeUtil(TDShapeType.Text).getShape({\n          id: Utils.uniqueId(),\n          type: TDShapeType.Text,\n          parentId: this.appState.currentPageId,\n          text: TLDR.normalizeText(text.trim()),\n          point: pagePoint,\n          style: {\n            ...this.appState.currentStyle,\n            textAlign: isMultiline ? AlignStyle.Start : this.appState.currentStyle.textAlign,\n          },\n        })\n      )\n    }\n\n    const getShapeFromHtml = (html: string) => {\n      try {\n        const maybeJson = html.match(/<tldraw>(.*)<\\/tldraw>/)?.[1]\n\n        if (!maybeJson) return\n\n        const json: {\n          type: string\n          shapes: (TDShape & { text: string })[]\n          bindings: TDBinding[]\n          assets: TDAsset[]\n        } = JSON.parse(maybeJson)\n        if (json.type === 'tldr/clipboard') {\n          clipboardData = json\n          return\n        } else {\n          throw Error('Not tldraw data!')\n        }\n      } catch (e) {\n        getShapeFromText(html)\n      }\n    }\n\n    if (e !== undefined) {\n      const items = Array.from(e.clipboardData?.items ?? [])\n\n      await Promise.all(\n        items.map(async (item) => {\n          const { type, kind } = item\n\n          switch (kind) {\n            case 'string': {\n              const str: string = await new Promise((resolve) => item.getAsString(resolve))\n\n              switch (type) {\n                case 'text/html': {\n                  if (str.match(/<tldraw>(.*)<\\/tldraw>/)?.[1]) {\n                    getShapeFromHtml(str)\n                    return\n                  }\n                  break\n                }\n                case 'text/plain': {\n                  if (str.startsWith('<svg')) {\n                    await getSvgFromText(str)\n                  } else {\n                    getShapeFromText(str)\n                  }\n                  break\n                }\n              }\n\n              break\n            }\n            case 'file': {\n              const file = item.getAsFile()\n              if (file) filesToPaste.push(file)\n              break\n            }\n          }\n        })\n      )\n    }\n\n    if (clipboardData) {\n      this.insertContent(clipboardData, { point, select: true })\n      return this\n    }\n\n    if (filesToPaste.length) {\n      this.addMediaFromFiles(filesToPaste, point)\n      return this\n    }\n\n    if (shapesToCreate.length) {\n      const pagePoint = this.getPagePoint(point ?? this.centerPoint, this.currentPageId)\n\n      const currentPoint = Vec.add(pagePoint, [0, 0])\n\n      shapesToCreate.forEach((shape, i) => {\n        const bounds = TLDR.getBounds(shape)\n\n        if (i === 0) {\n          // For the first shape, offset the current point so\n          // that the first shape's center is at the page point\n          currentPoint[0] -= bounds.width / 2\n          currentPoint[1] -= bounds.height / 2\n        }\n\n        // Set the shape's point the current point\n        shape.point = [...currentPoint]\n\n        // Then bump the page current point by this shape's width\n        currentPoint[0] += bounds.width\n      })\n\n      this.createShapes(...shapesToCreate)\n      return this\n    }\n\n    if (this.clipboard) {\n      // try to get clipboard data from the scene itself\n      this.insertContent(this.clipboard)\n    } else {\n      // last chance to get the clipboard data, is it in storage?\n      getClipboard().then((text) => {\n        if (text) getShapeFromHtml(text)\n      })\n    }\n\n    return this\n  }\n\n  getSvg = async (\n    ids = this.selectedIds.length ? this.selectedIds : Object.keys(this.page.shapes),\n    opts = {} as Partial<{ includeFonts: boolean }>\n  ): Promise<SVGElement | undefined> => {\n    if (ids.length === 0) return\n\n    // Embed our custom fonts\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg')\n    const defs = document.createElementNS('http://www.w3.org/2000/svg', 'defs')\n    const style = document.createElementNS('http://www.w3.org/2000/svg', 'style')\n\n    if (typeof window !== 'undefined') {\n      window.focus() // weird but necessary\n    }\n\n    if (opts.includeFonts) {\n      try {\n        const { fonts } = await fetch(TldrawApp.assetSrc, { mode: 'no-cors' }).then((d) => d.json())\n\n        style.textContent = `\n          @font-face {\n            font-family: 'Caveat Brush';\n            src: url(data:application/x-font-woff;charset=utf-8;base64,${fonts.caveat}) format('woff');\n            font-weight: 500;\n            font-style: normal;\n          }\n          @font-face {\n            font-family: 'Source Code Pro';\n            src: url(data:application/x-font-woff;charset=utf-8;base64,${fonts.source_code_pro}) format('woff');\n            font-weight: 500;\n            font-style: normal;\n          }\n          @font-face {\n            font-family: 'Source Sans Pro';\n            src: url(data:application/x-font-woff;charset=utf-8;base64,${fonts.source_sans_pro}) format('woff');\n            font-weight: 500;\n            font-style: normal;\n          }\n          @font-face {\n            font-family: 'Crimson Pro';\n            src: url(data:application/x-font-woff;charset=utf-8;base64,${fonts.crimson_pro}) format('woff');\n            font-weight: 500;\n            font-style: normal;\n          }\n          `\n      } catch (e) {\n        TLDR.warn('Could not find tldraw-assets.json file.')\n      }\n    } else {\n      style.textContent = `@import url('https://fonts.googleapis.com/css2?family=Caveat+Brush&family=Source+Code+Pro&family=Source+Sans+Pro&family=Crimson+Pro&display=block');`\n    }\n\n    defs.append(style)\n    svg.append(defs)\n\n    // Get the shapes in order\n    const shapes = ids\n      .map((id) => this.getShape(id, this.currentPageId))\n      .sort((a, b) => a.childIndex - b.childIndex)\n\n    // Find their common bounding box. Shapes will be positioned relative to this box\n    const commonBounds = Utils.getCommonBounds(shapes.map(TLDR.getRotatedBounds))\n\n    // A quick routine to get an SVG element for each shape\n    const getSvgElementForShape = (shape: TDShape) => {\n      const util = TLDR.getShapeUtil(shape)\n      const bounds = util.getBounds(shape)\n      const elm = util.getSvgElement(shape, this.settings.isDarkMode)\n\n      if (!elm) return\n\n      // If the element is an image, set the asset src as the xlinkhref\n      if (shape.type === TDShapeType.Image) {\n        elm.setAttribute('xlink:href', this.document.assets[shape.assetId].src)\n      } else if (shape.type === TDShapeType.Video) {\n        elm.setAttribute('xlink:href', this.serializeVideo(shape.id))\n      }\n\n      // Put the element in the correct position relative to the common bounds\n      elm.setAttribute(\n        'transform',\n        `translate(${(SVG_EXPORT_PADDING + shape.point[0] - commonBounds.minX).toFixed(2)}, ${(\n          SVG_EXPORT_PADDING +\n          shape.point[1] -\n          commonBounds.minY\n        ).toFixed(2)}) rotate(${(((shape.rotation || 0) * 180) / Math.PI).toFixed(2)}, ${(\n          bounds.width / 2\n        ).toFixed(2)}, ${(bounds.height / 2).toFixed(2)})`\n      )\n\n      return elm\n    }\n\n    // Assemble the final SVG by iterating through each shape and its children\n    shapes.forEach((shape) => {\n      // The shape is a group! Just add the children.\n      if (shape.children?.length) {\n        // Create a group <g> elm for shape\n        const g = document.createElementNS('http://www.w3.org/2000/svg', 'g')\n\n        // Get the shape's children as elms and add them to the group\n        shape.children.forEach((childId) => {\n          const shape = this.getShape(childId, this.currentPageId)\n          const elm = getSvgElementForShape(shape)\n\n          if (elm) {\n            g.append(elm)\n          }\n        })\n\n        // Add the group elm to the SVG\n        svg.append(g)\n\n        return\n      }\n\n      // Just add the shape's element to the\n      const elm = getSvgElementForShape(shape)\n\n      if (elm) {\n        svg.append(elm)\n      }\n    })\n\n    // Resize the elm to the bounding box\n    svg.setAttribute(\n      'viewBox',\n      [\n        0,\n        0,\n        commonBounds.width + SVG_EXPORT_PADDING * 2,\n        commonBounds.height + SVG_EXPORT_PADDING * 2,\n      ].join(' ')\n    )\n\n    // Clean up the SVG by removing any hidden elements\n    svg.setAttribute('width', (commonBounds.width + SVG_EXPORT_PADDING * 2).toString())\n    svg.setAttribute('height', (commonBounds.height + SVG_EXPORT_PADDING * 2).toString())\n\n    // Set export background\n    const exportBackground: TDExportBackground = this.settings.exportBackground\n    const darkBackground = '#212529'\n    const lightBackground = 'rgb(248, 249, 250)'\n\n    switch (exportBackground) {\n      case TDExportBackground.Auto: {\n        svg.style.setProperty(\n          'background-color',\n          this.settings.isDarkMode ? darkBackground : lightBackground\n        )\n        break\n      }\n      case TDExportBackground.Dark: {\n        svg.style.setProperty('background-color', darkBackground)\n        break\n      }\n      case TDExportBackground.Light: {\n        svg.style.setProperty('background-color', lightBackground)\n        break\n      }\n      case TDExportBackground.Transparent:\n      default: {\n        svg.style.setProperty('background-color', 'transparent')\n        break\n      }\n    }\n\n    svg\n      .querySelectorAll('.tl-fill-hitarea, .tl-stroke-hitarea, .tl-binding-indicator')\n      .forEach((elm) => elm.remove())\n\n    return svg\n  }\n\n  /**\n   * Copy one or more shapes as SVG.\n   * @param ids The ids of the shapes to copy.\n   * @returns A string containing the JSON.\n   */\n  copySvg = async (\n    ids = this.selectedIds.length ? this.selectedIds : Object.keys(this.page.shapes)\n  ) => {\n    if (ids.length === 0) return\n\n    const svg = await this.getSvg(ids)\n\n    if (!svg) return\n\n    const svgString = TLDR.getSvgString(svg, 1)\n\n    this.clipboard = this.getContent(ids)\n\n    const tldrawString = JSON.stringify({\n      type: 'tldr/clipboard',\n      shapes: [],\n      assets: [],\n      bindings: [],\n      ...this.clipboard,\n    })\n\n    if (navigator.clipboard && window.ClipboardItem) {\n      navigator.clipboard.write([\n        new ClipboardItem({\n          'text/html': new Blob([tldrawString], { type: 'text/html' }),\n          'text/plain': new Blob([svgString], { type: 'text/plain' }),\n        }),\n      ])\n    }\n\n    return svgString\n  }\n\n  /**\n   * Get the shapes and bindings for the current selection, if any, or else the current page.\n   *\n   * @param ids The ids of the shapes to get content for.\n   */\n  getContent = (ids?: string[]) => {\n    const page = this.getPage(this.currentPageId)\n\n    // If ids is explicitly empty ([]) return\n    if (ids && ids.length === 0) return\n\n    // If ids was not provided, use the selected ids\n    if (!ids) ids = this.selectedIds\n\n    // If there are no selected ids, use all the page's shape ids\n    if (ids.length === 0) ids = Object.keys(page.shapes)\n\n    // If the page was empty, return\n    if (ids.length === 0) return\n\n    const shapes = ids\n      .map((id) => page.shapes[id])\n      .flatMap((shape) => [shape, ...(shape.children ?? []).map((childId) => page.shapes[childId])])\n      .map(deepCopy)\n\n    const idsSet = new Set(shapes.map((s) => s.id))\n\n    shapes.forEach((shape) => {\n      if (shape.parentId === this.currentPageId) {\n        shape.parentId = 'currentPageId'\n      }\n    })\n\n    // If a binding's from and to are included, then include the binding;\n    // but if only one shape is included, discard the binding\n    const bindings = Object.values(page.bindings)\n      .filter((binding) => {\n        if (idsSet.has(binding.fromId) || idsSet.has(binding.toId)) {\n          return true\n        }\n\n        if (idsSet.has(binding.fromId)) {\n          const shape = shapes.find((s) => s.id === binding.fromId)\n          const handles = shape!.handles\n          if (handles) {\n            Object.values(handles).forEach((handle) => {\n              if (handle!.bindingId === binding.id) {\n                handle!.bindingId = undefined\n              }\n            })\n          }\n        }\n\n        if (idsSet.has(binding.toId)) {\n          const shape = shapes.find((s) => s.id === binding.toId)\n          const handles = shape!.handles\n          if (handles) {\n            Object.values(handles).forEach((handle) => {\n              if (handle!.bindingId === binding.id) {\n                handle!.bindingId = undefined\n              }\n            })\n          }\n        }\n\n        return false\n      })\n      .map(deepCopy)\n\n    const assets = [\n      ...new Set(\n        shapes\n          .map((shape) => {\n            if (!shape.assetId) return\n            return this.document.assets[shape.assetId]\n          })\n          .filter(Boolean)\n          .map(deepCopy)\n      ),\n    ] as TDAsset[]\n\n    return { shapes, bindings, assets }\n  }\n\n  /**\n   * Copy one or more shapes as JSON.\n   * @param ids The ids of the shapes to copy.\n   * @returns A string containing the JSON.\n   */\n  copyJson = (ids = this.selectedIds) => {\n    const content = this.getContent(ids)\n\n    if (content) {\n      TLDR.copyStringToClipboard(JSON.stringify(content))\n    }\n\n    return this\n  }\n\n  /**\n   * Export one or more shapes as JSON.\n   * @param ids The ids of the shapes to copy from the current page.\n   * @returns A string containing the JSON.\n   */\n  exportJson = (ids = this.selectedIds) => {\n    const content = this.getContent(ids)\n\n    if (content) {\n      const blob = new Blob([JSON.stringify(content)], { type: 'application/json' })\n      const url = URL.createObjectURL(blob)\n      const link = document.createElement('a')\n      link.href = url\n      link.download = `export.json`\n      link.click()\n    }\n\n    return this\n  }\n\n  /**\n   * Insert content.\n   *\n   * @param content The content to insert.\n   * @param content.shapes An array of TDShape objects.\n   * @param content.bindings (optional) An array of TDBinding objects.\n   * @param content.assets (optional) An array of TDAsset objects.\n   * @param opts (optional) An options object\n   * @param opts.point (optional) A point at which to paste the content.\n   * @param opts.select (optional) When true, the inserted shapes will be selected. Defaults to false.\n   * @param opts.overwrite (optional) When true, the inserted shapes and bindings will overwrite any existing shapes and bindings. Defaults to false.\n   */\n  insertContent = (\n    content: { shapes: TDShape[]; bindings?: TDBinding[]; assets?: TDAsset[] },\n    opts = {} as { point?: number[]; select?: boolean; overwrite?: boolean }\n  ) => {\n    return this.setState(Commands.insertContent(this, content, opts), 'insert_content')\n  }\n\n  /**\n   * Get an image of the selected shapes.\n   *\n   * @param format The format to export the image as.\n   * @param opts (optional) An object containing options for the image.\n   * @param opts.ids (optional) The ids of the shapes (on the current page) to get an image for.\n   * @param opts.scale (optional) The id of the page from which to get an image.\n   * @param opts.quality (optional) The quality (between 0 and 1) for the image if lossy format.\n   */\n  getImage = async (\n    format: Exclude<TDExportType, TDExportType.JSON> = TDExportType.PNG,\n    opts = {} as Partial<{\n      ids: string[]\n      scale: number\n      quality: number\n      transparentBackground: boolean\n    }>\n  ): Promise<Blob | undefined> => {\n    const { ids = this.selectedIds.length ? this.selectedIds : Object.keys(this.page.shapes) } =\n      opts\n\n    const svg = await this.getSvg(ids, {\n      includeFonts: format !== TDExportType.SVG,\n    })\n\n    if (!svg) return\n\n    if (format === TDExportType.SVG) {\n      const svgString = TLDR.getSvgString(svg, 1)\n      const blob = new Blob([svgString], { type: 'image/svg+xml' })\n      return blob\n    }\n\n    const imageBlob = await TLDR.getImageForSvg(svg, format, opts)\n\n    if (!imageBlob) return\n\n    return imageBlob\n  }\n\n  /**\n   * Copy an image of the selected shapes.\n   *\n   * @param format The format to export the image as.\n   * @param opts (optional) An object containing options for the image.\n   * @param opts.ids (optional) The ids of the shapes (on the current page) to get an image for.\n   * @param opts.scale (optional) The id of the page from which to get an image.\n   * @param opts.quality (optional) The quality (between 0 and 1) for the image if lossy format.\n   */\n  copyImage = async (\n    format: TDExportType.PNG | TDExportType.SVG = TDExportType.PNG,\n    opts = {} as Partial<{\n      ids: string[]\n      scale: number\n      quality: number\n      transparentBackground: boolean\n    }>\n  ) => {\n    if (format === TDExportType.SVG) {\n      this.copySvg(opts.ids)\n      return\n    }\n\n    if (!(navigator.clipboard && window.ClipboardItem)) {\n      console.warn('Sorry, your browser does not support copying images.')\n      return\n    }\n\n    const blob = await this.getImage(format, opts)\n\n    if (!blob) return\n\n    navigator.clipboard.write([\n      new ClipboardItem({\n        [blob.type]: blob,\n      }),\n    ])\n  }\n\n  exportImage = async (\n    format: Exclude<TDExportType, TDExportType.JSON> = TDExportType.PNG,\n    opts = {} as Partial<{\n      ids: string[]\n      pageId: string\n      scale: number\n      quality: number\n    }>\n  ) => {\n    const { pageId = this.currentPageId } = opts\n\n    const blob = await this.getImage(format, opts)\n\n    if (!blob) return\n\n    const name = this.document.pages[pageId].name ?? 'export'\n\n    if (this.callbacks.onExport) {\n      this.callbacks.onExport(this, {\n        name,\n        type: format,\n        blob,\n      })\n    } else {\n      const url = URL.createObjectURL(blob)\n      const link = document.createElement('a')\n      link.href = url\n      link.download = `${name}.${format}`\n      link.click()\n    }\n  }\n\n  /* -------------------------------------------------- */\n  /*                       Camera                       */\n  /* -------------------------------------------------- */\n\n  /**\n   * Set the camera to a specific point and zoom.\n   * @param point The camera point (top left of the viewport).\n   * @param zoom The zoom level.\n   * @param reason Why did the camera change?\n   */\n  setCamera = (point: number[], zoom: number, reason: string): this => {\n    this.updateViewport(point, zoom)\n    this.patchState(\n      {\n        document: {\n          pageStates: {\n            [this.currentPageId]: { camera: { point, zoom } },\n          },\n        },\n      },\n      reason\n    )\n    return this\n  }\n\n  /**\n   * Reset the camera to the default position\n   */\n  resetCamera = (): this => {\n    return this.setCamera(this.centerPoint, 1, `reset_camera`)\n  }\n\n  /**\n   * Pan the camera\n   * @param delta\n   */\n  pan = (delta: number[]): this => {\n    const { camera } = this.pageState\n    return this.setCamera(Vec.toFixed(Vec.sub(camera.point, delta)), camera.zoom, `panned`)\n  }\n\n  /**\n   * Pinch to a new zoom level, possibly together with a pan.\n   * @param point The current point under the cursor.\n   * @param delta The movement delta.\n   * @param zoomDelta The zoom detal\n   */\n  pinchZoom = (point: number[], delta: number[], zoom: number): this => {\n    const { camera } = this.pageState\n    const nextPoint = Vec.sub(camera.point, Vec.div(delta, camera.zoom))\n    const nextZoom = zoom\n    const p0 = Vec.sub(Vec.div(point, camera.zoom), nextPoint)\n    const p1 = Vec.sub(Vec.div(point, nextZoom), nextPoint)\n    return this.setCamera(\n      Vec.toFixed(Vec.add(nextPoint, Vec.sub(p1, p0))),\n      nextZoom,\n      `pinch_zoomed`\n    )\n  }\n\n  /**\n   * Zoom to a new zoom level, keeping the point under the cursor in the same position\n   * @param next The new zoom level.\n   * @param center The point to zoom towards (defaults to screen center).\n   */\n  zoomTo = (next: number, center = this.centerPoint): this => {\n    const { zoom, point } = this.camera\n    const p0 = Vec.sub(Vec.div(center, zoom), point)\n    const p1 = Vec.sub(Vec.div(center, next), point)\n    return this.setCamera(Vec.toFixed(Vec.add(point, Vec.sub(p1, p0))), next, `zoomed_camera`)\n  }\n\n  /**\n   * Zoom out by 25%\n   */\n  zoomIn = (): this => {\n    const i = Math.round((this.camera.zoom * 100) / 25)\n    const nextZoom = TLDR.getCameraZoom((i + 1) * 0.25)\n    return this.zoomTo(nextZoom)\n  }\n\n  /**\n   * Zoom in by 25%.\n   */\n  zoomOut = (): this => {\n    const i = Math.round((this.camera.zoom * 100) / 25)\n    const nextZoom = TLDR.getCameraZoom((i - 1) * 0.25)\n    return this.zoomTo(nextZoom)\n  }\n\n  /**\n   * Zoom to fit the page's shapes.\n   */\n  zoomToFit = (): this => {\n    const {\n      shapes,\n      pageState: { camera },\n    } = this\n    if (shapes.length === 0) return this\n    const { rendererBounds } = this\n    const commonBounds = Utils.getCommonBounds(shapes.map(TLDR.getBounds))\n    let zoom = TLDR.getCameraZoom(\n      Math.min(\n        (rendererBounds.width - FIT_TO_SCREEN_PADDING) / commonBounds.width,\n        (rendererBounds.height - FIT_TO_SCREEN_PADDING) / commonBounds.height\n      )\n    )\n    zoom = camera.zoom === zoom || camera.zoom < 1 ? Math.min(1, zoom) : zoom\n    const mx = (rendererBounds.width - commonBounds.width * zoom) / 2 / zoom\n    const my = (rendererBounds.height - commonBounds.height * zoom) / 2 / zoom\n    return this.setCamera(\n      Vec.toFixed(Vec.sub([mx, my], [commonBounds.minX, commonBounds.minY])),\n      zoom,\n      `zoomed_to_fit`\n    )\n  }\n\n  /**\n   * Zoom to the selected shapes.\n   */\n  zoomToSelection = (): this => {\n    if (this.selectedIds.length === 0) return this\n\n    const { rendererBounds } = this\n    const selectedBounds = TLDR.getSelectedBounds(this.state)\n\n    let zoom = TLDR.getCameraZoom(\n      Math.min(\n        (rendererBounds.width - FIT_TO_SCREEN_PADDING) / selectedBounds.width,\n        (rendererBounds.height - FIT_TO_SCREEN_PADDING) / selectedBounds.height\n      )\n    )\n\n    zoom = this.camera.zoom === zoom || this.camera.zoom < 1 ? Math.min(1, zoom) : zoom\n\n    const mx = (rendererBounds.width - selectedBounds.width * zoom) / 2 / zoom\n    const my = (rendererBounds.height - selectedBounds.height * zoom) / 2 / zoom\n\n    return this.setCamera(\n      Vec.toFixed(Vec.sub([mx, my], [selectedBounds.minX, selectedBounds.minY])),\n      zoom,\n      `zoomed_to_selection`\n    )\n  }\n\n  /**\n   * Zoom back to content when the canvas is empty.\n   */\n  zoomToContent = (): this => {\n    const shapes = this.shapes\n    const pageState = this.pageState\n\n    if (shapes.length === 0) return this\n\n    const { rendererBounds } = this\n    const { zoom } = pageState.camera\n    const commonBounds = Utils.getCommonBounds(shapes.map(TLDR.getBounds))\n\n    const mx = (rendererBounds.width - commonBounds.width * zoom) / 2 / zoom\n    const my = (rendererBounds.height - commonBounds.height * zoom) / 2 / zoom\n\n    return this.setCamera(\n      Vec.toFixed(Vec.sub([mx, my], [commonBounds.minX, commonBounds.minY])),\n      this.camera.zoom,\n      `zoomed_to_content`\n    )\n  }\n\n  /**\n   * Zoom the camera to 100%.\n   */\n  resetZoom = (): this => {\n    return this.zoomTo(1)\n  }\n\n  /**\n   * Zoom the camera by a certain delta.\n   * @param delta The zoom delta.\n   * @param center The point to zoom toward.\n   */\n  zoomBy = Utils.throttle((delta: number, center?: number[]): this => {\n    const { zoom } = this.camera\n    const nextZoom = TLDR.getCameraZoom(zoom - delta * zoom)\n    return this.zoomTo(nextZoom, center)\n  }, 16)\n\n  /* -------------------------------------------------- */\n  /*                      Selection                     */\n  /* -------------------------------------------------- */\n\n  /**\n   * Clear the selection history (undo/redo stack for selection).\n   */\n  private clearSelectHistory = (): this => {\n    this.selectHistory.pointer = 0\n    this.selectHistory.stack = [this.selectedIds]\n    return this\n  }\n\n  /**\n   * Adds a selection to the selection history (undo/redo stack for selection).\n   */\n  private addToSelectHistory = (ids: string[]): this => {\n    if (this.selectHistory.pointer < this.selectHistory.stack.length) {\n      this.selectHistory.stack = this.selectHistory.stack.slice(0, this.selectHistory.pointer + 1)\n    }\n    this.selectHistory.pointer++\n    this.selectHistory.stack.push(ids)\n    return this\n  }\n\n  /**\n   * Set the current selection.\n   * @param ids The ids to select\n   * @param push Whether to add the ids to the current selection instead.\n   */\n  private setSelectedIds = (ids: string[], push = false): this => {\n    const nextIds = push ? [...this.pageState.selectedIds, ...ids] : [...ids]\n\n    return this.patchState(\n      {\n        appState: {\n          activeTool: 'select',\n        },\n        document: {\n          pageStates: {\n            [this.currentPageId]: {\n              selectedIds: nextIds,\n            },\n          },\n        },\n      },\n      `selected`\n    )\n  }\n\n  /**\n   * Undo the most recent selection.\n   */\n  undoSelect = (): this => {\n    if (this.selectHistory.pointer > 0) {\n      this.selectHistory.pointer--\n      this.setSelectedIds(this.selectHistory.stack[this.selectHistory.pointer])\n    }\n    return this\n  }\n\n  /**\n   * Redo the previous selection.\n   */\n  redoSelect = (): this => {\n    if (this.selectHistory.pointer < this.selectHistory.stack.length - 1) {\n      this.selectHistory.pointer++\n      this.setSelectedIds(this.selectHistory.stack[this.selectHistory.pointer])\n    }\n    return this\n  }\n\n  /**\n   * Select one or more shapes.\n   * @param ids The shape ids to select.\n   */\n  select = (...ids: string[]): this => {\n    ids.forEach((id) => {\n      if (!this.page.shapes[id]) {\n        throw Error(`That shape does not exist on page ${this.currentPageId}`)\n      }\n    })\n    this.setSelectedIds(ids)\n    this.addToSelectHistory(ids)\n    return this\n  }\n\n  /**\n   * Select all shapes on the page.\n   */\n  selectAll = (pageId = this.currentPageId): this => {\n    if (this.session) return this\n\n    // Select only shapes that are the direct child of the page\n    this.setSelectedIds(\n      Object.values(this.document.pages[pageId].shapes)\n        .filter((shape) => shape.parentId === pageId)\n        .map((shape) => shape.id)\n    )\n\n    this.addToSelectHistory(this.selectedIds)\n\n    this.selectTool('select')\n\n    return this\n  }\n\n  /**\n   * Deselect any selected shapes.\n   */\n  selectNone = (): this => {\n    this.setSelectedIds([])\n    this.addToSelectHistory(this.selectedIds)\n    return this\n  }\n\n  /* -------------------------------------------------- */\n  /*                      Sessions                 p      */\n  /* -------------------------------------------------- */\n\n  /**\n   * Start a new session.\n   * @param type The session type\n   * @param args arguments of the session's start method.\n   */\n  startSession = <T extends SessionType>(type: T, ...args: SessionArgsOfType<T>): this => {\n    if (this.readOnly && type !== SessionType.Brush) return this\n\n    if (this.session) {\n      TLDR.warn(`Already in a session! (${this.session.constructor.name})`)\n      this.cancelSession()\n    }\n\n    const Session = getSession(type) as any\n    this.session = new Session(this, ...args)\n\n    const result = this.session!.start()\n\n    if (result) {\n      this.patchState(result, `session:start_${this.session!.constructor.name}`)\n    }\n\n    this.callbacks.onSessionStart?.(this, this.session!.constructor.name)\n\n    return this\n    // return this.setStatus(this.session.status)\n  }\n\n  /**\n   * updateSession.\n   * @param args The arguments of the current session's update method.\n   */\n  updateSession = (): this => {\n    const { session } = this\n    if (!session) return this\n\n    // @ts-ignore\n    const patch = session.update()\n    if (!patch) return this\n    return this.patchState(patch, `session:${session?.constructor.name}`)\n  }\n\n  /**\n   * Cancel the current session.\n   * @param args The arguments of the current session's cancel method.\n   */\n  cancelSession = (): this => {\n    const { session } = this\n    if (!session) return this\n    this.session = undefined\n\n    const result = session.cancel()\n\n    if (result) {\n      this.patchState(result, `session:cancel:${session.constructor.name}`)\n    }\n\n    this.setEditingId()\n\n    this.callbacks.onSessionEnd?.(this, session.constructor.name)\n\n    return this\n  }\n\n  /**\n   * Complete the current session.\n   * @param args The arguments of the current session's complete method.\n   */\n  completeSession = (): this => {\n    const { session } = this\n\n    if (!session) return this\n\n    this.session = undefined\n    const result = session.complete()\n\n    if (result === undefined) {\n      this.isCreating = false\n\n      this.patchState(\n        {\n          appState: {\n            status: TDStatus.Idle,\n          },\n          document: {\n            pageStates: {\n              [this.currentPageId]: {\n                editingId: undefined,\n                bindingId: undefined,\n                hoveredId: undefined,\n              },\n            },\n          },\n        },\n        `session:complete:${session.constructor.name}`\n      )\n    } else if ('after' in result) {\n      // Session ended with a command\n\n      if (this.isCreating) {\n        // We're currently creating a shape. Override the command's\n        // before state so that when we undo the command, we remove\n        // the shape we just created.\n\n        result.before = {\n          appState: {\n            ...result.before.appState,\n            status: TDStatus.Idle,\n          },\n          document: {\n            pages: {\n              [this.currentPageId]: {\n                shapes: Object.fromEntries(this.selectedIds.map((id) => [id, undefined])),\n              },\n            },\n            pageStates: {\n              [this.currentPageId]: {\n                selectedIds: [],\n                editingId: null,\n                bindingId: null,\n                hoveredId: null,\n              },\n            },\n          },\n        }\n\n        if (this.appState.isToolLocked) {\n          const pageState = result.after?.document?.pageStates?.[this.currentPageId] || {}\n          pageState.selectedIds = []\n        }\n\n        this.isCreating = false\n      }\n\n      result.after.appState = {\n        ...result.after.appState,\n        status: TDStatus.Idle,\n      }\n\n      result.after.document = {\n        ...result.after.document,\n        pageStates: {\n          ...result.after.document?.pageStates,\n          [this.currentPageId]: {\n            ...(result.after.document?.pageStates || {})[this.currentPageId],\n            editingId: null,\n          },\n        },\n      }\n\n      this.setState(result, `session:complete:${session.constructor.name}`)\n    } else {\n      this.patchState(\n        {\n          ...result,\n          appState: {\n            ...result.appState,\n            status: TDStatus.Idle,\n          },\n          document: {\n            ...result.document,\n            pageStates: {\n              [this.currentPageId]: {\n                ...result.document?.pageStates?.[this.currentPageId],\n                editingId: null,\n              },\n            },\n          },\n        },\n        `session:complete:${session.constructor.name}`\n      )\n    }\n\n    this.callbacks.onSessionEnd?.(this, session.constructor.name)\n\n    return this\n  }\n\n  /* -------------------------------------------------- */\n  /*                   Shape Functions                  */\n  /* -------------------------------------------------- */\n\n  /**\n   * Manually create shapes on the page.\n   * @param shapes An array of shape partials, containing the initial props for the shapes.\n   * @command\n   */\n  createShapes = (...shapes: ({ id: string; type: TDShapeType } & Partial<TDShape>)[]): this => {\n    if (shapes.length === 0) return this\n\n    return this.create(\n      shapes.map((shape) => {\n        return TLDR.getShapeUtil(shape.type).create({\n          parentId: this.currentPageId,\n          ...shape,\n        })\n      })\n    )\n  }\n\n  /**\n   * Manually update a set of shapes.\n   * @param shapes An array of shape partials, containing the changes to be made to each shape.\n   * @command\n   */\n  updateShapes = (...shapes: ({ id: string } & Partial<TDShape>)[]): this => {\n    const pageShapes = this.document.pages[this.currentPageId].shapes\n    const shapesToUpdate = shapes.filter((shape) => pageShapes[shape.id])\n    if (shapesToUpdate.length === 0) return this\n    return this.setState(\n      Commands.updateShapes(this, shapesToUpdate, this.currentPageId),\n      'updated_shapes'\n    )\n  }\n\n  createTextShapeAtPoint(point: number[], id?: string, patch?: boolean): this {\n    const {\n      shapes,\n      appState: { currentPageId, currentStyle },\n    } = this\n\n    const childIndex =\n      shapes.length === 0\n        ? 1\n        : shapes\n            .filter((shape) => shape.parentId === currentPageId)\n            .sort((a, b) => b.childIndex - a.childIndex)[0].childIndex + 1\n\n    const Text = shapeUtils[TDShapeType.Text]\n\n    const newShape = Text.create({\n      id: id || Utils.uniqueId(),\n      parentId: currentPageId,\n      childIndex,\n      point,\n      style: { ...currentStyle },\n    })\n\n    const bounds = Text.getBounds(newShape)\n    newShape.point = Vec.sub(newShape.point, [bounds.width / 2, bounds.height / 2])\n\n    if (patch) {\n      this.patchCreate([TLDR.getShapeUtil(newShape.type).create(newShape)])\n    } else {\n      this.createShapes(newShape)\n    }\n\n    this.setEditingId(newShape.id, true)\n\n    return this\n  }\n\n  getImageOrVideoShapeAtPoint(\n    id: string,\n    type: TDShapeType.Image | TDShapeType.Video,\n    point: number[],\n    size: number[],\n    assetId: string\n  ) {\n    const {\n      shapes,\n      appState: { currentPageId, currentStyle },\n    } = this\n\n    const childIndex =\n      shapes.length === 0\n        ? 1\n        : shapes\n            .filter((shape) => shape.parentId === currentPageId)\n            .sort((a, b) => b.childIndex - a.childIndex)[0].childIndex + 1\n\n    const Shape = shapeUtils[type]\n\n    // Ensure that the pasted shape fits inside of the current viewport\n\n    if (size[0] > this.viewport.width) {\n      const r = size[1] / size[0]\n      size[0] = this.viewport.width - (FIT_TO_SCREEN_PADDING / this.camera.zoom) * 2\n      size[1] = size[0] * r\n      if (size[1] < 32 || size[1] < 32) {\n        size[1] = 32\n        size[0] = size[1] / r\n      }\n    } else if (size[1] > this.viewport.height) {\n      const r = size[0] / size[1]\n      size[1] = this.viewport.height - (FIT_TO_SCREEN_PADDING / this.camera.zoom) * 2\n      size[0] = size[1] * r\n      if (size[1] < 32 || size[1] < 32) {\n        size[0] = 32\n        size[1] = size[0] / r\n      }\n    }\n\n    const newShape = Shape.create({\n      id,\n      parentId: currentPageId,\n      childIndex,\n      point,\n      size,\n      style: { ...currentStyle },\n      assetId,\n    })\n\n    return newShape\n  }\n\n  /**\n   * Create one or more shapes.\n   * @param shapes An array of shapes.\n   * @command\n   */\n  create = (shapes: TDShape[] = [], bindings: TDBinding[] = []): this => {\n    if (shapes.length === 0) return this\n    return this.setState(Commands.createShapes(this, shapes, bindings))\n  }\n\n  /**\n   * Patch in a new set of shapes\n   * @param shapes\n   * @param bindings\n   */\n  patchCreate = (shapes: TDShape[] = [], bindings: TDBinding[] = []): this => {\n    if (shapes.length === 0) return this\n    return this.patchState(Commands.createShapes(this, shapes, bindings).after)\n  }\n\n  /**\n   * Delete one or more shapes.\n   * @param ids The ids of the shapes to delete.\n   * @command\n   */\n  delete = (ids = this.selectedIds): this => {\n    if (ids.length === 0) return this\n\n    if (this.session) return this\n    const drawCommand = Commands.deleteShapes(this, ids)\n\n    if (\n      this.callbacks.onAssetDelete &&\n      drawCommand.before.document?.assets &&\n      drawCommand.after.document?.assets\n    ) {\n      const beforeAssetIds = Object.keys(drawCommand.before.document.assets).filter(\n        (k) => !!drawCommand.before.document!.assets![k]\n      )\n      const afterAssetIds = Object.keys(drawCommand.after.document.assets).filter(\n        (k) => !!drawCommand.after.document!.assets![k]\n      )\n\n      const intersection = beforeAssetIds.filter((x) => !afterAssetIds.includes(x))\n      intersection.forEach((id) => this.callbacks.onAssetDelete!(this, id))\n    }\n\n    return this.setState(drawCommand)\n  }\n\n  /**\n   * Delete all shapes on the page.\n   */\n  deleteAll = (): this => {\n    this.selectAll()\n    this.delete()\n    return this\n  }\n\n  /**\n   * Change the style for one or more shapes.\n   * @param style A style partial to apply to the shapes.\n   * @param ids The ids of the shapes to change (defaults to selection).\n   */\n  style = (style: Partial<ShapeStyles>, ids = this.selectedIds): this => {\n    return this.setState(Commands.styleShapes(this, ids, style))\n  }\n\n  /**\n   * Align one or more shapes.\n   * @param direction Whether to align horizontally or vertically.\n   * @param ids The ids of the shapes to change (defaults to selection).\n   */\n  align = (type: AlignType, ids = this.selectedIds): this => {\n    if (ids.length < 2) return this\n    return this.setState(Commands.alignShapes(this, ids, type))\n  }\n\n  /**\n   * Distribute one or more shapes.\n   * @param direction Whether to distribute horizontally or vertically..\n   * @param ids The ids of the shapes to change (defaults to selection).\n   */\n  distribute = (direction: DistributeType, ids = this.selectedIds): this => {\n    if (ids.length < 3) return this\n    return this.setState(Commands.distributeShapes(this, ids, direction))\n  }\n\n  /**\n   * Stretch one or more shapes to their common bounds.\n   * @param direction Whether to stretch horizontally or vertically.\n   * @param ids The ids of the shapes to change (defaults to selection).\n   */\n  stretch = (direction: StretchType, ids = this.selectedIds): this => {\n    if (ids.length < 2) return this\n    return this.setState(Commands.stretchShapes(this, ids, direction))\n  }\n\n  /**\n   * Flip one or more shapes horizontally.\n   * @param ids The ids of the shapes to change (defaults to selection).\n   */\n  flipHorizontal = (ids = this.selectedIds): this => {\n    if (ids.length === 0) return this\n    return this.setState(Commands.flipShapes(this, ids, FlipType.Horizontal))\n  }\n\n  /**\n   * Flip one or more shapes vertically.\n   * @param ids The ids of the shapes to change (defaults to selection).\n   */\n  flipVertical = (ids = this.selectedIds): this => {\n    if (ids.length === 0) return this\n    return this.setState(Commands.flipShapes(this, ids, FlipType.Vertical))\n  }\n\n  /**\n   * Move one or more shapes to a new page. Will also break or move bindings.\n   * @param toPageId The id of the page to move the shapes to.\n   * @param fromPageId The id of the page to move the shapes from (defaults to current page).\n   * @param ids The ids of the shapes to move (defaults to selection).\n   */\n  moveToPage = (\n    toPageId: string,\n    fromPageId = this.currentPageId,\n    ids = this.selectedIds\n  ): this => {\n    if (ids.length === 0) return this\n    const { rendererBounds } = this\n    this.setState(Commands.moveShapesToPage(this, ids, rendererBounds, fromPageId, toPageId))\n    return this\n  }\n\n  /**\n   * Move one or more shapes to the back of the page.\n   * @param ids The ids of the shapes to change (defaults to selection).\n   */\n  moveToBack = (ids = this.selectedIds): this => {\n    if (ids.length === 0) return this\n    return this.setState(Commands.reorderShapes(this, ids, MoveType.ToBack))\n  }\n\n  /**\n   * Move one or more shapes backward on of the page.\n   * @param ids The ids of the shapes to change (defaults to selection).\n   */\n  moveBackward = (ids = this.selectedIds): this => {\n    if (ids.length === 0) return this\n    return this.setState(Commands.reorderShapes(this, ids, MoveType.Backward))\n  }\n\n  /**\n   * Move one or more shapes forward on the page.\n   * @param ids The ids of the shapes to change (defaults to selection).\n   */\n  moveForward = (ids = this.selectedIds): this => {\n    if (ids.length === 0) return this\n    return this.setState(Commands.reorderShapes(this, ids, MoveType.Forward))\n  }\n\n  /**\n   * Move one or more shapes to the front of the page.\n   * @param ids The ids of the shapes to change (defaults to selection).\n   */\n  moveToFront = (ids = this.selectedIds): this => {\n    if (ids.length === 0) return this\n    return this.setState(Commands.reorderShapes(this, ids, MoveType.ToFront))\n  }\n\n  /**\n   * Nudge one or more shapes in a direction.\n   * @param delta The direction to nudge the shapes.\n   * @param isMajor Whether this is a major (i.e. shift) nudge.\n   * @param ids The ids to change (defaults to selection).\n   */\n  nudge = (delta: number[], isMajor = false, ids = this.selectedIds): this => {\n    if (ids.length === 0) return this\n    const size = isMajor\n      ? this.settings.showGrid\n        ? this.currentGrid * 4\n        : 10\n      : this.settings.showGrid\n      ? this.currentGrid\n      : 1\n\n    return this.setState(Commands.translateShapes(this, ids, Vec.mul(delta, size)))\n  }\n\n  /**\n   * Duplicate one or more shapes.\n   * @param ids The ids to duplicate (defaults to selection).\n   */\n  duplicate = (ids = this.selectedIds, point?: number[]): this => {\n    if (this.readOnly) return this\n    if (ids.length === 0) return this\n    return this.setState(Commands.duplicateShapes(this, ids, point))\n  }\n\n  /**\n   * Reset the bounds for one or more shapes. Usually when the\n   * bounding box of a shape is double-clicked. Different shapes may\n   * handle this differently.\n   * @param ids The ids to change (defaults to selection).\n   */\n  resetBounds = (ids = this.selectedIds): this => {\n    const command = Commands.resetBounds(this, ids, this.currentPageId)\n    return this.setState(Commands.resetBounds(this, ids, this.currentPageId), command.id)\n  }\n\n  /**\n   * Toggle the hidden property of one or more shapes.\n   * @param ids The ids to change (defaults to selection).\n   */\n  toggleHidden = (ids = this.selectedIds): this => {\n    if (ids.length === 0) return this\n    return this.setState(Commands.toggleShapeProp(this, ids, 'isHidden'))\n  }\n\n  /**\n   * Toggle the locked property of one or more shapes.\n   * @param ids The ids to change (defaults to selection).\n   */\n  toggleLocked = (ids = this.selectedIds): this => {\n    if (ids.length === 0) return this\n    return this.setState(Commands.toggleShapeProp(this, ids, 'isLocked'))\n  }\n\n  /**\n   * Toggle the fixed-aspect-ratio property of one or more shapes.\n   * @param ids The ids to change (defaults to selection).\n   */\n  toggleAspectRatioLocked = (ids = this.selectedIds): this => {\n    if (ids.length === 0) return this\n    return this.setState(Commands.toggleShapeProp(this, ids, 'isAspectRatioLocked'))\n  }\n\n  /**\n   * Toggle the decoration at a handle of one or more shapes.\n   * @param handleId The handle to toggle.\n   * @param ids The ids of the shapes to toggle the decoration on.\n   */\n  toggleDecoration = (handleId: string, ids = this.selectedIds): this => {\n    if (ids.length === 0 || !(handleId === 'start' || handleId === 'end')) return this\n    return this.setState(Commands.toggleShapesDecoration(this, ids, handleId))\n  }\n\n  /**\n   * Set the props of one or more shapes\n   * @param props The props to set on the shapes.\n   * @param ids The ids of the shapes to set props on.\n   */\n  setShapeProps = <T extends TDShape>(props: Partial<T>, ids = this.selectedIds) => {\n    return this.setState(Commands.setShapesProps(this, ids, props))\n  }\n\n  /**\n   * Rotate one or more shapes by a delta.\n   * @param delta The delta in radians.\n   * @param ids The ids to rotate (defaults to selection).\n   */\n  rotate = (delta = Math.PI * -0.5, ids = this.selectedIds): this => {\n    if (ids.length === 0) return this\n    const change = Commands.rotateShapes(this, ids, delta)\n    if (!change) return this\n    return this.setState(change)\n  }\n\n  /**\n   * Group the selected shapes.\n   * @param ids The ids to group (defaults to selection).\n   * @param groupId The new group's id.\n   */\n  group = (\n    ids = this.selectedIds,\n    groupId = Utils.uniqueId(),\n    pageId = this.currentPageId\n  ): this => {\n    if (this.readOnly) return this\n\n    if (ids.length === 1 && this.getShape(ids[0], pageId).type === TDShapeType.Group) {\n      return this.ungroup(ids, pageId)\n    }\n\n    if (ids.length < 2) return this\n\n    const command = Commands.groupShapes(this, ids, groupId, pageId)\n    if (!command) return this\n    return this.setState(command)\n  }\n\n  /**\n   * Ungroup the selected groups.\n   * @todo\n   */\n  ungroup = (ids = this.selectedIds, pageId = this.currentPageId): this => {\n    if (this.readOnly) return this\n\n    const groups = ids\n      .map((id) => this.getShape(id, pageId))\n      .filter((shape) => shape.type === TDShapeType.Group)\n\n    if (groups.length === 0) return this\n\n    const command = Commands.ungroupShapes(this, ids, groups as GroupShape[], pageId)\n\n    if (!command) {\n      return this\n    }\n\n    return this.setState(command)\n  }\n\n  /**\n   * Cancel the current session.\n   */\n  cancel = (): this => {\n    this.currentTool.onCancel?.()\n\n    return this\n  }\n\n  addMediaFromFiles = async (files: File[], point = this.centerPoint) => {\n    this.setIsLoading(true)\n\n    // Rather than creating each shape individually (which will produce undo / redo entries\n    // for each shape), create an array of all the shapes that we'll need to create. We'll\n    // iterate through these at the bottom of the function to set their points, then create\n    // them through a single call to `createShapes`.\n\n    const shapesToCreate: TDShape[] = []\n\n    const pagePoint = this.getPagePoint(point)\n\n    for (const file of files) {\n      const id = Utils.uniqueId()\n      const extension = file.name.match(/\\.[0-9a-z]+$/i)\n\n      if (!extension) throw Error('No extension')\n\n      const isImage = IMAGE_EXTENSIONS.includes(extension[0].toLowerCase())\n      const isVideo = VIDEO_EXTENSIONS.includes(extension[0].toLowerCase())\n\n      if (!(isImage || isVideo)) throw Error('Wrong extension')\n\n      const shapeType = isImage ? TDShapeType.Image : TDShapeType.Video\n      const assetType = isImage ? TDAssetType.Image : TDAssetType.Video\n\n      let src: string | ArrayBuffer | null\n\n      try {\n        if (this.callbacks.onAssetCreate) {\n          const result = await this.callbacks.onAssetCreate(this, file, id)\n\n          if (!result) throw Error('Asset creation callback returned false')\n\n          src = result\n        } else {\n          src = await fileToBase64(file)\n        }\n\n        if (typeof src === 'string') {\n          let size = [0, 0]\n\n          if (isImage) {\n            // attempt to get actual svg size from viewBox attribute as\n            if (extension[0] == '.svg') {\n              let viewBox: string[]\n              const svgString = await fileToText(file)\n              const viewBoxAttribute = this.getViewboxFromSVG(svgString)\n\n              if (viewBoxAttribute) {\n                viewBox = viewBoxAttribute.split(' ')\n                size[0] = parseFloat(viewBox[2])\n                size[1] = parseFloat(viewBox[3])\n              }\n            }\n            if (Vec.isEqual(size, [0, 0])) {\n              size = await getImageSizeFromSrc(src)\n            }\n          } else {\n            size = await getVideoSizeFromSrc(src)\n          }\n\n          const match = Object.values(this.document.assets).find(\n            (asset) => asset.type === assetType && asset.src === src\n          )\n\n          let assetId: string\n\n          if (!match) {\n            assetId = id\n\n            const asset = {\n              id: assetId,\n              type: assetType,\n              name: file.name,\n              src,\n              size,\n            }\n\n            this.patchState({\n              document: {\n                assets: {\n                  [assetId]: asset,\n                },\n              },\n            })\n          } else {\n            assetId = match.id\n          }\n\n          shapesToCreate.push(this.getImageOrVideoShapeAtPoint(id, shapeType, point, size, assetId))\n        }\n      } catch (error) {\n        // Even if one shape errors, keep going (we might have had other shapes that didn't error)\n        console.warn(error)\n      }\n    }\n\n    if (shapesToCreate.length) {\n      const currentPoint = Vec.add(pagePoint, [0, 0])\n\n      shapesToCreate.forEach((shape, i) => {\n        const bounds = TLDR.getBounds(shape)\n\n        if (i === 0) {\n          // For the first shape, offset the current point so\n          // that the first shape's center is at the page point\n          currentPoint[0] -= bounds.width / 2\n          currentPoint[1] -= bounds.height / 2\n        }\n\n        // Set the shape's point the current point\n        shape.point = [...currentPoint]\n\n        // Then bump the page current point by this shape's width\n        currentPoint[0] += bounds.width\n      })\n\n      const commonBounds = Utils.getCommonBounds(shapesToCreate.map(TLDR.getBounds))\n\n      this.createShapes(...shapesToCreate)\n\n      // Are the common bounds too big for the viewport?\n      if (!Utils.boundsContain(this.viewport, commonBounds)) {\n        this.zoomToSelection()\n        if (this.zoom > 1) {\n          this.resetZoom()\n        }\n      }\n    }\n\n    this.setIsLoading(false)\n    return this\n  }\n\n  private getViewboxFromSVG = (svgStr: string | ArrayBuffer | null) => {\n    const viewBoxRegex = /.*?viewBox=[\"'](-?[\\d.]+[, ]+-?[\\d.]+[, ][\\d.]+[, ][\\d.]+)[\"']/\n\n    if (typeof svgStr === 'string') {\n      const matches = svgStr.match(viewBoxRegex)\n      return matches && matches.length >= 2 ? matches[1] : null\n    }\n\n    this.setIsLoading(false)\n\n    return null\n  }\n\n  /* -------------------------------------------------- */\n  /*                   Event Handlers                   */\n  /* -------------------------------------------------- */\n\n  /* ----------------- Keyboard Events ---------------- */\n\n  onKeyDown: TLKeyboardEventHandler = (key, info, e) => {\n    switch (e.key) {\n      case '/': {\n        if (this.status === 'idle' && !this.pageState.editingId) {\n          const { shiftKey, metaKey, altKey, ctrlKey, spaceKey } = this\n\n          this.onPointerDown(\n            {\n              target: 'canvas',\n              pointerId: 0,\n              origin: info.point,\n              point: info.point,\n              delta: [0, 0],\n              pressure: 0.5,\n              shiftKey,\n              ctrlKey,\n              metaKey,\n              altKey,\n              spaceKey,\n            },\n            {\n              shiftKey,\n              altKey,\n              ctrlKey,\n              pointerId: 0,\n              clientX: info.point[0],\n              clientY: info.point[1],\n            } as unknown as React.PointerEvent<HTMLDivElement>\n          )\n        }\n        break\n      }\n      case 'Escape': {\n        this.cancel()\n        break\n      }\n      case 'Meta': {\n        this.metaKey = true\n        break\n      }\n      case 'Alt': {\n        this.altKey = true\n        break\n      }\n      case 'Control': {\n        this.ctrlKey = true\n        break\n      }\n      case ' ': {\n        this.isForcePanning = true\n        this.spaceKey = true\n        break\n      }\n    }\n\n    this.currentTool.onKeyDown?.(key, info, e)\n\n    return this\n  }\n\n  onKeyUp: TLKeyboardEventHandler = (key, info, e) => {\n    if (!info) return\n\n    switch (e.key) {\n      case '/': {\n        const { currentPoint, shiftKey, metaKey, altKey, ctrlKey, spaceKey } = this\n\n        this.onPointerUp(\n          {\n            target: 'canvas',\n            pointerId: 0,\n            origin: currentPoint,\n            point: currentPoint,\n            delta: [0, 0],\n            pressure: 0.5,\n            shiftKey,\n            ctrlKey,\n            metaKey,\n            altKey,\n            spaceKey,\n          },\n          {\n            shiftKey,\n            altKey,\n            ctrlKey,\n            pointerId: 0,\n            clientX: currentPoint[0],\n            clientY: currentPoint[1],\n          } as unknown as React.PointerEvent<HTMLDivElement>\n        )\n        break\n      }\n      case 'Meta': {\n        this.metaKey = false\n        break\n      }\n      case 'Alt': {\n        this.altKey = false\n        break\n      }\n      case 'Control': {\n        this.ctrlKey = false\n        break\n      }\n      case ' ': {\n        this.isForcePanning = false\n        this.spaceKey = false\n        break\n      }\n    }\n\n    this.currentTool.onKeyUp?.(key, info, e)\n  }\n\n  /** Force bounding boxes to reset when the document loads. */\n  refreshBoundingBoxes = () => {\n    // force a change to every text shape\n    const force = this.shapes.map((shape) => {\n      return [\n        shape.id,\n        {\n          point: [...shape.point],\n          ...('label' in shape && { label: '' }),\n        },\n      ]\n    })\n\n    const restore = this.shapes.map((shape) => {\n      return [\n        shape.id,\n        {\n          point: [...shape.point],\n          ...('label' in shape && { label: shape.label }),\n        },\n      ]\n    })\n\n    clearPrevSize()\n\n    this.patchState({\n      document: {\n        pages: {\n          [this.currentPageId]: {\n            shapes: Object.fromEntries(force),\n          },\n        },\n      },\n    })\n    this.patchState({\n      document: {\n        pages: {\n          [this.currentPageId]: {\n            shapes: Object.fromEntries(restore),\n          },\n        },\n      },\n    })\n  }\n\n  /* ------------- Renderer Event Handlers ------------ */\n\n  onDragOver: TLDropEventHandler = (e) => {\n    e.preventDefault()\n  }\n\n  onDrop: TLDropEventHandler = async (e) => {\n    e.preventDefault()\n    if (this.disableAssets) return this\n    if (e.dataTransfer.files?.length) {\n      this.addMediaFromFiles(Object.values(e.dataTransfer.files), [e.clientX, e.clientY])\n    }\n    return this\n  }\n\n  onPinchStart: TLPinchEventHandler = (info, e) => {\n    this.currentTool.onPinchStart?.(info, e)\n  }\n\n  onPinchEnd: TLPinchEventHandler = (info, e) => this.currentTool.onPinchEnd?.(info, e)\n\n  onPinch: TLPinchEventHandler = (info, e) => this.currentTool.onPinch?.(info, e)\n\n  onPan: TLWheelEventHandler = (info, e) => {\n    if (this.appState.status === 'pinching') return\n    // TODO: Pan and pinchzoom are firing at the same time. Considering turning one of them off!\n\n    const delta = Vec.div(info.delta, this.camera.zoom)\n    const prev = this.camera.point\n    const next = Vec.sub(prev, delta)\n\n    if (Vec.isEqual(next, prev)) return\n\n    this.pan(delta)\n\n    // When panning, we also want to call onPointerMove, except when \"force panning\" via spacebar / middle wheel button (it's called elsewhere in that case)\n    if (!this.isForcePanning) this.onPointerMove(info, e as unknown as React.PointerEvent)\n\n    // prevent middle click paste on linux\n    if (isLinux && this.isForcePanning) this.preventPaste()\n  }\n\n  onZoom: TLWheelEventHandler = (info, e) => {\n    if (this.state.appState.status !== TDStatus.Idle) return\n    const delta = info.delta[2] / 50\n    this.zoomBy(delta, info.point)\n    this.onPointerMove(info, e as unknown as React.PointerEvent)\n  }\n\n  /* ----------------- Pointer Events ----------------- */\n\n  updateInputs: TLPointerEventHandler = (info) => {\n    this.currentPoint = this.getPagePoint(info.point).concat(info.pressure)\n    this.shiftKey = info.shiftKey\n    this.altKey = info.altKey\n    this.ctrlKey = info.ctrlKey\n    this.metaKey = info.metaKey\n  }\n\n  onPointerMove: TLPointerEventHandler = (info, e) => {\n    this.previousPoint = this.currentPoint\n    this.updateInputs(info, e)\n    if (this.isForcePanning && this.isPointing) {\n      this.onPan?.({ ...info, delta: Vec.neg(info.delta) }, e as unknown as WheelEvent)\n      return\n    }\n\n    // Several events (e.g. pan) can trigger the same \"pointer move\" behavior\n    this.currentTool.onPointerMove?.(info, e)\n\n    // Move this to an emitted event\n    if (this.state.room) {\n      const { users, userId } = this.state.room\n\n      this.callbacks.onChangePresence?.(this, {\n        ...users[userId],\n        point: this.getPagePoint(info.point),\n        session: !!this.session,\n      })\n    }\n  }\n\n  onPointerDown: TLPointerEventHandler = (info, e) => {\n    if (e.buttons === 4) {\n      this.isForcePanning = true\n    } else if (this.isPointing) {\n      return\n    }\n    this.isPointing = true\n    this.originPoint = this.getPagePoint(info.point).concat(info.pressure)\n    this.updateInputs(info, e)\n    if (this.isForcePanning) return\n    if (this.currentTool.type === TDShapeType.Draw && e.pointerType === 'pen' && e.button === 5) {\n      this.selectTool('erase')\n      this.isErasingWithPen = true\n    }\n    this.currentTool.onPointerDown?.(info, e)\n  }\n\n  onPointerUp: TLPointerEventHandler = (info, e) => {\n    this.isPointing = false\n    if (!this.shiftKey) this.isForcePanning = false\n    this.updateInputs(info, e)\n    this.currentTool.onPointerUp?.(info, e)\n    if (this.isErasingWithPen && e.pointerType === 'pen' && e.button === 5) {\n      this.selectTool(TDShapeType.Draw)\n      this.isErasingWithPen = false\n    }\n  }\n\n  // Canvas (background)\n  onPointCanvas: TLCanvasEventHandler = (info, e) => {\n    this.updateInputs(info, e)\n    this.currentTool.onPointCanvas?.(info, e)\n  }\n\n  onDoubleClickCanvas: TLCanvasEventHandler = (info, e) => {\n    this.updateInputs(info, e)\n    this.currentTool.onDoubleClickCanvas?.(info, e)\n  }\n\n  onRightPointCanvas: TLCanvasEventHandler = (info, e) => {\n    this.updateInputs(info, e)\n    this.currentTool.onRightPointCanvas?.(info, e)\n  }\n\n  onDragCanvas: TLCanvasEventHandler = (info, e) => {\n    this.updateInputs(info, e)\n    this.currentTool.onDragCanvas?.(info, e)\n  }\n\n  onReleaseCanvas: TLCanvasEventHandler = (info, e) => {\n    this.updateInputs(info, e)\n    this.currentTool.onReleaseCanvas?.(info, e)\n  }\n\n  // Shape\n  onPointShape: TLPointerEventHandler = (info, e) => {\n    this.originPoint = this.getPagePoint(info.point).concat(info.pressure)\n    this.updateInputs(info, e)\n    this.currentTool.onPointShape?.(info, e)\n  }\n\n  onReleaseShape: TLPointerEventHandler = (info, e) => {\n    this.updateInputs(info, e)\n    this.currentTool.onReleaseShape?.(info, e)\n  }\n\n  onDoubleClickShape: TLPointerEventHandler = (info, e) => {\n    this.originPoint = this.getPagePoint(info.point).concat(info.pressure)\n    this.updateInputs(info, e)\n    this.currentTool.onDoubleClickShape?.(info, e)\n  }\n\n  onRightPointShape: TLPointerEventHandler = (info, e) => {\n    this.originPoint = this.getPagePoint(info.point).concat(info.pressure)\n    this.updateInputs(info, e)\n    this.currentTool.onRightPointShape?.(info, e)\n  }\n\n  onDragShape: TLPointerEventHandler = (info, e) => {\n    this.updateInputs(info, e)\n    this.currentTool.onDragShape?.(info, e)\n  }\n\n  onHoverShape: TLPointerEventHandler = (info, e) => {\n    this.updateInputs(info, e)\n    this.currentTool.onHoverShape?.(info, e)\n  }\n\n  onUnhoverShape: TLPointerEventHandler = (info, e) => {\n    this.updateInputs(info, e)\n    this.currentTool.onUnhoverShape?.(info, e)\n  }\n\n  // Bounds (bounding box background)\n  onPointBounds: TLBoundsEventHandler = (info, e) => {\n    this.originPoint = this.getPagePoint(info.point).concat(info.pressure)\n    this.updateInputs(info, e)\n    this.currentTool.onPointBounds?.(info, e)\n  }\n\n  onDoubleClickBounds: TLBoundsEventHandler = (info, e) => {\n    this.originPoint = this.getPagePoint(info.point).concat(info.pressure)\n    this.updateInputs(info, e)\n    this.currentTool.onDoubleClickBounds?.(info, e)\n  }\n\n  onRightPointBounds: TLBoundsEventHandler = (info, e) => {\n    this.originPoint = this.getPagePoint(info.point).concat(info.pressure)\n    this.updateInputs(info, e)\n    this.currentTool.onRightPointBounds?.(info, e)\n  }\n\n  onDragBounds: TLBoundsEventHandler = (info, e) => {\n    this.updateInputs(info, e)\n    this.currentTool.onDragBounds?.(info, e)\n  }\n\n  onHoverBounds: TLBoundsEventHandler = (info, e) => {\n    this.updateInputs(info, e)\n    this.currentTool.onHoverBounds?.(info, e)\n  }\n\n  onUnhoverBounds: TLBoundsEventHandler = (info, e) => {\n    this.updateInputs(info, e)\n    this.currentTool.onUnhoverBounds?.(info, e)\n  }\n\n  onReleaseBounds: TLBoundsEventHandler = (info, e) => {\n    this.updateInputs(info, e)\n    this.currentTool.onReleaseBounds?.(info, e)\n  }\n\n  // Bounds handles (corners, edges)\n  onPointBoundsHandle: TLBoundsHandleEventHandler = (info, e) => {\n    this.originPoint = this.getPagePoint(info.point).concat(info.pressure)\n    this.updateInputs(info, e)\n    this.currentTool.onPointBoundsHandle?.(info, e)\n  }\n\n  onDoubleClickBoundsHandle: TLBoundsHandleEventHandler = (info, e) => {\n    this.originPoint = this.getPagePoint(info.point).concat(info.pressure)\n    this.updateInputs(info, e)\n    this.currentTool.onDoubleClickBoundsHandle?.(info, e)\n\n    // hack time to reset the size / clipping of an image\n    if (this.selectedIds.length !== 1) return\n\n    const shape = this.getShape(this.selectedIds[0])\n\n    if (shape.type === TDShapeType.Image || shape.type === TDShapeType.Video) {\n      const asset = this.document.assets[shape.assetId]\n      const util = TLDR.getShapeUtil(shape)\n      const centerA = util.getCenter(shape)\n      const centerB = util.getCenter({ ...shape, size: asset.size })\n      const delta = Vec.sub(centerB, centerA)\n\n      this.updateShapes({\n        id: shape.id,\n        point: Vec.sub(shape.point, delta),\n        size: asset.size,\n      })\n    }\n  }\n\n  onRightPointBoundsHandle: TLBoundsHandleEventHandler = (info, e) => {\n    this.originPoint = this.getPagePoint(info.point).concat(info.pressure)\n    this.updateInputs(info, e)\n    this.currentTool.onRightPointBoundsHandle?.(info, e)\n  }\n\n  onDragBoundsHandle: TLBoundsHandleEventHandler = (info, e) => {\n    this.updateInputs(info, e)\n    this.currentTool.onDragBoundsHandle?.(info, e)\n  }\n\n  onHoverBoundsHandle: TLBoundsHandleEventHandler = (info, e) => {\n    this.updateInputs(info, e)\n    this.currentTool.onHoverBoundsHandle?.(info, e)\n  }\n\n  onUnhoverBoundsHandle: TLBoundsHandleEventHandler = (info, e) => {\n    this.updateInputs(info, e)\n    this.currentTool.onUnhoverBoundsHandle?.(info, e)\n  }\n\n  onReleaseBoundsHandle: TLBoundsHandleEventHandler = (info, e) => {\n    this.updateInputs(info, e)\n    this.currentTool.onReleaseBoundsHandle?.(info, e)\n  }\n\n  // Handles (ie the handles of a selected arrow)\n  onPointHandle: TLPointerEventHandler = (info, e) => {\n    this.originPoint = this.getPagePoint(info.point).concat(info.pressure)\n    this.updateInputs(info, e)\n    this.currentTool.onPointHandle?.(info, e)\n  }\n\n  onDoubleClickHandle: TLPointerEventHandler = (info, e) => {\n    this.originPoint = this.getPagePoint(info.point).concat(info.pressure)\n    this.updateInputs(info, e)\n    this.currentTool.onDoubleClickHandle?.(info, e)\n  }\n\n  onRightPointHandle: TLPointerEventHandler = (info, e) => {\n    this.originPoint = this.getPagePoint(info.point).concat(info.pressure)\n    this.updateInputs(info, e)\n    this.currentTool.onRightPointHandle?.(info, e)\n  }\n\n  onDragHandle: TLPointerEventHandler = (info, e) => {\n    this.updateInputs(info, e)\n    this.currentTool.onDragHandle?.(info, e)\n  }\n\n  onHoverHandle: TLPointerEventHandler = (info, e) => {\n    this.updateInputs(info, e)\n    this.currentTool.onHoverHandle?.(info, e)\n  }\n\n  onUnhoverHandle: TLPointerEventHandler = (info, e) => {\n    this.updateInputs(info, e)\n    this.currentTool.onUnhoverHandle?.(info, e)\n  }\n\n  onReleaseHandle: TLPointerEventHandler = (info, e) => {\n    this.updateInputs(info, e)\n    this.currentTool.onReleaseHandle?.(info, e)\n  }\n\n  onShapeChange = (shape: { id: string } & Partial<TLShape>) => {\n    const pageShapes = this.document.pages[this.currentPageId].shapes\n    const shapeToUpdate = { ...(pageShapes[shape.id] as any), ...shape }\n    const patch = Commands.updateShapes(this, [shapeToUpdate], this.currentPageId).after\n    return this.patchState(patch, 'patched_shapes')\n    // this.updateShapes(shape)\n  }\n\n  onShapeBlur = () => {\n    // This prevents an auto-blur event from Safari\n    if (performance.now() - this.editingStartTime < 50) return\n\n    const { editingId } = this.pageState\n    const { isToolLocked } = this.getAppState()\n\n    if (editingId) {\n      // If we're editing text, then delete the text if it's empty\n      const shape = this.getShape(editingId)\n      this.setEditingId()\n      if (shape.type === TDShapeType.Text) {\n        if (shape.text.trim().length <= 0) {\n          this.patchState(Commands.deleteShapes(this, [editingId]).after, 'delete_empty_text')\n        } else if (!isToolLocked) {\n          this.select(editingId)\n        }\n      }\n    }\n\n    this.currentTool.onShapeBlur?.()\n  }\n\n  onShapeClone: TLShapeCloneHandler = (info, e) => {\n    this.originPoint = this.getPagePoint(info.point).concat(info.pressure)\n    this.updateInputs(info, e)\n    this.currentTool.onShapeClone?.(info, e)\n  }\n\n  onRenderCountChange = (ids: string[]) => {\n    const appState = this.getAppState()\n    if (appState.isEmptyCanvas && ids.length > 0) {\n      this.patchState(\n        {\n          appState: {\n            isEmptyCanvas: false,\n          },\n        },\n        'empty_canvas:false'\n      )\n    } else if (!appState.isEmptyCanvas && ids.length <= 0) {\n      this.patchState(\n        {\n          appState: {\n            isEmptyCanvas: true,\n          },\n        },\n        'empty_canvas:true'\n      )\n    }\n  }\n\n  onError = () => {\n    // TODO\n  }\n\n  isSelected(id: string) {\n    return this.selectedIds.includes(id)\n  }\n\n  /* ----------------- Export ----------------- */\n\n  /**\n   * Get a snapshot of a video at current frame as base64 encoded image\n   * @param id ID of video shape\n   * @returns base64 encoded frame\n   * @throws Error if video shape with given ID does not exist\n   */\n  serializeVideo(id: string): string {\n    const video = document.getElementById(id + '_video') as HTMLVideoElement\n    if (video) {\n      const canvas = document.createElement('canvas')\n      canvas.width = video.videoWidth\n      canvas.height = video.videoHeight\n      canvas.getContext('2d')!.drawImage(video, 0, 0)\n      return canvas.toDataURL('image/png')\n    } else throw new Error('Video with id ' + id + ' not found')\n  }\n\n  /**\n   * Get a snapshot of a image (e.g. a GIF) as base64 encoded image\n   * @param id ID of image shape\n   * @returns base64 encoded frame\n   * @throws Error if image shape with given ID does not exist\n   */\n  serializeImage(id: string): string {\n    const image = document.getElementById(id + '_image') as HTMLImageElement\n    if (image) {\n      const canvas = document.createElement('canvas')\n      canvas.width = image.width\n      canvas.height = image.height\n      canvas.getContext('2d')!.drawImage(image, 0, 0)\n      return canvas.toDataURL('image/png')\n    } else throw new Error('Image with id ' + id + ' not found')\n  }\n\n  patchAssets(assets: TDAssets) {\n    this.document.assets = {\n      ...this.document.assets,\n      ...assets,\n    }\n  }\n\n  get room() {\n    return this.state.room\n  }\n\n  get isLocal() {\n    return this.state.room === undefined || this.state.room.id === 'local'\n  }\n\n  get status() {\n    return this.appState.status\n  }\n\n  get currentUser() {\n    if (!this.state.room) return\n    return this.state.room.users[this.state.room.userId]\n  }\n\n  // The center of the component (in screen space)\n  get centerPoint() {\n    const { width, height } = this.rendererBounds\n    return Vec.toFixed([width / 2, height / 2])\n  }\n\n  get currentGrid() {\n    const { zoom } = this.camera\n    if (zoom < 0.15) {\n      return GRID_SIZE * 16\n    } else if (zoom < 1) {\n      return GRID_SIZE * 4\n    } else {\n      return GRID_SIZE * 1\n    }\n  }\n\n  getShapeUtil = TLDR.getShapeUtil\n\n  static version = 15.5\n\n  static defaultDocument: TDDocument = {\n    id: 'doc',\n    name: 'New Document',\n    version: TldrawApp.version,\n    pages: {\n      page: {\n        id: 'page',\n        name: 'Page 1',\n        childIndex: 1,\n        shapes: {},\n        bindings: {},\n      },\n    },\n    pageStates: {\n      page: {\n        id: 'page',\n        selectedIds: [],\n        camera: {\n          point: [0, 0],\n          zoom: 1,\n        },\n      },\n    },\n    assets: {},\n  }\n\n  static defaultState: TDSnapshot = {\n    settings: {\n      isCadSelectMode: false,\n      isPenMode: false,\n      isDarkMode: false,\n      isZoomSnap: false,\n      isFocusMode: false,\n      isSnapping: false,\n      isDebugMode: false,\n      isReadonlyMode: false,\n      keepStyleMenuOpen: false,\n      nudgeDistanceLarge: 16,\n      nudgeDistanceSmall: 1,\n      showRotateHandles: true,\n      showBindingHandles: true,\n      showCloneHandles: false,\n      showGrid: false,\n      language: 'en',\n      dockPosition: 'bottom',\n      exportBackground: TDExportBackground.Transparent,\n    },\n    appState: {\n      status: TDStatus.Idle,\n      activeTool: 'select',\n      hoveredId: undefined,\n      currentPageId: 'page',\n      currentStyle: defaultStyle,\n      isToolLocked: false,\n      isMenuOpen: false,\n      isEmptyCanvas: false,\n      eraseLine: [],\n      snapLines: [],\n      isLoading: false,\n      disableAssets: false,\n    },\n    document: TldrawApp.defaultDocument,\n  }\n\n  static assetSrc = 'tldraw-assets.json'\n}\n", "import { del, get, set } from 'idb-keyval'\n\n// Used for clipboard\n\nconst ID = 'tldraw_clipboard'\n\nexport async function getClipboard(): Promise<string | undefined> {\n  return get(ID)\n}\n\nexport async function setClipboard(item: string): Promise<void> {\n  return set(ID, item)\n}\n\nexport function clearClipboard(): Promise<void> {\n  return del(ID)\n}\n", "import { Utils } from '@tldraw/core'\nimport * as idb from 'idb-keyval'\nimport create, { UseBoundStore } from 'zustand'\nimport createVanilla, { StoreApi } from 'zustand/vanilla'\nimport type { Command, Patch } from '~types'\nimport { deepCopy } from './copy'\n\nexport class StateManager<T extends Record<string, any>> {\n  /**\n   * An ID used to persist state in indexdb.\n   */\n  protected _idbId?: string\n\n  /**\n   * The initial state.\n   */\n  private initialState: T\n\n  /**\n   * A zustand store that also holds the state.\n   */\n  private store: StoreApi<T>\n\n  /**\n   * The index of the current command.\n   */\n  protected pointer = -1\n\n  /**\n   * The current state.\n   */\n  private _state: T\n\n  /**\n   * The state manager's current status, with regard to restoring persisted state.\n   */\n  private _status: 'loading' | 'ready' = 'loading'\n\n  /**\n   * A stack of commands used for history (undo and redo).\n   */\n  protected stack: Command<T>[] = []\n\n  /**\n   * A snapshot of the current state.\n   */\n  protected _snapshot: T\n\n  /**\n   * A React hook for accessing the zustand store.\n   */\n  public readonly useStore: UseBoundStore<StoreApi<T>>\n\n  /**\n   * A promise that will resolve when the state manager has loaded any peristed state.\n   */\n  public ready: Promise<'none' | 'restored' | 'migrated'>\n\n  public isPaused = false\n\n  constructor(\n    initialState: T,\n    id?: string,\n    version?: number,\n    update?: (prev: T, next: T, prevVersion: number) => T\n  ) {\n    this._idbId = id\n    this._state = deepCopy(initialState)\n    this._snapshot = deepCopy(initialState)\n    this.initialState = deepCopy(initialState)\n    this.store = createVanilla(() => this._state)\n    this.useStore = create(this.store)\n\n    this.ready = new Promise<'none' | 'restored' | 'migrated'>((resolve) => {\n      let message: 'none' | 'restored' | 'migrated' = 'none'\n\n      if (this._idbId) {\n        message = 'restored'\n\n        idb\n          .get(this._idbId)\n          .then(async (saved) => {\n            if (saved) {\n              let next = saved\n\n              if (version) {\n                const savedVersion = await idb.get<number>(id + '_version')\n\n                if (savedVersion && savedVersion < version) {\n                  next = update ? update(saved, initialState, savedVersion) : initialState\n\n                  message = 'migrated'\n                }\n              }\n\n              await idb.set(id + '_version', version || -1)\n\n              // why is this necessary? but it is...\n              const prevEmpty = this._state.appState.isEmptyCanvas\n\n              next = this.migrate(next)\n\n              this._state = deepCopy(next)\n              this._snapshot = deepCopy(next)\n\n              this._state.appState.isEmptyCanvas = prevEmpty\n              this.store.setState(this._state, true)\n            } else {\n              await idb.set(id + '_version', version || -1)\n            }\n            this._status = 'ready'\n            resolve(message)\n          })\n          .catch((e) => console.error(e))\n      } else {\n        // We need to wait for any override to `onReady` to take effect.\n        this._status = 'ready'\n        resolve(message)\n      }\n    }).then((message) => {\n      if (this.onReady) this.onReady(message)\n      return message\n    })\n  }\n\n  /**\n   * Save the current state to indexdb.\n   */\n  protected persist = (patch: Patch<T>, id?: string): void | Promise<void> => {\n    if (this._status !== 'ready') return\n\n    if (this.onPersist) {\n      this.onPersist(this._state, patch, id)\n    }\n\n    if (this._idbId) {\n      return idb.set(this._idbId, this._state).catch((e) => console.error(e))\n    }\n  }\n\n  /**\n   * Apply a patch to the current state.\n   * This does not effect the undo/redo stack.\n   * This does not persist the state.\n   * @param patch The patch to apply.\n   * @param id (optional) An id for the patch.\n   */\n  private applyPatch = (patch: Patch<T>, id?: string) => {\n    const prev = this._state\n    const next = Utils.deepMerge(this._state, patch as any)\n    const final = this.cleanup(next, prev, patch, id)\n    if (this.onStateWillChange) {\n      this.onStateWillChange(final, id)\n    }\n    this._state = final\n    this.store.setState(this._state, true)\n    if (this.onStateDidChange) {\n      this.onStateDidChange(this._state, id)\n    }\n    return this\n  }\n\n  // Internal API ---------------------------------\n\n  protected migrate = (next: T): T => {\n    return next\n  }\n\n  /**\n   * Perform any last changes to the state before updating.\n   * Override this on your extending class.\n   * @param nextState The next state.\n   * @param prevState The previous state.\n   * @param patch The patch that was just applied.\n   * @param id (optional) An id for the just-applied patch.\n   * @returns The final new state to apply.\n   */\n  protected cleanup = (nextState: T, _prevState: T, _patch: Patch<T>, _id?: string): T => nextState\n\n  /**\n   * A life-cycle method called when the state is about to change.\n   * @param state The next state.\n   * @param id An id for the change.\n   */\n  protected onStateWillChange?: (state: T, id?: string) => void\n\n  /**\n   * A life-cycle method called when the state has changed.\n   * @param state The next state.\n   * @param id An id for the change.\n   */\n  protected onStateDidChange?: (state: T, id?: string) => void\n\n  /**\n   * Apply a patch to the current state.\n   * This does not effect the undo/redo stack.\n   * This does not persist the state.\n   * @param patch The patch to apply.\n   * @param id (optional) An id for this patch.\n   */\n  patchState = (patch: Patch<T>, id?: string): this => {\n    this.applyPatch(patch, id)\n    if (this.onPatch) {\n      this.onPatch(this._state, patch, id)\n    }\n    return this\n  }\n\n  /**\n   * Replace the current state.\n   * This does not effect the undo/redo stack.\n   * This does not persist the state.\n   * @param state The new state.\n   * @param id An id for this change.\n   */\n  protected replaceState = (state: T, id?: string): this => {\n    const final = this.cleanup(state, this._state, state, id)\n    if (this.onStateWillChange) {\n      this.onStateWillChange(final, 'replace')\n    }\n    this._state = final\n    this.store.setState(this._state, true)\n    if (this.onStateDidChange) {\n      this.onStateDidChange(this._state, 'replace')\n    }\n    return this\n  }\n\n  /**\n   * Update the state using a Command.\n   * This effects the undo/redo stack.\n   * This persists the state.\n   * @param command The command to apply and add to the undo/redo stack.\n   * @param id (optional) An id for this command.\n   */\n  protected setState = (command: Command<T>, id = command.id) => {\n    if (this.pointer < this.stack.length - 1) {\n      this.stack = this.stack.slice(0, this.pointer + 1)\n    }\n    this.stack.push({ ...command, id })\n    this.pointer = this.stack.length - 1\n    this.applyPatch(command.after, id)\n    if (this.onCommand) this.onCommand(this._state, command, id)\n    this.persist(command.after, id)\n    return this\n  }\n\n  // Public API ---------------------------------\n\n  public pause() {\n    this.isPaused = true\n  }\n\n  public resume() {\n    this.isPaused = false\n  }\n\n  /**\n   * A callback fired when the constructor finishes loading any\n   * persisted data.\n   */\n  protected onReady?: (message: 'none' | 'restored' | 'migrated') => void\n\n  /**\n   * A callback fired when a patch is applied.\n   */\n  public onPatch?: (state: T, patch: Patch<T>, id?: string) => void\n\n  /**\n   * A callback fired when a patch is applied.\n   */\n  public onCommand?: (state: T, command: Command<T>, id?: string) => void\n\n  /**\n   * A callback fired when the state is persisted.\n   */\n  public onPersist?: (state: T, patch: Patch<T>, id?: string) => void\n\n  /**\n   * A callback fired when the state is replaced.\n   */\n  public onReplace?: (state: T) => void\n\n  /**\n   * A callback fired when the state is reset.\n   */\n  public onReset?: (state: T) => void\n\n  /**\n   * A callback fired when the history is reset.\n   */\n  public onResetHistory?: (state: T) => void\n\n  /**\n   * A callback fired when a command is undone.\n   */\n  public onUndo?: (state: T) => void\n\n  /**\n   * A callback fired when a command is redone.\n   */\n  public onRedo?: (state: T) => void\n\n  /**\n   * Reset the state to the initial state and reset history.\n   */\n  public reset = () => {\n    if (this.onStateWillChange) {\n      this.onStateWillChange(this.initialState, 'reset')\n    }\n    this._state = this.initialState\n    this.store.setState(this._state, true)\n    this.resetHistory()\n    this.persist({}, 'reset')\n    if (this.onStateDidChange) {\n      this.onStateDidChange(this._state, 'reset')\n    }\n    if (this.onReset) {\n      this.onReset(this._state)\n    }\n    return this\n  }\n\n  /**\n   * Force replace a new undo/redo history. It's your responsibility\n   * to make sure that this is compatible with the current state!\n   * @param history The new array of commands.\n   * @param pointer (optional) The new pointer position.\n   */\n  public replaceHistory = (history: Command<T>[], pointer = history.length - 1): this => {\n    this.stack = history\n    this.pointer = pointer\n    if (this.onReplace) {\n      this.onReplace(this._state)\n    }\n    return this\n  }\n\n  /**\n   * Reset the history stack (without resetting the state).\n   */\n  public resetHistory = (): this => {\n    this.stack = []\n    this.pointer = -1\n    if (this.onResetHistory) {\n      this.onResetHistory(this._state)\n    }\n    return this\n  }\n\n  /**\n   * Move backward in the undo/redo stack.\n   */\n  public undo = (): this => {\n    if (!this.isPaused) {\n      if (!this.canUndo) return this\n      const command = this.stack[this.pointer]\n      this.pointer--\n      this.applyPatch(command.before, `undo`)\n      this.persist(command.before, 'undo')\n    }\n    if (this.onUndo) this.onUndo(this._state)\n    return this\n  }\n\n  /**\n   * Move forward in the undo/redo stack.\n   */\n  public redo = (): this => {\n    if (!this.isPaused) {\n      if (!this.canRedo) return this\n      this.pointer++\n      const command = this.stack[this.pointer]\n      this.applyPatch(command.after, 'redo')\n      this.persist(command.after, 'undo')\n    }\n    if (this.onRedo) this.onRedo(this._state)\n    return this\n  }\n\n  /**\n   * Save a snapshot of the current state, accessible at `this.snapshot`.\n   */\n  public setSnapshot = (): this => {\n    this._snapshot = { ...this._state }\n    return this\n  }\n\n  /**\n   * Force the zustand state to update.\n   */\n  public forceUpdate = () => {\n    this.store.setState(this._state, true)\n  }\n\n  /**\n   * Get whether the state manager can undo.\n   */\n  public get canUndo(): boolean {\n    return this.pointer > -1\n  }\n\n  /**\n   * Get whether the state manager can redo.\n   */\n  public get canRedo(): boolean {\n    return this.pointer < this.stack.length - 1\n  }\n\n  /**\n   * The current state.\n   */\n  public get state(): T {\n    return this._state\n  }\n\n  /**\n   * The current status.\n   */\n  public get status(): string {\n    return this._status\n  }\n\n  /**\n   * The most-recent snapshot.\n   */\n  protected get snapshot(): T {\n    return this._snapshot\n  }\n}\n", "import { Utils } from '@tldraw/core'\nimport { Vec } from '@tldraw/vec'\nimport { TLDR } from '~state/TLDR'\nimport type { TldrawApp } from '~state/TldrawApp'\nimport { AlignType, TDShapeType, TldrawCommand } from '~types'\n\nexport function alignShapes(app: TldrawApp, ids: string[], type: AlignType): TldrawCommand {\n  const { currentPageId } = app\n\n  const initialShapes = ids.map((id) => app.getShape(id))\n\n  const boundsForShapes = initialShapes.map((shape) => {\n    return {\n      id: shape.id,\n      point: [...shape.point],\n      bounds: TLDR.getBounds(shape),\n    }\n  })\n\n  const commonBounds = Utils.getCommonBounds(boundsForShapes.map(({ bounds }) => bounds))\n\n  const midX = commonBounds.minX + commonBounds.width / 2\n  const midY = commonBounds.minY + commonBounds.height / 2\n\n  const deltaMap = Object.fromEntries(\n    boundsForShapes.map(({ id, point, bounds }) => {\n      return [\n        id,\n        {\n          prev: point,\n          next: {\n            [AlignType.Top]: [point[0], commonBounds.minY],\n            [AlignType.CenterVertical]: [point[0], midY - bounds.height / 2],\n            [AlignType.Bottom]: [point[0], commonBounds.maxY - bounds.height],\n            [AlignType.Left]: [commonBounds.minX, point[1]],\n            [AlignType.CenterHorizontal]: [midX - bounds.width / 2, point[1]],\n            [AlignType.Right]: [commonBounds.maxX - bounds.width, point[1]],\n          }[type],\n        },\n      ]\n    })\n  )\n\n  const { before, after } = TLDR.mutateShapes(\n    app.state,\n    ids,\n    (shape) => {\n      if (!deltaMap[shape.id]) return shape\n      return { point: deltaMap[shape.id].next }\n    },\n    currentPageId,\n    false\n  )\n\n  initialShapes.forEach((shape) => {\n    if (shape.type === TDShapeType.Group) {\n      const delta = Vec.sub(after[shape.id].point!, before[shape.id].point!)\n\n      shape.children.forEach((id) => {\n        const child = app.getShape(id)\n        before[child.id] = { point: child.point }\n        after[child.id] = { point: Vec.add(child.point, delta) }\n      })\n\n      delete before[shape.id]\n      delete after[shape.id]\n    }\n  })\n\n  return {\n    id: 'align',\n    before: {\n      document: {\n        pages: {\n          [currentPageId]: {\n            shapes: before,\n          },\n        },\n        pageStates: {\n          [currentPageId]: {\n            selectedIds: ids,\n          },\n        },\n      },\n    },\n    after: {\n      document: {\n        pages: {\n          [currentPageId]: {\n            shapes: after,\n          },\n        },\n        pageStates: {\n          [currentPageId]: {\n            selectedIds: ids,\n          },\n        },\n      },\n    },\n  }\n}\n", "import type { TldrawApp } from '~state/TldrawApp'\nimport type { TldrawCommand } from '~types'\n\nexport function changePage(app: TldrawApp, pageId: string): TldrawCommand {\n  return {\n    id: 'change_page',\n    before: {\n      appState: {\n        currentPageId: app.currentPageId,\n      },\n    },\n    after: {\n      appState: {\n        currentPageId: pageId,\n      },\n    },\n  }\n}\n", "import { TLPageState, Utils } from '@tldraw/core'\nimport type { TldrawApp } from '~state'\nimport { getIncrementedName } from '~state/commands/shared'\nimport type { TDPage, TldrawCommand } from '~types'\n\nexport function createPage(\n  app: TldrawApp,\n  center: number[],\n  pageId = Utils.uniqueId(),\n  pageName = 'Page'\n): TldrawCommand {\n  const { currentPageId } = app\n\n  const pages = Object.values(app.state.document.pages).sort(\n    (a, b) => (a.childIndex ?? 0) - (b.childIndex ?? 0)\n  )\n\n  const topPage = pages[pages.length - 1]\n\n  const nextChildIndex = topPage?.childIndex ? topPage?.childIndex + 1 : 1\n\n  const page: TDPage = {\n    id: pageId,\n    name: getIncrementedName(\n      pageName,\n      pages.map((p) => p.name ?? '')\n    ),\n    childIndex: nextChildIndex,\n    shapes: {},\n    bindings: {},\n  }\n\n  const pageState: TLPageState = {\n    id: pageId,\n    selectedIds: [],\n    camera: { point: center, zoom: 1 },\n    editingId: undefined,\n    bindingId: undefined,\n    hoveredId: undefined,\n    pointedId: undefined,\n  }\n\n  return {\n    id: 'create_page',\n    before: {\n      appState: {\n        currentPageId,\n      },\n      document: {\n        pages: {\n          [pageId]: undefined,\n        },\n        pageStates: {\n          [pageId]: undefined,\n        },\n      },\n    },\n    after: {\n      appState: {\n        currentPageId: page.id,\n      },\n      document: {\n        pages: {\n          [pageId]: page,\n        },\n        pageStates: {\n          [pageId]: pageState,\n        },\n      },\n    },\n  }\n}\n", "/**\n * Get an incremented name (e.g. Page 2) from a name (e.g. Page 1), based on an array of existing names.\n *\n * @param name The name to increment.\n * @param others The array of existing names.\n */\nexport function getIncrementedName(name: string, others: string[]) {\n  let result = name\n  const set = new Set(others)\n\n  while (set.has(result)) {\n    result = /^.*(\\d+)$/.exec(result)?.[1]\n      ? result.replace(/(\\d+)(?=\\D?)$/, (m) => (+m + 1).toString())\n      : `${result} 1`\n  }\n\n  return result\n}\n", "import { TLDR } from '~state/TLDR'\nimport type { ArrowShape, GroupShape, PagePartial, TDSnapshot } from '~types'\n\nexport function removeShapesFromPage(data: TDSnapshot, ids: string[], pageId: string) {\n  const before: PagePartial = {\n    shapes: {},\n    bindings: {},\n  }\n\n  const after: PagePartial = {\n    shapes: {},\n    bindings: {},\n  }\n\n  const parentsToUpdate: GroupShape[] = []\n  const deletedIds = new Set()\n  const assetsToRemove = new Set<string>()\n\n  // These are the shapes we're definitely going to delete\n\n  ids\n    .filter((id) => !TLDR.getShape(data, id, pageId).isLocked)\n    .forEach((id) => {\n      deletedIds.add(id)\n      const shape = TLDR.getShape(data, id, pageId)\n      before.shapes[id] = shape\n      after.shapes[id] = undefined\n\n      // Also delete the shape's children\n\n      if (shape.children !== undefined) {\n        shape.children.forEach((childId) => {\n          deletedIds.add(childId)\n          const child = TLDR.getShape(data, childId, pageId)\n          before.shapes[childId] = child\n          after.shapes[childId] = undefined\n        })\n      }\n\n      if (shape.parentId !== pageId) {\n        parentsToUpdate.push(TLDR.getShape(data, shape.parentId, pageId))\n      }\n\n      if (shape.assetId) {\n        assetsToRemove.add(shape.assetId)\n      }\n    })\n\n  parentsToUpdate.forEach((parent) => {\n    if (ids.includes(parent.id)) return\n    deletedIds.add(parent.id)\n    before.shapes[parent.id] = { children: parent.children }\n    after.shapes[parent.id] = { children: parent.children.filter((id) => !ids.includes(id)) }\n    if (after.shapes[parent.id]?.children!.length === 0) {\n      after.shapes[parent.id] = undefined\n      before.shapes[parent.id] = TLDR.getShape(data, parent.id, pageId)\n    }\n  })\n\n  // Recursively check for empty parents?\n\n  const page = TLDR.getPage(data, pageId)\n\n  // We also need to delete bindings that reference the deleted shapes\n  Object.values(page.bindings)\n    .filter((binding) => deletedIds.has(binding.fromId) || deletedIds.has(binding.toId))\n    .forEach((binding) => {\n      for (const id of [binding.toId, binding.fromId]) {\n        // If the binding references a deleted shape...\n        if (after.shapes[id] === undefined) {\n          // Delete this binding\n          before.bindings[binding.id] = binding\n          after.bindings[binding.id] = undefined\n\n          // Let's also look each the bound shape...\n          const shape = page.shapes[id]\n\n          // If the bound shape has a handle that references the deleted binding...\n          if (shape && shape.handles) {\n            Object.values(shape.handles)\n              .filter((handle) => handle.bindingId === binding.id)\n              .forEach((handle) => {\n                // Save the binding reference in the before patch\n                before.shapes[id] = {\n                  ...before.shapes[id],\n                  handles: {\n                    ...before.shapes[id]?.handles,\n                    [handle.id]: {\n                      ...before.shapes[id]?.handles?.[handle.id as keyof ArrowShape['handles']],\n                      bindingId: binding.id,\n                    },\n                  },\n                }\n\n                // Unless we're currently deleting the shape, remove the\n                // binding reference from the after patch\n                if (!deletedIds.has(id)) {\n                  after.shapes[id] = {\n                    ...after.shapes[id],\n                    handles: {\n                      ...after.shapes[id]?.handles,\n                      [handle.id]: {\n                        ...after.shapes[id]?.handles?.[handle.id as keyof ArrowShape['handles']],\n                        bindingId: undefined,\n                      },\n                    },\n                  }\n                }\n              })\n          }\n        }\n      }\n    })\n\n  // If any other shapes are using the deleted assets, don't remove them\n  Object.values(data.document.pages)\n    .flatMap((page) => Object.values(page.shapes))\n    .forEach((shape) => {\n      if ('assetId' in shape && shape.assetId && !deletedIds.has(shape.id)) {\n        assetsToRemove.delete(shape.assetId)\n      }\n    })\n\n  return { before, after, assetsToRemove: Array.from(assetsToRemove) }\n}\n", "import type { TldrawApp } from '~state/TldrawApp'\nimport type { Patch, TDBinding, TDShape, TldrawCommand } from '~types'\n\nexport function createShapes(\n  app: TldrawApp,\n  shapes: TDShape[],\n  bindings: TDBinding[] = []\n): TldrawCommand {\n  const { currentPageId } = app\n\n  const beforeShapes: Record<string, Patch<TDShape> | undefined> = {}\n  const afterShapes: Record<string, Patch<TDShape> | undefined> = {}\n\n  shapes.forEach((shape) => {\n    beforeShapes[shape.id] = undefined\n    afterShapes[shape.id] = shape\n  })\n\n  const beforeBindings: Record<string, Patch<TDBinding> | undefined> = {}\n  const afterBindings: Record<string, Patch<TDBinding> | undefined> = {}\n\n  bindings.forEach((binding) => {\n    beforeBindings[binding.id] = undefined\n    afterBindings[binding.id] = binding\n  })\n\n  return {\n    id: 'create',\n    before: {\n      document: {\n        pages: {\n          [currentPageId]: {\n            shapes: beforeShapes,\n            bindings: beforeBindings,\n          },\n        },\n        pageStates: {\n          [currentPageId]: {\n            selectedIds: [...app.selectedIds],\n          },\n        },\n      },\n    },\n    after: {\n      document: {\n        pages: {\n          [currentPageId]: {\n            shapes: afterShapes,\n            bindings: afterBindings,\n          },\n        },\n        pageStates: {\n          [currentPageId]: {\n            selectedIds: shapes.map((shape) => shape.id),\n          },\n        },\n      },\n    },\n  }\n}\n", "import type { TldrawApp } from '~state/TldrawApp'\nimport type { TldrawCommand } from '~types'\n\nexport function deletePage(app: TldrawApp, pageId: string): TldrawCommand {\n  const {\n    currentPageId,\n    document: { pages, pageStates },\n  } = app\n\n  const pagesArr = Object.values(pages).sort((a, b) => (a.childIndex || 0) - (b.childIndex || 0))\n\n  const currentIndex = pagesArr.findIndex((page) => page.id === pageId)\n\n  let nextCurrentPageId: string\n\n  if (pageId === currentPageId) {\n    if (currentIndex === pagesArr.length - 1) {\n      nextCurrentPageId = pagesArr[pagesArr.length - 2].id\n    } else {\n      nextCurrentPageId = pagesArr[currentIndex + 1].id\n    }\n  } else {\n    nextCurrentPageId = currentPageId\n  }\n\n  return {\n    id: 'delete_page',\n    before: {\n      appState: {\n        currentPageId: pageId,\n      },\n      document: {\n        pages: {\n          [pageId]: { ...pages[pageId] },\n        },\n        pageStates: {\n          [pageId]: { ...pageStates[pageId] },\n        },\n      },\n    },\n    after: {\n      appState: {\n        currentPageId: nextCurrentPageId,\n      },\n      document: {\n        pages: {\n          [pageId]: undefined,\n        },\n        pageStates: {\n          [pageId]: undefined,\n        },\n      },\n    },\n  }\n}\n", "import type { TldrawApp } from '~state/TldrawApp'\nimport { removeShapesFromPage } from '~state/commands/shared'\nimport type { TDAsset, TDAssets, TldrawCommand } from '~types'\n\nconst removeAssetsFromDocument = (assets: TDAssets, idsToRemove: string[]) => {\n  const afterAssets: Record<string, TDAsset | undefined> = { ...assets }\n  idsToRemove.forEach((id) => (afterAssets[id] = undefined))\n  return afterAssets\n}\n\nexport function deleteShapes(\n  app: TldrawApp,\n  ids: string[],\n  pageId = app.currentPageId\n): TldrawCommand {\n  const {\n    pageState,\n    selectedIds,\n    document: { assets: beforeAssets },\n  } = app\n  const { before, after, assetsToRemove } = removeShapesFromPage(app.state, ids, pageId)\n  const afterAssets = removeAssetsFromDocument(beforeAssets, assetsToRemove)\n\n  return {\n    id: 'delete',\n    before: {\n      document: {\n        assets: beforeAssets,\n        pages: {\n          [pageId]: before,\n        },\n        pageStates: {\n          [pageId]: { selectedIds: [...app.selectedIds] },\n        },\n      },\n    },\n    after: {\n      document: {\n        assets: afterAssets,\n        pages: {\n          [pageId]: after,\n        },\n        pageStates: {\n          [pageId]: {\n            selectedIds: selectedIds.filter((id) => !ids.includes(id)),\n            hoveredId:\n              pageState.hoveredId && ids.includes(pageState.hoveredId)\n                ? undefined\n                : pageState.hoveredId,\n          },\n        },\n      },\n    },\n  }\n}\n", "import { Utils } from '@tldraw/core'\nimport Vec from '@tldraw/vec'\nimport { TLDR } from '~state/TLDR'\nimport type { TldrawApp } from '~state/TldrawApp'\nimport { DistributeType, TDShape, TDShapeType, TldrawCommand } from '~types'\n\nexport function distributeShapes(\n  app: TldrawApp,\n  ids: string[],\n  type: DistributeType\n): TldrawCommand {\n  const { currentPageId } = app\n\n  const initialShapes = ids.map((id) => app.getShape(id))\n\n  const deltaMap = Object.fromEntries(getDistributions(initialShapes, type).map((d) => [d.id, d]))\n\n  const { before, after } = TLDR.mutateShapes(\n    app.state,\n    ids.filter((id) => deltaMap[id] !== undefined),\n    (shape) => ({ point: deltaMap[shape.id]?.next }),\n    currentPageId\n  )\n\n  initialShapes.forEach((shape) => {\n    if (shape.type === TDShapeType.Group) {\n      const delta = Vec.sub(after[shape.id].point!, before[shape.id].point!)\n\n      shape.children.forEach((id) => {\n        const child = app.getShape(id)\n        before[child.id] = { point: child.point }\n        after[child.id] = { point: Vec.add(child.point, delta) }\n      })\n\n      delete before[shape.id]\n      delete after[shape.id]\n    }\n  })\n\n  return {\n    id: 'distribute',\n    before: {\n      document: {\n        pages: {\n          [currentPageId]: { shapes: before },\n        },\n        pageStates: {\n          [currentPageId]: {\n            selectedIds: ids,\n          },\n        },\n      },\n    },\n    after: {\n      document: {\n        pages: {\n          [currentPageId]: { shapes: after },\n        },\n        pageStates: {\n          [currentPageId]: {\n            selectedIds: ids,\n          },\n        },\n      },\n    },\n  }\n}\n\nfunction getDistributions(initialShapes: TDShape[], type: DistributeType) {\n  const entries = initialShapes.map((shape) => {\n    const utils = TLDR.getShapeUtil(shape)\n    return {\n      id: shape.id,\n      point: [...shape.point],\n      bounds: utils.getBounds(shape),\n      center: utils.getCenter(shape),\n    }\n  })\n\n  const len = entries.length\n  const commonBounds = Utils.getCommonBounds(entries.map(({ bounds }) => bounds))\n\n  const results: { id: string; prev: number[]; next: number[] }[] = []\n\n  switch (type) {\n    case DistributeType.Horizontal: {\n      const span = entries.reduce((a, c) => a + c.bounds.width, 0)\n\n      if (span > commonBounds.width) {\n        const left = entries.sort((a, b) => a.bounds.minX - b.bounds.minX)[0]\n\n        const right = entries.sort((a, b) => b.bounds.maxX - a.bounds.maxX)[0]\n\n        const entriesToMove = entries\n          .filter((a) => a !== left && a !== right)\n          .sort((a, b) => a.center[0] - b.center[0])\n\n        const step = (right.center[0] - left.center[0]) / (len - 1)\n\n        const x = left.center[0] + step\n\n        entriesToMove.forEach(({ id, point, bounds }, i) => {\n          results.push({\n            id,\n            prev: point,\n            next: [x + step * i - bounds.width / 2, bounds.minY],\n          })\n        })\n      } else {\n        const entriesToMove = entries.sort((a, b) => a.center[0] - b.center[0])\n\n        let x = commonBounds.minX\n        const step = (commonBounds.width - span) / (len - 1)\n\n        entriesToMove.forEach(({ id, point, bounds }) => {\n          results.push({ id, prev: point, next: [x, bounds.minY] })\n          x += bounds.width + step\n        })\n      }\n      break\n    }\n    case DistributeType.Vertical: {\n      const span = entries.reduce((a, c) => a + c.bounds.height, 0)\n\n      if (span > commonBounds.height) {\n        const top = entries.sort((a, b) => a.bounds.minY - b.bounds.minY)[0]\n\n        const bottom = entries.sort((a, b) => b.bounds.maxY - a.bounds.maxY)[0]\n\n        const entriesToMove = entries\n          .filter((a) => a !== top && a !== bottom)\n          .sort((a, b) => a.center[1] - b.center[1])\n\n        const step = (bottom.center[1] - top.center[1]) / (len - 1)\n\n        const y = top.center[1] + step\n\n        entriesToMove.forEach(({ id, point, bounds }, i) => {\n          results.push({\n            id,\n            prev: point,\n            next: [bounds.minX, y + step * i - bounds.height / 2],\n          })\n        })\n      } else {\n        const entriesToMove = entries.sort((a, b) => a.center[1] - b.center[1])\n\n        let y = commonBounds.minY\n        const step = (commonBounds.height - span) / (len - 1)\n\n        entriesToMove.forEach(({ id, point, bounds }) => {\n          results.push({ id, prev: point, next: [bounds.minX, y] })\n          y += bounds.height + step\n        })\n      }\n\n      break\n    }\n  }\n\n  return results\n}\n", "import { Utils } from '@tldraw/core'\nimport type { TldrawApp } from '~state/TldrawApp'\nimport type { TldrawCommand } from '~types'\n\nexport function duplicatePage(app: TldrawApp, pageId: string): TldrawCommand {\n  const {\n    currentPageId,\n    pageState: { camera },\n  } = app\n\n  const page = app.document.pages[pageId]\n\n  const newId = Utils.uniqueId()\n\n  // Map shapes and bindings onto new IDs\n  const oldToNewIds: Record<string, string> = Object.fromEntries([\n    [page.id, newId],\n    ...Object.keys(page.shapes).map((id) => [id, Utils.uniqueId()]),\n    ...Object.keys(page.bindings).map((id) => [id, Utils.uniqueId()]),\n  ])\n\n  const shapes = Object.fromEntries(\n    Object.entries(page.shapes).map(([id, shape]) => [\n      oldToNewIds[id],\n      {\n        ...Utils.deepClone(shape),\n        id: oldToNewIds[id],\n        parentId: oldToNewIds[shape.parentId],\n      },\n    ])\n  )\n\n  const bindings = Object.fromEntries(\n    Object.entries(page.bindings).map(([id, binding]) => [\n      oldToNewIds[id],\n      {\n        ...Utils.deepClone(binding),\n        id: oldToNewIds[binding.id],\n        fromId: oldToNewIds[binding.fromId],\n        toId: oldToNewIds[binding.toId],\n      },\n    ])\n  )\n\n  // Update the shape's to and from references to the new bindingid\n  Object.values(page.bindings).forEach((binding) => {\n    const fromId = oldToNewIds[binding.fromId]\n    const fromHandles = shapes[fromId]!.handles\n\n    if (fromHandles) {\n      Object.values(fromHandles).forEach((handle) => {\n        if (handle!.bindingId === binding.id) {\n          handle!.bindingId = oldToNewIds[binding.id]\n        }\n      })\n    }\n\n    const toId = oldToNewIds[binding.toId]\n    const toHandles = shapes[toId]!.handles\n\n    if (toHandles) {\n      Object.values(toHandles).forEach((handle) => {\n        if (handle!.bindingId === binding.id) {\n          handle!.bindingId = oldToNewIds[binding.id]\n        }\n      })\n    }\n  })\n\n  const nextPage = {\n    ...page,\n    id: oldToNewIds[page.id],\n    name: page.name + ' Copy',\n    shapes,\n    bindings,\n  }\n\n  return {\n    id: 'duplicate_page',\n    before: {\n      appState: {\n        currentPageId,\n      },\n      document: {\n        pages: {\n          [newId]: undefined,\n        },\n        pageStates: {\n          [newId]: undefined,\n        },\n      },\n    },\n    after: {\n      appState: {\n        currentPageId: newId,\n      },\n      document: {\n        pages: {\n          [newId]: nextPage,\n        },\n        pageStates: {\n          [newId]: {\n            ...page,\n            id: newId,\n            selectedIds: [],\n            camera: { ...camera },\n            editingId: undefined,\n            bindingId: undefined,\n            hoveredId: undefined,\n            pointedId: undefined,\n          },\n        },\n      },\n    },\n  }\n}\n", "import { Utils } from '@tldraw/core'\nimport { Vec } from '@tldraw/vec'\nimport { TLDR } from '~state/TLDR'\nimport type { TldrawApp } from '~state/TldrawApp'\nimport type { PagePartial, TDShape, TldrawCommand } from '~types'\n\nexport function duplicateShapes(app: TldrawApp, ids: string[], point?: number[]): TldrawCommand {\n  const { selectedIds, currentPageId, page, shapes } = app\n\n  const before: PagePartial = {\n    shapes: {},\n    bindings: {},\n  }\n\n  const after: PagePartial = {\n    shapes: {},\n    bindings: {},\n  }\n\n  const duplicateMap: Record<string, string> = {}\n\n  const shapesToDuplicate = ids\n    .map((id) => app.getShape(id))\n    .filter((shape) => !ids.includes(shape.parentId))\n\n  // Create duplicates\n  shapesToDuplicate.forEach((shape) => {\n    const duplicatedId = Utils.uniqueId()\n    before.shapes[duplicatedId] = undefined\n\n    after.shapes[duplicatedId] = {\n      ...Utils.deepClone(shape),\n      id: duplicatedId,\n      childIndex: TLDR.getChildIndexAbove(app.state, shape.id, currentPageId),\n    }\n\n    if (shape.children) {\n      after.shapes[duplicatedId]!.children = []\n    }\n\n    if (shape.parentId !== currentPageId) {\n      const parent = app.getShape(shape.parentId)\n\n      before.shapes[parent.id] = {\n        ...before.shapes[parent.id],\n        children: parent.children,\n      }\n\n      after.shapes[parent.id] = {\n        ...after.shapes[parent.id],\n        children: [...(after.shapes[parent.id] || parent).children!, duplicatedId],\n      }\n    }\n\n    duplicateMap[shape.id] = duplicatedId\n  })\n\n  // If the shapes have children, then duplicate those too\n  shapesToDuplicate.forEach((shape) => {\n    if (shape.children) {\n      shape.children.forEach((childId) => {\n        const child = app.getShape(childId)\n        const duplicatedId = Utils.uniqueId()\n        const duplicatedParentId = duplicateMap[shape.id]\n        before.shapes[duplicatedId] = undefined\n        after.shapes[duplicatedId] = {\n          ...Utils.deepClone(child),\n          id: duplicatedId,\n          parentId: duplicatedParentId,\n          childIndex: TLDR.getChildIndexAbove(app.state, child.id, currentPageId),\n        }\n        duplicateMap[childId] = duplicatedId\n        after.shapes[duplicateMap[shape.id]]?.children?.push(duplicatedId)\n      })\n    }\n  })\n\n  // Which ids did we end up duplicating?\n  const dupedShapeIds = new Set(Object.keys(duplicateMap))\n\n  // Handle bindings that effect duplicated shapes\n  Object.values(page.bindings)\n    .filter((binding) => dupedShapeIds.has(binding.fromId) || dupedShapeIds.has(binding.toId))\n    .forEach((binding) => {\n      if (dupedShapeIds.has(binding.fromId)) {\n        if (dupedShapeIds.has(binding.toId)) {\n          // If the binding is between two duplicating shapes then\n          // duplicate the binding, too\n          const duplicatedBindingId = Utils.uniqueId()\n\n          const duplicatedBinding = {\n            ...Utils.deepClone(binding),\n            id: duplicatedBindingId,\n            fromId: duplicateMap[binding.fromId],\n            toId: duplicateMap[binding.toId],\n          }\n\n          before.bindings[duplicatedBindingId] = undefined\n          after.bindings[duplicatedBindingId] = duplicatedBinding\n\n          // Change the duplicated shape's handle so that it reference\n          // the duplicated binding\n          const boundShape = after.shapes[duplicatedBinding.fromId]\n          Object.values(boundShape!.handles!).forEach((handle) => {\n            if (handle!.bindingId === binding.id) {\n              handle!.bindingId = duplicatedBindingId\n            }\n          })\n        } else {\n          // If only the fromId is selected, delete the binding on\n          // the duplicated shape's handles\n          const boundShape = after.shapes[duplicateMap[binding.fromId]]\n          Object.values(boundShape!.handles!).forEach((handle) => {\n            if (handle!.bindingId === binding.id) {\n              handle!.bindingId = undefined\n            }\n          })\n        }\n      }\n    })\n\n  // Now move the shapes\n\n  const shapesToMove = Object.values(after.shapes) as TDShape[]\n\n  if (point) {\n    const commonBounds = Utils.getCommonBounds(shapesToMove.map((shape) => TLDR.getBounds(shape)))\n    const center = Utils.getBoundsCenter(commonBounds)\n    shapesToMove.forEach((shape) => {\n      // Could be a group\n      if (!shape.point) return\n      shape.point = Vec.sub(point, Vec.sub(center, shape.point))\n    })\n  } else {\n    const offset = [16, 16]\n    shapesToMove.forEach((shape) => {\n      // Could be a group\n      if (!shape.point) return\n      shape.point = Vec.add(shape.point, offset)\n    })\n  }\n\n  // Unlock any locked shapes\n  shapesToMove.forEach((shape) => {\n    if (shape.isLocked) {\n      shape.isLocked = false\n    }\n  })\n\n  return {\n    id: 'duplicate',\n    before: {\n      document: {\n        pages: {\n          [currentPageId]: before,\n        },\n        pageStates: {\n          [currentPageId]: { selectedIds },\n        },\n      },\n    },\n    after: {\n      document: {\n        pages: {\n          [currentPageId]: after,\n        },\n        pageStates: {\n          [currentPageId]: {\n            selectedIds: Array.from(dupedShapeIds.values()).map((id) => duplicateMap[id]),\n          },\n        },\n      },\n    },\n  }\n}\n", "import { TLBoundsCorner, Utils } from '@tldraw/core'\nimport { TLDR } from '~state/TLDR'\nimport type { TldrawApp } from '~state/TldrawApp'\nimport { FlipType } from '~types'\nimport type { TldrawCommand } from '~types'\n\nexport function flipShapes(app: TldrawApp, ids: string[], type: FlipType): TldrawCommand {\n  const {\n    selectedIds,\n    currentPageId,\n    page: { shapes },\n  } = app\n\n  const boundsForShapes = ids.map((id) => TLDR.getBounds(shapes[id]))\n\n  const isSinglySelectedGroup = ids.length === 1 && shapes[ids[0]].type === 'group'\n\n  const commonBounds = Utils.getCommonBounds(boundsForShapes)\n\n  const { before, after } = TLDR.mutateShapes(\n    app.state,\n    ids,\n    (shape) => {\n      const shapeBounds = TLDR.getBounds(shape)\n      const isChildOfGroup = shape.parentId !== currentPageId\n      switch (type) {\n        case FlipType.Horizontal: {\n          if (isChildOfGroup && !isSinglySelectedGroup) {\n            // do translation of this child\n            const groupBounds = TLDR.getBounds(shapes[shape.parentId])\n            const newGroupBounds = Utils.getRelativeTransformedBoundingBox(\n              commonBounds,\n              commonBounds,\n              groupBounds,\n              true,\n              false\n            )\n            const dx = newGroupBounds.minX - groupBounds.minX\n            return TLDR.getShapeUtil(shape).transform(\n              shape,\n              { ...shapeBounds, minX: shapeBounds.minX + dx, maxX: shapeBounds.maxX + dx },\n              {\n                type: TLBoundsCorner.TopLeft,\n                scaleX: 1,\n                scaleY: 1,\n                initialShape: shape,\n                transformOrigin: [0.5, 0.5],\n              }\n            )\n          }\n\n          const newShapeBounds = Utils.getRelativeTransformedBoundingBox(\n            commonBounds,\n            commonBounds,\n            shapeBounds,\n            true,\n            false\n          )\n\n          return TLDR.getShapeUtil(shape).transform(shape, newShapeBounds, {\n            type: TLBoundsCorner.TopLeft,\n            scaleX: -1,\n            scaleY: 1,\n            initialShape: shape,\n            transformOrigin: [0.5, 0.5],\n          })\n        }\n        case FlipType.Vertical: {\n          if (isChildOfGroup && !isSinglySelectedGroup) {\n            // do translation of this child\n            const groupBounds = TLDR.getBounds(shapes[shape.parentId])\n            const newGroupBounds = Utils.getRelativeTransformedBoundingBox(\n              commonBounds,\n              commonBounds,\n              groupBounds,\n              false,\n              true\n            )\n            const dy = newGroupBounds.minY - groupBounds.minY\n            return TLDR.getShapeUtil(shape).transform(\n              shape,\n              { ...shapeBounds, minY: shapeBounds.minY + dy, maxY: shapeBounds.maxY + dy },\n              {\n                type: TLBoundsCorner.TopLeft,\n                scaleX: 1,\n                scaleY: 1,\n                initialShape: shape,\n                transformOrigin: [0.5, 0.5],\n              }\n            )\n          }\n          const newShapeBounds = Utils.getRelativeTransformedBoundingBox(\n            commonBounds,\n            commonBounds,\n            shapeBounds,\n            false,\n            true\n          )\n\n          return TLDR.getShapeUtil(shape).transform(shape, newShapeBounds, {\n            type: TLBoundsCorner.TopLeft,\n            scaleX: 1,\n            scaleY: -1,\n            initialShape: shape,\n            transformOrigin: [0.5, 0.5],\n          })\n        }\n      }\n    },\n    currentPageId,\n    true\n  )\n\n  return {\n    id: 'flip',\n    before: {\n      document: {\n        pages: {\n          [currentPageId]: { shapes: before },\n        },\n        pageStates: {\n          [currentPageId]: {\n            selectedIds,\n          },\n        },\n      },\n    },\n    after: {\n      document: {\n        pages: {\n          [currentPageId]: { shapes: after },\n        },\n        pageStates: {\n          [currentPageId]: {\n            selectedIds: ids,\n          },\n        },\n      },\n    },\n  }\n}\n", "import { Utils } from '@tldraw/core'\nimport { TLDR } from '~state/TLDR'\nimport type { TldrawApp } from '~state/TldrawApp'\nimport { TDShape, TDShapeType } from '~types'\nimport type { Patch, TDBinding, TldrawCommand } from '~types'\n\nexport function groupShapes(\n  app: TldrawApp,\n  ids: string[],\n  groupId: string,\n  pageId: string\n): TldrawCommand | undefined {\n  if (ids.length < 2) return\n\n  const beforeShapes: Record<string, Patch<TDShape | undefined>> = {}\n  const afterShapes: Record<string, Patch<TDShape | undefined>> = {}\n\n  const beforeBindings: Record<string, Patch<TDBinding | undefined>> = {}\n  const afterBindings: Record<string, Patch<TDBinding | undefined>> = {}\n\n  const idsToGroup = [...ids]\n  const shapesToGroup: TDShape[] = []\n  const deletedGroupIds: string[] = []\n  const otherEffectedGroups: TDShape[] = []\n\n  // Collect all of the shapes to group (and their ids)\n  for (const id of ids) {\n    const shape = app.getShape(id)\n    if (shape.isLocked) continue\n\n    if (shape.children === undefined) {\n      shapesToGroup.push(shape)\n    } else {\n      const childIds = shape.children.filter((id) => !app.getShape(id).isLocked)\n      otherEffectedGroups.push(shape)\n      idsToGroup.push(...childIds)\n      shapesToGroup.push(...childIds.map((id) => app.getShape(id)).filter(Boolean))\n    }\n  }\n\n  // 1. Can we create this group?\n\n  // Do the shapes have the same parent?\n  if (shapesToGroup.every((shape) => shape.parentId === shapesToGroup[0].parentId)) {\n    // Is the common parent a shape (not the page)?\n    if (shapesToGroup[0].parentId !== pageId) {\n      const commonParent = app.getShape(shapesToGroup[0].parentId)\n      // Are all of the common parent's shapes selected?\n      if (commonParent.children?.length === idsToGroup.length) {\n        // Don't create a group if that group would be the same as the\n        // existing group.\n        return\n      }\n    }\n  }\n\n  // A flattened array of shapes from the page\n  const flattenedShapes = TLDR.flattenPage(app.state, pageId)\n\n  // A map of shapes to their index in flattendShapes\n  const shapeIndexMap = Object.fromEntries(\n    shapesToGroup.map((shape) => [shape.id, flattenedShapes.indexOf(shape)])\n  )\n\n  // An array of shapes in order by their index in flattendShapes\n  const sortedShapes = shapesToGroup.sort((a, b) => shapeIndexMap[a.id] - shapeIndexMap[b.id])\n\n  // The parentId is always the current page\n  const groupParentId = pageId // sortedShapes[0].parentId\n\n  // The childIndex should be the lowest index of the selected shapes\n  // with a parent that is the current page; or else the child index\n  // of the lowest selected shape.\n  const groupChildIndex = (\n    sortedShapes.filter((shape) => shape.parentId === pageId)[0] || sortedShapes[0]\n  ).childIndex\n\n  // The shape's point is the min point of its childrens' common bounds\n  const groupBounds = Utils.getCommonBounds(shapesToGroup.map((shape) => TLDR.getBounds(shape)))\n\n  // Create the group\n  beforeShapes[groupId] = undefined\n\n  afterShapes[groupId] = TLDR.getShapeUtil(TDShapeType.Group).create({\n    id: groupId,\n    childIndex: groupChildIndex,\n    parentId: groupParentId,\n    point: [groupBounds.minX, groupBounds.minY],\n    size: [groupBounds.width, groupBounds.height],\n    children: sortedShapes.map((shape) => shape.id),\n  })\n\n  // Reparent shapes to the new group\n  sortedShapes.forEach((shape, index) => {\n    // If the shape is part of a different group, mark the parent shape for cleanup\n    if (shape.parentId !== pageId) {\n      const parentShape = app.getShape(shape.parentId)\n      otherEffectedGroups.push(parentShape)\n    }\n\n    beforeShapes[shape.id] = {\n      ...beforeShapes[shape.id],\n      parentId: shape.parentId,\n      childIndex: shape.childIndex,\n    }\n\n    afterShapes[shape.id] = {\n      ...afterShapes[shape.id],\n      parentId: groupId,\n      childIndex: index + 1,\n    }\n  })\n\n  // Clean up effected parents\n  while (otherEffectedGroups.length > 0) {\n    const shape = otherEffectedGroups.pop()\n    if (!shape) break\n\n    const nextChildren = (beforeShapes[shape.id]?.children || shape.children)!.filter(\n      (childId) => childId && !(idsToGroup.includes(childId) || deletedGroupIds.includes(childId))\n    )\n\n    // If the parent has no children, remove it\n    if (nextChildren.length === 0) {\n      beforeShapes[shape.id] = shape\n      afterShapes[shape.id] = undefined\n\n      // And if that parent is part of a different group, mark it for cleanup\n      // (This is necessary only when we implement nested groups.)\n      if (shape.parentId !== pageId) {\n        deletedGroupIds.push(shape.id)\n        otherEffectedGroups.push(app.getShape(shape.parentId))\n      }\n    } else {\n      beforeShapes[shape.id] = {\n        ...beforeShapes[shape.id],\n        children: shape.children,\n      }\n\n      afterShapes[shape.id] = {\n        ...afterShapes[shape.id],\n        children: nextChildren,\n      }\n    }\n  }\n\n  // TODO: This code is copied from delete.command. Create a shared helper!\n\n  const { bindings } = app\n\n  const deletedGroupIdsSet = new Set(deletedGroupIds)\n\n  // We also need to delete bindings that reference the deleted shapes\n  bindings.forEach((binding) => {\n    for (const id of [binding.toId, binding.fromId]) {\n      // If the binding references a deleted shape...\n      if (deletedGroupIdsSet.has(id)) {\n        // Delete this binding\n        beforeBindings[binding.id] = binding\n        afterBindings[binding.id] = undefined\n\n        // Let's also look each the bound shape...\n        const shape = app.getShape(id)\n\n        // If the bound shape has a handle that references the deleted binding...\n        if (shape.handles) {\n          Object.values(shape.handles)\n            .filter((handle) => handle.bindingId === binding.id)\n            .forEach((handle) => {\n              // Save the binding reference in the before patch\n              beforeShapes[id] = {\n                ...beforeShapes[id],\n                handles: {\n                  ...beforeShapes[id]?.handles,\n                  [handle.id]: { bindingId: binding.id },\n                },\n              }\n\n              // Unless we're currently deleting the shape, remove the\n              // binding reference from the after patch\n              if (!deletedGroupIds.includes(id)) {\n                afterShapes[id] = {\n                  ...afterShapes[id],\n                  handles: {\n                    ...afterShapes[id]?.handles,\n                    [handle.id]: { bindingId: undefined },\n                  },\n                }\n              }\n            })\n        }\n      }\n    }\n  })\n\n  return {\n    id: 'group',\n    before: {\n      document: {\n        pages: {\n          [pageId]: {\n            shapes: beforeShapes,\n            bindings: beforeBindings,\n          },\n        },\n        pageStates: {\n          [pageId]: {\n            selectedIds: ids,\n          },\n        },\n      },\n    },\n    after: {\n      document: {\n        pages: {\n          [pageId]: {\n            shapes: afterShapes,\n            bindings: beforeBindings,\n          },\n        },\n        pageStates: {\n          [pageId]: {\n            selectedIds: [groupId],\n          },\n        },\n      },\n    },\n  }\n}\n", "import { TLBounds, Utils } from '@tldraw/core'\nimport { Vec } from '@tldraw/vec'\nimport { TLDR } from '~state/TLDR'\nimport type { TldrawApp } from '~state/TldrawApp'\nimport type { ArrowShape, PagePartial, TDShape, TldrawCommand } from '~types'\n\nexport function moveShapesToPage(\n  app: TldrawApp,\n  ids: string[],\n  viewportBounds: TLBounds,\n  fromPageId: string,\n  toPageId: string\n): TldrawCommand {\n  const { page } = app\n\n  const fromPage: Record<string, PagePartial> = {\n    before: {\n      shapes: {},\n      bindings: {},\n    },\n    after: {\n      shapes: {},\n      bindings: {},\n    },\n  }\n\n  const toPage: Record<string, PagePartial> = {\n    before: {\n      shapes: {},\n      bindings: {},\n    },\n    after: {\n      shapes: {},\n      bindings: {},\n    },\n  }\n\n  // Collect all the shapes to move and their keys.\n  const movingShapeIds = new Set<string>()\n  const shapesToMove = new Set<TDShape>()\n\n  ids\n    .map((id) => app.getShape(id, fromPageId))\n    .filter((shape) => !shape.isLocked)\n    .forEach((shape) => {\n      movingShapeIds.add(shape.id)\n      shapesToMove.add(shape)\n      if (shape.children !== undefined) {\n        shape.children.forEach((childId) => {\n          movingShapeIds.add(childId)\n          shapesToMove.add(app.getShape(childId, fromPageId))\n        })\n      }\n    })\n\n  // Where should we put start putting shapes on the \"to\" page?\n  const startingChildIndex = TLDR.getTopChildIndex(app.state, toPageId)\n\n  // Which shapes are we moving?\n  const movingShapes = Array.from(shapesToMove.values())\n\n  movingShapes.forEach((shape, i) => {\n    // Remove the shape from the fromPage\n    fromPage.before.shapes[shape.id] = shape\n    fromPage.after.shapes[shape.id] = undefined\n\n    // But the moved shape on the \"to\" page\n    toPage.before.shapes[shape.id] = undefined\n    toPage.after.shapes[shape.id] = shape\n\n    // If the shape's parent isn't moving too, reparent the shape to\n    // the \"to\" page, at the top of the z stack\n    if (!movingShapeIds.has(shape.parentId)) {\n      toPage.after.shapes[shape.id] = {\n        ...shape,\n        parentId: toPageId,\n        childIndex: startingChildIndex + i,\n      }\n\n      // If the shape was in a group, then pull the shape from the\n      // parent's children array.\n      if (shape.parentId !== fromPageId) {\n        const parent = app.getShape(shape.parentId, fromPageId)\n        fromPage.before.shapes[parent.id] = {\n          children: parent.children,\n        }\n\n        fromPage.after.shapes[parent.id] = {\n          children: parent.children!.filter((childId) => childId !== shape.id),\n        }\n      }\n    }\n  })\n\n  // Handle bindings that effect duplicated shapes\n  Object.values(page.bindings)\n    .filter((binding) => movingShapeIds.has(binding.fromId) || movingShapeIds.has(binding.toId))\n    .forEach((binding) => {\n      // Always delete the binding from the from page\n\n      fromPage.before.bindings[binding.id] = binding\n      fromPage.after.bindings[binding.id] = undefined\n\n      // Delete the reference from the binding's fromShape\n\n      const fromBoundShape = app.getShape(binding.fromId, fromPageId)\n\n      // Will we be copying this binding to the new page?\n\n      const shouldCopy = movingShapeIds.has(binding.fromId) && movingShapeIds.has(binding.toId)\n\n      if (shouldCopy) {\n        // Just move the binding to the new page\n        toPage.before.bindings[binding.id] = undefined\n        toPage.after.bindings[binding.id] = binding\n      } else {\n        if (movingShapeIds.has(binding.fromId)) {\n          // If we are only moving the \"from\" shape, we need to delete\n          // the binding reference from the \"from\" shapes handles\n          const fromShape = app.getShape(binding.fromId, fromPageId)\n          const handle = Object.values(fromBoundShape.handles!).find(\n            (handle) => handle.bindingId === binding.id\n          )!\n\n          // Remove the handle from the shape on the toPage\n\n          const handleId = handle.id as keyof ArrowShape['handles']\n\n          const toPageShape = toPage.after.shapes[fromShape.id]!\n\n          toPageShape.handles = {\n            ...toPageShape.handles,\n            [handleId]: {\n              ...toPageShape.handles![handleId],\n              bindingId: undefined,\n            },\n          }\n        } else {\n          // If we are only moving the \"to\" shape, we need to delete\n          // the binding reference from the \"from\" shape's handles\n          const fromShape = app.getShape(binding.fromId, fromPageId)\n          const handle = Object.values(fromBoundShape.handles!).find(\n            (handle) => handle.bindingId === binding.id\n          )!\n\n          fromPage.before.shapes[fromShape.id] = {\n            handles: { [handle.id]: { bindingId: binding.id } },\n          }\n\n          fromPage.after.shapes[fromShape.id] = {\n            handles: { [handle.id]: { bindingId: undefined } },\n          }\n        }\n      }\n    })\n\n  // Finally, center camera on selection\n\n  const toPageState = app.state.document.pageStates[toPageId]\n\n  const bounds = Utils.getCommonBounds(movingShapes.map((shape) => TLDR.getBounds(shape)))\n\n  const zoom = TLDR.getCameraZoom(\n    viewportBounds.width < viewportBounds.height\n      ? (viewportBounds.width - 128) / bounds.width\n      : (viewportBounds.height - 128) / bounds.height\n  )\n\n  const mx = (viewportBounds.width - bounds.width * zoom) / 2 / zoom\n  const my = (viewportBounds.height - bounds.height * zoom) / 2 / zoom\n\n  const point = Vec.toFixed(Vec.add([-bounds.minX, -bounds.minY], [mx, my]))\n\n  return {\n    id: 'move_to_page',\n    before: {\n      appState: {\n        currentPageId: fromPageId,\n      },\n      document: {\n        pages: {\n          [fromPageId]: fromPage.before,\n          [toPageId]: toPage.before,\n        },\n        pageStates: {\n          [fromPageId]: { selectedIds: ids },\n          [toPageId]: {\n            selectedIds: toPageState.selectedIds,\n            camera: toPageState.camera,\n          },\n        },\n      },\n    },\n    after: {\n      appState: {\n        currentPageId: toPageId,\n      },\n      document: {\n        pages: {\n          [fromPageId]: fromPage.after,\n          [toPageId]: toPage.after,\n        },\n        pageStates: {\n          [fromPageId]: { selectedIds: [] },\n          [toPageId]: {\n            selectedIds: ids,\n            camera: {\n              zoom,\n              point,\n            },\n          },\n        },\n      },\n    },\n  }\n}\n", "import type { TldrawApp } from '~state/TldrawApp'\nimport type { TDPage, TldrawCommand } from '~types'\n\nexport function movePage(app: TldrawApp, pageId: string, index: number): TldrawCommand {\n  const { pages } = app.document\n\n  const movingPage = pages[pageId]\n\n  const beforePages = Object.values(pages).sort((a, b) => (a.childIndex ?? 0) - (b.childIndex ?? 0))\n\n  const fromIndex = beforePages.indexOf(movingPage)\n\n  const afterPages = [...beforePages]\n  afterPages.splice(fromIndex, 1)\n  afterPages.splice(index > fromIndex ? index - 1 : index, 0, movingPage)\n\n  return {\n    id: 'move_page',\n    before: {\n      document: {\n        pages: Object.fromEntries(\n          beforePages.map((p: TDPage) => [p.id, { childIndex: p.childIndex }])\n        ),\n      },\n    },\n    after: {\n      document: {\n        pages: Object.fromEntries(\n          afterPages.map((p: TDPage, childIndex) => [p.id, { childIndex }])\n        ),\n      },\n    },\n  }\n}\n", "import { TLDR } from '~state/TLDR'\nimport type { TldrawApp } from '~state/TldrawApp'\nimport { MoveType, TDShape, TldrawCommand } from '~types'\n\nexport function reorderShapes(app: TldrawApp, ids: string[], type: MoveType): TldrawCommand {\n  const { currentPageId, page } = app\n\n  // Get the unique parent ids for the selected elements\n  const parentIds = new Set(ids.map((id) => app.getShape(id).parentId))\n\n  let result: {\n    before: Record<string, Partial<TDShape>>\n    after: Record<string, Partial<TDShape>>\n  } = { before: {}, after: {} }\n\n  let startIndex: number\n  let startChildIndex: number\n  let step: number\n\n  // Collect shapes with common parents into a table under their parent id\n  Array.from(parentIds.values()).forEach((parentId) => {\n    let sortedChildren: TDShape[] = []\n    if (parentId === page.id) {\n      sortedChildren = Object.values(page.shapes).sort((a, b) => a.childIndex - b.childIndex)\n    } else {\n      const parent = app.getShape(parentId)\n      if (!parent.children) throw Error('No children in parent!')\n\n      sortedChildren = parent.children\n        .map((childId) => app.getShape(childId))\n        .sort((a, b) => a.childIndex - b.childIndex)\n    }\n\n    const sortedChildIds = sortedChildren.map((shape) => shape.id)\n\n    const sortedIndicesToMove = ids\n      .filter((id) => sortedChildIds.includes(id))\n      .map((id) => sortedChildIds.indexOf(id))\n      .sort((a, b) => a - b)\n\n    if (sortedIndicesToMove.length === sortedChildIds.length) return\n\n    switch (type) {\n      case MoveType.ToBack: {\n        //               a       b  c\n        // Initial   1   2    3  4  5  6  7\n        // Final   .25  .5  .75  1  3  6  7\n        //           a   b    c\n\n        // Find the lowest \"open\" index\n        for (let i = 0; i < sortedChildIds.length; i++) {\n          if (sortedIndicesToMove.includes(i)) continue\n          startIndex = i\n          break\n        }\n\n        // Find the lowest child index that isn't in sortedIndicesToMove\n        startChildIndex = sortedChildren[startIndex].childIndex\n\n        // Find the step for each additional child\n        step = startChildIndex / (sortedIndicesToMove.length + 1)\n\n        // Get the results of moving the selected shapes below the first open index's shape\n        result = TLDR.mutateShapes(\n          app.state,\n          sortedIndicesToMove.map((i) => sortedChildren[i].id).reverse(),\n          (_shape, i) => ({\n            childIndex: startChildIndex - (i + 1) * step,\n          }),\n          currentPageId\n        )\n\n        break\n      }\n      case MoveType.ToFront: {\n        //              a     b  c\n        // Initial   1  2  3  4  5  6   7\n        // Final     1  3  6  7  8  9  10\n        //                       a  b   c\n\n        // Find the highest \"open\" index\n        for (let i = sortedChildIds.length - 1; i >= 0; i--) {\n          if (sortedIndicesToMove.includes(i)) continue\n          startIndex = i\n          break\n        }\n\n        // Find the lowest child index that isn't in sortedIndicesToMove\n        startChildIndex = sortedChildren[startIndex].childIndex\n\n        // Find the step for each additional child\n        step = 1\n\n        // Get the results of moving the selected shapes below the first open index's shape\n        result = TLDR.mutateShapes(\n          app.state,\n          sortedIndicesToMove.map((i) => sortedChildren[i].id),\n          (_shape, i) => ({\n            childIndex: startChildIndex + (i + 1),\n          }),\n          currentPageId\n        )\n\n        break\n      }\n      case MoveType.Backward: {\n        //               a           b  c\n        // Initial    1  2     3     4  5  6  7\n        // Final     .5  1  1.66  2.33  3  6  7\n        //           a         b     c\n\n        const indexMap: Record<string, number> = {}\n\n        // Starting from the top...\n        for (let i = sortedChildIds.length - 1; i >= 0; i--) {\n          // If we found a moving index...\n          if (sortedIndicesToMove.includes(i)) {\n            for (let j = i; j >= 0; j--) {\n              // iterate downward until we find an open spot\n              if (!sortedIndicesToMove.includes(j)) {\n                // i = the index of the first closed spot\n                // j = the index of the first open spot\n\n                const endChildIndex = sortedChildren[j].childIndex\n                let startChildIndex: number\n                let step: number\n\n                if (j === 0) {\n                  // We're moving below the first child, start from\n                  // half of its child index.\n\n                  startChildIndex = endChildIndex / 2\n                  step = endChildIndex / 2 / (i - j + 1)\n                } else {\n                  // Start from the child index of the child below the\n                  // child above.\n                  startChildIndex = sortedChildren[j - 1].childIndex\n                  step = (endChildIndex - startChildIndex) / (i - j + 1)\n                  startChildIndex += step\n                }\n\n                for (let k = 0; k < i - j; k++) {\n                  indexMap[sortedChildren[j + k + 1].id] = startChildIndex + step * k\n                }\n\n                break\n              }\n            }\n          }\n        }\n\n        if (Object.values(indexMap).length > 0) {\n          // Get the results of moving the selected shapes below the first open index's shape\n          result = TLDR.mutateShapes(\n            app.state,\n            sortedIndicesToMove.map((i) => sortedChildren[i].id),\n            (shape) => ({\n              childIndex: indexMap[shape.id],\n            }),\n            currentPageId\n          )\n        }\n\n        break\n      }\n      case MoveType.Forward: {\n        //             a     b c\n        // Initial   1 2   3 4 5 6 7\n        // Final     1 3 3.5 6 7 8 9\n        //                 a     b c\n\n        const indexMap: Record<string, number> = {}\n\n        // Starting from the top...\n        for (let i = 0; i < sortedChildIds.length; i++) {\n          // If we found a moving index...\n          if (sortedIndicesToMove.includes(i)) {\n            // Search for the first open spot above this one\n            for (let j = i; j < sortedChildIds.length; j++) {\n              if (!sortedIndicesToMove.includes(j)) {\n                // i = the low index of the first closed spot\n                // j = the high index of the first open spot\n\n                startChildIndex = sortedChildren[j].childIndex\n\n                const step =\n                  j === sortedChildIds.length - 1\n                    ? 1\n                    : (sortedChildren[j + 1].childIndex - startChildIndex) / (j - i + 1)\n\n                for (let k = 0; k < j - i; k++) {\n                  indexMap[sortedChildren[i + k].id] = startChildIndex + step * (k + 1)\n                }\n\n                break\n              }\n            }\n          }\n        }\n\n        if (Object.values(indexMap).length > 0) {\n          // Get the results of moving the selected shapes below the first open index's shape\n          result = TLDR.mutateShapes(\n            app.state,\n            sortedIndicesToMove.map((i) => sortedChildren[i].id),\n            (shape) => ({\n              childIndex: indexMap[shape.id],\n            }),\n            currentPageId\n          )\n        }\n\n        break\n      }\n    }\n  })\n\n  return {\n    id: 'move',\n    before: {\n      document: {\n        pages: {\n          [currentPageId]: { shapes: result.before },\n        },\n        pageStates: {\n          [currentPageId]: {\n            selectedIds: ids,\n          },\n        },\n      },\n    },\n    after: {\n      document: {\n        pages: {\n          [currentPageId]: { shapes: result.after },\n        },\n        pageStates: {\n          [currentPageId]: {\n            selectedIds: ids,\n          },\n        },\n      },\n    },\n  }\n}\n", "import type { TldrawApp } from '~state/TldrawApp'\nimport type { TldrawCommand } from '~types'\n\nexport function renamePage(app: TldrawApp, pageId: string, name: string): TldrawCommand {\n  const { page } = app\n\n  return {\n    id: 'rename_page',\n    before: {\n      document: {\n        pages: {\n          [pageId]: { name: page.name },\n        },\n      },\n    },\n    after: {\n      document: {\n        pages: {\n          [pageId]: { name: name },\n        },\n      },\n    },\n  }\n}\n", "import { TLDR } from '~state/TLDR'\nimport type { TldrawApp } from '~state/TldrawApp'\nimport type { TldrawCommand } from '~types'\n\nexport function resetBounds(app: TldrawApp, ids: string[], pageId: string): TldrawCommand {\n  const { currentPageId } = app\n\n  const { before, after } = TLDR.mutateShapes(\n    app.state,\n    ids,\n    (shape) => app.getShapeUtil(shape).onDoubleClickBoundsHandle?.(shape),\n    pageId\n  )\n\n  return {\n    id: 'reset_bounds',\n    before: {\n      document: {\n        pages: {\n          [currentPageId]: { shapes: before },\n        },\n        pageStates: {\n          [currentPageId]: {\n            selectedIds: ids,\n          },\n        },\n      },\n    },\n    after: {\n      document: {\n        pages: {\n          [currentPageId]: { shapes: after },\n        },\n        pageStates: {\n          [currentPageId]: {\n            selectedIds: ids,\n          },\n        },\n      },\n    },\n  }\n}\n", "import { Utils } from '@tldraw/core'\nimport { TLDR } from '~state/TLDR'\nimport type { TldrawApp } from '~state/TldrawApp'\nimport type { TDShape, TldrawCommand } from '~types'\n\nconst PI2 = Math.PI * 2\n\nexport function rotateShapes(\n  app: TldrawApp,\n  ids: string[],\n  delta = -PI2 / 4\n): TldrawCommand | void {\n  const { currentPageId } = app\n\n  // The shapes for the before patch\n  const before: Record<string, Partial<TDShape>> = {}\n\n  // The shapes for the after patch\n  const after: Record<string, Partial<TDShape>> = {}\n\n  // Find the shapes that we want to rotate.\n  // We don't rotate groups: we rotate their children instead.\n  const shapesToRotate = ids\n    .flatMap((id) => {\n      const shape = app.getShape(id)\n      return shape.children ? shape.children.map((childId) => app.getShape(childId)) : shape\n    })\n    .filter((shape) => !shape.isLocked)\n\n  // Find the common center to all shapes\n  // This is the point that we'll rotate around\n  const origin = Utils.getBoundsCenter(\n    Utils.getCommonBounds(shapesToRotate.map((shape) => TLDR.getBounds(shape)))\n  )\n\n  // Find the rotate mutations for each shape\n  shapesToRotate.forEach((shape) => {\n    const change = TLDR.getRotatedShapeMutation(shape, TLDR.getCenter(shape), origin, delta)\n    if (!change) return\n    before[shape.id] = TLDR.getBeforeShape(shape, change)\n    after[shape.id] = change\n  })\n\n  return {\n    id: 'rotate',\n    before: {\n      document: {\n        pages: {\n          [currentPageId]: { shapes: before },\n        },\n        pageStates: {\n          [currentPageId]: {\n            selectedIds: ids,\n          },\n        },\n      },\n    },\n    after: {\n      document: {\n        pages: {\n          [currentPageId]: { shapes: after },\n        },\n        pageStates: {\n          [currentPageId]: {\n            selectedIds: ids,\n          },\n        },\n      },\n    },\n  }\n}\n", "import { TLBoundsCorner, Utils } from '@tldraw/core'\nimport { TLDR } from '~state/TLDR'\nimport type { TldrawApp } from '~state/TldrawApp'\nimport { StretchType, TDShapeType } from '~types'\nimport type { TldrawCommand } from '~types'\n\nexport function stretchShapes(app: TldrawApp, ids: string[], type: StretchType): TldrawCommand {\n  const { currentPageId, selectedIds } = app\n\n  const initialShapes = ids.map((id) => app.getShape(id))\n\n  const boundsForShapes = initialShapes.map((shape) => TLDR.getBounds(shape))\n\n  const commonBounds = Utils.getCommonBounds(boundsForShapes)\n\n  const idsToMutate = ids\n    .flatMap((id) => {\n      const shape = app.getShape(id)\n      return shape.children ? shape.children : shape.id\n    })\n    .filter((id) => !app.getShape(id).isLocked)\n\n  const { before, after } = TLDR.mutateShapes(\n    app.state,\n    idsToMutate,\n    (shape) => {\n      const bounds = TLDR.getBounds(shape)\n\n      switch (type) {\n        case StretchType.Horizontal: {\n          const newBounds = {\n            ...bounds,\n            minX: commonBounds.minX,\n            maxX: commonBounds.maxX,\n            width: commonBounds.width,\n          }\n\n          return TLDR.getShapeUtil(shape).transformSingle(shape, newBounds, {\n            type: TLBoundsCorner.TopLeft,\n            scaleX: newBounds.width / bounds.width,\n            scaleY: 1,\n            initialShape: shape,\n            transformOrigin: [0.5, 0.5],\n          })\n        }\n        case StretchType.Vertical: {\n          const newBounds = {\n            ...bounds,\n            minY: commonBounds.minY,\n            maxY: commonBounds.maxY,\n            height: commonBounds.height,\n          }\n\n          return TLDR.getShapeUtil(shape).transformSingle(shape, newBounds, {\n            type: TLBoundsCorner.TopLeft,\n            scaleX: 1,\n            scaleY: newBounds.height / bounds.height,\n            initialShape: shape,\n            transformOrigin: [0.5, 0.5],\n          })\n        }\n      }\n    },\n    currentPageId\n  )\n\n  initialShapes.forEach((shape) => {\n    if (shape.type === TDShapeType.Group) {\n      delete before[shape.id]\n      delete after[shape.id]\n    }\n  })\n\n  return {\n    id: 'stretch',\n    before: {\n      document: {\n        pages: {\n          [currentPageId]: { shapes: before },\n        },\n        pageStates: {\n          [currentPageId]: {\n            selectedIds,\n          },\n        },\n      },\n    },\n    after: {\n      document: {\n        pages: {\n          [currentPageId]: { shapes: after },\n        },\n        pageStates: {\n          [currentPageId]: {\n            selectedIds: ids,\n          },\n        },\n      },\n    },\n  }\n}\n", "import { Vec } from '@tldraw/vec'\nimport { TLDR } from '~state/TLDR'\nimport type { TldrawApp } from '~state/TldrawApp'\nimport { Patch, ShapeStyles, TDShape, TDShapeType, TextShape, TldrawCommand } from '~types'\n\nexport function styleShapes(\n  app: TldrawApp,\n  ids: string[],\n  changes: Partial<ShapeStyles>\n): TldrawCommand {\n  const { currentPageId, selectedIds } = app\n\n  const shapeIdsToMutate = ids\n    .flatMap((id) => TLDR.getDocumentBranch(app.state, id, currentPageId))\n    .filter((id) => !app.getShape(id).isLocked)\n\n  const beforeShapes: Record<string, Patch<TDShape>> = {}\n  const afterShapes: Record<string, Patch<TDShape>> = {}\n\n  shapeIdsToMutate\n    .map((id) => app.getShape(id))\n    .filter((shape) => !shape.isLocked)\n    .forEach((shape) => {\n      beforeShapes[shape.id] = {\n        style: {\n          ...Object.fromEntries(\n            Object.keys(changes).map((key) => [key, shape.style[key as keyof typeof shape.style]])\n          ),\n        },\n      }\n\n      afterShapes[shape.id] = {\n        style: changes,\n      }\n\n      if (shape.type === TDShapeType.Text) {\n        beforeShapes[shape.id].point = shape.point\n        afterShapes[shape.id].point = Vec.toFixed(\n          Vec.add(\n            shape.point,\n            Vec.sub(\n              app.getShapeUtil(shape).getCenter(shape),\n              app.getShapeUtil(shape).getCenter({\n                ...shape,\n                style: { ...shape.style, ...changes },\n              } as TextShape)\n            )\n          )\n        )\n      }\n    })\n\n  return {\n    id: 'style',\n    before: {\n      document: {\n        pages: {\n          [currentPageId]: {\n            shapes: beforeShapes,\n          },\n        },\n        pageStates: {\n          [currentPageId]: {\n            selectedIds: selectedIds,\n          },\n        },\n      },\n      appState: {\n        currentStyle: { ...app.appState.currentStyle },\n      },\n    },\n    after: {\n      document: {\n        pages: {\n          [currentPageId]: {\n            shapes: afterShapes,\n          },\n        },\n        pageStates: {\n          [currentPageId]: {\n            selectedIds: ids,\n          },\n        },\n      },\n      appState: {\n        currentStyle: changes,\n      },\n    },\n  }\n}\n", "import type { TldrawApp } from '~state/internal'\nimport { Decoration } from '~types'\nimport type { ArrowShape, Patch, TldrawCommand } from '~types'\n\nexport function toggleShapesDecoration(\n  app: TldrawApp,\n  ids: string[],\n  decorationId: 'start' | 'end'\n): TldrawCommand {\n  const { currentPageId, selectedIds } = app\n\n  const beforeShapes: Record<string, Patch<ArrowShape>> = Object.fromEntries(\n    ids.map((id) => [\n      id,\n      {\n        decorations: {\n          [decorationId]: app.getShape<ArrowShape>(id).decorations?.[decorationId],\n        },\n      },\n    ])\n  )\n\n  const afterShapes: Record<string, Patch<ArrowShape>> = Object.fromEntries(\n    ids\n      .filter((id) => !app.getShape(id).isLocked)\n      .map((id) => [\n        id,\n        {\n          decorations: {\n            [decorationId]: app.getShape<ArrowShape>(id).decorations?.[decorationId]\n              ? undefined\n              : Decoration.Arrow,\n          },\n        },\n      ])\n  )\n\n  return {\n    id: 'toggle_decorations',\n    before: {\n      document: {\n        pages: {\n          [currentPageId]: { shapes: beforeShapes },\n        },\n        pageStates: {\n          [currentPageId]: {\n            selectedIds,\n          },\n        },\n      },\n    },\n    after: {\n      document: {\n        pages: {\n          [currentPageId]: { shapes: afterShapes },\n        },\n        pageStates: {\n          [currentPageId]: {\n            selectedIds: ids,\n          },\n        },\n      },\n    },\n  }\n}\n", "import type { TldrawApp } from '~state'\nimport type { TDShape, TldrawCommand } from '~types'\n\nexport function toggleShapeProp(app: TldrawApp, ids: string[], prop: keyof TDShape): TldrawCommand {\n  const { currentPageId } = app\n\n  const initialShapes = ids\n    .map((id) => app.getShape(id))\n    .filter((shape) => (prop === 'isLocked' ? true : !shape.isLocked))\n\n  const isAllToggled = initialShapes.every((shape) => shape[prop])\n\n  const before: Record<string, Partial<TDShape>> = {}\n  const after: Record<string, Partial<TDShape>> = {}\n\n  initialShapes.forEach((shape) => {\n    before[shape.id] = { [prop]: shape[prop] }\n    after[shape.id] = { [prop]: !isAllToggled }\n  })\n\n  return {\n    id: 'toggle',\n    before: {\n      document: {\n        pages: {\n          [currentPageId]: {\n            shapes: before,\n          },\n        },\n        pageStates: {\n          [currentPageId]: {\n            selectedIds: ids,\n          },\n        },\n      },\n    },\n    after: {\n      document: {\n        pages: {\n          [currentPageId]: {\n            shapes: after,\n          },\n        },\n        pageStates: {\n          [currentPageId]: {\n            selectedIds: ids,\n          },\n        },\n      },\n    },\n  }\n}\n", "import { Vec } from '@tldraw/vec'\nimport { TLDR } from '~state/TLDR'\nimport type { TldrawApp } from '~state/TldrawApp'\nimport type { PagePartial, TldrawCommand } from '~types'\n\nexport function translateShapes(app: TldrawApp, ids: string[], delta: number[]): TldrawCommand {\n  const { currentPageId, selectedIds } = app\n\n  // Clear session cache\n  app.rotationInfo.selectedIds = [...selectedIds]\n\n  const before: PagePartial = {\n    shapes: {},\n    bindings: {},\n  }\n\n  const after: PagePartial = {\n    shapes: {},\n    bindings: {},\n  }\n\n  const idsToMutate = ids\n    .flatMap((id) => {\n      const shape = app.getShape(id)\n      return shape.children ? shape.children : shape.id\n    })\n    .filter((id) => !app.getShape(id).isLocked)\n\n  const change = TLDR.mutateShapes(\n    app.state,\n    idsToMutate,\n    (shape) => ({\n      point: Vec.toFixed(Vec.add(shape.point, delta)),\n    }),\n    currentPageId\n  )\n\n  before.shapes = change.before\n  after.shapes = change.after\n\n  // Delete bindings from nudged shapes, unless both bound and bound-to shapes are selected\n  const bindingsToDelete = TLDR.getBindings(app.state, currentPageId).filter(\n    (binding) => ids.includes(binding.fromId) && !ids.includes(binding.toId)\n  )\n\n  bindingsToDelete.forEach((binding) => {\n    before.bindings[binding.id] = binding\n    after.bindings[binding.id] = undefined\n\n    for (const id of [binding.toId, binding.fromId]) {\n      // Let's also look at the bound shape...\n      const shape = app.getShape(id)\n\n      if (!shape.handles) continue\n\n      // If the bound shape has a handle that references the deleted binding, delete that reference\n\n      Object.values(shape.handles)\n        .filter((handle) => handle.bindingId === binding.id)\n        .forEach((handle) => {\n          before.shapes[id] = {\n            ...before.shapes[id],\n            handles: {\n              ...before.shapes[id]?.handles,\n              [handle.id]: { bindingId: binding.id },\n            },\n          }\n          after.shapes[id] = {\n            ...after.shapes[id],\n            handles: { ...after.shapes[id]?.handles, [handle.id]: { bindingId: undefined } },\n          }\n        })\n    }\n  })\n\n  return {\n    id: 'translate',\n    before: {\n      document: {\n        pages: {\n          [currentPageId]: before,\n        },\n        pageStates: {\n          [currentPageId]: {\n            selectedIds: ids,\n          },\n        },\n      },\n    },\n    after: {\n      document: {\n        pages: {\n          [currentPageId]: after,\n        },\n        pageStates: {\n          [currentPageId]: {\n            selectedIds: ids,\n          },\n        },\n      },\n    },\n  }\n}\n", "import { TLDR } from '~state/TLDR'\nimport type { TldrawApp } from '~state/TldrawApp'\nimport type { GroupShape, Patch, TDBinding, TDShape } from '~types'\nimport type { TldrawCommand } from '~types'\n\nexport function ungroupShapes(\n  app: TldrawApp,\n  selectedIds: string[],\n  groupShapes: GroupShape[],\n  pageId: string\n): TldrawCommand | undefined {\n  const { bindings } = app\n\n  const beforeShapes: Record<string, Patch<TDShape | undefined>> = {}\n  const afterShapes: Record<string, Patch<TDShape | undefined>> = {}\n\n  const beforeBindings: Record<string, Patch<TDBinding | undefined>> = {}\n  const afterBindings: Record<string, Patch<TDBinding | undefined>> = {}\n\n  const beforeSelectedIds = selectedIds\n  const afterSelectedIds = selectedIds.filter((id) => !groupShapes.find((shape) => shape.id === id))\n\n  // The group shape\n  groupShapes\n    .filter((shape) => !shape.isLocked)\n    .forEach((groupShape) => {\n      const shapesToReparent: TDShape[] = []\n      const deletedGroupIds: string[] = []\n\n      // Remove the group shape in the next state\n      beforeShapes[groupShape.id] = groupShape\n      afterShapes[groupShape.id] = undefined\n\n      // Select its children in the next state\n      groupShape.children.forEach((id) => {\n        afterSelectedIds.push(id)\n        const shape = app.getShape(id, pageId)\n        shapesToReparent.push(shape)\n      })\n\n      // We'll start placing the shapes at this childIndex\n      const startingChildIndex = groupShape.childIndex\n\n      // And we'll need to fit them under this child index\n      const endingChildIndex = TLDR.getChildIndexAbove(app.state, groupShape.id, pageId)\n\n      const step = (endingChildIndex - startingChildIndex) / shapesToReparent.length\n\n      // An array of shapes in order by their child index\n      const sortedShapes = shapesToReparent.sort((a, b) => a.childIndex - b.childIndex)\n\n      // Reparent shapes to the page\n      sortedShapes.forEach((shape, index) => {\n        beforeShapes[shape.id] = {\n          parentId: shape.parentId,\n          childIndex: shape.childIndex,\n        }\n\n        afterShapes[shape.id] = {\n          parentId: pageId,\n          childIndex: startingChildIndex + step * index,\n        }\n      })\n\n      // We also need to delete bindings that reference the deleted shapes\n      bindings\n        .filter((binding) => binding.toId === groupShape.id || binding.fromId === groupShape.id)\n        .forEach((binding) => {\n          for (const id of [binding.toId, binding.fromId]) {\n            // If the binding references the deleted group...\n            if (afterShapes[id] === undefined) {\n              // Delete the binding\n              beforeBindings[binding.id] = binding\n              afterBindings[binding.id] = undefined\n\n              // Let's also look each the bound shape...\n              const shape = app.getShape(id, pageId)\n\n              // If the bound shape has a handle that references the deleted binding...\n              if (shape.handles) {\n                Object.values(shape.handles)\n                  .filter((handle) => handle.bindingId === binding.id)\n                  .forEach((handle) => {\n                    // Save the binding reference in the before patch\n                    beforeShapes[id] = {\n                      ...beforeShapes[id],\n                      handles: {\n                        ...beforeShapes[id]?.handles,\n                        [handle.id]: { bindingId: binding.id },\n                      },\n                    }\n\n                    // Unless we're currently deleting the shape, remove the\n                    // binding reference from the after patch\n                    if (!deletedGroupIds.includes(id)) {\n                      afterShapes[id] = {\n                        ...afterShapes[id],\n                        handles: {\n                          ...afterShapes[id]?.handles,\n                          [handle.id]: { bindingId: undefined },\n                        },\n                      }\n                    }\n                  })\n              }\n            }\n          }\n        })\n    })\n\n  return {\n    id: 'ungroup',\n    before: {\n      document: {\n        pages: {\n          [pageId]: {\n            shapes: beforeShapes,\n            bindings: beforeBindings,\n          },\n        },\n        pageStates: {\n          [pageId]: {\n            selectedIds: beforeSelectedIds,\n          },\n        },\n      },\n    },\n    after: {\n      document: {\n        pages: {\n          [pageId]: {\n            shapes: afterShapes,\n            bindings: beforeBindings,\n          },\n        },\n        pageStates: {\n          [pageId]: {\n            selectedIds: afterSelectedIds,\n          },\n        },\n      },\n    },\n  }\n}\n", "import { TLDR } from '~state/TLDR'\nimport type { TldrawApp } from '~state/TldrawApp'\nimport type { TDShape, TldrawCommand } from '~types'\n\nexport function updateShapes(\n  app: TldrawApp,\n  updates: ({ id: string } & Partial<TDShape>)[],\n  pageId: string\n): TldrawCommand {\n  const ids = updates.map((update) => update.id)\n\n  const change = TLDR.mutateShapes(\n    app.state,\n    ids.filter((id) => !app.getShape(id, pageId).isLocked),\n    (_shape, i) => updates[i],\n    pageId\n  )\n\n  return {\n    id: 'update',\n    before: {\n      document: {\n        pages: {\n          [pageId]: {\n            shapes: change.before,\n          },\n        },\n      },\n    },\n    after: {\n      document: {\n        pages: {\n          [pageId]: {\n            shapes: change.after,\n          },\n        },\n      },\n    },\n  }\n}\n", "import type { TldrawApp } from '~state'\nimport type { TDShape, TldrawCommand } from '~types'\n\nexport function setShapesProps<T extends TDShape>(\n  app: TldrawApp,\n  ids: string[],\n  partial: Partial<T>\n): TldrawCommand {\n  const { currentPageId, selectedIds } = app\n\n  const initialShapes = ids\n    .map((id) => app.getShape<T>(id))\n    .filter((shape) => (partial['isLocked'] ? true : !shape.isLocked))\n\n  const before: Record<string, Partial<TDShape>> = {}\n  const after: Record<string, Partial<TDShape>> = {}\n\n  const keys = Object.keys(partial) as (keyof T)[]\n\n  initialShapes.forEach((shape) => {\n    before[shape.id] = Object.fromEntries(keys.map((key) => [key, shape[key]]))\n    after[shape.id] = partial\n  })\n\n  return {\n    id: 'set_props',\n    before: {\n      document: {\n        pages: {\n          [currentPageId]: {\n            shapes: before,\n          },\n        },\n        pageStates: {\n          [currentPageId]: {\n            selectedIds,\n          },\n        },\n      },\n    },\n    after: {\n      document: {\n        pages: {\n          [currentPageId]: {\n            shapes: after,\n          },\n        },\n        pageStates: {\n          [currentPageId]: {\n            selectedIds,\n          },\n        },\n      },\n    },\n  }\n}\n", "import { Utils } from '@tldraw/core'\nimport { Vec } from '@tldraw/vec'\nimport { TLDR } from '~state/TLDR'\nimport type { TldrawApp } from '~state/TldrawApp'\nimport type { PagePartial, TDAsset, TDBinding, TDShape, TldrawCommand } from '~types'\n\nexport function insertContent(\n  app: TldrawApp,\n  content: { shapes: TDShape[]; bindings?: TDBinding[]; assets?: TDAsset[] },\n  opts = {} as { point?: number[]; select?: boolean; overwrite?: boolean }\n): TldrawCommand {\n  const { currentPageId } = app\n  const { point, select, overwrite } = opts\n\n  const page = app.document.pages[currentPageId]\n\n  const before: PagePartial = {\n    shapes: {},\n    bindings: {},\n  }\n\n  const afterAssets: Record<string, TDAsset> = {}\n\n  const after: PagePartial = {\n    shapes: {},\n    bindings: {},\n  }\n\n  if (overwrite) {\n    // Map shapes and bindings onto new IDs to avoid overwriting existing content.\n    for (const shape of content.shapes) {\n      before.shapes[shape.id] = page.shapes[shape.id]\n      after.shapes[shape.id] = shape\n    }\n    if (content.bindings) {\n      for (const binding of content.bindings) {\n        before.bindings[binding.id] = page.bindings[binding.id]\n        after.bindings[binding.id] = binding\n      }\n    }\n    if (content.assets) {\n      for (const asset of content.assets) {\n        afterAssets[asset.id] = asset\n      }\n    }\n  } else {\n    // Map shapes and bindings onto new IDs to avoid overwriting existing content.\n\n    const oldToNewIds: Record<string, string> = {}\n\n    // The index of the new shape\n    let nextIndex = TLDR.getTopChildIndex(app.state, currentPageId)\n\n    const shapesToInsert: TDShape[] = content.shapes\n      .sort((a, b) => a.childIndex - b.childIndex)\n      .map((shape) => {\n        const newShapeId = Utils.uniqueId()\n        oldToNewIds[shape.id] = newShapeId\n\n        // The redo should include a clone of the new shape\n        return {\n          ...Utils.deepClone(shape),\n          id: newShapeId,\n        }\n      })\n\n    const visited = new Set<string>()\n\n    // Iterate through the list, starting from the front\n    while (shapesToInsert.length > 0) {\n      const shape = shapesToInsert.shift()\n\n      if (!shape) break\n\n      visited.add(shape.id)\n\n      if (shape.parentId === 'currentPageId') {\n        shape.parentId = currentPageId\n        shape.childIndex = nextIndex++\n      } else {\n        // The shape had another shape as its parent.\n\n        // Re-assign the shape's parentId to the new id\n        shape.parentId = oldToNewIds[shape.parentId]\n\n        // Has that parent been added yet to the after object?\n        const parent = after.shapes[shape.parentId]\n\n        if (!parent) {\n          if (visited.has(shape.id)) {\n            // If we've already visited this shape, then that means\n            // its parent was not among the shapes to insert. Set it\n            // to be a child of the current page instead.\n            shape.parentId = 'currentPageId'\n          }\n\n          // If the parent hasn't been added yet, push this shape\n          // to back of the queue; we'll try and add it again later\n          shapesToInsert.push(shape)\n          continue\n        }\n\n        // If we've found the parent, add this shape's id to its children\n        parent.children!.push(shape.id)\n      }\n\n      // If the inserting shape has its own children, set the children to\n      // an empty array; we'll add them later, as just shown above\n      if (shape.children) {\n        shape.children = []\n      }\n\n      // The undo should remove the inserted shape\n      before.shapes[shape.id] = undefined\n\n      // The redo should include the inserted shape\n      after.shapes[shape.id] = shape\n    }\n\n    Object.values(after.shapes).forEach((shape) => {\n      // If the shape used to have children, but no longer does have children,\n      // then delete the shape. This prevents inserting groups without children.\n      if (shape!.children && shape!.children.length === 0) {\n        delete before.shapes[shape!.id!]\n        delete after.shapes[shape!.id!]\n      }\n    })\n\n    // Insert bindings\n    if (content.bindings) {\n      content.bindings.forEach((binding) => {\n        const newBindingId = Utils.uniqueId()\n        oldToNewIds[binding.id] = newBindingId\n\n        const toId = oldToNewIds[binding.toId]\n        const fromId = oldToNewIds[binding.fromId]\n\n        // If the binding is \"to\" or \"from\" a shape that hasn't been inserted,\n        // we'll need to skip the binding and remove it from any shape that\n        // references it.\n        if (!toId || !fromId) {\n          if (fromId) {\n            const handles = after.shapes[fromId]!.handles\n            if (handles) {\n              Object.values(handles).forEach((handle) => {\n                if (handle!.bindingId === binding.id) {\n                  handle!.bindingId = undefined\n                }\n              })\n            }\n          }\n\n          if (toId) {\n            const handles = after.shapes[toId]!.handles\n            if (handles) {\n              Object.values(handles).forEach((handle) => {\n                if (handle!.bindingId === binding.id) {\n                  handle!.bindingId = undefined\n                }\n              })\n            }\n          }\n\n          return\n        }\n\n        // Update the shape's to and from references to the new bindingid\n\n        const fromHandles = after.shapes[fromId]!.handles\n        if (fromHandles) {\n          Object.values(fromHandles).forEach((handle) => {\n            if (handle!.bindingId === binding.id) {\n              handle!.bindingId = newBindingId\n            }\n          })\n        }\n\n        const toHandles = after.shapes[toId]!.handles\n        if (toHandles) {\n          Object.values(after.shapes[toId]!.handles!).forEach((handle) => {\n            if (handle!.bindingId === binding.id) {\n              handle!.bindingId = newBindingId\n            }\n          })\n        }\n\n        const newBinding = {\n          ...Utils.deepClone(binding),\n          id: newBindingId,\n          toId,\n          fromId,\n        }\n\n        // The undo should remove the inserted binding\n        before.bindings[newBinding.id] = undefined\n\n        // The redo should include the inserted binding\n        after.bindings[newBinding.id] = newBinding\n      })\n    }\n\n    // Now move the shapes\n\n    const shapesToMove = Object.values(after.shapes) as TDShape[]\n\n    if (shapesToMove.length > 0) {\n      if (point) {\n        // Move the shapes so that they're centered on the given point\n        const commonBounds = Utils.getCommonBounds(\n          shapesToMove.map((shape) => TLDR.getBounds(shape))\n        )\n        const center = Utils.getBoundsCenter(commonBounds)\n        shapesToMove.forEach((shape) => {\n          if (!shape.point) return\n          shape.point = Vec.sub(point, Vec.sub(center, shape.point))\n        })\n      } else {\n        const commonBounds = Utils.getCommonBounds(shapesToMove.map(TLDR.getBounds))\n\n        if (\n          !(\n            Utils.boundsContain(app.viewport, commonBounds) ||\n            Utils.boundsCollide(app.viewport, commonBounds)\n          )\n        ) {\n          const center = Vec.toFixed(app.getPagePoint(app.centerPoint))\n\n          const centeredBounds = Utils.centerBounds(commonBounds, center)\n\n          const delta = Vec.sub(\n            Utils.getBoundsCenter(centeredBounds),\n            Utils.getBoundsCenter(commonBounds)\n          )\n\n          shapesToMove.forEach((shape) => {\n            shape.point = Vec.toFixed(Vec.add(shape.point, delta))\n          })\n        }\n      }\n    }\n    if (content.assets) {\n      for (const asset of content.assets) {\n        afterAssets[asset.id] = asset\n      }\n    }\n  }\n\n  const elm = document.createElement('textarea')\n\n  Object.values(after.shapes as Record<string, TDShape>).forEach((shape) => {\n    if ('text' in shape) {\n      elm.innerHTML = shape.text\n      shape.text = elm.value\n    }\n\n    if ('label' in shape) {\n      elm.innerHTML = shape.label!\n      shape.label = elm.value\n    }\n  })\n\n  elm.remove()\n\n  return {\n    id: 'insert',\n    before: {\n      document: {\n        pages: {\n          [currentPageId]: before,\n        },\n        pageStates: {\n          [currentPageId]: { selectedIds: [...app.selectedIds] },\n        },\n      },\n    },\n    after: {\n      document: {\n        pages: {\n          [currentPageId]: after,\n        },\n        assets: afterAssets,\n        pageStates: {\n          [currentPageId]: {\n            selectedIds: select ? Object.keys(after.shapes) : [...app.selectedIds],\n          },\n        },\n      },\n    },\n  }\n}\n", "export * from './migrate'\nexport * from './filesystem'\nexport * from 'browser-fs-access'\n", "import {\n  Decoration,\n  FontStyle,\n  TDExportBackground,\n  TDShapeType,\n  TDSnapshot,\n  TextShape,\n} from '~types'\n\nexport function migrate(state: TDSnapshot, newVersion: number): TDSnapshot {\n  const { document, settings } = state\n  const { version = 0 } = document\n\n  if (!('assets' in document)) {\n    document.assets = {}\n  }\n\n  // Remove unused assets when loading a document\n  const assetIdsInUse = new Set<string>()\n\n  Object.values(document.pages).forEach((page) =>\n    Object.values(page.shapes).forEach((shape) => {\n      const { parentId, children, assetId } = shape\n\n      if (assetId) {\n        assetIdsInUse.add(assetId)\n      }\n\n      // Fix missing parent bug\n      if (parentId !== page.id && !page.shapes[parentId]) {\n        console.warn('Encountered a shape with a missing parent!')\n        shape.parentId = page.id\n      }\n\n      if (shape.type === TDShapeType.Group && children) {\n        children.forEach((childId) => {\n          if (!page.shapes[childId]) {\n            console.warn('Encountered a parent with a missing child!', shape.id, childId)\n            children?.splice(children.indexOf(childId), 1)\n          }\n        })\n\n        // TODO: Remove the shape if it has no children\n      }\n    })\n  )\n\n  Object.keys(document.assets).forEach((assetId) => {\n    if (!assetIdsInUse.has(assetId)) {\n      delete document.assets[assetId]\n    }\n  })\n\n  if (version !== newVersion) {\n    if (version < 14) {\n      Object.values(document.pages).forEach((page) => {\n        Object.values(page.shapes)\n          .filter((shape) => shape.type === TDShapeType.Text)\n          .forEach((shape) => (shape as TextShape).style.font === FontStyle.Script)\n      })\n    }\n\n    // Lowercase styles, move binding meta to binding\n    if (version <= 13) {\n      Object.values(document.pages).forEach((page) => {\n        Object.values(page.bindings).forEach((binding) => {\n          Object.assign(binding, (binding as any).meta)\n        })\n\n        Object.values(page.shapes).forEach((shape) => {\n          Object.entries(shape.style).forEach(([id, style]) => {\n            if (typeof style === 'string') {\n              // @ts-ignore\n              shape.style[id] = style.toLowerCase()\n            }\n          })\n\n          if (shape.type === TDShapeType.Arrow) {\n            if (shape.decorations) {\n              Object.entries(shape.decorations).forEach(([id, decoration]) => {\n                if ((decoration as unknown) === 'Arrow') {\n                  shape.decorations = {\n                    ...shape.decorations,\n                    [id]: Decoration.Arrow,\n                  }\n                }\n              })\n            }\n          }\n        })\n      })\n    }\n\n    // Add document name and file system handle\n    if (version <= 13.1) {\n      document.name = 'New Document'\n    }\n\n    if (version < 15) {\n      document.assets = {}\n    }\n\n    Object.values(document.pages).forEach((page) => {\n      Object.values(page.shapes).forEach((shape) => {\n        if (version < 15.2) {\n          if (shape.type === TDShapeType.Image || shape.type === TDShapeType.Video) {\n            shape.style.isFilled = true\n          }\n        }\n\n        if (version < 15.3) {\n          if (\n            shape.type === TDShapeType.Rectangle ||\n            shape.type === TDShapeType.Triangle ||\n            shape.type === TDShapeType.Ellipse ||\n            shape.type === TDShapeType.Arrow\n          ) {\n            shape.label = (shape as any).text || ''\n            shape.labelPoint = [0.5, 0.5]\n          }\n        }\n      })\n    })\n\n    if (version < 15.4) {\n      settings.dockPosition = 'bottom'\n    }\n\n    if (version < 15.5) {\n      settings.exportBackground = TDExportBackground.Transparent\n    }\n  }\n\n  // Cleanup\n  Object.values(document.pageStates).forEach((pageState) => {\n    pageState.selectedIds = pageState.selectedIds.filter((id) => {\n      return document.pages[pageState.id].shapes[id] !== undefined\n    })\n    pageState.bindingId = undefined\n    pageState.editingId = undefined\n    pageState.hoveredId = undefined\n    pageState.pointedId = undefined\n  })\n\n  document.version = newVersion\n\n  return state\n}\n", "import { fileOpen, fileSave, supported } from 'browser-fs-access'\nimport type { FileSystemHandle } from 'browser-fs-access'\nimport { get as getFromIdb, set as setToIdb } from 'idb-keyval'\nimport { FILE_EXTENSION, IMAGE_EXTENSIONS, VIDEO_EXTENSIONS } from '~constants'\nimport type { TDDocument, TDFile } from '~types'\n\nconst options = { mode: 'readwrite' as const }\n\nconst checkPermissions = async (handle: FileSystemFileHandle) => {\n  return (\n    (await (handle as unknown as FileSystemHandle).queryPermission(options)) === 'granted' ||\n    (await (handle as unknown as FileSystemHandle).requestPermission(options)) === 'granted'\n  )\n}\n\nexport async function loadFileHandle() {\n  if (typeof Window === 'undefined' || !('_location' in Window)) return\n  const fileHandle = await getFromIdb(`Tldraw_file_handle_${window.location.origin}`)\n  if (!fileHandle) return null\n  return fileHandle\n}\n\nexport async function saveFileHandle(fileHandle: FileSystemFileHandle | null) {\n  return setToIdb(`Tldraw_file_handle_${window.location.origin}`, fileHandle)\n}\n\nexport async function saveToFileSystem(\n  document: TDDocument,\n  fileHandle: FileSystemFileHandle | null,\n  name?: string\n) {\n  // Create the saved file data\n  const file: TDFile = {\n    name: document.name || 'New Document',\n    fileHandle: fileHandle ?? null,\n    document,\n  }\n\n  // Serialize to JSON\n  const json =\n    process.env.NODE_ENV === 'production' ? JSON.stringify(file) : JSON.stringify(file, null, 2)\n\n  // Create blob\n  const blob = new Blob([json], {\n    type: 'application/vnd.Tldraw+json',\n  })\n\n  if (fileHandle) {\n    const hasPermissions = await checkPermissions(fileHandle)\n    if (!hasPermissions) return null\n  }\n  const filename = !supported && name?.length ? name : `${file.name}`\n  // Save to file system\n  const newFileHandle = await fileSave(\n    blob,\n    {\n      fileName: `${filename}${FILE_EXTENSION}`,\n      description: 'Tldraw File',\n      extensions: [`${FILE_EXTENSION}`],\n    },\n    fileHandle\n  )\n\n  await saveFileHandle(newFileHandle)\n\n  // Return true\n  return newFileHandle\n}\n\nexport async function openFromFileSystem(): Promise<null | {\n  fileHandle: FileSystemFileHandle | null\n  document: TDDocument\n}> {\n  // Get the blob\n  const blob = await fileOpen({\n    description: 'Tldraw File',\n    extensions: [`${FILE_EXTENSION}`],\n    multiple: false,\n  })\n\n  if (!blob) return null\n\n  // Get JSON from blob\n  const json: string = await new Promise((resolve) => {\n    const reader = new FileReader()\n    reader.onloadend = () => {\n      if (reader.readyState === FileReader.DONE) {\n        resolve(reader.result as string)\n      }\n    }\n    reader.readAsText(blob, 'utf8')\n  })\n\n  // Parse\n  const file: TDFile = JSON.parse(json)\n  if ('tldrawFileFormatVersion' in file) {\n    alert(\n      // todo: update this message when we do the actual migration\n      'This file was created in a newer version of tldraw. Please visit beta.tldraw.com to open it.'\n    )\n    return null\n  }\n\n  const fileHandle = blob.handle ?? null\n\n  await saveFileHandle(fileHandle)\n\n  return {\n    fileHandle,\n    document: file.document,\n  }\n}\n\nexport async function openAssetsFromFileSystem() {\n  return fileOpen({\n    description: 'Image or Video',\n    extensions: [...IMAGE_EXTENSIONS, ...VIDEO_EXTENSIONS],\n    multiple: true,\n  })\n}\n\nexport function fileToBase64(file: Blob): Promise<string | ArrayBuffer | null> {\n  return new Promise((resolve, reject) => {\n    if (file) {\n      const reader = new FileReader()\n      reader.readAsDataURL(file)\n      reader.onload = () => resolve(reader.result)\n      reader.onerror = (error) => reject(error)\n      reader.onabort = (error) => reject(error)\n    }\n  })\n}\n\nexport function fileToText(file: Blob): Promise<string | ArrayBuffer | null> {\n  return new Promise((resolve, reject) => {\n    if (file) {\n      const reader = new FileReader()\n      reader.readAsText(file)\n      reader.onload = () => resolve(reader.result)\n      reader.onerror = (error) => reject(error)\n      reader.onabort = (error) => reject(error)\n    }\n  })\n}\n\nexport function getImageSizeFromSrc(src: string): Promise<number[]> {\n  return new Promise((resolve, reject) => {\n    const img = new Image()\n    img.onload = () => resolve([img.width, img.height])\n    img.onerror = () => reject(new Error('Could not get image size'))\n    img.src = src\n  })\n}\n\nexport function getVideoSizeFromSrc(src: string): Promise<number[]> {\n  return new Promise((resolve, reject) => {\n    const video = document.createElement('video')\n    video.onloadedmetadata = () => resolve([video.videoWidth, video.videoHeight])\n    video.onerror = () => reject(new Error('Could not get video size'))\n    video.src = src\n  })\n}\n", "import { Utils } from '@tldraw/core'\nimport { Vec } from '@tldraw/vec'\nimport { deepCopy } from '~state/StateManager/copy'\nimport { TLDR } from '~state/TLDR'\nimport type { TldrawApp } from '~state/TldrawApp'\nimport { BaseSession } from '~state/sessions/BaseSession'\nimport { shapeUtils } from '~state/shapes'\nimport {\n  ArrowBinding,\n  ArrowShape,\n  SessionType,\n  TDBinding,\n  TDShape,\n  TDShapeType,\n  TDStatus,\n  TldrawCommand,\n  TldrawPatch,\n} from '~types'\n\nexport class ArrowSession extends BaseSession {\n  type = SessionType.Arrow\n  performanceMode = undefined\n  status = TDStatus.TranslatingHandle\n  newStartBindingId = Utils.uniqueId()\n  draggedBindingId = Utils.uniqueId()\n  didBind = false\n  initialShape: ArrowShape\n  handleId: 'start' | 'end'\n  bindableShapeIds: string[]\n  initialBinding?: TDBinding\n  startBindingShapeId?: string\n  isCreate: boolean\n\n  constructor(app: TldrawApp, shapeId: string, handleId: 'start' | 'end', isCreate = false) {\n    super(app)\n\n    this.isCreate = isCreate\n\n    const { currentPageId } = app.state.appState\n\n    const page = app.state.document.pages[currentPageId]\n\n    this.handleId = handleId\n\n    this.initialShape = deepCopy(page.shapes[shapeId] as ArrowShape)\n\n    this.bindableShapeIds = TLDR.getBindableShapeIds(app.state).filter(\n      (id) => !(id === this.initialShape.id || id === this.initialShape.parentId)\n    )\n\n    // TODO: find out why this the oppositeHandleBindingId is sometimes missing\n    const oppositeHandleBindingId =\n      this.initialShape.handles[handleId === 'start' ? 'end' : 'start']?.bindingId\n\n    if (oppositeHandleBindingId) {\n      const oppositeToId = page.bindings[oppositeHandleBindingId]?.toId\n      if (oppositeToId) {\n        this.bindableShapeIds = this.bindableShapeIds.filter((id) => id !== oppositeToId)\n      }\n    }\n\n    const { originPoint } = this.app\n\n    if (this.isCreate) {\n      // If we're creating a new shape, should we bind its first point?\n      // The method may return undefined, which is correct if there is no\n      // bindable shape under the pointer.\n      this.startBindingShapeId = this.bindableShapeIds\n        .map((id) => page.shapes[id])\n        .filter(\n          (shape) =>\n            !shape.isLocked &&\n            Utils.pointInBounds(originPoint, TLDR.getShapeUtil(shape).getBounds(shape))\n        )\n        .sort((a, b) => {\n          // TODO - We should be smarter here, what's the right logic?\n          return b.childIndex - a.childIndex\n        })[0]?.id\n\n      if (this.startBindingShapeId) {\n        this.bindableShapeIds.splice(this.bindableShapeIds.indexOf(this.startBindingShapeId), 1)\n      }\n    } else {\n      // If we're editing an existing line, is there a binding already\n      // for the dragging handle?\n      const initialBindingId = this.initialShape.handles[this.handleId].bindingId\n\n      if (initialBindingId) {\n        this.initialBinding = page.bindings[initialBindingId]\n      } else {\n        // If not, explicitly set this handle to undefined, so that it gets deleted on undo\n        this.initialShape.handles[this.handleId].bindingId = undefined\n      }\n    }\n  }\n\n  start = (): TldrawPatch | undefined => void null\n\n  update = (): TldrawPatch | undefined => {\n    const { initialShape } = this\n    const {\n      currentPoint,\n      shiftKey,\n      altKey,\n      metaKey,\n      currentGrid,\n      settings: { showGrid },\n    } = this.app\n\n    const shape = this.app.getShape<ArrowShape>(initialShape.id)\n\n    if (shape.isLocked) return\n\n    const { handles } = initialShape\n\n    const handleId = this.handleId as keyof typeof handles\n    // If the handle can bind, then we need to search bindable shapes for\n    // a binding.\n    if (!handles[handleId].canBind) return\n\n    // Find the delta (in shape space)\n    let delta = Vec.sub(currentPoint, Vec.add(handles[handleId].point, initialShape.point))\n\n    if (shiftKey) {\n      const A = altKey\n        ? Vec.med(handles.start.point, handles.end.point)\n        : handles[handleId === 'start' ? 'end' : 'start'].point\n      const B = handles[handleId].point\n      const C = Vec.add(B, delta)\n\n      const angle = Vec.angle(A, C)\n\n      const adjusted = Vec.rotWith(C, A, Utils.snapAngleToSegments(angle, 24) - angle)\n\n      delta = Vec.add(delta, Vec.sub(adjusted, C))\n    }\n\n    const nextPoint = Vec.add(handles[handleId].point, delta)\n\n    const handleChanges = {\n      [handleId]: {\n        ...handles[handleId],\n        point: showGrid ? Vec.snap(nextPoint, currentGrid) : Vec.toFixed(nextPoint),\n        bindingId: undefined,\n      },\n    }\n\n    // if (altKey) {\n    //   // If the user is holding alt key, apply the inverse delta\n    //   // to the oppoosite handle.\n    //   const oppositeHandleId = handleId === 'start' ? 'end' : 'start'\n\n    //   const nextPoint = Vec.sub(handles[oppositeHandleId].point, delta)\n\n    //   handleChanges[oppositeHandleId] = {\n    //     ...handles[oppositeHandleId],\n    //     point: showGrid ? Vec.snap(nextPoint, currentGrid) : Vec.toFixed(nextPoint),\n    //     bindingId: undefined,\n    //   }\n    // }\n\n    const utils = shapeUtils[TDShapeType.Arrow]\n    const handleChange = utils.onHandleChange?.(initialShape, handleChanges)\n\n    // If the handle changed produced no change, bail here\n    if (!handleChange) return\n\n    // If nothing changes, we want these to be the same object reference as\n    // before. If it does change, we'll redefine this later on. And if we've\n    // made it this far, the shape should be a new object reference that\n    // incorporates the changes we've made due to the handle movement.\n    const next: { shape: ArrowShape; bindings: Record<string, TDBinding | undefined> } = {\n      shape: Utils.deepMerge(shape, handleChange),\n      bindings: {},\n    }\n\n    let draggedBinding: ArrowBinding | undefined\n\n    const draggingHandle = next.shape.handles[this.handleId]\n\n    const oppositeHandle = next.shape.handles[this.handleId === 'start' ? 'end' : 'start']\n\n    // START BINDING\n    // If we have a start binding shape id, the recompute the binding\n    // point based on the current end handle position\n    if (this.startBindingShapeId) {\n      let nextStartBinding: ArrowBinding | undefined\n\n      const startTarget = this.app.page.shapes[this.startBindingShapeId]\n\n      const startTargetUtils = TLDR.getShapeUtil(startTarget)\n\n      const center = startTargetUtils.getCenter(startTarget)\n\n      const startHandle = next.shape.handles.start\n\n      const endHandle = next.shape.handles.end\n\n      const rayPoint = Vec.add(startHandle.point, next.shape.point)\n\n      if (Vec.isEqual(rayPoint, center)) rayPoint[1]++ // Fix bug where ray and center are identical\n\n      const rayOrigin = center\n\n      const isInsideShape = startTargetUtils.hitTestPoint(startTarget, currentPoint)\n\n      const rayDirection = Vec.uni(Vec.sub(rayPoint, rayOrigin))\n\n      const hasStartBinding = this.app.getBinding(this.newStartBindingId) !== undefined\n\n      // Don't bind the start handle if both handles are inside of the target shape.\n      if (\n        !metaKey &&\n        !startTargetUtils.hitTestPoint(startTarget, Vec.add(next.shape.point, endHandle.point))\n      ) {\n        nextStartBinding = this.findBindingPoint(\n          shape,\n          startTarget,\n          'start',\n          this.newStartBindingId,\n          center,\n          rayOrigin,\n          rayDirection,\n          isInsideShape\n        )\n      }\n\n      if (nextStartBinding && !hasStartBinding) {\n        // Bind the arrow's start handle to the start target\n        this.didBind = true\n\n        next.bindings[this.newStartBindingId] = nextStartBinding\n\n        next.shape = Utils.deepMerge(next.shape, {\n          handles: {\n            start: {\n              bindingId: nextStartBinding.id,\n            },\n          },\n        })\n      } else if (!nextStartBinding && hasStartBinding) {\n        // Remove the start binding\n        this.didBind = false\n\n        next.bindings[this.newStartBindingId] = undefined\n\n        next.shape = Utils.deepMerge(initialShape, {\n          handles: {\n            start: {\n              bindingId: undefined,\n            },\n          },\n        })\n      }\n    }\n\n    // DRAGGED POINT BINDING\n    if (!metaKey) {\n      const rayOrigin = Vec.add(oppositeHandle.point, next.shape.point)\n\n      const rayPoint = Vec.add(draggingHandle.point, next.shape.point)\n\n      const rayDirection = Vec.uni(Vec.sub(rayPoint, rayOrigin))\n\n      const startPoint = Vec.add(next.shape.point!, next.shape.handles!.start.point!)\n\n      const endPoint = Vec.add(next.shape.point!, next.shape.handles!.end.point!)\n\n      const targets = this.bindableShapeIds\n        .map((id) => this.app.page.shapes[id])\n        .sort((a, b) => b.childIndex - a.childIndex)\n        .filter((shape) => {\n          if (shape.isLocked) return false\n          const utils = TLDR.getShapeUtil(shape)\n          return ![startPoint, endPoint].every((point) => utils.hitTestPoint(shape, point))\n        })\n\n      for (const target of targets) {\n        draggedBinding = this.findBindingPoint(\n          shape,\n          target,\n          this.handleId,\n          this.draggedBindingId,\n          rayPoint,\n          rayOrigin,\n          rayDirection,\n          altKey\n        )\n\n        if (draggedBinding) break\n      }\n    }\n\n    if (draggedBinding) {\n      // Create the dragged point binding\n      this.didBind = true\n\n      next.bindings[this.draggedBindingId] = draggedBinding\n\n      next.shape = Utils.deepMerge(next.shape, {\n        handles: {\n          [this.handleId]: {\n            bindingId: this.draggedBindingId,\n          },\n        },\n      })\n    } else {\n      // Remove the dragging point binding\n      this.didBind = this.didBind || false\n\n      const currentBindingId = shape.handles[this.handleId].bindingId\n\n      if (currentBindingId !== undefined) {\n        next.bindings[currentBindingId] = undefined\n\n        next.shape = Utils.deepMerge(next.shape, {\n          handles: {\n            [this.handleId]: {\n              bindingId: undefined,\n            },\n          },\n        })\n      }\n    }\n\n    const change = TLDR.getShapeUtil<ArrowShape>(next.shape).onHandleChange?.(\n      next.shape,\n      next.shape.handles\n    )\n\n    return {\n      document: {\n        pages: {\n          [this.app.currentPageId]: {\n            shapes: {\n              [shape.id]: { ...next.shape, ...(change ?? {}) },\n            },\n            bindings: next.bindings,\n          },\n        },\n        pageStates: {\n          [this.app.currentPageId]: {\n            bindingId: next.shape.handles[handleId].bindingId,\n          },\n        },\n      },\n    }\n  }\n\n  cancel = (): TldrawPatch | undefined => {\n    const { initialShape, initialBinding, newStartBindingId, draggedBindingId } = this\n\n    const currentShape = TLDR.onSessionComplete(this.app.page.shapes[initialShape.id]) as ArrowShape\n\n    const isDeleting =\n      this.isCreate ||\n      Vec.dist(currentShape.handles.start.point, currentShape.handles.end.point) < 4\n\n    const afterBindings: Record<string, TDBinding | undefined> = {}\n\n    afterBindings[draggedBindingId] = undefined\n\n    if (initialBinding) {\n      afterBindings[initialBinding.id] = isDeleting ? undefined : initialBinding\n    }\n\n    if (newStartBindingId) {\n      afterBindings[newStartBindingId] = undefined\n    }\n\n    return {\n      document: {\n        pages: {\n          [this.app.currentPageId]: {\n            shapes: {\n              [initialShape.id]: isDeleting ? undefined : initialShape,\n            },\n            bindings: afterBindings,\n          },\n        },\n        pageStates: {\n          [this.app.currentPageId]: {\n            selectedIds: isDeleting ? [] : [initialShape.id],\n            bindingId: undefined,\n            hoveredId: undefined,\n            editingId: undefined,\n          },\n        },\n      },\n    }\n  }\n\n  complete = (): TldrawPatch | TldrawCommand | undefined => {\n    const { initialShape, initialBinding, newStartBindingId, startBindingShapeId, handleId } = this\n\n    const currentShape = TLDR.onSessionComplete(this.app.page.shapes[initialShape.id]) as ArrowShape\n\n    const currentBindingId = currentShape.handles[handleId].bindingId\n\n    const length = Vec.dist(currentShape.handles.start.point, currentShape.handles.end.point)\n\n    if (!(currentBindingId || initialBinding) && length < 4) return this.cancel()\n\n    const beforeBindings: Partial<Record<string, TDBinding>> = {}\n\n    const afterBindings: Partial<Record<string, TDBinding>> = {}\n\n    if (initialBinding) {\n      beforeBindings[initialBinding.id] = this.isCreate ? undefined : initialBinding\n      afterBindings[initialBinding.id] = undefined\n    }\n\n    if (currentBindingId) {\n      beforeBindings[currentBindingId] = undefined\n      afterBindings[currentBindingId] = this.app.page.bindings[currentBindingId]\n    }\n\n    if (startBindingShapeId) {\n      beforeBindings[newStartBindingId] = undefined\n      afterBindings[newStartBindingId] = this.app.page.bindings[newStartBindingId]\n    }\n\n    return {\n      id: 'arrow',\n      before: {\n        document: {\n          pages: {\n            [this.app.currentPageId]: {\n              shapes: {\n                [initialShape.id]: this.isCreate ? undefined : initialShape,\n              },\n              bindings: beforeBindings,\n            },\n          },\n          pageStates: {\n            [this.app.currentPageId]: {\n              selectedIds: this.isCreate ? [] : [initialShape.id],\n              bindingId: undefined,\n              hoveredId: undefined,\n              editingId: undefined,\n            },\n          },\n        },\n      },\n      after: {\n        document: {\n          pages: {\n            [this.app.currentPageId]: {\n              shapes: {\n                [initialShape.id]: currentShape,\n              },\n              bindings: afterBindings,\n            },\n          },\n          pageStates: {\n            [this.app.currentPageId]: {\n              selectedIds: [initialShape.id],\n              bindingId: undefined,\n              hoveredId: undefined,\n              editingId: undefined,\n            },\n          },\n        },\n      },\n    }\n  }\n\n  private findBindingPoint = (\n    shape: ArrowShape,\n    target: TDShape,\n    handleId: 'start' | 'end',\n    bindingId: string,\n    point: number[],\n    origin: number[],\n    direction: number[],\n    bindAnywhere: boolean\n  ) => {\n    const util = TLDR.getShapeUtil<TDShape>(target.type)\n\n    const bindingPoint = util.getBindingPoint(\n      target,\n      shape,\n      point, // fix dead center bug\n      origin,\n      direction,\n      bindAnywhere\n    )\n\n    // Not all shapes will produce a binding point\n    if (!bindingPoint) return\n\n    return {\n      id: bindingId,\n      type: 'arrow',\n      fromId: shape.id,\n      toId: target.id,\n      handleId: handleId,\n      point: Vec.toFixed(bindingPoint.point),\n      distance: bindingPoint.distance,\n    }\n  }\n}\n", "import type { TLPerformanceMode } from '@tldraw/core'\nimport type { TldrawApp } from '~state/TldrawApp'\nimport type { SessionType, TldrawCommand, TldrawPatch } from '~types'\n\nexport abstract class BaseSession {\n  abstract type: SessionType\n  abstract performanceMode: TLPerformanceMode | undefined\n  constructor(public app: TldrawApp) {}\n  abstract start: () => TldrawPatch | undefined\n  abstract update: () => TldrawPatch | undefined\n  abstract complete: () => TldrawPatch | TldrawCommand | undefined\n  abstract cancel: () => TldrawPatch | undefined\n}\n", "import { TLBounds, Utils } from '@tldraw/core'\nimport type { TldrawApp } from '~state/TldrawApp'\nimport { BaseSession } from '~state/sessions/BaseSession'\nimport { SessionType, TDStatus, TldrawCommand, TldrawPatch } from '~types'\n\nexport class BrushSession extends BaseSession {\n  type = SessionType.Brush\n  performanceMode = undefined\n  status = TDStatus.Brushing\n  initialSelectedIds: Set<string>\n  shapesToTest: {\n    id: string\n    bounds: TLBounds\n    selectId: string\n  }[]\n\n  constructor(app: TldrawApp) {\n    super(app)\n    const { currentPageId } = app\n    this.initialSelectedIds = new Set(this.app.selectedIds)\n    this.shapesToTest = this.app.shapes\n      .filter(\n        (shape) =>\n          !(\n            shape.isLocked ||\n            shape.isHidden ||\n            shape.parentId !== currentPageId ||\n            this.initialSelectedIds.has(shape.id) ||\n            this.initialSelectedIds.has(shape.parentId)\n          )\n      )\n      .map((shape) => ({\n        id: shape.id,\n        bounds: this.app.getShapeUtil(shape).getBounds(shape),\n        selectId: shape.id, //TLDR.getTopParentId(data, shape.id, currentPageId),\n      }))\n\n    this.update()\n  }\n\n  start = (): TldrawPatch | undefined => void null\n\n  update = (): TldrawPatch | undefined => {\n    const {\n      initialSelectedIds,\n      shapesToTest,\n      app: { metaKey, settings, originPoint, currentPoint },\n    } = this\n\n    // Create a bounding box between the origin and the new point\n    const brush = Utils.getBoundsFromPoints([originPoint, currentPoint])\n\n    // Decide weather to select by intersecting or by overlapping\n    // Using a xor to revers the behaviour if the ctrl key is pressed\n    // Do it only if the user choose to enable cad like selection\n    const selectByContain = settings.isCadSelectMode\n      ? !metaKey && originPoint[0] < currentPoint[0]\n      : metaKey\n\n    // Find ids of brushed shapes\n    const hits = new Set<string>()\n\n    const selectedIds = new Set(initialSelectedIds)\n\n    shapesToTest.forEach(({ id, selectId }) => {\n      const shape = this.app.getShape(id)\n\n      if (!hits.has(selectId)) {\n        const util = this.app.getShapeUtil(shape)\n        if (\n          selectByContain\n            ? Utils.boundsContain(brush, util.getBounds(shape))\n            : util.hitTestBounds(shape, brush)\n        ) {\n          hits.add(selectId)\n\n          // When brushing a shape, select its top group parent.\n          if (!selectedIds.has(selectId)) {\n            selectedIds.add(selectId)\n          }\n        } else if (selectedIds.has(selectId)) {\n          selectedIds.delete(selectId)\n        }\n      }\n    })\n\n    const currentSelectedIds = this.app.selectedIds\n\n    const didChange =\n      selectedIds.size !== currentSelectedIds.length ||\n      currentSelectedIds.some((id) => !selectedIds.has(id))\n\n    const afterSelectedIds = didChange ? Array.from(selectedIds.values()) : currentSelectedIds\n\n    if (!didChange)\n      return {\n        appState: {\n          selectByContain,\n        },\n        document: {\n          pageStates: {\n            [this.app.currentPageId]: {\n              brush,\n            },\n          },\n        },\n      }\n\n    return {\n      appState: {\n        selectByContain,\n      },\n      document: {\n        pageStates: {\n          [this.app.currentPageId]: {\n            brush,\n            selectedIds: afterSelectedIds,\n          },\n        },\n      },\n    }\n  }\n\n  cancel = (): TldrawPatch | undefined => {\n    return {\n      appState: {\n        selectByContain: false,\n      },\n      document: {\n        pageStates: {\n          [this.app.currentPageId]: {\n            brush: null,\n            selectedIds: Array.from(this.initialSelectedIds.values()),\n          },\n        },\n      },\n    }\n  }\n\n  complete = (): TldrawPatch | TldrawCommand | undefined => {\n    return {\n      appState: {\n        selectByContain: false,\n      },\n      document: {\n        pageStates: {\n          [this.app.currentPageId]: {\n            brush: null,\n            selectedIds: [...this.app.selectedIds],\n          },\n        },\n      },\n    }\n  }\n}\n", "import { Utils } from '@tldraw/core'\nimport { Vec } from '@tldraw/vec'\nimport type { TldrawApp } from '~state/TldrawApp'\nimport { BaseSession } from '~state/sessions/BaseSession'\nimport { DrawShape, SessionType, TDStatus, TldrawCommand, TldrawPatch } from '~types'\n\nexport class DrawSession extends BaseSession {\n  type = SessionType.Draw\n  performanceMode = undefined\n  status = TDStatus.Creating\n  topLeft: number[]\n  points: number[][]\n  initialShape: DrawShape\n  lastAdjustedPoint: number[]\n  shiftedPoints: number[][] = []\n  shapeId: string\n  isLocked?: boolean\n  isExtending: boolean\n  lockedDirection?: 'horizontal' | 'vertical'\n\n  constructor(app: TldrawApp, id: string) {\n    super(app)\n    const { originPoint } = this.app\n    this.shapeId = id\n    this.initialShape = this.app.getShape<DrawShape>(id)\n    this.topLeft = [...this.initialShape.point]\n    const currentPoint = [0, 0, originPoint[2] ?? 0.5]\n    const delta = Vec.sub(originPoint, this.topLeft)\n    const initialPoints = this.initialShape.points.map((pt) => Vec.sub(pt, delta).concat(pt[2]))\n    this.isExtending = initialPoints.length > 0\n    const newPoints: number[][] = []\n    if (this.isExtending) {\n      // Continuing with shift\n      const prevPoint = initialPoints[initialPoints.length - 1]\n      if (prevPoint) {\n        newPoints.push(prevPoint, prevPoint)\n        const len = Math.floor(Vec.dist(prevPoint, currentPoint) / 16)\n\n        if (len > 1) {\n          for (let i = 0; i < len; i++) {\n            const t = i / (len - 1)\n            newPoints.push(Vec.lrp(prevPoint, currentPoint, t).concat(prevPoint[2]))\n          }\n        } else {\n          newPoints.push(currentPoint, currentPoint)\n        }\n      }\n    } else {\n      newPoints.push(currentPoint)\n    }\n    // Add a first point but don't update the shape yet. We'll update\n    // when the draw session ends; if the user hasn't added additional\n    // points, this single point will be interpreted as a \"dot\" shape.\n    this.points = [...initialPoints, ...newPoints]\n    this.shiftedPoints = this.points.map((pt) => Vec.add(pt, delta).concat(pt[2]))\n    this.lastAdjustedPoint = this.points[this.points.length - 1]\n  }\n\n  start = () => {\n    const currentPoint = this.app.originPoint\n    const newAdjustedPoint = [0, 0, currentPoint[2] ?? 0.5]\n    // Add the new adjusted point to the points array\n    this.points.push(newAdjustedPoint)\n    const topLeft = [\n      Math.min(this.topLeft[0], currentPoint[0]),\n      Math.min(this.topLeft[1], currentPoint[1]),\n    ]\n    const delta = Vec.sub(topLeft, currentPoint)\n    this.topLeft = topLeft\n    this.shiftedPoints = this.points.map((pt) => Vec.toFixed(Vec.sub(pt, delta)).concat(pt[2]))\n\n    return {\n      document: {\n        pages: {\n          [this.app.currentPageId]: {\n            shapes: {\n              [this.shapeId]: {\n                point: this.topLeft,\n                points: this.shiftedPoints,\n              },\n            },\n          },\n        },\n        pageStates: {\n          [this.app.currentPageId]: {\n            selectedIds: [this.shapeId],\n          },\n        },\n      },\n    }\n  }\n\n  update = (): TldrawPatch | undefined => {\n    const { shapeId } = this\n    const { currentPoint, originPoint, shiftKey, zoom } = this.app\n\n    // Even if we're not locked yet, we base the future locking direction\n    // on the first dimension to reach a threshold, or the bigger dimension\n    // once one or both dimensions have reached the threshold.\n    if (!this.lockedDirection && this.points.length > 1) {\n      const delta = Vec.sub(currentPoint, originPoint)\n      if (Vec.len(delta) > 3 / zoom) {\n        this.lockedDirection = Math.abs(delta[0]) > Math.abs(delta[1]) ? 'horizontal' : 'vertical'\n      }\n    }\n\n    // Drawing while holding shift will \"lock\" the pen to either the\n    // x or y axis, depending on the locking direction.\n    if (shiftKey) {\n      if (!this.isLocked && this.points.length > 2) {\n        // If we're locking before knowing what direction we're in, set it\n        // early based on the bigger dimension.\n        if (!this.lockedDirection) {\n          const delta = Vec.sub(currentPoint, originPoint)\n          if (Vec.len(delta) > 3 / zoom) {\n            this.lockedDirection =\n              Math.abs(delta[0]) > Math.abs(delta[1]) ? 'horizontal' : 'vertical'\n          }\n        }\n\n        this.isLocked = true\n        // Start locking\n        const returning = [...this.lastAdjustedPoint]\n\n        if (this.lockedDirection === 'vertical') {\n          returning[0] = 0\n        } else {\n          returning[1] = 0\n        }\n\n        this.points.push(returning.concat(currentPoint[2]))\n      }\n    } else if (this.isLocked) {\n      this.isLocked = false\n    }\n\n    if (this.isLocked) {\n      if (this.lockedDirection === 'vertical') {\n        currentPoint[0] = originPoint[0]\n      } else {\n        currentPoint[1] = originPoint[1]\n      }\n    }\n\n    const change = this.addPoint(currentPoint)\n\n    if (!change) return\n\n    return {\n      document: {\n        pages: {\n          [this.app.currentPageId]: {\n            shapes: {\n              [shapeId]: change,\n            },\n          },\n        },\n        pageStates: {\n          [this.app.currentPageId]: {\n            selectedIds: [shapeId],\n          },\n        },\n      },\n    }\n  }\n\n  cancel = (): TldrawPatch | undefined => {\n    const { shapeId } = this\n    const pageId = this.app.currentPageId\n\n    return {\n      document: {\n        pages: {\n          [pageId]: {\n            shapes: {\n              [shapeId]: this.isExtending ? this.initialShape : undefined,\n            },\n          },\n        },\n        pageStates: {\n          [pageId]: {\n            selectedIds: [],\n          },\n        },\n      },\n    }\n  }\n\n  complete = (): TldrawPatch | TldrawCommand | undefined => {\n    const { shapeId } = this\n    const pageId = this.app.currentPageId\n    const shape = this.app.getShape<DrawShape>(shapeId)\n    return {\n      id: 'create_draw',\n      before: {\n        document: {\n          pages: {\n            [pageId]: {\n              shapes: {\n                [shapeId]: this.isExtending ? this.initialShape : undefined,\n              },\n            },\n          },\n          pageStates: {\n            [pageId]: {\n              selectedIds: [],\n            },\n          },\n        },\n      },\n      after: {\n        document: {\n          pages: {\n            [pageId]: {\n              shapes: {\n                [shapeId]: {\n                  ...shape,\n                  point: Vec.toFixed(shape.point),\n                  points: shape.points.map((pt) => Vec.toFixed(pt)),\n                  isComplete: true,\n                },\n              },\n            },\n          },\n          pageStates: {\n            [this.app.currentPageId]: {\n              selectedIds: [],\n            },\n          },\n        },\n      },\n    }\n  }\n\n  addPoint = (currentPoint: number[]) => {\n    const { originPoint } = this.app\n    // The new adjusted point\n    const newAdjustedPoint = Vec.toFixed(Vec.sub(currentPoint, originPoint)).concat(currentPoint[2])\n\n    // Don't add duplicate points.\n    if (Vec.isEqual(this.lastAdjustedPoint, newAdjustedPoint)) return\n\n    // Add the new adjusted point to the points array\n    this.points.push(newAdjustedPoint)\n\n    // The new adjusted point is now the previous adjusted point.\n    this.lastAdjustedPoint = newAdjustedPoint\n\n    // Does the input point create a new top left?\n    const prevTopLeft = [...this.topLeft]\n\n    const topLeft = [\n      Math.min(this.topLeft[0], currentPoint[0]),\n      Math.min(this.topLeft[1], currentPoint[1]),\n    ]\n\n    const delta = Vec.sub(topLeft, originPoint)\n\n    // Time to shift some points!\n    let points: number[][]\n\n    if (prevTopLeft[0] !== topLeft[0] || prevTopLeft[1] !== topLeft[1]) {\n      this.topLeft = topLeft\n      // If we have a new top left, then we need to iterate through\n      // the \"unshifted\" points array and shift them based on the\n      // offset between the new top left and the original top left.\n      points = this.points.map((pt) => Vec.toFixed(Vec.sub(pt, delta)).concat(pt[2]))\n    } else {\n      // If the new top left is the same as the previous top left,\n      // we don't need to shift anything: we just shift the new point\n      // and add it to the shifted points array.\n      points = [...this.shiftedPoints, Vec.sub(newAdjustedPoint, delta).concat(newAdjustedPoint[2])]\n    }\n\n    this.shiftedPoints = points\n\n    return {\n      point: this.topLeft,\n      points,\n    }\n  }\n}\n", "import type { TldrawApp } from '~state/TldrawApp'\nimport { BaseSession } from '~state/sessions/BaseSession'\nimport { SessionType, TDShape, TldrawCommand, TldrawPatch } from '~types'\n\nexport class EditSession extends BaseSession {\n  type = SessionType.Edit\n  performanceMode = undefined\n\n  initialShape: TDShape\n  initialSelectedIds: string[]\n  currentPageId: string\n  isCreating: boolean\n\n  constructor(app: TldrawApp, id: string, isCreating: boolean) {\n    super(app)\n    this.initialShape = app.getShape(id, app.currentPageId)\n    this.currentPageId = app.currentPageId\n    this.isCreating = isCreating\n    this.initialSelectedIds = [...app.selectedIds]\n  }\n\n  start = (): TldrawPatch | undefined => void null\n\n  update = (): TldrawPatch | undefined => void null\n\n  cancel = (): TldrawPatch | undefined => {\n    return {\n      document: {\n        pages: {\n          [this.currentPageId]: {\n            shapes: {\n              [this.initialShape.id]: this.isCreating ? undefined : this.initialShape,\n            },\n          },\n        },\n        pageStates: {\n          [this.currentPageId]: {\n            selectedIds: this.isCreating ? [] : this.initialSelectedIds,\n            editingId: undefined,\n          },\n        },\n      },\n    }\n  }\n\n  complete = (): TldrawPatch | TldrawCommand | undefined => {\n    const shape = this.app.getShape(this.initialShape.id)\n\n    return {\n      id: 'edit',\n      before: {\n        document: {\n          pages: {\n            [this.currentPageId]: {\n              shapes: {\n                [this.initialShape.id]: this.isCreating ? undefined : this.initialShape,\n              },\n            },\n          },\n          pageStates: {\n            [this.currentPageId]: {\n              selectedIds: this.isCreating ? [] : this.initialSelectedIds,\n              editingId: undefined,\n            },\n          },\n        },\n      },\n      after: {\n        document: {\n          pages: {\n            [this.currentPageId]: {\n              shapes: {\n                [this.initialShape.id]: shape,\n              },\n            },\n          },\n          pageStates: {\n            [this.currentPageId]: {\n              selectedIds: [shape.id],\n              editingId: undefined,\n            },\n          },\n        },\n      },\n    }\n  }\n}\n", "import { Vec } from '@tldraw/vec'\nimport type { TldrawApp } from '~state/TldrawApp'\nimport { BaseSession } from '~state/sessions/BaseSession'\nimport {\n  PagePartial,\n  SessionType,\n  TDBinding,\n  TDShape,\n  TDStatus,\n  TldrawCommand,\n  TldrawPatch,\n} from '~types'\n\nexport class EraseSession extends BaseSession {\n  type = SessionType.Draw\n  performanceMode = undefined\n  status = TDStatus.Creating\n  isLocked?: boolean\n  lockedDirection?: 'horizontal' | 'vertical'\n  erasedShapes = new Set<TDShape>()\n  erasedBindings = new Set<TDBinding>()\n  initialSelectedShapes: TDShape[]\n  erasableShapes: Set<TDShape>\n  prevPoint: number[]\n  prevEraseShapesSize = 0\n\n  constructor(app: TldrawApp) {\n    super(app)\n    this.prevPoint = [...app.originPoint]\n    this.initialSelectedShapes = this.app.selectedIds.map((id) => this.app.getShape(id))\n    this.erasableShapes = new Set(this.app.shapes.filter((shape) => !shape.isLocked))\n    this.interval = this.loop()\n  }\n\n  interval: any\n  timestamp1 = 0\n  timestamp2 = 0\n  prevErasePoint: number[] = []\n\n  loop = () => {\n    const now = Date.now()\n    const elapsed1 = now - this.timestamp1\n    const elapsed2 = now - this.timestamp2\n    const { eraseLine } = this.app.appState\n\n    let next = [...eraseLine]\n    let didUpdate = false\n\n    if (elapsed1 > 16 && this.prevErasePoint !== this.prevPoint) {\n      didUpdate = true\n      next = [...eraseLine, this.prevPoint]\n      this.prevErasePoint = this.prevPoint\n    }\n\n    if (elapsed2 > 32) {\n      if (next.length > 1) {\n        didUpdate = true\n        next.splice(0, Math.ceil(next.length * 0.1))\n        this.timestamp2 = now\n      }\n    }\n\n    if (didUpdate) {\n      this.app.patchState(\n        {\n          appState: {\n            eraseLine: next,\n          },\n        },\n        'eraseline'\n      )\n    }\n\n    this.interval = requestAnimationFrame(this.loop)\n  }\n\n  start = (): TldrawPatch | undefined => void null\n\n  update = (): TldrawPatch | undefined => {\n    const { page, shiftKey, originPoint, currentPoint, zoom } = this.app\n\n    if (shiftKey) {\n      const delta = Vec.sub(currentPoint, originPoint)\n      if (!this.isLocked && Vec.len(delta) > 3 / zoom) {\n        // If we're locking before knowing what direction we're in, set it\n        // early based on the bigger dimension.\n        if (!this.lockedDirection) {\n          const delta = Vec.sub(currentPoint, originPoint)\n          this.lockedDirection = Math.abs(delta[0]) > Math.abs(delta[1]) ? 'horizontal' : 'vertical'\n        }\n\n        this.isLocked = true\n      }\n    } else if (this.isLocked) {\n      this.isLocked = false\n    }\n\n    if (this.isLocked) {\n      if (this.lockedDirection === 'vertical') {\n        currentPoint[0] = originPoint[0]\n      } else {\n        currentPoint[1] = originPoint[1]\n      }\n    }\n\n    const newPoint = Vec.toFixed(Vec.add(originPoint, Vec.sub(currentPoint, originPoint)))\n\n    const deletedShapeIds = new Set<string>([])\n\n    this.erasableShapes.forEach((shape) => {\n      if (this.erasedShapes.has(shape)) return\n      if (this.app.getShapeUtil(shape).hitTestLineSegment(shape, this.prevPoint, newPoint)) {\n        this.erasedShapes.add(shape)\n        deletedShapeIds.add(shape.id)\n\n        if (shape.children !== undefined) {\n          for (const childId of shape.children) {\n            this.erasedShapes.add(this.app.getShape(childId))\n            deletedShapeIds.add(childId)\n          }\n        }\n      }\n    })\n\n    // Erase bindings that reference deleted shapes\n\n    Object.values(page.bindings).forEach((binding) => {\n      for (const id of [binding.toId, binding.fromId]) {\n        if (deletedShapeIds.has(id)) {\n          this.erasedBindings.add(binding)\n        }\n      }\n    })\n\n    this.erasedShapes.forEach((shape) => {\n      // Has the shape been deleted? If so, pull it from the list.\n      if (!this.app.getShape(shape.id)) {\n        this.erasedShapes.delete(shape)\n        this.erasableShapes.delete(shape)\n        deletedShapeIds.delete(shape.id)\n      }\n    })\n\n    const erasedShapes = Array.from(this.erasedShapes.values())\n\n    this.prevPoint = newPoint\n\n    if (erasedShapes.length === this.prevEraseShapesSize) {\n      return\n    }\n\n    this.prevEraseShapesSize = erasedShapes.length\n\n    return {\n      document: {\n        pages: {\n          [page.id]: {\n            shapes: Object.fromEntries(erasedShapes.map((shape) => [shape.id, { isGhost: true }])),\n          },\n        },\n      },\n    }\n  }\n\n  cancel = (): TldrawPatch | undefined => {\n    const { page } = this.app\n\n    cancelAnimationFrame(this.interval)\n\n    this.erasedShapes.forEach((shape) => {\n      if (!this.app.getShape(shape.id)) {\n        this.erasedShapes.delete(shape)\n        this.erasableShapes.delete(shape)\n      }\n    })\n\n    const erasedShapes = Array.from(this.erasedShapes.values())\n\n    return {\n      document: {\n        pages: {\n          [page.id]: {\n            shapes: Object.fromEntries(erasedShapes.map((shape) => [shape.id, { isGhost: false }])),\n          },\n        },\n        pageStates: {\n          [page.id]: {\n            selectedIds: this.initialSelectedShapes.map((shape) => shape.id),\n          },\n        },\n      },\n      appState: {\n        eraseLine: [],\n      },\n    }\n  }\n\n  complete = (): TldrawPatch | TldrawCommand | undefined => {\n    const { page } = this.app\n\n    cancelAnimationFrame(this.interval)\n\n    this.erasedShapes.forEach((shape) => {\n      if (!this.app.getShape(shape.id)) {\n        this.erasedShapes.delete(shape)\n        this.erasableShapes.delete(shape)\n      }\n    })\n\n    this.erasedBindings.forEach((binding) => {\n      if (!this.app.getBinding(binding.id)) {\n        this.erasedBindings.delete(binding)\n      }\n    })\n\n    const erasedShapes = Array.from(this.erasedShapes.values())\n    const erasedBindings = Array.from(this.erasedBindings.values())\n    const erasedShapeIds = erasedShapes.map((shape) => shape.id)\n    const erasedBindingIds = erasedBindings.map((binding) => binding.id)\n\n    const before: PagePartial = {\n      shapes: Object.fromEntries(erasedShapes.map((shape) => [shape.id, shape])),\n      bindings: Object.fromEntries(erasedBindings.map((binding) => [binding.id, binding])),\n    }\n\n    const after: PagePartial = {\n      shapes: Object.fromEntries(erasedShapes.map((shape) => [shape.id, undefined])),\n      bindings: Object.fromEntries(erasedBindings.map((binding) => [binding.id, undefined])),\n    }\n\n    // Remove references on any shape's handles to any deleted bindings\n    this.app.shapes.forEach((shape) => {\n      if (shape.handles && !after.shapes[shape.id]) {\n        Object.values(shape.handles).forEach((handle) => {\n          if (handle.bindingId && erasedBindingIds.includes(handle.bindingId)) {\n            // Save the binding reference in the before patch\n            before.shapes[shape.id] = {\n              ...before.shapes[shape.id],\n              handles: {\n                ...before.shapes[shape.id]?.handles,\n                [handle.id]: handle,\n              },\n            }\n\n            // Save the binding reference in the before patch\n            if (!erasedShapeIds.includes(shape.id)) {\n              after.shapes[shape.id] = {\n                ...after.shapes[shape.id],\n                handles: {\n                  ...after.shapes[shape.id]?.handles,\n                  [handle.id]: {\n                    ...handle,\n                    bindingId: undefined,\n                  },\n                },\n              }\n            }\n          }\n        })\n      }\n    })\n\n    return {\n      id: 'erase',\n      before: {\n        document: {\n          pages: {\n            [page.id]: before,\n          },\n          pageStates: {\n            [page.id]: {\n              selectedIds: this.initialSelectedShapes\n                .filter((shape) => !!this.app.getShape(shape.id))\n                .map((shape) => shape.id),\n            },\n          },\n        },\n        appState: {\n          eraseLine: [],\n        },\n      },\n      after: {\n        document: {\n          pages: {\n            [page.id]: after,\n          },\n          pageStates: {\n            [page.id]: {\n              selectedIds: this.initialSelectedShapes\n                .filter((shape) => !!this.app.getShape(shape.id))\n                .filter((shape) => !erasedShapeIds.includes(shape.id))\n                .map((shape) => shape.id),\n            },\n          },\n        },\n        appState: {\n          eraseLine: [],\n        },\n      },\n    }\n  }\n}\n", "import { TLBounds, TLPageState, Utils } from '@tldraw/core'\nimport { Vec } from '@tldraw/vec'\nimport type { TldrawApp } from '~state/TldrawApp'\nimport { BaseSession } from '~state/sessions/BaseSession'\nimport {\n  Patch,\n  SessionType,\n  TDShape,\n  TDShapeType,\n  TDStatus,\n  TldrawCommand,\n  TldrawPatch,\n} from '~types'\n\nexport class GridSession extends BaseSession {\n  type = SessionType.Grid\n  performanceMode = undefined\n  status = TDStatus.Translating\n  shape: TDShape\n  bounds: TLBounds\n  initialSelectedIds: string[]\n  initialSiblings?: string[]\n  grid: Record<string, string> = {}\n  columns = 1\n  rows = 1\n  isCopying = false\n\n  constructor(app: TldrawApp, id: string) {\n    super(app)\n    this.shape = this.app.getShape(id)\n    this.grid['0_0'] = this.shape.id\n    this.bounds = this.app.getShapeBounds(id)\n    this.initialSelectedIds = [...this.app.selectedIds]\n    if (this.shape.parentId !== this.app.currentPageId) {\n      this.initialSiblings = this.app\n        .getShape(this.shape.parentId)\n        .children?.filter((id) => id !== this.shape.id)\n    }\n  }\n\n  start = (): TldrawPatch | undefined => void null\n\n  update = (): TldrawPatch | undefined => {\n    const { currentPageId, altKey, shiftKey, currentPoint } = this.app\n\n    const nextShapes: Patch<Record<string, TDShape>> = {}\n\n    const nextPageState: Patch<TLPageState> = {}\n\n    const center = Utils.getBoundsCenter(this.bounds)\n\n    const offset = Vec.sub(currentPoint, center)\n\n    if (shiftKey) {\n      if (Math.abs(offset[0]) < Math.abs(offset[1])) {\n        offset[0] = 0\n      } else {\n        offset[1] = 0\n      }\n    }\n    // use the distance from center to determine the grid\n\n    const gapX = this.bounds.width + 32\n    const gapY = this.bounds.height + 32\n\n    const columns = Math.ceil(offset[0] / gapX)\n    const rows = Math.ceil(offset[1] / gapY)\n\n    const minX = Math.min(columns, 0)\n    const minY = Math.min(rows, 0)\n    const maxX = Math.max(columns, 1)\n    const maxY = Math.max(rows, 1)\n\n    const inGrid = new Set<string>()\n\n    const isCopying = altKey\n\n    if (isCopying !== this.isCopying) {\n      // Recreate shapes copying\n      Object.values(this.grid)\n        .filter((id) => id !== this.shape.id)\n        .forEach((id) => (nextShapes[id] = undefined))\n\n      this.grid = { '0_0': this.shape.id }\n\n      this.isCopying = isCopying\n    }\n\n    // Go through grid, adding items in positions\n    // that aren't already filled.\n    for (let x = minX; x < maxX; x++) {\n      for (let y = minY; y < maxY; y++) {\n        const position = `${x}_${y}`\n\n        inGrid.add(position)\n\n        if (this.grid[position]) continue\n\n        if (x === 0 && y === 0) continue\n\n        const clone = this.getClone(Vec.add(this.shape.point, [x * gapX, y * gapY]), isCopying)\n\n        nextShapes[clone.id] = clone\n\n        this.grid[position] = clone.id\n      }\n    }\n\n    // Remove any other items from the grid\n    Object.entries(this.grid).forEach(([position, id]) => {\n      if (!inGrid.has(position)) {\n        nextShapes[id] = undefined\n        delete this.grid[position]\n      }\n    })\n\n    if (Object.values(nextShapes).length === 0) return\n\n    // Add shapes to parent id\n    if (this.initialSiblings) {\n      nextShapes[this.shape.parentId] = {\n        children: [...this.initialSiblings, ...Object.values(this.grid)],\n      }\n    }\n\n    return {\n      document: {\n        pages: {\n          [currentPageId]: {\n            shapes: nextShapes,\n          },\n        },\n        pageStates: {\n          [currentPageId]: nextPageState,\n        },\n      },\n    }\n  }\n\n  cancel = (): TldrawPatch | undefined => {\n    const { currentPageId } = this.app\n    const nextShapes: Record<string, Partial<TDShape> | undefined> = {}\n\n    // Delete clones\n    Object.values(this.grid).forEach((id) => {\n      nextShapes[id] = undefined\n      // TODO: Remove from parent if grouped\n    })\n\n    // Put back the initial shape\n    nextShapes[this.shape.id] = { ...nextShapes[this.shape.id], point: this.shape.point }\n\n    if (this.initialSiblings) {\n      nextShapes[this.shape.parentId] = {\n        children: [...this.initialSiblings, this.shape.id],\n      }\n    }\n\n    return {\n      document: {\n        pages: {\n          [currentPageId]: {\n            shapes: nextShapes,\n          },\n        },\n        pageStates: {\n          [currentPageId]: {\n            selectedIds: [this.shape.id],\n          },\n        },\n      },\n    }\n  }\n\n  complete = (): TldrawPatch | TldrawCommand | undefined => {\n    const { currentPageId } = this.app\n\n    const beforeShapes: Patch<Record<string, TDShape>> = {}\n\n    const afterShapes: Patch<Record<string, TDShape>> = {}\n\n    const afterSelectedIds: string[] = []\n\n    Object.values(this.grid).forEach((id) => {\n      beforeShapes[id] = undefined\n      afterShapes[id] = this.app.getShape(id)\n      afterSelectedIds.push(id)\n      // TODO: Add shape to parent if grouped\n    })\n\n    beforeShapes[this.shape.id] = this.shape\n\n    // Add shapes to parent id\n    if (this.initialSiblings) {\n      beforeShapes[this.shape.parentId] = {\n        children: [...this.initialSiblings, this.shape.id],\n      }\n\n      afterShapes[this.shape.parentId] = {\n        children: [...this.initialSiblings, ...Object.values(this.grid)],\n      }\n    }\n\n    // If no new shapes have been created, bail\n    if (afterSelectedIds.length === 1) return\n\n    return {\n      id: 'grid',\n      before: {\n        document: {\n          pages: {\n            [currentPageId]: {\n              shapes: beforeShapes,\n            },\n          },\n          pageStates: {\n            [currentPageId]: {\n              selectedIds: [],\n              hoveredId: undefined,\n            },\n          },\n        },\n      },\n      after: {\n        document: {\n          pages: {\n            [currentPageId]: {\n              shapes: afterShapes,\n            },\n          },\n          pageStates: {\n            [currentPageId]: {\n              selectedIds: afterSelectedIds,\n              hoveredId: undefined,\n            },\n          },\n        },\n      },\n    }\n  }\n\n  private getClone = (point: number[], copy: boolean) => {\n    const clone = {\n      ...this.shape,\n      id: Utils.uniqueId(),\n      point,\n    }\n\n    if (!copy) {\n      if (clone.type === TDShapeType.Sticky) {\n        clone.text = ''\n      }\n    }\n\n    return clone\n  }\n}\n", "import { Vec } from '@tldraw/vec'\nimport { TLDR } from '~state/TLDR'\nimport type { TldrawApp } from '~state/TldrawApp'\nimport { BaseSession } from '~state/sessions/BaseSession'\nimport { SessionType, ShapesWithProp, TDStatus, TldrawCommand, TldrawPatch } from '~types'\n\nexport class HandleSession extends BaseSession {\n  type = SessionType.Handle\n  performanceMode = undefined\n  status = TDStatus.TranslatingHandle\n  commandId: string\n  topLeft: number[]\n  shiftKey = false\n  initialShape: ShapesWithProp<'handles'>\n  handleId: string\n\n  constructor(app: TldrawApp, shapeId: string, handleId: string, commandId = 'move_handle') {\n    super(app)\n    const { originPoint } = app\n    this.topLeft = [...originPoint]\n    this.handleId = handleId\n    this.initialShape = this.app.getShape(shapeId)\n    this.commandId = commandId\n  }\n\n  start = (): TldrawPatch | undefined => void null\n\n  update = (): TldrawPatch | undefined => {\n    const {\n      initialShape,\n      app: { currentPageId, currentPoint },\n    } = this\n\n    const shape = this.app.getShape<ShapesWithProp<'handles'>>(initialShape.id)\n\n    if (shape.isLocked) return void null\n\n    const handles = shape.handles\n\n    const handleId = this.handleId as keyof typeof handles\n\n    const delta = Vec.sub(currentPoint, handles[handleId].point)\n\n    const handleChanges = {\n      [handleId]: {\n        ...handles[handleId],\n        point: Vec.sub(Vec.add(handles[handleId].point, delta), shape.point),\n      },\n    }\n\n    // First update the handle's next point\n    const change = TLDR.getShapeUtil(shape).onHandleChange?.(shape, handleChanges)\n\n    if (!change) return\n\n    return {\n      document: {\n        pages: {\n          [currentPageId]: {\n            shapes: {\n              [shape.id]: change,\n            },\n          },\n        },\n      },\n    }\n  }\n\n  cancel = (): TldrawPatch | undefined => {\n    const {\n      initialShape,\n      app: { currentPageId },\n    } = this\n\n    return {\n      document: {\n        pages: {\n          [currentPageId]: {\n            shapes: {\n              [initialShape.id]: initialShape,\n            },\n          },\n        },\n      },\n    }\n  }\n\n  complete = (): TldrawPatch | TldrawCommand | undefined => {\n    const {\n      initialShape,\n      app: { currentPageId },\n    } = this\n\n    return {\n      id: this.commandId,\n      before: {\n        document: {\n          pages: {\n            [currentPageId]: {\n              shapes: {\n                [initialShape.id]: initialShape,\n              },\n            },\n          },\n        },\n      },\n      after: {\n        document: {\n          pages: {\n            [currentPageId]: {\n              shapes: {\n                [initialShape.id]: TLDR.onSessionComplete(this.app.getShape(this.initialShape.id)),\n              },\n            },\n          },\n        },\n      },\n    }\n  }\n}\n", "import { Utils } from '@tldraw/core'\nimport { Vec } from '@tldraw/vec'\nimport { TLDR } from '~state/TLDR'\nimport type { TldrawApp } from '~state/TldrawApp'\nimport { BaseSession } from '~state/sessions/BaseSession'\nimport { SessionType, TDShape, TDStatus, TldrawCommand, TldrawPatch } from '~types'\n\nexport class RotateSession extends BaseSession {\n  type = SessionType.Rotate\n  status = TDStatus.Transforming\n  performanceMode = undefined\n  delta = [0, 0]\n  commonBoundsCenter: number[]\n  initialAngle: number\n  initialShapes: {\n    shape: TDShape\n    center: number[]\n  }[]\n  changes: Record<string, Partial<TDShape>> = {}\n\n  constructor(app: TldrawApp) {\n    super(app)\n\n    const {\n      app: { currentPageId, pageState, originPoint },\n    } = this\n\n    const initialShapes = TLDR.getSelectedBranchSnapshot(app.state, currentPageId).filter(\n      (shape) => !shape.isLocked\n    )\n\n    if (initialShapes.length === 0) {\n      throw Error('No selected shapes!')\n    }\n\n    if (app.rotationInfo.selectedIds === pageState.selectedIds) {\n      if (app.rotationInfo.center === undefined) {\n        throw Error('We should have a center for rotation!')\n      }\n\n      this.commonBoundsCenter = app.rotationInfo.center\n    } else {\n      this.commonBoundsCenter = Utils.getBoundsCenter(\n        Utils.getCommonBounds(initialShapes.map(TLDR.getBounds))\n      )\n      app.rotationInfo.selectedIds = pageState.selectedIds\n      app.rotationInfo.center = this.commonBoundsCenter\n    }\n\n    this.initialShapes = initialShapes\n      .filter((shape) => shape.children === undefined)\n      .map((shape) => {\n        return {\n          shape,\n          center: this.app.getShapeUtil(shape).getCenter(shape),\n        }\n      })\n\n    this.initialAngle = Vec.angle(this.commonBoundsCenter, originPoint)\n  }\n\n  start = (): TldrawPatch | undefined => void null\n\n  update = (): TldrawPatch | undefined => {\n    const {\n      commonBoundsCenter,\n      initialShapes,\n      app: { currentPageId, currentPoint, shiftKey },\n    } = this\n\n    const shapes: Record<string, Partial<TDShape>> = {}\n\n    let directionDelta = Vec.angle(commonBoundsCenter, currentPoint) - this.initialAngle\n\n    if (shiftKey) {\n      directionDelta = Utils.snapAngleToSegments(directionDelta, 24) // 15 degrees\n    }\n\n    // Update the shapes\n    initialShapes.forEach(({ center, shape }) => {\n      const { rotation = 0 } = shape\n      let shapeDelta = 0\n\n      if (shiftKey) {\n        const snappedRotation = Utils.snapAngleToSegments(rotation, 24)\n        shapeDelta = snappedRotation - rotation\n      }\n\n      const change = TLDR.getRotatedShapeMutation(\n        shape,\n        center,\n        commonBoundsCenter,\n        shiftKey ? directionDelta + shapeDelta : directionDelta\n      )\n\n      if (change) {\n        shapes[shape.id] = change\n      }\n    })\n\n    this.changes = shapes\n\n    return {\n      document: {\n        pages: {\n          [currentPageId]: {\n            shapes,\n          },\n        },\n      },\n    }\n  }\n\n  cancel = (): TldrawPatch | undefined => {\n    const {\n      initialShapes,\n      app: { currentPageId },\n    } = this\n\n    const shapes: Record<string, TDShape> = {}\n    initialShapes.forEach(({ shape }) => (shapes[shape.id] = shape))\n\n    return {\n      document: {\n        pages: {\n          [currentPageId]: {\n            shapes,\n          },\n        },\n      },\n    }\n  }\n\n  complete = (): TldrawPatch | TldrawCommand | undefined => {\n    const {\n      initialShapes,\n      app: { currentPageId },\n    } = this\n\n    const beforeShapes = {} as Record<string, Partial<TDShape>>\n    const afterShapes = this.changes\n\n    initialShapes.forEach(({ shape: { id, point, rotation, handles } }) => {\n      beforeShapes[id] = { point, rotation, handles }\n    })\n\n    return {\n      id: 'rotate',\n      before: {\n        document: {\n          pages: {\n            [currentPageId]: {\n              shapes: beforeShapes,\n            },\n          },\n        },\n      },\n      after: {\n        document: {\n          pages: {\n            [currentPageId]: {\n              shapes: afterShapes,\n            },\n          },\n        },\n      },\n    }\n  }\n}\n", "import { TLBounds, TLBoundsCorner, TLBoundsEdge, Utils } from '@tldraw/core'\nimport type { TLBoundsWithCenter, TLSnapLine } from '@tldraw/core'\nimport { Vec } from '@tldraw/vec'\nimport { SLOW_SPEED, SNAP_DISTANCE } from '~constants'\nimport { TLDR } from '~state/TLDR'\nimport type { TldrawApp } from '~state/TldrawApp'\nimport { BaseSession } from '~state/sessions/BaseSession'\nimport { SessionType, TDShape, TDStatus, TldrawCommand, TldrawPatch } from '~types'\n\ntype SnapInfo =\n  | {\n      state: 'empty'\n    }\n  | {\n      state: 'ready'\n      bounds: TLBoundsWithCenter[]\n    }\n\nexport class TransformSession extends BaseSession {\n  type = SessionType.Transform\n  performanceMode = undefined\n  status = TDStatus.Transforming\n  scaleX = 1\n  scaleY = 1\n  initialShapes: TDShape[]\n  initialShapeIds: string[]\n  initialSelectedIds: string[]\n  shapeBounds: {\n    initialShape: TDShape\n    initialShapeBounds: TLBounds\n    transformOrigin: number[]\n  }[]\n  hasUnlockedShapes: boolean\n  isAllAspectRatioLocked: boolean\n  initialCommonBounds: TLBounds\n  snapInfo: SnapInfo = { state: 'empty' }\n  prevPoint = [0, 0]\n  speed = 1\n\n  constructor(\n    app: TldrawApp,\n    public transformType: TLBoundsEdge | TLBoundsCorner = TLBoundsCorner.BottomRight,\n    public isCreate = false\n  ) {\n    super(app)\n    this.initialSelectedIds = [...this.app.selectedIds]\n    this.app.rotationInfo.selectedIds = [...this.initialSelectedIds]\n\n    this.initialShapes = TLDR.getSelectedBranchSnapshot(\n      this.app.state,\n      this.app.currentPageId\n    ).filter((shape) => !shape.isLocked)\n\n    this.initialShapeIds = this.initialShapes.map((shape) => shape.id)\n\n    this.hasUnlockedShapes = this.initialShapes.length > 0\n\n    this.isAllAspectRatioLocked = this.initialShapes.every(\n      (shape) => shape.isAspectRatioLocked || TLDR.getShapeUtil(shape).isAspectRatioLocked\n    )\n\n    const shapesBounds = Object.fromEntries(\n      this.initialShapes.map((shape) => [shape.id, TLDR.getBounds(shape)])\n    )\n\n    const boundsArr = Object.values(shapesBounds)\n\n    this.initialCommonBounds = Utils.getCommonBounds(boundsArr)\n\n    const initialInnerBounds = Utils.getBoundsFromPoints(boundsArr.map(Utils.getBoundsCenter))\n\n    // Return a mapping of shapes to bounds together with the relative\n    // positions of the shape's bounds within the common bounds shape.\n    this.shapeBounds = this.initialShapes.map((shape) => {\n      const initialShapeBounds = shapesBounds[shape.id]\n      const ic = Utils.getBoundsCenter(initialShapeBounds)\n\n      const ix = (ic[0] - initialInnerBounds.minX) / initialInnerBounds.width\n      const iy = (ic[1] - initialInnerBounds.minY) / initialInnerBounds.height\n\n      return {\n        initialShape: shape,\n        initialShapeBounds,\n        transformOrigin: [ix, iy],\n      }\n    })\n  }\n\n  start = (): TldrawPatch | undefined => {\n    this.snapInfo = {\n      state: 'ready',\n      bounds: this.app.shapes\n        .filter((shape) => !this.initialShapeIds.includes(shape.id))\n        .map((shape) => Utils.getBoundsWithCenter(TLDR.getRotatedBounds(shape))),\n    }\n\n    return void null\n  }\n\n  update = (): TldrawPatch | undefined => {\n    const {\n      transformType,\n      shapeBounds,\n      initialCommonBounds,\n      isAllAspectRatioLocked,\n      app: {\n        currentPageId,\n        pageState: { camera },\n        viewport,\n        currentPoint,\n        previousPoint,\n        originPoint,\n        shiftKey,\n        altKey,\n        metaKey,\n        currentGrid,\n        settings: { isSnapping, showGrid },\n      },\n    } = this\n\n    const shapes = {} as Record<string, TDShape>\n\n    const delta = altKey\n      ? Vec.mul(Vec.sub(currentPoint, originPoint), 2)\n      : Vec.sub(currentPoint, originPoint)\n\n    let newBounds = Utils.getTransformedBoundingBox(\n      initialCommonBounds,\n      transformType,\n      delta,\n      0,\n      shiftKey || isAllAspectRatioLocked\n    )\n\n    if (altKey) {\n      newBounds = {\n        ...newBounds,\n        ...Utils.centerBounds(newBounds, Utils.getBoundsCenter(initialCommonBounds)),\n      }\n    }\n\n    if (showGrid) {\n      newBounds = {\n        ...newBounds,\n        ...Utils.snapBoundsToGrid(newBounds, currentGrid),\n      }\n    }\n\n    // Should we snap?\n\n    const speed = Vec.dist(currentPoint, previousPoint)\n\n    const speedChange = speed - this.speed\n\n    this.speed = this.speed + speedChange * (speedChange > 1 ? 0.5 : 0.15)\n\n    let snapLines: TLSnapLine[] = []\n\n    if (\n      ((isSnapping && !metaKey) || (!isSnapping && metaKey)) &&\n      this.speed * camera.zoom < SLOW_SPEED &&\n      this.snapInfo.state === 'ready'\n    ) {\n      const snapResult = Utils.getSnapPoints(\n        Utils.getBoundsWithCenter(newBounds),\n        this.snapInfo.bounds.filter(\n          (bounds) => Utils.boundsContain(viewport, bounds) || Utils.boundsCollide(viewport, bounds)\n        ),\n        SNAP_DISTANCE / camera.zoom\n      )\n\n      if (snapResult) {\n        snapLines = snapResult.snapLines\n\n        newBounds = Utils.getTransformedBoundingBox(\n          initialCommonBounds,\n          transformType,\n          Vec.sub(delta, snapResult.offset),\n          0,\n          shiftKey || isAllAspectRatioLocked\n        )\n      }\n    }\n\n    // Now work backward to calculate a new bounding box for each of the shapes.\n\n    this.scaleX = newBounds.scaleX\n    this.scaleY = newBounds.scaleY\n\n    shapeBounds.forEach(({ initialShape, initialShapeBounds, transformOrigin }) => {\n      let newShapeBounds = Utils.getRelativeTransformedBoundingBox(\n        newBounds,\n        initialCommonBounds,\n        initialShapeBounds,\n        this.scaleX < 0,\n        this.scaleY < 0\n      )\n\n      if (showGrid) {\n        newShapeBounds = Utils.snapBoundsToGrid(newShapeBounds, currentGrid)\n      }\n\n      const afterShape = TLDR.transform(this.app.getShape(initialShape.id), newShapeBounds, {\n        type: this.transformType,\n        initialShape,\n        scaleX: this.scaleX,\n        scaleY: this.scaleY,\n        transformOrigin,\n      })\n\n      shapes[initialShape.id] = afterShape\n    })\n\n    return {\n      appState: {\n        snapLines,\n      },\n      document: {\n        pages: {\n          [currentPageId]: {\n            shapes,\n          },\n        },\n      },\n    }\n  }\n\n  cancel = (): TldrawPatch | undefined => {\n    const {\n      shapeBounds,\n      app: { currentPageId },\n    } = this\n\n    const shapes = {} as Record<string, TDShape | undefined>\n\n    if (this.isCreate) {\n      shapeBounds.forEach((shape) => (shapes[shape.initialShape.id] = undefined))\n    } else {\n      shapeBounds.forEach((shape) => (shapes[shape.initialShape.id] = shape.initialShape))\n    }\n\n    return {\n      appState: {\n        snapLines: [],\n      },\n      document: {\n        pages: {\n          [currentPageId]: {\n            shapes,\n          },\n        },\n        pageStates: {\n          [currentPageId]: {\n            selectedIds: this.isCreate ? [] : shapeBounds.map((shape) => shape.initialShape.id),\n          },\n        },\n      },\n    }\n  }\n\n  complete = (): TldrawPatch | TldrawCommand | undefined => {\n    const {\n      isCreate,\n      shapeBounds,\n      hasUnlockedShapes,\n      app: { currentPageId },\n    } = this\n\n    if (!hasUnlockedShapes) return\n\n    if (this.isCreate && Vec.dist(this.app.originPoint, this.app.currentPoint) < 2) {\n      return this.cancel()\n    }\n\n    const beforeShapes: Record<string, TDShape | undefined> = {}\n    const afterShapes: Record<string, TDShape> = {}\n\n    let beforeSelectedIds: string[]\n    let afterSelectedIds: string[]\n\n    if (isCreate) {\n      beforeSelectedIds = []\n      afterSelectedIds = []\n      shapeBounds.forEach(({ initialShape }) => {\n        beforeShapes[initialShape.id] = undefined\n        afterShapes[initialShape.id] = this.app.getShape(initialShape.id)\n      })\n    } else {\n      beforeSelectedIds = this.initialSelectedIds\n      afterSelectedIds = this.initialSelectedIds\n      shapeBounds.forEach(({ initialShape }) => {\n        beforeShapes[initialShape.id] = initialShape\n        afterShapes[initialShape.id] = this.app.getShape(initialShape.id)\n      })\n    }\n\n    return {\n      id: 'transform',\n      before: {\n        appState: {\n          snapLines: [],\n        },\n        document: {\n          pages: {\n            [currentPageId]: {\n              shapes: beforeShapes,\n            },\n          },\n          pageStates: {\n            [currentPageId]: {\n              selectedIds: beforeSelectedIds,\n              hoveredId: undefined,\n              editingId: undefined,\n            },\n          },\n        },\n      },\n      after: {\n        appState: {\n          snapLines: [],\n        },\n        document: {\n          pages: {\n            [currentPageId]: {\n              shapes: afterShapes,\n            },\n          },\n          pageStates: {\n            [currentPageId]: {\n              selectedIds: afterSelectedIds,\n              hoveredId: undefined,\n              editingId: undefined,\n            },\n          },\n        },\n      },\n    }\n  }\n}\n", "import {\n  TLBounds,\n  TLBoundsCorner,\n  TLBoundsEdge,\n  TLBoundsWithCenter,\n  TLSnapLine,\n  Utils,\n} from '@tldraw/core'\nimport { Vec } from '@tldraw/vec'\nimport { SLOW_SPEED, SNAP_DISTANCE } from '~constants'\nimport { TLDR } from '~state/TLDR'\nimport type { TldrawApp } from '~state/TldrawApp'\nimport { BaseSession } from '~state/sessions/BaseSession'\nimport { SessionType, TDShape, TDStatus, TldrawCommand, TldrawPatch } from '~types'\n\ntype SnapInfo =\n  | {\n      state: 'empty'\n    }\n  | {\n      state: 'ready'\n      bounds: TLBoundsWithCenter[]\n    }\n\nexport class TransformSingleSession extends BaseSession {\n  type = SessionType.TransformSingle\n  status = TDStatus.Transforming\n  performanceMode = undefined\n  transformType: TLBoundsEdge | TLBoundsCorner\n  scaleX = 1\n  scaleY = 1\n  isCreate: boolean\n  initialShape: TDShape\n  initialShapeBounds: TLBounds\n  initialCommonBounds: TLBounds\n  snapInfo: SnapInfo = { state: 'empty' }\n  prevPoint = [0, 0]\n  speed = 1\n\n  constructor(\n    app: TldrawApp,\n    id: string,\n    transformType: TLBoundsEdge | TLBoundsCorner,\n    isCreate = false\n  ) {\n    super(app)\n    this.isCreate = isCreate\n    this.transformType = transformType\n\n    const shape = this.app.getShape(id)\n    this.initialShape = shape\n    this.initialShapeBounds = TLDR.getBounds(shape)\n    this.initialCommonBounds = TLDR.getRotatedBounds(shape)\n    this.app.rotationInfo.selectedIds = [shape.id]\n  }\n\n  start = (): TldrawPatch | undefined => {\n    this.snapInfo = {\n      state: 'ready',\n      bounds: this.app.shapes\n        .filter((shape) => shape.id !== this.initialShape.id)\n        .map((shape) => Utils.getBoundsWithCenter(TLDR.getRotatedBounds(shape))),\n    }\n\n    return void null\n  }\n\n  update = (): TldrawPatch | undefined => {\n    const {\n      transformType,\n      initialShape,\n      initialShapeBounds,\n      app: {\n        settings: { isSnapping, showGrid },\n        currentPageId,\n        pageState: { camera },\n        viewport,\n        currentPoint,\n        previousPoint,\n        originPoint,\n        currentGrid,\n        shiftKey,\n        altKey,\n        metaKey,\n      },\n    } = this\n\n    if (initialShape.isLocked) return void null\n\n    const shapes = {} as Record<string, Partial<TDShape>>\n\n    const delta = altKey\n      ? Vec.mul(Vec.sub(currentPoint, originPoint), 2)\n      : Vec.sub(currentPoint, originPoint)\n\n    const shape = this.app.getShape(initialShape.id)\n\n    const utils = TLDR.getShapeUtil(shape)\n\n    let newBounds = Utils.getTransformedBoundingBox(\n      initialShapeBounds,\n      transformType,\n      delta,\n      shape.rotation,\n      shiftKey || shape.isAspectRatioLocked || utils.isAspectRatioLocked\n    )\n\n    if (altKey) {\n      newBounds = {\n        ...newBounds,\n        ...Utils.centerBounds(newBounds, Utils.getBoundsCenter(initialShapeBounds)),\n      }\n    }\n\n    if (showGrid) {\n      newBounds = {\n        ...newBounds,\n        ...Utils.snapBoundsToGrid(newBounds, currentGrid),\n      }\n    }\n\n    // Should we snap?\n\n    const speed = Vec.dist(currentPoint, previousPoint)\n\n    const speedChange = speed - this.speed\n\n    this.speed = this.speed + speedChange * (speedChange > 1 ? 0.5 : 0.15)\n\n    let snapLines: TLSnapLine[] = []\n\n    if (\n      ((isSnapping && !metaKey) || (!isSnapping && metaKey)) &&\n      !initialShape.rotation && // not now anyway\n      this.speed * camera.zoom < SLOW_SPEED &&\n      this.snapInfo.state === 'ready'\n    ) {\n      const snapResult = Utils.getSnapPoints(\n        Utils.getBoundsWithCenter(newBounds),\n        this.snapInfo.bounds.filter(\n          (bounds) => Utils.boundsContain(viewport, bounds) || Utils.boundsCollide(viewport, bounds)\n        ),\n        SNAP_DISTANCE / camera.zoom\n      )\n\n      if (snapResult) {\n        snapLines = snapResult.snapLines\n\n        newBounds = Utils.getTransformedBoundingBox(\n          initialShapeBounds,\n          transformType,\n          Vec.sub(delta, snapResult.offset),\n          shape.rotation,\n          shiftKey || shape.isAspectRatioLocked || utils.isAspectRatioLocked\n        )\n      }\n    }\n\n    const afterShape = TLDR.getShapeUtil(shape).transformSingle(shape, newBounds, {\n      initialShape,\n      type: this.transformType,\n      scaleX: newBounds.scaleX,\n      scaleY: newBounds.scaleY,\n      transformOrigin: [0.5, 0.5],\n    })\n\n    if (afterShape) {\n      shapes[shape.id] = afterShape\n    }\n\n    if (showGrid && afterShape && afterShape.point) {\n      afterShape.point = Vec.snap(afterShape.point, currentGrid)\n    }\n\n    return {\n      appState: {\n        snapLines,\n      },\n      document: {\n        pages: {\n          [currentPageId]: {\n            shapes,\n          },\n        },\n      },\n    }\n  }\n\n  cancel = (): TldrawPatch | undefined => {\n    const {\n      initialShape,\n      app: { currentPageId },\n    } = this\n\n    const shapes = {} as Record<string, TDShape | undefined>\n\n    if (this.isCreate) {\n      shapes[initialShape.id] = undefined\n    } else {\n      shapes[initialShape.id] = initialShape\n    }\n\n    return {\n      appState: {\n        snapLines: [],\n      },\n      document: {\n        pages: {\n          [currentPageId]: {\n            shapes,\n          },\n        },\n        pageStates: {\n          [currentPageId]: {\n            selectedIds: this.isCreate ? [] : [initialShape.id],\n          },\n        },\n      },\n    }\n  }\n\n  complete = (): TldrawPatch | TldrawCommand | undefined => {\n    const {\n      initialShape,\n      app: { currentPageId },\n    } = this\n\n    if (initialShape.isLocked) return\n\n    if (this.isCreate && Vec.dist(this.app.originPoint, this.app.currentPoint) < 2) {\n      return this.cancel()\n    }\n\n    const beforeShapes = {} as Record<string, Partial<TDShape> | undefined>\n    const afterShapes = {} as Record<string, Partial<TDShape>>\n\n    beforeShapes[initialShape.id] = this.isCreate ? undefined : initialShape\n\n    afterShapes[initialShape.id] = TLDR.onSessionComplete(this.app.getShape(initialShape.id))\n\n    return {\n      id: 'transform_single',\n      before: {\n        appState: {\n          snapLines: [],\n        },\n        document: {\n          pages: {\n            [currentPageId]: {\n              shapes: beforeShapes,\n            },\n          },\n          pageStates: {\n            [currentPageId]: {\n              selectedIds: this.isCreate ? [] : [initialShape.id],\n              editingId: undefined,\n              hoveredId: undefined,\n            },\n          },\n        },\n      },\n      after: {\n        appState: {\n          snapLines: [],\n        },\n        document: {\n          pages: {\n            [currentPageId]: {\n              shapes: afterShapes,\n            },\n          },\n          pageStates: {\n            [currentPageId]: {\n              selectedIds: [initialShape.id],\n              editingId: undefined,\n              hoveredId: undefined,\n            },\n          },\n        },\n      },\n    }\n  }\n}\n", "import { TLBounds, TLBoundsWithCenter, TLPageState, TLSnapLine, Utils } from '@tldraw/core'\nimport { Vec } from '@tldraw/vec'\nimport { SLOW_SPEED, SNAP_DISTANCE } from '~constants'\nimport { TLDR } from '~state/TLDR'\nimport type { TldrawApp } from '~state/TldrawApp'\nimport { BaseSession } from '~state/sessions/BaseSession'\nimport {\n  ArrowBinding,\n  ArrowShape,\n  GroupShape,\n  Patch,\n  SessionType,\n  TDBinding,\n  TDShape,\n  TDShapeType,\n  TDStatus,\n  TldrawCommand,\n  TldrawPatch,\n} from '~types'\n\ntype CloneInfo =\n  | {\n      state: 'empty'\n    }\n  | {\n      state: 'ready'\n      cloneMap: Record<string, string>\n      clones: TDShape[]\n      clonedBindings: ArrowBinding[]\n    }\n\ntype SnapInfo =\n  | {\n      state: 'empty'\n    }\n  | {\n      state: 'ready'\n      others: TLBoundsWithCenter[]\n      bounds: TLBoundsWithCenter[]\n    }\n\nexport class TranslateSession extends BaseSession {\n  performanceMode = undefined\n  type = SessionType.Translate\n  status = TDStatus.Translating\n  delta = [0, 0]\n  prev = [0, 0]\n  prevPoint = [0, 0]\n  speed = 1\n  cloneInfo: CloneInfo = {\n    state: 'empty',\n  }\n  snapInfo: SnapInfo = {\n    state: 'empty',\n  }\n  snapLines: TLSnapLine[] = []\n  isCloning = false\n  isCreate: boolean\n  link: 'left' | 'right' | 'center' | false\n\n  initialIds: Set<string>\n  hasUnlockedShapes: boolean\n  initialSelectedIds: string[]\n  initialCommonBounds: TLBounds\n  initialShapes: TDShape[]\n  initialParentChildren: Record<string, string[]>\n  bindingsToDelete: ArrowBinding[]\n\n  constructor(app: TldrawApp, isCreate = false, link: 'left' | 'right' | 'center' | false = false) {\n    super(app)\n    this.isCreate = isCreate\n    this.link = link\n\n    const { currentPageId, selectedIds, page } = this.app\n\n    this.initialSelectedIds = [...selectedIds]\n\n    const selectedShapes = (\n      link ? TLDR.getLinkedShapeIds(this.app.state, currentPageId, link, false) : selectedIds\n    )\n      .map((id) => this.app.getShape(id))\n      .filter((shape) => !shape.isLocked)\n\n    const selectedShapeIds = new Set(selectedShapes.map((shape) => shape.id))\n\n    this.hasUnlockedShapes = selectedShapes.length > 0\n\n    this.initialShapes = Array.from(\n      new Set(\n        selectedShapes\n          .filter((shape) => !selectedShapeIds.has(shape.parentId))\n          .flatMap((shape) => {\n            return shape.children\n              ? [shape, ...shape.children.map((childId) => this.app.getShape(childId))]\n              : [shape]\n          })\n      ).values()\n    )\n\n    this.initialIds = new Set(this.initialShapes.map((shape) => shape.id))\n\n    this.bindingsToDelete = []\n\n    Object.values(page.bindings)\n      .filter((binding) => this.initialIds.has(binding.fromId) || this.initialIds.has(binding.toId))\n      .forEach((binding) => {\n        if (this.initialIds.has(binding.fromId)) {\n          if (!this.initialIds.has(binding.toId)) {\n            this.bindingsToDelete.push(binding)\n          }\n        }\n      })\n\n    this.initialParentChildren = {}\n\n    this.initialShapes\n      .map((s) => s.parentId)\n      .filter((id) => id !== page.id)\n      .forEach((id) => {\n        this.initialParentChildren[id] = this.app.getShape(id).children!\n      })\n\n    this.initialCommonBounds = Utils.getCommonBounds(this.initialShapes.map(TLDR.getRotatedBounds))\n\n    this.app.rotationInfo.selectedIds = [...this.app.selectedIds]\n  }\n\n  start = (): TldrawPatch | undefined => {\n    const {\n      bindingsToDelete,\n      initialIds,\n      app: { currentPageId, page },\n    } = this\n\n    const allBounds: TLBoundsWithCenter[] = []\n    const otherBounds: TLBoundsWithCenter[] = []\n\n    Object.values(page.shapes).forEach((shape) => {\n      const bounds = Utils.getBoundsWithCenter(TLDR.getRotatedBounds(shape))\n      allBounds.push(bounds)\n      if (!initialIds.has(shape.id)) {\n        otherBounds.push(bounds)\n      }\n    })\n\n    this.snapInfo = {\n      state: 'ready',\n      bounds: allBounds,\n      others: otherBounds,\n    }\n\n    if (bindingsToDelete.length === 0) return\n\n    const nextBindings: Patch<Record<string, TDBinding>> = {}\n    const nextShapes: Patch<Record<string, TDShape>> = {}\n\n    bindingsToDelete.forEach((binding) => {\n      nextBindings[binding.id] = undefined\n      const fromShape = this.app.getShape(binding.fromId)\n      nextShapes[binding.fromId] = {\n        handles: {\n          ...fromShape.handles,\n          [binding.handleId]: {\n            // @ts-expect-error\n            ...fromShape.handles[binding.handleId],\n            bindingId: undefined,\n          },\n        },\n      }\n    })\n\n    return {\n      document: {\n        pages: {\n          [currentPageId]: {\n            bindings: nextBindings,\n            shapes: nextShapes,\n          },\n        },\n      },\n    }\n  }\n\n  update = (): TldrawPatch | undefined => {\n    const {\n      initialParentChildren,\n      initialShapes,\n      initialCommonBounds,\n      bindingsToDelete,\n      app: {\n        pageState: { camera },\n        settings: { isSnapping, showGrid },\n        currentPageId,\n        viewport,\n        selectedIds,\n        currentPoint,\n        previousPoint,\n        originPoint,\n        altKey,\n        shiftKey,\n        metaKey,\n        currentGrid,\n      },\n    } = this\n\n    const nextBindings: Patch<Record<string, TDBinding>> = {}\n    const nextShapes: Patch<Record<string, TDShape>> = {}\n    const nextPageState: Patch<TLPageState> = {}\n\n    let delta = Vec.sub(currentPoint, originPoint)\n\n    let didChangeCloning = false\n\n    if (!this.isCreate) {\n      if (altKey && !this.isCloning) {\n        this.isCloning = true\n        didChangeCloning = true\n      } else if (!altKey && this.isCloning) {\n        this.isCloning = false\n        didChangeCloning = true\n      }\n    }\n\n    if (shiftKey) {\n      if (Math.abs(delta[0]) < Math.abs(delta[1])) {\n        delta[0] = 0\n      } else {\n        delta[1] = 0\n      }\n    }\n\n    // Should we snap?\n\n    // Speed is used to decide which snap points to use. At a high\n    // speed, we don't use any snap points. At a low speed, we only\n    // allow center-to-center snap points. At very low speed, we\n    // enable all snap points (still preferring middle snaps). We're\n    // using an acceleration function here to smooth the changes in\n    // speed, but we also want the speed to accelerate faster than\n    // it decelerates.\n\n    const speed = Vec.dist(currentPoint, previousPoint)\n\n    const change = speed - this.speed\n\n    this.speed = this.speed + change * (change > 1 ? 0.5 : 0.15)\n\n    this.snapLines = []\n\n    if (\n      ((isSnapping && !metaKey) || (!isSnapping && metaKey)) &&\n      this.speed * camera.zoom < SLOW_SPEED &&\n      this.snapInfo.state === 'ready'\n    ) {\n      const snapResult = Utils.getSnapPoints(\n        Utils.getBoundsWithCenter(\n          showGrid\n            ? Utils.snapBoundsToGrid(Utils.translateBounds(initialCommonBounds, delta), currentGrid)\n            : Utils.translateBounds(initialCommonBounds, delta)\n        ),\n        (this.isCloning ? this.snapInfo.bounds : this.snapInfo.others).filter((bounds) => {\n          return Utils.boundsContain(viewport, bounds) || Utils.boundsCollide(viewport, bounds)\n        }),\n        SNAP_DISTANCE / camera.zoom\n      )\n\n      if (snapResult) {\n        this.snapLines = snapResult.snapLines\n        delta = Vec.sub(delta, snapResult.offset)\n      }\n    }\n\n    // We've now calculated the \"delta\", or difference between the\n    // cursor's position (real or adjusted by snaps or axis locking)\n    // and the cursor's original position (\"origin\").\n\n    // The \"movement\" is the actual change of position between this\n    // computed position and the previous computed position.\n\n    this.prev = delta\n\n    // If cloning...\n    if (this.isCloning) {\n      // Not Cloning -> Cloning\n      if (didChangeCloning) {\n        if (this.cloneInfo.state === 'empty') {\n          this.createCloneInfo()\n        }\n\n        if (this.cloneInfo.state === 'empty') {\n          throw Error\n        }\n\n        const { clones, clonedBindings } = this.cloneInfo\n\n        this.isCloning = true\n\n        // Put back any bindings we deleted\n        bindingsToDelete.forEach((binding) => (nextBindings[binding.id] = binding))\n\n        // Move original shapes back to start\n        initialShapes.forEach((shape) => (nextShapes[shape.id] = { point: shape.point }))\n\n        // Add the clones to the page\n        clones.forEach((clone) => {\n          nextShapes[clone.id] = { ...clone }\n\n          // Add clones to non-selected parents\n          if (clone.parentId !== currentPageId && !selectedIds.includes(clone.parentId)) {\n            const children =\n              nextShapes[clone.parentId]?.children || initialParentChildren[clone.parentId]\n\n            if (!children.includes(clone.id)) {\n              nextShapes[clone.parentId] = {\n                ...nextShapes[clone.parentId],\n                children: [...children, clone.id],\n              }\n            }\n          }\n        })\n\n        // Add the cloned bindings\n        for (const binding of clonedBindings) {\n          nextBindings[binding.id] = binding\n        }\n\n        // Set the selected ids to the clones\n        nextPageState.selectedIds = clones.map((clone) => clone.id)\n\n        // Either way, move the clones\n        clones.forEach((clone) => {\n          nextShapes[clone.id] = {\n            ...clone,\n            point: showGrid\n              ? Vec.snap(Vec.toFixed(Vec.add(clone.point, delta)), currentGrid)\n              : Vec.toFixed(Vec.add(clone.point, delta)),\n          }\n        })\n      } else {\n        if (this.cloneInfo.state === 'empty') throw Error\n\n        const { clones } = this.cloneInfo\n\n        clones.forEach((clone) => {\n          nextShapes[clone.id] = {\n            point: showGrid\n              ? Vec.snap(Vec.toFixed(Vec.add(clone.point, delta)), currentGrid)\n              : Vec.toFixed(Vec.add(clone.point, delta)),\n          }\n        })\n      }\n    } else {\n      // If not cloning...\n\n      // Cloning -> Not Cloning\n      if (didChangeCloning) {\n        if (this.cloneInfo.state === 'empty') throw Error\n\n        const { clones, clonedBindings } = this.cloneInfo\n\n        this.isCloning = false\n\n        // Delete the bindings\n        bindingsToDelete.forEach((binding) => (nextBindings[binding.id] = undefined))\n\n        // Remove the clones from parents\n        clones.forEach((clone) => {\n          if (clone.parentId !== currentPageId) {\n            nextShapes[clone.parentId] = {\n              ...nextShapes[clone.parentId],\n              children: initialParentChildren[clone.parentId],\n            }\n          }\n        })\n\n        // Delete the clones (including any parent clones)\n        clones.forEach((clone) => (nextShapes[clone.id] = undefined))\n\n        // Move the original shapes back to the cursor position\n        initialShapes.forEach((shape) => {\n          nextShapes[shape.id] = {\n            point: showGrid\n              ? Vec.snap(Vec.toFixed(Vec.add(shape.point, delta)), currentGrid)\n              : Vec.toFixed(Vec.add(shape.point, delta)),\n          }\n        })\n\n        // Delete the cloned bindings\n        for (const binding of clonedBindings) {\n          nextBindings[binding.id] = undefined\n        }\n\n        // Set selected ids\n        nextPageState.selectedIds = initialShapes.map((shape) => shape.id)\n      } else {\n        // Move the shapes by the delta\n        initialShapes.forEach((shape) => {\n          // const current = (nextShapes[shape.id] || this.app.getShape(shape.id)) as TDShape\n\n          nextShapes[shape.id] = {\n            point: showGrid\n              ? Vec.snap(Vec.toFixed(Vec.add(shape.point, delta)), currentGrid)\n              : Vec.toFixed(Vec.add(shape.point, delta)),\n          }\n        })\n      }\n    }\n\n    return {\n      appState: {\n        snapLines: this.snapLines,\n      },\n      document: {\n        pages: {\n          [currentPageId]: {\n            shapes: nextShapes,\n            bindings: nextBindings,\n          },\n        },\n        pageStates: {\n          [currentPageId]: nextPageState,\n        },\n      },\n    }\n  }\n\n  cancel = (): TldrawPatch | undefined => {\n    const {\n      initialShapes,\n      initialSelectedIds,\n      bindingsToDelete,\n      app: { currentPageId },\n    } = this\n\n    const nextBindings: Record<string, Partial<TDBinding> | undefined> = {}\n    const nextShapes: Record<string, Partial<TDShape> | undefined> = {}\n    const nextPageState: Partial<TLPageState> = {\n      editingId: undefined,\n      hoveredId: undefined,\n    }\n\n    if (this.isCreate) {\n      initialShapes.forEach(({ id }) => (nextShapes[id] = undefined))\n      nextPageState.selectedIds = []\n    } else {\n      // Put initial shapes back to where they started\n      initialShapes.forEach(\n        ({ id, point, handles }) =>\n          (nextShapes[id] = handles\n            ? ({ ...nextShapes[id], point, handles } as any)\n            : { ...nextShapes[id], point })\n      )\n      nextPageState.selectedIds = initialSelectedIds\n\n      // Put back any deleted bindings\n      bindingsToDelete.forEach((binding) => {\n        nextBindings[binding.id] = binding\n      })\n    }\n\n    if (this.cloneInfo.state === 'ready') {\n      const { clones, clonedBindings } = this.cloneInfo\n      // Delete clones\n      clones.forEach((clone) => (nextShapes[clone.id] = undefined))\n\n      // Delete cloned bindings\n      clonedBindings.forEach((binding) => (nextBindings[binding.id] = undefined))\n    }\n\n    return {\n      appState: {\n        snapLines: [],\n      },\n      document: {\n        pages: {\n          [currentPageId]: {\n            shapes: nextShapes,\n            bindings: nextBindings,\n          },\n        },\n        pageStates: {\n          [currentPageId]: nextPageState,\n        },\n      },\n    }\n  }\n\n  complete = (): TldrawPatch | TldrawCommand | undefined => {\n    const {\n      initialShapes,\n      initialParentChildren,\n      bindingsToDelete,\n      app: { currentPageId },\n    } = this\n\n    const beforeBindings: Patch<Record<string, TDBinding>> = {}\n    const beforeShapes: Patch<Record<string, TDShape>> = {}\n\n    const afterBindings: Patch<Record<string, TDBinding>> = {}\n    const afterShapes: Patch<Record<string, TDShape>> = {}\n\n    if (this.isCloning) {\n      if (this.cloneInfo.state === 'empty') {\n        this.createCloneInfo()\n      }\n\n      if (this.cloneInfo.state !== 'ready') throw Error\n      const { clones, clonedBindings } = this.cloneInfo\n\n      // Update the clones\n      clones.forEach((clone) => {\n        beforeShapes[clone.id] = undefined\n\n        afterShapes[clone.id] = this.app.getShape(clone.id)\n\n        if (clone.parentId !== currentPageId) {\n          beforeShapes[clone.parentId] = {\n            ...beforeShapes[clone.parentId],\n            children: initialParentChildren[clone.parentId],\n          }\n\n          afterShapes[clone.parentId] = {\n            ...afterShapes[clone.parentId],\n            children: this.app.getShape<GroupShape>(clone.parentId).children,\n          }\n        }\n      })\n\n      // Update the cloned bindings\n      clonedBindings.forEach((binding) => {\n        beforeBindings[binding.id] = undefined\n        afterBindings[binding.id] = this.app.getBinding(binding.id)\n      })\n    } else {\n      // If we aren't cloning, then update the initial shapes\n      initialShapes.forEach((shape) => {\n        beforeShapes[shape.id] = this.isCreate\n          ? undefined\n          : {\n              ...beforeShapes[shape.id],\n              point: shape.point,\n            }\n\n        afterShapes[shape.id] = {\n          ...afterShapes[shape.id],\n          ...(this.isCreate\n            ? this.app.getShape(shape.id)\n            : { point: this.app.getShape(shape.id).point }),\n        }\n      })\n    }\n\n    // Update the deleted bindings and any associated shapes\n    bindingsToDelete.forEach((binding) => {\n      beforeBindings[binding.id] = binding\n\n      beforeShapes[binding.fromId] = {\n        ...beforeShapes[binding.fromId],\n        id: binding.fromId,\n        handles: {\n          ...beforeShapes[binding.fromId]?.handles,\n          [binding.handleId]: {\n            ...beforeShapes[binding.fromId]?.handles?.[binding.handleId],\n            bindingId: binding.id,\n          },\n        },\n      }\n\n      afterShapes[binding.fromId] = {\n        ...afterShapes[binding.fromId],\n        id: binding.fromId,\n        handles: {\n          // @ts-expect-error\n          ...afterShapes[binding.fromId].handles!,\n          [binding.handleId]: {\n            ...afterShapes[binding.fromId]?.handles?.[binding.handleId],\n            bindingId: undefined,\n          },\n        },\n      }\n    })\n\n    bindingsToDelete.forEach((binding) => (afterBindings[binding.id] = undefined))\n\n    return {\n      id: 'translate',\n      before: {\n        appState: {\n          snapLines: [],\n        },\n        document: {\n          pages: {\n            [currentPageId]: {\n              shapes: beforeShapes,\n              bindings: beforeBindings,\n            },\n          },\n          pageStates: {\n            [currentPageId]: {\n              selectedIds: this.isCreate ? [] : [...this.initialSelectedIds],\n            },\n          },\n        },\n      },\n      after: {\n        appState: {\n          snapLines: [],\n        },\n        document: {\n          pages: {\n            [currentPageId]: {\n              shapes: afterShapes,\n              bindings: afterBindings,\n            },\n          },\n          pageStates: {\n            [currentPageId]: {\n              selectedIds: [...this.app.selectedIds],\n            },\n          },\n        },\n      },\n    }\n  }\n\n  private createCloneInfo = () => {\n    // Create clones when as they're needed.\n    // Consider doing this work in a worker.\n\n    const {\n      initialShapes,\n      initialParentChildren,\n      app: { selectedIds, currentPageId, page },\n    } = this\n\n    const cloneMap: Record<string, string> = {}\n    const clonedBindingsMap: Record<string, string> = {}\n    const clonedBindings: TDBinding[] = []\n\n    // Create clones of selected shapes\n    const clones: TDShape[] = []\n\n    initialShapes.forEach((shape) => {\n      const newId = Utils.uniqueId()\n\n      initialParentChildren[newId] = initialParentChildren[shape.id]\n\n      cloneMap[shape.id] = newId\n\n      const clone = {\n        ...Utils.deepClone(shape),\n        id: newId,\n        parentId: shape.parentId,\n        childIndex: TLDR.getChildIndexAbove(this.app.state, shape.id, currentPageId),\n      }\n\n      if (clone.type === TDShapeType.Video) {\n        const element = document.getElementById(shape.id + '_video') as HTMLVideoElement\n        if (element) clone.currentTime = (element.currentTime + 16) % element.duration\n      }\n\n      clones.push(clone)\n    })\n\n    clones.forEach((clone) => {\n      if (clone.children !== undefined) {\n        clone.children = clone.children.map((childId) => cloneMap[childId])\n      }\n    })\n\n    clones.forEach((clone) => {\n      if (selectedIds.includes(clone.parentId)) {\n        clone.parentId = cloneMap[clone.parentId]\n      }\n    })\n\n    // Potentially confusing name here: these are the ids of the\n    // original shapes that were cloned, not their clones' ids.\n    const clonedShapeIds = new Set(Object.keys(cloneMap))\n\n    // Create cloned bindings for shapes where both to and from shapes are selected\n    // (if the user clones, then we will create a new binding for the clones)\n    Object.values(page.bindings)\n      .filter((binding) => clonedShapeIds.has(binding.fromId) || clonedShapeIds.has(binding.toId))\n      .forEach((binding) => {\n        if (clonedShapeIds.has(binding.fromId)) {\n          if (clonedShapeIds.has(binding.toId)) {\n            const cloneId = Utils.uniqueId()\n\n            const cloneBinding = {\n              ...Utils.deepClone(binding),\n              id: cloneId,\n              fromId: cloneMap[binding.fromId] || binding.fromId,\n              toId: cloneMap[binding.toId] || binding.toId,\n            }\n            clonedBindingsMap[binding.id] = cloneId\n            clonedBindings.push(cloneBinding)\n          }\n        }\n      })\n\n    // Assign new binding ids to clones (or delete them!)\n    clones.forEach((clone) => {\n      if (clone.handles) {\n        if (clone.handles) {\n          for (const id in clone.handles) {\n            const handle = clone.handles[id as keyof ArrowShape['handles']]\n            handle.bindingId = handle.bindingId ? clonedBindingsMap[handle.bindingId] : undefined\n          }\n        }\n      }\n    })\n\n    clones.forEach((clone) => {\n      if (page.shapes[clone.id]) {\n        throw Error(\"uh oh, we didn't clone correctly\")\n      }\n    })\n\n    this.cloneInfo = {\n      state: 'ready',\n      clones,\n      cloneMap,\n      clonedBindings,\n    }\n  }\n}\n", "import { ExceptFirst, SessionType } from '~types'\nimport { ArrowSession } from './ArrowSession'\nimport { BrushSession } from './BrushSession'\nimport { DrawSession } from './DrawSession'\nimport { EditSession } from './EditSession'\nimport { EraseSession } from './EraseSession'\nimport { GridSession } from './GridSession'\nimport { HandleSession } from './HandleSession'\nimport { RotateSession } from './RotateSession'\nimport { TransformSession } from './TransformSession'\nimport { TransformSingleSession } from './TransformSingleSession'\nimport { TranslateSession } from './TranslateSession'\n\nexport type TldrawSession =\n  | ArrowSession\n  | BrushSession\n  | DrawSession\n  | HandleSession\n  | RotateSession\n  | TransformSession\n  | TransformSingleSession\n  | TranslateSession\n  | EraseSession\n  | GridSession\n  | EditSession\n\nexport interface SessionsMap {\n  [SessionType.Arrow]: typeof ArrowSession\n  [SessionType.Brush]: typeof BrushSession\n  [SessionType.Draw]: typeof DrawSession\n  [SessionType.Erase]: typeof EraseSession\n  [SessionType.Handle]: typeof HandleSession\n  [SessionType.Rotate]: typeof RotateSession\n  [SessionType.Transform]: typeof TransformSession\n  [SessionType.TransformSingle]: typeof TransformSingleSession\n  [SessionType.Translate]: typeof TranslateSession\n  [SessionType.Grid]: typeof GridSession\n  [SessionType.Edit]: typeof EditSession\n}\n\nexport type SessionOfType<K extends SessionType> = SessionsMap[K]\n\nexport type SessionArgsOfType<K extends SessionType> = ExceptFirst<\n  ConstructorParameters<SessionOfType<K>>\n>\n\nexport const sessions: { [K in SessionType]: SessionsMap[K] } = {\n  [SessionType.Arrow]: ArrowSession,\n  [SessionType.Brush]: BrushSession,\n  [SessionType.Draw]: DrawSession,\n  [SessionType.Erase]: EraseSession,\n  [SessionType.Handle]: HandleSession,\n  [SessionType.Rotate]: RotateSession,\n  [SessionType.Transform]: TransformSession,\n  [SessionType.TransformSingle]: TransformSingleSession,\n  [SessionType.Translate]: TranslateSession,\n  [SessionType.Grid]: GridSession,\n  [SessionType.Edit]: EditSession,\n}\n\nexport const getSession = <K extends SessionType>(type: K): SessionOfType<K> => {\n  return sessions[type]\n}\n", "import { TLPointerEventHandler, Utils } from '@tldraw/core'\nimport Vec from '@tldraw/vec'\nimport { Arrow } from '~state/shapes'\nimport { BaseTool, Status } from '~state/tools/BaseTool'\nimport { SessionType, TDShapeType } from '~types'\n\nexport class ArrowTool extends BaseTool {\n  type = TDShapeType.Arrow as const\n\n  /* ----------------- Event Handlers ----------------- */\n\n  onPointerDown: TLPointerEventHandler = () => {\n    if (this.status !== Status.Idle) return\n\n    const {\n      currentPoint,\n      currentGrid,\n      settings: { showGrid },\n      appState: { currentPageId, currentStyle },\n    } = this.app\n\n    const childIndex = this.getNextChildIndex()\n\n    const id = Utils.uniqueId()\n\n    const newShape = Arrow.create({\n      id,\n      parentId: currentPageId,\n      childIndex,\n      point: showGrid ? Vec.snap(currentPoint, currentGrid) : currentPoint,\n      style: { ...currentStyle },\n    })\n\n    this.app.patchCreate([newShape])\n\n    this.app.startSession(SessionType.Arrow, newShape.id, 'end', true)\n\n    this.setStatus(Status.Creating)\n  }\n}\n", "import {\n  TLKeyboardEventHandler,\n  TLPinchEventHandler,\n  TLPointerEventHandler,\n  Utils,\n} from '@tldraw/core'\nimport type { TldrawApp } from '~state/TldrawApp'\nimport { TDEventHandler, TDToolType } from '~types'\n\nexport enum Status {\n  Idle = 'idle',\n  Creating = 'creating',\n  Pinching = 'pinching',\n}\n\nexport abstract class BaseTool<T extends string = any> extends TDEventHandler {\n  type: TDToolType = 'select' as const\n\n  previous?: TDToolType\n\n  status: Status | T = Status.Idle\n\n  constructor(public app: TldrawApp) {\n    super()\n  }\n\n  protected readonly setStatus = (status: Status | T) => {\n    this.status = status as Status | T\n    this.app.setStatus(this.status as string)\n  }\n\n  onEnter = () => {\n    this.setStatus(Status.Idle)\n  }\n\n  onExit = () => {\n    this.setStatus(Status.Idle)\n  }\n\n  onCancel = () => {\n    if (this.status === Status.Idle) {\n      this.app.selectTool('select')\n    } else {\n      this.setStatus(Status.Idle)\n    }\n\n    this.app.cancelSession()\n  }\n\n  getNextChildIndex = () => {\n    const {\n      shapes,\n      appState: { currentPageId },\n    } = this.app\n\n    return shapes.length === 0\n      ? 1\n      : shapes\n          .filter((shape) => shape.parentId === currentPageId)\n          .sort((a, b) => b.childIndex - a.childIndex)[0].childIndex + 1\n  }\n\n  /* --------------------- Camera --------------------- */\n\n  onPinchStart: TLPinchEventHandler = () => {\n    this.app.cancelSession()\n    this.setStatus(Status.Pinching)\n  }\n\n  onPinchEnd: TLPinchEventHandler = () => {\n    if (Utils.isMobileSafari()) {\n      this.app.undoSelect()\n    }\n    this.setStatus(Status.Idle)\n  }\n\n  onPinch: TLPinchEventHandler = (info, e) => {\n    if (this.status !== 'pinching') return\n    if (isNaN(info.delta[0]) || isNaN(info.delta[1])) return\n    this.app.pinchZoom(info.point, info.delta, info.delta[2])\n    this.onPointerMove?.(info, e as unknown as React.PointerEvent)\n  }\n\n  /* ---------------------- Keys ---------------------- */\n\n  onKeyDown: TLKeyboardEventHandler = (key) => {\n    if (key === 'Escape') {\n      this.onCancel()\n      return\n    }\n\n    if (key === 'Meta' || key === 'Control' || key === 'Alt') {\n      this.app.updateSession()\n      return\n    }\n  }\n\n  onKeyUp: TLKeyboardEventHandler = (key) => {\n    if (key === 'Meta' || key === 'Control' || key === 'Alt') {\n      this.app.updateSession()\n      return\n    }\n  }\n\n  /* --------------------- Pointer -------------------- */\n\n  onPointerMove: TLPointerEventHandler = () => {\n    if (this.status === Status.Creating) {\n      this.app.updateSession()\n    }\n  }\n\n  onPointerUp: TLPointerEventHandler = () => {\n    if (this.status === Status.Creating) {\n      this.app.completeSession()\n\n      const { isToolLocked } = this.app.appState\n\n      if (!isToolLocked) {\n        this.app.selectTool('select')\n      }\n    }\n\n    this.setStatus(Status.Idle)\n  }\n}\n", "import { TLPointerEventHandler, Utils } from '@tldraw/core'\nimport { Draw } from '~state/shapes'\nimport { BaseTool } from '~state/tools/BaseTool'\nimport { SessionType, TDShapeType } from '~types'\n\nenum Status {\n  Idle = 'idle',\n  Creating = 'creating',\n  Extending = 'extending',\n  Pinching = 'pinching',\n}\n\nexport class DrawTool extends BaseTool {\n  type = TDShapeType.Draw as const\n\n  private lastShapeId?: string\n\n  onEnter = () => {\n    this.lastShapeId = undefined\n  }\n\n  onCancel = () => {\n    switch (this.status) {\n      case Status.Idle: {\n        this.app.selectTool('select')\n        break\n      }\n      default: {\n        this.setStatus(Status.Idle)\n        break\n      }\n    }\n\n    this.app.cancelSession()\n  }\n\n  /* ----------------- Event Handlers ----------------- */\n\n  onPointerDown: TLPointerEventHandler = (info) => {\n    if (this.status !== Status.Idle) return\n    if (this.app.readOnly) return\n    const {\n      currentPoint,\n      appState: { currentPageId, currentStyle },\n    } = this.app\n    const previous = this.lastShapeId && this.app.getShape(this.lastShapeId)\n    if (info.shiftKey && previous) {\n      // Extend the previous shape\n      this.app.startSession(SessionType.Draw, previous.id)\n      this.setStatus(Status.Extending)\n    } else {\n      // Create a new shape\n      const childIndex = this.getNextChildIndex()\n      const id = Utils.uniqueId()\n      const newShape = Draw.create({\n        id,\n        parentId: currentPageId,\n        childIndex,\n        point: currentPoint,\n        style: { ...currentStyle },\n      })\n      this.lastShapeId = id\n      this.app.patchCreate([newShape])\n      this.app.startSession(SessionType.Draw, id)\n      this.setStatus(Status.Creating)\n    }\n  }\n\n  onPointerMove: TLPointerEventHandler = () => {\n    if (this.app.readOnly) return\n\n    switch (this.status) {\n      case Status.Extending:\n      case Status.Creating: {\n        this.app.updateSession()\n      }\n    }\n  }\n\n  onPointerUp: TLPointerEventHandler = () => {\n    this.app.completeSession()\n    this.setStatus(Status.Idle)\n  }\n}\n", "import { TLBoundsCorner, TLPointerEventHandler, Utils } from '@tldraw/core'\nimport Vec from '@tldraw/vec'\nimport { Ellipse } from '~state/shapes'\nimport { BaseTool, Status } from '~state/tools/BaseTool'\nimport { SessionType, TDShapeType } from '~types'\n\nexport class EllipseTool extends BaseTool {\n  type = TDShapeType.Ellipse as const\n\n  /* ----------------- Event Handlers ----------------- */\n\n  onPointerDown: TLPointerEventHandler = () => {\n    if (this.app.readOnly) return\n    if (this.status !== Status.Idle) return\n\n    const {\n      currentPoint,\n      currentGrid,\n      settings: { showGrid },\n      appState: { currentPageId, currentStyle },\n    } = this.app\n\n    const childIndex = this.getNextChildIndex()\n\n    const id = Utils.uniqueId()\n\n    const newShape = Ellipse.create({\n      id,\n      parentId: currentPageId,\n      childIndex,\n      point: showGrid ? Vec.snap(currentPoint, currentGrid) : currentPoint,\n      style: { ...currentStyle },\n    })\n\n    this.app.patchCreate([newShape])\n\n    this.app.startSession(\n      SessionType.TransformSingle,\n      newShape.id,\n      TLBoundsCorner.BottomRight,\n      true\n    )\n\n    this.setStatus(Status.Creating)\n  }\n}\n", "import type { TLPointerEventHandler } from '@tldraw/core'\nimport Vec from '@tldraw/vec'\nimport { DEAD_ZONE } from '~constants'\nimport { BaseTool } from '~state/tools/BaseTool'\nimport { SessionType } from '~types'\n\nenum Status {\n  Idle = 'idle',\n  Pointing = 'pointing',\n  Erasing = 'erasing',\n}\n\nexport class EraseTool extends BaseTool {\n  type = 'erase' as const\n\n  status: Status = Status.Idle\n\n  /* ----------------- Event Handlers ----------------- */\n\n  onPointerDown: TLPointerEventHandler = () => {\n    if (this.app.readOnly) return\n    if (this.status !== Status.Idle) return\n\n    this.setStatus(Status.Pointing)\n  }\n\n  onPointerMove: TLPointerEventHandler = (info) => {\n    if (this.app.readOnly) return\n    switch (this.status) {\n      case Status.Pointing: {\n        if (Vec.dist(info.origin, info.point) > DEAD_ZONE) {\n          this.app.startSession(SessionType.Erase)\n          this.app.updateSession()\n          this.setStatus(Status.Erasing)\n        }\n        break\n      }\n      case Status.Erasing: {\n        this.app.updateSession()\n      }\n    }\n  }\n\n  onPointerUp: TLPointerEventHandler = () => {\n    if (this.app.readOnly) return\n    switch (this.status) {\n      case Status.Pointing: {\n        const shapeIdsAtPoint = this.app.shapes\n          .filter((shape) => !shape.isLocked)\n          .filter((shape) =>\n            this.app.getShapeUtil(shape).hitTestPoint(shape, this.app.currentPoint)\n          )\n          .flatMap((shape) => (shape.children ? [shape.id, ...shape.children] : shape.id))\n\n        this.app.delete(shapeIdsAtPoint)\n\n        break\n      }\n      case Status.Erasing: {\n        this.app.completeSession()\n\n        // Should the app go back to the previous state, the select\n        // state, or stay in the eraser state?\n\n        // if (this.previous) {\n        //   this.app.selectTool(this.previous)\n        // } else {\n        //   this.app.selectTool('select')\n        // }\n      }\n    }\n\n    this.setStatus(Status.Idle)\n  }\n\n  onCancel = () => {\n    if (this.status === Status.Idle) {\n      if (this.previous) {\n        this.app.selectTool(this.previous)\n      } else {\n        this.app.selectTool('select')\n      }\n    } else {\n      this.setStatus(Status.Idle)\n    }\n\n    this.app.cancelSession()\n  }\n}\n", "import { TLPointerEventHandler, Utils } from '@tldraw/core'\nimport Vec from '@tldraw/vec'\nimport { Arrow } from '~state/shapes'\nimport { BaseTool, Status } from '~state/tools/BaseTool'\nimport { SessionType, TDShapeType } from '~types'\n\nexport class LineTool extends BaseTool {\n  type = TDShapeType.Line as const\n\n  /* ----------------- Event Handlers ----------------- */\n\n  onPointerDown: TLPointerEventHandler = () => {\n    if (this.app.readOnly) return\n    if (this.status !== Status.Idle) return\n\n    const {\n      currentPoint,\n      currentGrid,\n      settings: { showGrid },\n      appState: { currentPageId, currentStyle },\n    } = this.app\n\n    const childIndex = this.getNextChildIndex()\n\n    const id = Utils.uniqueId()\n\n    const newShape = Arrow.create({\n      id,\n      parentId: currentPageId,\n      childIndex,\n      point: showGrid ? Vec.snap(currentPoint, currentGrid) : currentPoint,\n      decorations: {\n        start: undefined,\n        end: undefined,\n      },\n      style: { ...currentStyle },\n    })\n\n    this.app.patchCreate([newShape])\n\n    this.app.startSession(SessionType.Arrow, newShape.id, 'end', true)\n\n    this.setStatus(Status.Creating)\n  }\n}\n", "import { TLBoundsCorner, TLPointerEventHandler, Utils } from '@tldraw/core'\nimport Vec from '@tldraw/vec'\nimport { Rectangle } from '~state/shapes'\nimport { BaseTool, Status } from '~state/tools/BaseTool'\nimport { SessionType, TDShapeType } from '~types'\n\nexport class RectangleTool extends BaseTool {\n  type = TDShapeType.Rectangle as const\n\n  /* ----------------- Event Handlers ----------------- */\n\n  onPointerDown: TLPointerEventHandler = () => {\n    if (this.app.readOnly) return\n    if (this.status !== Status.Idle) return\n\n    const {\n      currentPoint,\n      currentGrid,\n      settings: { showGrid },\n      appState: { currentPageId, currentStyle },\n    } = this.app\n\n    const childIndex = this.getNextChildIndex()\n\n    const id = Utils.uniqueId()\n\n    const newShape = Rectangle.create({\n      id,\n      parentId: currentPageId,\n      childIndex,\n      point: showGrid ? Vec.snap(currentPoint, currentGrid) : currentPoint,\n      style: { ...currentStyle },\n    })\n\n    this.app.patchCreate([newShape])\n\n    this.app.startSession(\n      SessionType.TransformSingle,\n      newShape.id,\n      TLBoundsCorner.BottomRight,\n      true\n    )\n\n    this.setStatus(Status.Creating)\n  }\n}\n", "import {\n  TLBoundsCorner,\n  TLBoundsEdge,\n  TLBoundsEventHandler,\n  TLBoundsHandleEventHandler,\n  TLCanvasEventHandler,\n  TLKeyboardEventHandler,\n  TLPointerEventHandler,\n  TLShapeCloneHandler,\n  Utils,\n} from '@tldraw/core'\nimport Vec from '@tldraw/vec'\nimport { CLONING_DISTANCE, DEAD_ZONE } from '~constants'\nimport { TLDR } from '~state/TLDR'\nimport { BaseTool } from '~state/tools/BaseTool'\nimport { SessionType, TDShapeType } from '~types'\n\nenum Status {\n  Idle = 'idle',\n  Creating = 'creating',\n  Pinching = 'pinching',\n  PointingCanvas = 'pointingCanvas',\n  PointingHandle = 'pointingHandle',\n  PointingBounds = 'pointingBounds',\n  PointingClone = 'pointingClone',\n  TranslatingClone = 'translatingClone',\n  PointingBoundsHandle = 'pointingBoundsHandle',\n  TranslatingHandle = 'translatingHandle',\n  Translating = 'translating',\n  Transforming = 'transforming',\n  Rotating = 'rotating',\n  Brushing = 'brushing',\n  GridCloning = 'gridCloning',\n  ClonePainting = 'clonePainting',\n}\n\nexport class SelectTool extends BaseTool<Status> {\n  type = 'select' as const\n\n  pointedId?: string\n\n  selectedGroupId?: string\n\n  pointedHandleId?: 'start' | 'end' | 'bend'\n\n  pointedBoundsHandle?: TLBoundsCorner | TLBoundsEdge | 'rotate' | 'center' | 'left' | 'right'\n\n  pointedLinkHandleId?: 'left' | 'center' | 'right'\n\n  /* --------------------- Methods -------------------- */\n\n  private deselect(id: string) {\n    this.app.select(...this.app.selectedIds.filter((oid) => oid !== id))\n  }\n\n  private select(id: string) {\n    this.app.select(id)\n  }\n\n  private pushSelect(id: string) {\n    const shape = this.app.getShape(id)\n    this.app.select(...this.app.selectedIds.filter((oid) => oid !== shape.parentId), id)\n  }\n\n  private selectNone() {\n    this.app.selectNone()\n  }\n\n  onEnter = () => {\n    this.setStatus(Status.Idle)\n  }\n\n  onExit = () => {\n    this.setStatus(Status.Idle)\n  }\n\n  clonePaint = (point: number[]) => {\n    if (this.app.selectedIds.length === 0) return\n\n    const shapes = this.app.selectedIds.map((id) => this.app.getShape(id))\n\n    const bounds = Utils.expandBounds(Utils.getCommonBounds(shapes.map(TLDR.getBounds)), 16)\n\n    const center = Utils.getBoundsCenter(bounds)\n\n    const size = [bounds.width, bounds.height]\n\n    const gridPoint = [\n      center[0] + size[0] * Math.floor((point[0] + size[0] / 2 - center[0]) / size[0]),\n      center[1] + size[1] * Math.floor((point[1] + size[1] / 2 - center[1]) / size[1]),\n    ]\n\n    const centeredBounds = Utils.centerBounds(bounds, gridPoint)\n\n    const hit = this.app.shapes.some((shape) =>\n      TLDR.getShapeUtil(shape).hitTestBounds(shape, centeredBounds)\n    )\n\n    if (!hit) {\n      this.app.duplicate(this.app.selectedIds, gridPoint)\n    }\n  }\n\n  getShapeClone = (\n    id: string,\n    side:\n      | 'top'\n      | 'right'\n      | 'bottom'\n      | 'left'\n      | 'topLeft'\n      | 'topRight'\n      | 'bottomRight'\n      | 'bottomLeft'\n  ) => {\n    const shape = this.app.getShape(id)\n\n    const utils = TLDR.getShapeUtil(shape)\n\n    if (utils.canClone) {\n      const bounds = utils.getBounds(shape)\n\n      const center = utils.getCenter(shape)\n\n      let point = {\n        top: [bounds.minX, bounds.minY - (bounds.height + CLONING_DISTANCE)],\n        right: [bounds.maxX + CLONING_DISTANCE, bounds.minY],\n        bottom: [bounds.minX, bounds.maxY + CLONING_DISTANCE],\n        left: [bounds.minX - (bounds.width + CLONING_DISTANCE), bounds.minY],\n        topLeft: [\n          bounds.minX - (bounds.width + CLONING_DISTANCE),\n          bounds.minY - (bounds.height + CLONING_DISTANCE),\n        ],\n        topRight: [\n          bounds.maxX + CLONING_DISTANCE,\n          bounds.minY - (bounds.height + CLONING_DISTANCE),\n        ],\n        bottomLeft: [\n          bounds.minX - (bounds.width + CLONING_DISTANCE),\n          bounds.maxY + CLONING_DISTANCE,\n        ],\n        bottomRight: [bounds.maxX + CLONING_DISTANCE, bounds.maxY + CLONING_DISTANCE],\n      }[side]\n\n      if (shape.rotation !== 0) {\n        const newCenter = Vec.add(point, [bounds.width / 2, bounds.height / 2])\n\n        const rotatedCenter = Vec.rotWith(newCenter, center, shape.rotation || 0)\n\n        point = Vec.sub(rotatedCenter, [bounds.width / 2, bounds.height / 2])\n      }\n\n      const id = Utils.uniqueId()\n\n      const clone = {\n        ...shape,\n        id,\n        point,\n      }\n\n      if (clone.type === TDShapeType.Sticky) {\n        clone.text = ''\n      }\n\n      return clone\n    }\n\n    return\n  }\n\n  /* ----------------- Event Handlers ----------------- */\n\n  onCancel = () => {\n    if (this.app.session) {\n      this.app.cancelSession()\n    } else {\n      this.selectNone()\n    }\n\n    this.setStatus(Status.Idle)\n  }\n\n  onKeyDown: TLKeyboardEventHandler = (key, info, e) => {\n    switch (key) {\n      case 'Escape': {\n        this.onCancel()\n        break\n      }\n      case 'Tab': {\n        if (this.app.readOnly) return\n\n        if (\n          !this.app.pageState.editingId &&\n          this.status === Status.Idle &&\n          this.app.selectedIds.length === 1\n        ) {\n          const [selectedId] = this.app.selectedIds\n          const clonedShape = this.getShapeClone(selectedId, 'right')\n\n          if (clonedShape) {\n            this.app.createShapes(clonedShape)\n            this.setStatus(Status.Idle)\n            if (clonedShape.type === TDShapeType.Sticky) {\n              this.app.select(clonedShape.id)\n              this.app.setEditingId(clonedShape.id)\n            }\n          }\n        }\n        break\n      }\n      case 'Meta':\n      case 'Control':\n      case 'Alt': {\n        this.app.updateSession()\n        break\n      }\n      case 'Enter': {\n        if (this.app.readOnly) return\n\n        const { pageState } = this.app\n        if (pageState.selectedIds.length === 1 && !pageState.editingId) {\n          this.app.setEditingId(pageState.selectedIds[0])\n          e.preventDefault()\n        }\n      }\n    }\n  }\n\n  onKeyUp: TLKeyboardEventHandler = (key, info) => {\n    if (this.status === Status.ClonePainting && !(info.altKey && info.shiftKey)) {\n      this.setStatus(Status.Idle)\n      return\n    }\n\n    /* noop */\n    if (key === 'Meta' || key === 'Control' || key === 'Alt') {\n      this.app.updateSession()\n      return\n    }\n  }\n\n  // Keyup is handled on BaseTool\n\n  // Pointer Events (generic)\n\n  onPointerMove: TLPointerEventHandler = () => {\n    const { originPoint, currentPoint } = this.app\n\n    if (this.app.readOnly && this.app.isPointing) {\n      if (this.app.session) {\n        this.app.updateSession()\n      } else {\n        if (Vec.dist(originPoint, currentPoint) > DEAD_ZONE) {\n          this.app.startSession(SessionType.Brush)\n          this.setStatus(Status.Brushing)\n        }\n      }\n      return\n    }\n\n    switch (this.status) {\n      case Status.PointingBoundsHandle: {\n        if (!this.pointedBoundsHandle) throw Error('No pointed bounds handle')\n        if (Vec.dist(originPoint, currentPoint) > DEAD_ZONE) {\n          if (this.pointedBoundsHandle === 'rotate') {\n            // Stat a rotate session\n            this.setStatus(Status.Rotating)\n            this.app.startSession(SessionType.Rotate)\n          } else if (\n            this.pointedBoundsHandle === 'center' ||\n            this.pointedBoundsHandle === 'left' ||\n            this.pointedBoundsHandle === 'right'\n          ) {\n            this.setStatus(Status.Translating)\n            this.app.startSession(SessionType.Translate, false, this.pointedBoundsHandle)\n          } else {\n            // Stat a transform session\n            this.setStatus(Status.Transforming)\n            const idsToTransform = this.app.selectedIds.flatMap((id) =>\n              TLDR.getDocumentBranch(this.app.state, id, this.app.currentPageId)\n            )\n            if (idsToTransform.length === 1) {\n              // if only one shape is selected, transform single\n              this.app.startSession(\n                SessionType.TransformSingle,\n                idsToTransform[0],\n                this.pointedBoundsHandle\n              )\n            } else {\n              // otherwise, transform\n              this.app.startSession(SessionType.Transform, this.pointedBoundsHandle)\n            }\n          }\n\n          // Also update the session with the current point\n          this.app.updateSession()\n        }\n        break\n      }\n      case Status.PointingCanvas: {\n        if (Vec.dist(originPoint, currentPoint) > DEAD_ZONE) {\n          this.app.startSession(SessionType.Brush)\n          this.setStatus(Status.Brushing)\n        }\n        break\n      }\n      case Status.PointingClone: {\n        if (Vec.dist(originPoint, currentPoint) > DEAD_ZONE) {\n          this.setStatus(Status.TranslatingClone)\n          this.app.startSession(SessionType.Translate)\n          this.app.updateSession()\n        }\n        break\n      }\n      case Status.PointingBounds: {\n        if (Vec.dist(originPoint, currentPoint) > DEAD_ZONE) {\n          this.setStatus(Status.Translating)\n          this.app.startSession(SessionType.Translate)\n          this.app.updateSession()\n        }\n        break\n      }\n      case Status.PointingHandle: {\n        if (!this.pointedHandleId) throw Error('No pointed handle')\n        if (Vec.dist(originPoint, currentPoint) > DEAD_ZONE) {\n          this.setStatus(Status.TranslatingHandle)\n          const selectedShape = this.app.getShape(this.app.selectedIds[0])\n          if (selectedShape) {\n            if (this.pointedHandleId === 'bend') {\n              this.app.startSession(SessionType.Handle, selectedShape.id, this.pointedHandleId)\n              this.app.updateSession()\n            } else {\n              this.app.startSession(\n                SessionType.Arrow,\n                selectedShape.id,\n                this.pointedHandleId,\n                false\n              )\n              this.app.updateSession()\n            }\n          }\n        }\n        break\n      }\n      case Status.ClonePainting: {\n        this.clonePaint(currentPoint)\n        break\n      }\n      default: {\n        if (this.app.session) {\n          this.app.updateSession()\n          break\n        }\n      }\n    }\n  }\n\n  onPointerDown: TLPointerEventHandler = (info, e) => {\n    if (info.target === 'canvas' && this.status === Status.Idle) {\n      const { currentPoint } = this.app\n\n      if (info.spaceKey && e.buttons === 1) return\n\n      if (this.status === Status.Idle && info.altKey && info.shiftKey) {\n        this.setStatus(Status.ClonePainting)\n        this.clonePaint(currentPoint)\n        return\n      }\n\n      // Unless the user is holding shift or meta, clear the current selection\n      if (!info.shiftKey) {\n        this.app.onShapeBlur()\n\n        if (info.altKey && this.app.selectedIds.length > 0) {\n          this.app.duplicate(this.app.selectedIds, currentPoint)\n          return\n        }\n\n        this.selectNone()\n      }\n\n      this.setStatus(Status.PointingCanvas)\n    }\n  }\n\n  onPointerUp: TLPointerEventHandler = (info) => {\n    if (this.status === Status.TranslatingClone || this.status === Status.PointingClone) {\n      if (this.pointedId) {\n        this.app.completeSession()\n        this.app.setEditingId(this.pointedId)\n      }\n      this.setStatus(Status.Idle)\n      this.pointedId = undefined\n      return\n    }\n\n    if (this.status === Status.PointingBounds) {\n      if (info.target === 'bounds') {\n        // If we just clicked the selecting bounds's background,\n        // clear the selection\n        this.selectNone()\n      } else if (this.app.isSelected(info.target)) {\n        // If we're holding shift...\n        if (info.shiftKey) {\n          // unless we just shift-selected the shape, remove it from\n          // the selected shapes\n          if (this.pointedId !== info.target) {\n            this.deselect(info.target)\n          }\n        } else {\n          // If we have other selected shapes, select this one instead\n          if (this.pointedId !== info.target && this.app.selectedIds.length > 1) {\n            this.select(info.target)\n          }\n        }\n      } else if (this.pointedId === info.target) {\n        if (this.app.getShape(info.target).isLocked) return\n        // If the target is not selected and was just pointed\n        // on pointer down...\n        if (info.shiftKey) {\n          this.pushSelect(info.target)\n        } else {\n          this.select(info.target)\n        }\n      }\n    }\n\n    // Complete the current session, if any; and reset the status\n\n    this.setStatus(Status.Idle)\n    this.pointedBoundsHandle = undefined\n    this.pointedHandleId = undefined\n    this.pointedId = undefined\n\n    // Don't complete a session if we've just started one\n    if (this.app.session?.type === SessionType.Edit) {\n      return\n    }\n\n    this.app.completeSession()\n  }\n\n  // Canvas\n\n  onDoubleClickCanvas: TLCanvasEventHandler = () => {\n    if (this.app.readOnly) return\n    // Needs debugging\n    // const { currentPoint } = this.app\n    // this.app.selectTool(TDShapeType.Text)\n    // this.setStatus(Status.Idle)\n    // this.app.createTextShapeAtPoint(currentPoint)\n  }\n\n  // Shape\n\n  onPointShape: TLPointerEventHandler = (info, e) => {\n    if (info.spaceKey && e.buttons === 1) return\n\n    if (this.app.getShape(info.target).isLocked) return\n\n    const { editingId, hoveredId } = this.app.pageState\n\n    if (editingId && info.target !== editingId) {\n      this.app.onShapeBlur()\n    }\n\n    // While holding command and shift, select or deselect\n    // the shape, ignoring any group that may contain it. Yikes!\n    if (\n      (this.status === Status.Idle || this.status === Status.PointingBounds) &&\n      info.metaKey &&\n      info.shiftKey &&\n      hoveredId\n    ) {\n      this.pointedId = hoveredId\n\n      if (this.app.isSelected(hoveredId)) {\n        this.deselect(hoveredId)\n      } else {\n        this.pushSelect(hoveredId)\n        this.setStatus(Status.PointingBounds)\n      }\n\n      return\n    }\n\n    if (this.status === Status.PointingBounds) {\n      // The pointed id should be the shape's group, if it belongs\n      // to a group, or else the shape itself, if it is on the page.\n      const { parentId } = this.app.getShape(info.target)\n      this.pointedId = parentId === this.app.currentPageId ? info.target : parentId\n      return\n    }\n\n    if (this.status === Status.Idle) {\n      this.setStatus(Status.PointingBounds)\n\n      if (info.metaKey) {\n        if (!info.shiftKey) {\n          this.selectNone()\n        }\n\n        this.app.startSession(SessionType.Brush)\n\n        this.setStatus(Status.Brushing)\n        return\n      }\n\n      // If we've clicked on a shape that is inside of a group,\n      // then select the group rather than the shape.\n      let shapeIdToSelect: string\n      const { parentId } = this.app.getShape(info.target)\n\n      // If the pointed shape is a child of the page, select the\n      // target shape and clear the selected group id.\n      if (parentId === this.app.currentPageId) {\n        shapeIdToSelect = info.target\n        this.selectedGroupId = undefined\n      } else {\n        // If the parent is some other group...\n        if (parentId === this.selectedGroupId) {\n          // If that group is the selected group, then select\n          // the target shape.\n          shapeIdToSelect = info.target\n        } else {\n          // Otherwise, select the group and clear the selected\n          // group id.\n          shapeIdToSelect = parentId\n\n          this.selectedGroupId = undefined\n        }\n      }\n\n      if (!this.app.isSelected(shapeIdToSelect)) {\n        // Set the pointed ID to the shape that was clicked.\n        this.pointedId = shapeIdToSelect\n\n        // If the shape is not selected: then if the user is pressing shift,\n        // add the shape to the current selection; otherwise, set the shape as\n        // the only selected shape.\n        if (info.shiftKey) {\n          this.pushSelect(shapeIdToSelect)\n        } else {\n          this.select(shapeIdToSelect)\n        }\n      }\n    }\n  }\n\n  onDoubleClickShape: TLPointerEventHandler = (info) => {\n    if (this.app.readOnly) return\n\n    const shape = this.app.getShape(info.target)\n\n    if (shape.isLocked) {\n      this.app.select(info.target)\n      return\n    }\n\n    // If we can edit the shape (and if we can select the shape) then\n    // start editing\n    if (\n      TLDR.getShapeUtil(shape.type).canEdit &&\n      (shape.parentId === this.app.currentPageId || shape.parentId === this.selectedGroupId)\n    ) {\n      this.app.setEditingId(info.target)\n    }\n\n    // If the shape is the child of a group, then drill into the group?\n    if (shape.parentId !== this.app.currentPageId) {\n      this.selectedGroupId = shape.parentId\n    }\n\n    this.app.select(info.target)\n  }\n\n  onRightPointShape: TLPointerEventHandler = (info) => {\n    if (!this.app.isSelected(info.target)) {\n      this.app.select(info.target)\n    }\n  }\n\n  onHoverShape: TLPointerEventHandler = (info) => {\n    this.app.setHoveredId(info.target)\n  }\n\n  onUnhoverShape: TLPointerEventHandler = (info) => {\n    const { currentPageId: oldCurrentPageId } = this.app\n\n    // Wait a frame; and if we haven't changed the hovered id,\n    // clear the current hovered id\n    requestAnimationFrame(() => {\n      if (\n        oldCurrentPageId === this.app.currentPageId &&\n        this.app.pageState.hoveredId === info.target\n      ) {\n        this.app.setHoveredId(undefined)\n      }\n    })\n  }\n\n  /* --------------------- Bounds --------------------- */\n\n  onPointBounds: TLBoundsEventHandler = (info) => {\n    if (info.metaKey) {\n      if (!info.shiftKey) {\n        this.selectNone()\n      }\n\n      this.app.startSession(SessionType.Brush)\n\n      this.setStatus(Status.Brushing)\n      return\n    }\n\n    this.setStatus(Status.PointingBounds)\n  }\n\n  onRightPointBounds: TLPointerEventHandler = (info, e) => {\n    e.stopPropagation()\n  }\n\n  onReleaseBounds: TLBoundsEventHandler = () => {\n    if (this.status === Status.Translating || this.status === Status.Brushing) {\n      this.app.completeSession()\n    }\n\n    this.setStatus(Status.Idle)\n  }\n\n  /* ----------------- Bounds Handles ----------------- */\n\n  onPointBoundsHandle: TLBoundsHandleEventHandler = (info) => {\n    this.pointedBoundsHandle = info.target\n    this.setStatus(Status.PointingBoundsHandle)\n  }\n\n  onDoubleClickBoundsHandle: TLBoundsHandleEventHandler = (info) => {\n    switch (info.target) {\n      case 'center':\n      case 'left':\n      case 'right': {\n        this.app.select(\n          ...TLDR.getLinkedShapeIds(\n            this.app.state,\n            this.app.currentPageId,\n            info.target,\n            info.shiftKey\n          )\n        )\n        break\n      }\n      default: {\n        if (this.app.selectedIds.length === 1) {\n          this.app.resetBounds(this.app.selectedIds)\n          const shape = this.app.getShape(this.app.selectedIds[0])\n          if ('label' in shape) {\n            this.app.setEditingId(shape.id)\n          }\n        }\n      }\n    }\n  }\n\n  onReleaseBoundsHandle: TLBoundsHandleEventHandler = () => {\n    this.setStatus(Status.Idle)\n  }\n\n  /* --------------------- Handles -------------------- */\n\n  onPointHandle: TLPointerEventHandler = (info) => {\n    this.pointedHandleId = info.target as 'start' | 'end'\n    this.setStatus(Status.PointingHandle)\n  }\n\n  onDoubleClickHandle: TLPointerEventHandler = (info) => {\n    if (info.target === 'bend') {\n      const { selectedIds } = this.app\n      if (selectedIds.length !== 1) return\n      const shape = this.app.getShape(selectedIds[0])\n      if (\n        TLDR.getShapeUtil(shape.type).canEdit &&\n        (shape.parentId === this.app.currentPageId || shape.parentId === this.selectedGroupId)\n      ) {\n        this.app.setEditingId(shape.id)\n      }\n      return\n    }\n\n    this.app.toggleDecoration(info.target)\n  }\n\n  onReleaseHandle: TLPointerEventHandler = () => {\n    this.setStatus(Status.Idle)\n  }\n\n  /* ---------------------- Misc ---------------------- */\n\n  onShapeClone: TLShapeCloneHandler = (info) => {\n    const selectedShapeId = this.app.selectedIds[0]\n\n    const clonedShape = this.getShapeClone(selectedShapeId, info.target)\n\n    if (\n      info.target === 'left' ||\n      info.target === 'right' ||\n      info.target === 'top' ||\n      info.target === 'bottom'\n    ) {\n      if (clonedShape) {\n        this.app.createShapes(clonedShape)\n\n        // Now start pointing the bounds, so that a user can start\n        // dragging to reposition if they wish.\n        this.pointedId = clonedShape.id\n        this.setStatus(Status.PointingClone)\n      }\n    } else {\n      this.setStatus(Status.GridCloning)\n      this.app.startSession(SessionType.Grid, selectedShapeId)\n    }\n  }\n}\n", "import type { TLPointerEventHandler } from '@tldraw/core'\nimport { Utils } from '@tldraw/core'\nimport Vec from '@tldraw/vec'\nimport { Sticky } from '~state/shapes'\nimport { BaseTool, Status } from '~state/tools/BaseTool'\nimport { SessionType, TDShapeType } from '~types'\n\nexport class StickyTool extends BaseTool {\n  type = TDShapeType.Sticky as const\n\n  shapeId?: string\n\n  /* ----------------- Event Handlers ----------------- */\n\n  onPointerDown: TLPointerEventHandler = () => {\n    if (this.app.readOnly) return\n    if (this.status === Status.Creating) {\n      this.setStatus(Status.Idle)\n\n      if (!this.app.appState.isToolLocked) {\n        this.app.selectTool('select')\n      }\n\n      return\n    }\n\n    if (this.status === Status.Idle) {\n      const {\n        currentPoint,\n        currentGrid,\n        settings: { showGrid },\n        appState: { currentPageId, currentStyle },\n      } = this.app\n\n      const childIndex = this.getNextChildIndex()\n\n      const id = Utils.uniqueId()\n\n      this.shapeId = id\n\n      const newShape = Sticky.create({\n        id,\n        parentId: currentPageId,\n        childIndex,\n        point: showGrid ? Vec.snap(currentPoint, currentGrid) : currentPoint,\n        style: { ...currentStyle },\n      })\n\n      const bounds = Sticky.getBounds(newShape)\n\n      newShape.point = Vec.sub(newShape.point, [bounds.width / 2, bounds.height / 2])\n\n      this.app.patchCreate([newShape])\n\n      this.app.startSession(SessionType.Translate)\n\n      this.setStatus(Status.Creating)\n    }\n  }\n\n  onPointerUp: TLPointerEventHandler = () => {\n    if (this.app.readOnly) return\n    if (this.status === Status.Creating) {\n      this.setStatus(Status.Idle)\n      this.app.completeSession()\n      this.app.selectTool('select')\n      this.app.setEditingId(this.shapeId)\n    }\n  }\n}\n", "import type { TLKeyboardEventHandler, TLPointerEventHandler } from '@tldraw/core'\nimport Vec from '@tldraw/vec'\nimport { BaseTool, Status } from '~state/tools/BaseTool'\nimport { TDShapeType } from '~types'\n\nexport class TextTool extends BaseTool {\n  type = TDShapeType.Text as const\n\n  /* --------------------- Methods -------------------- */\n\n  stopEditingShape = () => {\n    this.setStatus(Status.Idle)\n\n    if (!this.app.appState.isToolLocked) {\n      this.app.selectTool('select')\n    }\n  }\n\n  /* ----------------- Event Handlers ----------------- */\n\n  onKeyUp: TLKeyboardEventHandler = () => {\n    // noop\n  }\n\n  onKeyDown: TLKeyboardEventHandler = () => {\n    // noop\n  }\n\n  onPointerDown: TLPointerEventHandler = () => {\n    if (this.status === Status.Creating) {\n      this.stopEditingShape()\n      return\n    }\n\n    if (this.status === Status.Idle) {\n      const {\n        currentPoint,\n        currentGrid,\n        settings: { showGrid },\n      } = this.app\n\n      this.app.createTextShapeAtPoint(\n        showGrid ? Vec.snap(currentPoint, currentGrid) : currentPoint,\n        undefined,\n        true\n      )\n      this.setStatus(Status.Creating)\n      return\n    }\n  }\n\n  onPointerUp: TLPointerEventHandler = () => {\n    // noop important! We don't want the inherited event\n    // from BaseUtil to run.\n  }\n\n  onPointShape: TLPointerEventHandler = (info) => {\n    if (this.app.readOnly) return\n    const shape = this.app.getShape(info.target)\n    if (shape.type === TDShapeType.Text) {\n      this.setStatus(Status.Idle)\n      this.app.setEditingId(shape.id)\n    }\n  }\n\n  onShapeBlur = () => {\n    if (this.app.readOnly) return\n    this.stopEditingShape()\n  }\n}\n", "import { TLBoundsCorner, TLPointerEventHandler, Utils } from '@tldraw/core'\nimport Vec from '@tldraw/vec'\nimport { Triangle } from '~state/shapes'\nimport { BaseTool, Status } from '~state/tools/BaseTool'\nimport { SessionType, TDShapeType } from '~types'\n\nexport class TriangleTool extends BaseTool {\n  type = TDShapeType.Triangle as const\n\n  /* ----------------- Event Handlers ----------------- */\n\n  onPointerDown: TLPointerEventHandler = () => {\n    if (this.app.readOnly) return\n    if (this.status !== Status.Idle) return\n\n    const {\n      currentPoint,\n      currentGrid,\n      settings: { showGrid },\n      appState: { currentPageId, currentStyle },\n    } = this.app\n\n    const childIndex = this.getNextChildIndex()\n\n    const id = Utils.uniqueId()\n\n    const newShape = Triangle.create({\n      id,\n      parentId: currentPageId,\n      childIndex,\n      point: showGrid ? Vec.snap(currentPoint, currentGrid) : currentPoint,\n      style: { ...currentStyle },\n    })\n\n    this.app.patchCreate([newShape])\n\n    this.app.startSession(\n      SessionType.TransformSingle,\n      newShape.id,\n      TLBoundsCorner.BottomRight,\n      true\n    )\n\n    this.setStatus(Status.Creating)\n  }\n}\n", "import { TDShapeType, TDToolType } from '~types'\nimport { ArrowTool } from './ArrowTool'\nimport { DrawTool } from './DrawTool'\nimport { EllipseTool } from './EllipseTool'\nimport { EraseTool } from './EraseTool'\nimport { LineTool } from './LineTool'\nimport { RectangleTool } from './RectangleTool'\nimport { SelectTool } from './SelectTool'\nimport { StickyTool } from './StickyTool'\nimport { TextTool } from './TextTool'\nimport { TriangleTool } from './TriangleTool'\n\nexport interface ToolsMap {\n  select: typeof SelectTool\n  erase: typeof EraseTool\n  [TDShapeType.Text]: typeof TextTool\n  [TDShapeType.Draw]: typeof DrawTool\n  [TDShapeType.Ellipse]: typeof EllipseTool\n  [TDShapeType.Rectangle]: typeof RectangleTool\n  [TDShapeType.Triangle]: typeof TriangleTool\n  [TDShapeType.Line]: typeof LineTool\n  [TDShapeType.Arrow]: typeof ArrowTool\n  [TDShapeType.Sticky]: typeof StickyTool\n}\n\nexport type ToolOfType<K extends TDToolType> = ToolsMap[K]\n\nexport type ArgsOfType<K extends TDToolType> = ConstructorParameters<ToolOfType<K>>\n\nexport const tools: { [K in TDToolType]: ToolsMap[K] } = {\n  select: SelectTool,\n  erase: EraseTool,\n  [TDShapeType.Text]: TextTool,\n  [TDShapeType.Draw]: DrawTool,\n  [TDShapeType.Ellipse]: EllipseTool,\n  [TDShapeType.Rectangle]: RectangleTool,\n  [TDShapeType.Triangle]: TriangleTool,\n  [TDShapeType.Line]: LineTool,\n  [TDShapeType.Arrow]: ArrowTool,\n  [TDShapeType.Sticky]: StickyTool,\n}\n"],
  "mappings": "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",
  "names": ["React", "React", "jsx", "React", "jsx", "jsxs", "React", "React", "React", "TDUserStatus", "SessionType", "TDStatus", "MoveType", "AlignType", "StretchType", "DistributeType", "FlipType", "TDShapeType", "Decoration", "ColorStyle", "SizeStyle", "DashStyle", "FontSize", "AlignStyle", "FontStyle", "TDAssetType", "TDExportType", "TDExportBackground", "React", "React", "React", "jsx", "jsxs", "jsx", "jsxs", "InnerMenu", "jsx", "jsxs", "jsx", "FormattedMessage", "jsx", "FormattedMessage", "FormattedMessage", "useIntl", "jsx", "jsxs", "Content", "StyledContent", "useIntl", "FormattedMessage", "React", "FormattedMessage", "useIntl", "React", "jsx", "jsxs", "jsx", "jsxs", "useIntl", "stopPropagation", "StyledDialogOverlay", "FormattedMessage", "React", "DropdownMenu", "AlignBottomIcon", "AlignCenterHorizontallyIcon", "AlignCenterVerticallyIcon", "AlignLeftIcon", "AlignRightIcon", "AlignTopIcon", "SpaceEvenlyHorizontallyIcon", "SpaceEvenlyVerticallyIcon", "StretchHorizontallyIcon", "StretchVerticallyIcon", "React", "useIntl", "jsx", "jsx", "jsx", "StyledContent", "Arrow", "Sub", "SubContent", "SubTrigger", "jsx", "jsxs", "Sub", "SubTrigger", "SubContent", "Arrow", "Trigger", "jsx", "Trigger", "Fragment", "jsx", "jsxs", "useIntl", "AlignLeftIcon", "AlignCenterHorizontallyIcon", "AlignRightIcon", "StretchHorizontallyIcon", "SpaceEvenlyHorizontallyIcon", "AlignTopIcon", "AlignCenterVerticallyIcon", "AlignBottomIcon", "StretchVerticallyIcon", "SpaceEvenlyVerticallyIcon", "React", "FormattedMessage", "jsx", "isDebugModeSelector", "dockPositionState", "BackToContent", "FormattedMessage", "React", "useIntl", "jsx", "jsx", "jsx", "jsx", "jsx", "jsx", "jsx", "jsxs", "jsx", "jsx", "jsx", "jsx", "jsx", "jsxs", "jsx", "jsx", "jsx", "useIntl", "DropdownMenu", "ExternalLinkIcon", "React", "FormattedMessage", "React", "FormattedMessage", "jsx", "jsxs", "FormattedMessage", "Dialog", "FormattedMessage", "useIntl", "jsx", "jsxs", "useIntl", "FormattedMessage", "Fragment", "jsx", "jsxs", "isDebugModeSelector", "dockPositionState", "StyledContent", "FormattedMessage", "ExternalLinkIcon", "Pencil1Icon", "React", "useIntl", "DropdownMenu", "CircleIcon", "React", "useIntl", "jsx", "jsxs", "CircleIcon", "dockPositionState", "ShapesMenu", "useIntl", "jsx", "jsxs", "dockPositionState", "PrimaryTools", "useIntl", "Pencil1Icon", "jsx", "jsxs", "activeToolSelector", "StyledSection", "Fragment", "jsx", "jsxs", "isDebugModeSelector", "dockPositionState", "ToolsPanel", "React", "useIntl", "DropdownMenu", "React", "FormattedMessage", "useIntl", "React", "FormattedMessage", "useIntl", "jsx", "jsxs", "useIntl", "FormattedMessage", "Fragment", "jsx", "jsxs", "numberOfSelectedIdsSelector", "Menu", "useIntl", "FormattedMessage", "DropdownMenu", "CheckIcon", "Utils", "React", "FormattedMessage", "jsx", "Utils", "intersectRayBounds", "intersectRayEllipse", "intersectRayLineSegment", "Vec", "Utils", "intersectLineSegmentBounds", "Vec", "React", "Utils", "Vec", "React", "Utils", "textElm", "jsx", "jsxs", "PI2", "angle", "Utils", "Utils", "document", "React", "jsx", "jsxs", "TextLabel", "Vec", "Vec", "Utils", "Vec", "Utils", "Vec", "Vec", "Utils", "PI2", "Utils", "Vec", "React", "jsx", "jsxs", "Fragment", "jsx", "jsxs", "CurvedArrow", "Vec", "Utils", "Utils", "Vec", "React", "Fragment", "jsx", "jsxs", "StraightArrow", "Vec", "Utils", "Fragment", "jsx", "jsxs", "Vec", "start", "bend", "end", "bounds", "offset", "label", "Utils", "intersectLineSegmentBounds", "SVGContainer", "Utils", "intersectLineSegmentBounds", "intersectLineSegmentLineSegment", "Vec", "React", "Utils", "Vec", "options", "Utils", "Vec", "jsx", "jsxs", "Utils", "sw", "SVGContainer", "Vec", "intersectLineSegmentBounds", "intersectLineSegmentLineSegment", "SVGContainer", "Utils", "Vec", "React", "Utils", "React", "Fragment", "jsx", "jsxs", "DashedEllipse", "Utils", "React", "Utils", "getStrokeOutlinePoints", "getStrokePoints", "Utils", "getStrokePoints", "getStrokeOutlinePoints", "Fragment", "jsx", "jsxs", "DrawEllipse", "jsx", "jsxs", "Utils", "label", "FullWrapper", "SVGContainer", "Vec", "SVGContainer", "Utils", "jsx", "jsxs", "Utils", "strokes", "SVGContainer", "styled", "Utils", "React", "jsx", "jsxs", "Utils", "styled", "SVGContainer", "Utils", "React", "jsx", "Utils", "React", "Fragment", "jsx", "jsxs", "DashedRectangle", "strokes", "Utils", "React", "Utils", "Vec", "getStroke", "getStrokePoints", "Utils", "Vec", "options", "getStroke", "getStrokePoints", "Fragment", "jsx", "jsxs", "DrawRectangle", "jsx", "jsxs", "Utils", "label", "FullWrapper", "SVGContainer", "HTMLContainer", "Utils", "Vec", "React", "jsx", "jsxs", "Utils", "HTMLContainer", "StyledText", "Vec", "commonTextWrapping", "HTMLContainer", "Utils", "Vec", "React", "jsx", "jsxs", "Utils", "Vec", "HTMLContainer", "Wrapper", "InnerWrapper", "TextArea", "melm", "getMeasurementDiv", "commonTextWrapping", "SVGContainer", "Utils", "intersectLineSegmentPolyline", "Vec", "React", "Utils", "Vec", "React", "Utils", "Vec", "getStroke", "getStrokePoints", "Vec", "Utils", "getDrawStrokeInfo", "options", "getStroke", "getStrokePoints", "Fragment", "jsx", "jsxs", "DashedTriangle", "Utils", "Vec", "React", "Fragment", "jsx", "jsxs", "DrawTriangle", "jsx", "jsx", "jsxs", "Utils", "label", "Vec", "FullWrapper", "SVGContainer", "intersectLineSegmentPolyline", "intersection", "styled", "HTMLContainer", "Utils", "React", "jsx", "jsxs", "Utils", "HTMLContainer", "Wrapper", "styled", "Arrow", "Image", "Vec", "Utils", "id", "shape", "i", "change", "ID", "intersectRayEllipse", "intersectRayLineSegment", "intersectRayBounds", "prevSize", "canvas", "blob", "jsx", "jsxs", "MultiplayerMenu", "Utils", "FormattedMessage", "CheckIcon", "DropdownMenu", "CheckIcon", "React", "FormattedMessage", "useIntl", "Dialog", "Pencil1Icon", "React", "FormattedMessage", "useIntl", "jsx", "jsxs", "useIntl", "isOpen", "stopPropagation", "StyledDialogOverlay", "StyledDialogContent", "Pencil1Icon", "FormattedMessage", "Fragment", "jsx", "jsxs", "currentPageIdSelector", "useIntl", "isOpen", "dropIndex", "CheckIcon", "FormattedMessage", "DropdownMenu", "React", "FormattedMessage", "useIntl", "Fragment", "jsx", "jsxs", "useIntl", "options", "currentStyle", "selectedIds", "FormattedMessage", "DropdownMenu", "FormattedMessage", "jsx", "jsxs", "ZoomMenu", "FormattedMessage", "Fragment", "jsx", "jsxs", "useIntl", "React", "Utils", "Vec", "Utils", "Utils", "Utils", "Vec", "Utils", "Vec", "Utils", "set", "page", "Utils", "Utils", "Vec", "Vec", "Utils", "Utils", "Utils", "Utils", "Vec", "Utils", "Vec", "Utils", "Utils", "Utils", "id", "Utils", "_a", "_b", "Utils", "Vec", "handle", "Utils", "Vec", "startChildIndex", "step", "Utils", "PI2", "Utils", "TLBoundsCorner", "Utils", "Utils", "TLBoundsCorner", "Vec", "Vec", "Vec", "Vec", "groupShapes", "Utils", "Vec", "Utils", "Vec", "document", "supported", "document", "supported", "Utils", "Vec", "Utils", "Vec", "shape", "utils", "Utils", "Utils", "Vec", "Vec", "Vec", "Vec", "delta", "Utils", "Vec", "Utils", "Vec", "id", "Vec", "Vec", "Utils", "Vec", "Vec", "Utils", "TLBoundsCorner", "Utils", "Vec", "TLBoundsCorner", "Utils", "Vec", "Utils", "Vec", "Utils", "Vec", "Utils", "Vec", "Utils", "Vec", "Utils", "Vec", "Utils", "Utils", "Utils", "Arrow", "Vec", "Utils", "Utils", "TLBoundsCorner", "Utils", "Vec", "Utils", "Vec", "TLBoundsCorner", "Vec", "Vec", "Utils", "Vec", "Utils", "Arrow", "Vec", "TLBoundsCorner", "Utils", "Vec", "Utils", "Vec", "TLBoundsCorner", "Utils", "Vec", "Utils", "Vec", "id", "Utils", "Vec", "Utils", "Vec", "Vec", "Vec", "TLBoundsCorner", "Utils", "Vec", "Utils", "Vec", "TLBoundsCorner", "Utils", "_a", "page", "shape", "Vec", "document", "e", "elm", "Text", "Fragment", "jsx", "jsxs", "document", "app", "dialogState", "onYes", "onNo", "onCancel", "InnerTldraw", "brushBase", "StyledSpacer", "OneOff"]
}

{
  "version": 3,
  "sources": ["../../../../../node_modules/@liveblocks/client/shared.mjs", "../../../../../node_modules/@liveblocks/client/index.mjs"],
  "sourcesContent": ["const _emittedDeprecationWarnings = new Set();\nfunction deprecate(message, key = message) {\n  \"production\" !== process.env.NODE_ENV &&\n    (_emittedDeprecationWarnings.has(key) ||\n      (_emittedDeprecationWarnings.add(key),\n      console.error(`DEPRECATION WARNING: ${message}`)));\n}\nfunction deprecateIf(condition, message, key = message) {\n  \"production\" !== process.env.NODE_ENV && condition && deprecate(message, key);\n}\nfunction throwUsageError(message) {\n  if (\"production\" !== process.env.NODE_ENV) {\n    const usageError = new Error(message);\n    throw ((usageError.name = \"Usage error\"), usageError);\n  }\n}\nfunction errorIf(condition, message) {\n  \"production\" !== process.env.NODE_ENV &&\n    condition &&\n    throwUsageError(message);\n}\nfunction __rest(s, e) {\n  var t = {};\n  for (var p in s)\n    Object.prototype.hasOwnProperty.call(s, p) &&\n      e.indexOf(p) < 0 &&\n      (t[p] = s[p]);\n  if (null != s && \"function\" == typeof Object.getOwnPropertySymbols) {\n    var i = 0;\n    for (p = Object.getOwnPropertySymbols(s); i < p.length; i++)\n      e.indexOf(p[i]) < 0 &&\n        Object.prototype.propertyIsEnumerable.call(s, p[i]) &&\n        (t[p[i]] = s[p[i]]);\n  }\n  return t;\n}\nfunction assertNever(_value, errmsg) {\n  throw new Error(errmsg);\n}\nfunction nn(value, errmsg = \"Expected value to be non-nullable\") {\n  return (\n    (function (condition, errmsg) {\n      if (\"production\" !== process.env.NODE_ENV && !condition) {\n        const err = new Error(errmsg);\n        throw ((err.name = \"Assertion failure\"), err);\n      }\n    })(null != value, errmsg),\n    value\n  );\n}\nvar ClientMsgCode,\n  OpCode,\n  CrdtType,\n  ServerMsgCode,\n  WebsocketCloseCodes,\n  OpSource;\nfunction isRootCrdt(crdt) {\n  return crdt.type === CrdtType.OBJECT && !isChildCrdt(crdt);\n}\nfunction isChildCrdt(crdt) {\n  return void 0 !== crdt.parentId && void 0 !== crdt.parentKey;\n}\nfunction isRoomEventName(value) {\n  return (\n    \"my-presence\" === value ||\n    \"others\" === value ||\n    \"event\" === value ||\n    \"error\" === value ||\n    \"connection\" === value\n  );\n}\nfunction HasParent(node, key) {\n  return Object.freeze({ type: \"HasParent\", node: node, key: key });\n}\n!(function (ClientMsgCode) {\n  (ClientMsgCode[(ClientMsgCode.UPDATE_PRESENCE = 100)] = \"UPDATE_PRESENCE\"),\n    (ClientMsgCode[(ClientMsgCode.BROADCAST_EVENT = 103)] = \"BROADCAST_EVENT\"),\n    (ClientMsgCode[(ClientMsgCode.FETCH_STORAGE = 200)] = \"FETCH_STORAGE\"),\n    (ClientMsgCode[(ClientMsgCode.UPDATE_STORAGE = 201)] = \"UPDATE_STORAGE\");\n})(ClientMsgCode || (ClientMsgCode = {})),\n  (function (OpCode) {\n    (OpCode[(OpCode.INIT = 0)] = \"INIT\"),\n      (OpCode[(OpCode.SET_PARENT_KEY = 1)] = \"SET_PARENT_KEY\"),\n      (OpCode[(OpCode.CREATE_LIST = 2)] = \"CREATE_LIST\"),\n      (OpCode[(OpCode.UPDATE_OBJECT = 3)] = \"UPDATE_OBJECT\"),\n      (OpCode[(OpCode.CREATE_OBJECT = 4)] = \"CREATE_OBJECT\"),\n      (OpCode[(OpCode.DELETE_CRDT = 5)] = \"DELETE_CRDT\"),\n      (OpCode[(OpCode.DELETE_OBJECT_KEY = 6)] = \"DELETE_OBJECT_KEY\"),\n      (OpCode[(OpCode.CREATE_MAP = 7)] = \"CREATE_MAP\"),\n      (OpCode[(OpCode.CREATE_REGISTER = 8)] = \"CREATE_REGISTER\");\n  })(OpCode || (OpCode = {})),\n  (function (CrdtType) {\n    (CrdtType[(CrdtType.OBJECT = 0)] = \"OBJECT\"),\n      (CrdtType[(CrdtType.LIST = 1)] = \"LIST\"),\n      (CrdtType[(CrdtType.MAP = 2)] = \"MAP\"),\n      (CrdtType[(CrdtType.REGISTER = 3)] = \"REGISTER\");\n  })(CrdtType || (CrdtType = {})),\n  (function (ServerMsgCode) {\n    (ServerMsgCode[(ServerMsgCode.UPDATE_PRESENCE = 100)] = \"UPDATE_PRESENCE\"),\n      (ServerMsgCode[(ServerMsgCode.USER_JOINED = 101)] = \"USER_JOINED\"),\n      (ServerMsgCode[(ServerMsgCode.USER_LEFT = 102)] = \"USER_LEFT\"),\n      (ServerMsgCode[(ServerMsgCode.BROADCASTED_EVENT = 103)] =\n        \"BROADCASTED_EVENT\"),\n      (ServerMsgCode[(ServerMsgCode.ROOM_STATE = 104)] = \"ROOM_STATE\"),\n      (ServerMsgCode[(ServerMsgCode.INITIAL_STORAGE_STATE = 200)] =\n        \"INITIAL_STORAGE_STATE\"),\n      (ServerMsgCode[(ServerMsgCode.UPDATE_STORAGE = 201)] = \"UPDATE_STORAGE\");\n  })(ServerMsgCode || (ServerMsgCode = {})),\n  (function (WebsocketCloseCodes) {\n    (WebsocketCloseCodes[(WebsocketCloseCodes.CLOSE_ABNORMAL = 1006)] =\n      \"CLOSE_ABNORMAL\"),\n      (WebsocketCloseCodes[(WebsocketCloseCodes.INVALID_MESSAGE_FORMAT = 4e3)] =\n        \"INVALID_MESSAGE_FORMAT\"),\n      (WebsocketCloseCodes[(WebsocketCloseCodes.NOT_ALLOWED = 4001)] =\n        \"NOT_ALLOWED\"),\n      (WebsocketCloseCodes[\n        (WebsocketCloseCodes.MAX_NUMBER_OF_MESSAGES_PER_SECONDS = 4002)\n      ] = \"MAX_NUMBER_OF_MESSAGES_PER_SECONDS\"),\n      (WebsocketCloseCodes[\n        (WebsocketCloseCodes.MAX_NUMBER_OF_CONCURRENT_CONNECTIONS = 4003)\n      ] = \"MAX_NUMBER_OF_CONCURRENT_CONNECTIONS\"),\n      (WebsocketCloseCodes[\n        (WebsocketCloseCodes.MAX_NUMBER_OF_MESSAGES_PER_DAY_PER_APP = 4004)\n      ] = \"MAX_NUMBER_OF_MESSAGES_PER_DAY_PER_APP\"),\n      (WebsocketCloseCodes[\n        (WebsocketCloseCodes.MAX_NUMBER_OF_CONCURRENT_CONNECTIONS_PER_ROOM = 4005)\n      ] = \"MAX_NUMBER_OF_CONCURRENT_CONNECTIONS_PER_ROOM\"),\n      (WebsocketCloseCodes[(WebsocketCloseCodes.CLOSE_WITHOUT_RETRY = 4999)] =\n        \"CLOSE_WITHOUT_RETRY\");\n  })(WebsocketCloseCodes || (WebsocketCloseCodes = {})),\n  (function (OpSource) {\n    (OpSource[(OpSource.UNDOREDO_RECONNECT = 0)] = \"UNDOREDO_RECONNECT\"),\n      (OpSource[(OpSource.REMOTE = 1)] = \"REMOTE\"),\n      (OpSource[(OpSource.ACK = 2)] = \"ACK\");\n  })(OpSource || (OpSource = {}));\nconst NoParent = Object.freeze({ type: \"NoParent\" });\nfunction Orphaned(oldKey) {\n  return Object.freeze({ type: \"Orphaned\", oldKey: oldKey });\n}\nclass AbstractCrdt {\n  constructor() {\n    this._parent = NoParent;\n  }\n  _getParentKeyOrThrow() {\n    switch (this.parent.type) {\n      case \"HasParent\":\n        return this.parent.key;\n      case \"NoParent\":\n        throw new Error(\"Parent key is missing\");\n      case \"Orphaned\":\n        return this.parent.oldKey;\n      default:\n        return assertNever(this.parent, \"Unknown state\");\n    }\n  }\n  get _doc() {\n    return this.__doc;\n  }\n  get roomId() {\n    return this.__doc ? this.__doc.roomId : null;\n  }\n  get _id() {\n    return this.__id;\n  }\n  get parent() {\n    return this._parent;\n  }\n  get _parentNode() {\n    switch (this.parent.type) {\n      case \"HasParent\":\n        return this.parent.node;\n      case \"NoParent\":\n      case \"Orphaned\":\n        return null;\n      default:\n        return assertNever(this.parent, \"Unknown state\");\n    }\n  }\n  get _parentKey() {\n    switch (this.parent.type) {\n      case \"HasParent\":\n        return this.parent.key;\n      case \"NoParent\":\n        return null;\n      case \"Orphaned\":\n        return this.parent.oldKey;\n      default:\n        return assertNever(this.parent, \"Unknown state\");\n    }\n  }\n  _apply(op, _isLocal) {\n    return op.type === OpCode.DELETE_CRDT && \"HasParent\" === this.parent.type\n      ? this.parent.node._detachChild(this)\n      : { modified: !1 };\n  }\n  _setParentLink(newParentNode, newParentKey) {\n    switch (this.parent.type) {\n      case \"HasParent\":\n        if (this.parent.node !== newParentNode)\n          throw new Error(\"Cannot attach parent if it already exist\");\n        return void (this._parent = HasParent(newParentNode, newParentKey));\n      case \"Orphaned\":\n      case \"NoParent\":\n        return void (this._parent = HasParent(newParentNode, newParentKey));\n      default:\n        return assertNever(this.parent, \"Unknown state\");\n    }\n  }\n  _attach(id, doc) {\n    if (this.__id || this.__doc)\n      throw new Error(\"Cannot attach if CRDT is already attached\");\n    doc.addItem(id, this), (this.__id = id), (this.__doc = doc);\n  }\n  _detach() {\n    switch (\n      (this.__doc && this.__id && this.__doc.deleteItem(this.__id),\n      this.parent.type)\n    ) {\n      case \"HasParent\":\n        this._parent = Orphaned(this.parent.key);\n        break;\n      case \"NoParent\":\n        this._parent = NoParent;\n        break;\n      case \"Orphaned\":\n        this._parent = Orphaned(this.parent.oldKey);\n        break;\n      default:\n        assertNever(this.parent, \"Unknown state\");\n    }\n    this.__doc = void 0;\n  }\n}\nclass LiveRegister extends AbstractCrdt {\n  constructor(data) {\n    super(), (this._data = data);\n  }\n  get data() {\n    return this._data;\n  }\n  static _deserialize([id, item], _parentToChildren, doc) {\n    const register = new LiveRegister(item.data);\n    return register._attach(id, doc), register;\n  }\n  _serialize(parentId, parentKey, doc) {\n    if (null == this._id || null == parentId || null == parentKey)\n      throw new Error(\n        \"Cannot serialize register if parentId or parentKey is undefined\"\n      );\n    return [\n      {\n        type: OpCode.CREATE_REGISTER,\n        opId: null == doc ? void 0 : doc.generateOpId(),\n        id: this._id,\n        parentId: parentId,\n        parentKey: parentKey,\n        data: this.data,\n      },\n    ];\n  }\n  _toSerializedCrdt() {\n    if (\"HasParent\" !== this.parent.type)\n      throw new Error(\"Cannot serialize LiveRegister if parent is missing\");\n    return {\n      type: CrdtType.REGISTER,\n      parentId: nn(this.parent.node._id, \"Parent node expected to have ID\"),\n      parentKey: this.parent.key,\n      data: this.data,\n    };\n  }\n  _attachChild(_op) {\n    throw new Error(\"Method not implemented.\");\n  }\n  _detachChild(_crdt) {\n    throw new Error(\"Method not implemented.\");\n  }\n  _apply(op, isLocal) {\n    return super._apply(op, isLocal);\n  }\n}\nfunction makePosition(before, after) {\n  return null != before && null != after\n    ? pos(makePositionFromCodes(posCodes(before), posCodes(after)))\n    : null != before\n    ? (function (before) {\n        const result = [],\n          beforeCodes = posCodes(before);\n        for (let i = 0; i < beforeCodes.length; i++) {\n          const code = beforeCodes[i];\n          if (126 !== code) {\n            result.push(code + 1);\n            break;\n          }\n          if ((result.push(code), beforeCodes.length - 1 === i)) {\n            result.push(33);\n            break;\n          }\n        }\n        return pos(result);\n      })(before)\n    : null != after\n    ? (function (after) {\n        const result = [],\n          afterCodes = posCodes(after);\n        for (let i = 0; i < afterCodes.length; i++) {\n          const code = afterCodes[i];\n          if (!(code <= 33)) {\n            result.push(code - 1);\n            break;\n          }\n          if ((result.push(32), afterCodes.length - 1 === i)) {\n            result.push(126);\n            break;\n          }\n        }\n        return pos(result);\n      })(after)\n    : pos([33]);\n}\nfunction makePositionFromCodes(before, after) {\n  let index = 0;\n  const result = [];\n  for (;;) {\n    const beforeDigit = before[index] || 32,\n      afterDigit = after[index] || 126;\n    if (beforeDigit > afterDigit)\n      throw new Error(\n        `Impossible to generate position between ${before} and ${after}`\n      );\n    if (beforeDigit === afterDigit) {\n      result.push(beforeDigit), index++;\n      continue;\n    }\n    if (afterDigit - beforeDigit == 1) {\n      result.push(beforeDigit),\n        result.push(...makePositionFromCodes(before.slice(index + 1), []));\n      break;\n    }\n    const mid = (afterDigit + beforeDigit) >> 1;\n    result.push(mid);\n    break;\n  }\n  return result;\n}\nfunction posCodes(str) {\n  const codes = [];\n  for (let i = 0; i < str.length; i++) codes.push(str.charCodeAt(i));\n  return codes;\n}\nfunction pos(codes) {\n  return String.fromCharCode(...codes);\n}\nfunction comparePosition(posA, posB) {\n  const aCodes = posCodes(posA),\n    bCodes = posCodes(posB),\n    maxLength = Math.max(aCodes.length, bCodes.length);\n  for (let i = 0; i < maxLength; i++) {\n    const a = null == aCodes[i] ? 32 : aCodes[i],\n      b = null == bCodes[i] ? 32 : bCodes[i];\n    if (a !== b) return a - b;\n  }\n  throw new Error(\n    `Impossible to compare similar position \"${posA}\" and \"${posB}\"`\n  );\n}\nfunction compareNodePosition(itemA, itemB) {\n  return comparePosition(\n    itemA._getParentKeyOrThrow(),\n    itemB._getParentKeyOrThrow()\n  );\n}\nclass LiveList extends AbstractCrdt {\n  constructor(items = []) {\n    let position;\n    super(),\n      (this._items = []),\n      (this._implicitlyDeletedItems = new Set()),\n      (this._unacknowledgedSets = new Map());\n    for (let i = 0; i < items.length; i++) {\n      const newPosition = makePosition(position),\n        item = lsonToLiveNode(items[i]);\n      item._setParentLink(this, newPosition),\n        this._items.push(item),\n        (position = newPosition);\n    }\n  }\n  static _deserialize([id], parentToChildren, doc) {\n    const list = new LiveList();\n    list._attach(id, doc);\n    const children = parentToChildren.get(id);\n    if (null == children) return list;\n    for (const [id, crdt] of children) {\n      const child = deserialize([id, crdt], parentToChildren, doc);\n      child._setParentLink(list, crdt.parentKey), list._insertAndSort(child);\n    }\n    return list;\n  }\n  _serialize(parentId, parentKey, doc) {\n    if (null == this._id)\n      throw new Error(\"Cannot serialize item is not attached\");\n    const ops = [],\n      op = {\n        id: this._id,\n        opId: null == doc ? void 0 : doc.generateOpId(),\n        type: OpCode.CREATE_LIST,\n        parentId: parentId,\n        parentKey: parentKey,\n      };\n    ops.push(op);\n    for (const item of this._items)\n      ops.push(...item._serialize(this._id, item._getParentKeyOrThrow(), doc));\n    return ops;\n  }\n  _insertAndSort(item) {\n    this._items.push(item), this._sortItems();\n  }\n  _sortItems() {\n    this._items.sort(compareNodePosition);\n  }\n  _indexOfPosition(position) {\n    return this._items.findIndex(\n      (item) => item._getParentKeyOrThrow() === position\n    );\n  }\n  _attach(id, doc) {\n    super._attach(id, doc);\n    for (const item of this._items) item._attach(doc.generateId(), doc);\n  }\n  _detach() {\n    super._detach();\n    for (const item of this._items) item._detach();\n  }\n  _applySetRemote(op) {\n    if (null == this._doc)\n      throw new Error(\"Can't attach child if doc is not present\");\n    const { id: id, parentKey: key } = op,\n      child = creationOpToLiveNode(op);\n    child._attach(id, this._doc), child._setParentLink(this, key);\n    const deletedId = op.deletedId,\n      indexOfItemWithSamePosition = this._indexOfPosition(key);\n    if (-1 !== indexOfItemWithSamePosition) {\n      const itemWithSamePosition = this._items[indexOfItemWithSamePosition];\n      if (itemWithSamePosition._id === deletedId)\n        return (\n          itemWithSamePosition._detach(),\n          (this._items[indexOfItemWithSamePosition] = child),\n          {\n            modified: makeUpdate(this, [\n              setDelta(indexOfItemWithSamePosition, child),\n            ]),\n            reverse: [],\n          }\n        );\n      {\n        this._implicitlyDeletedItems.add(itemWithSamePosition),\n          (this._items[indexOfItemWithSamePosition] = child);\n        const delta = [setDelta(indexOfItemWithSamePosition, child)],\n          deleteDelta = this._detachItemAssociatedToSetOperation(op.deletedId);\n        return (\n          deleteDelta && delta.push(deleteDelta),\n          { modified: makeUpdate(this, delta), reverse: [] }\n        );\n      }\n    }\n    {\n      const updates = [],\n        deleteDelta = this._detachItemAssociatedToSetOperation(op.deletedId);\n      return (\n        deleteDelta && updates.push(deleteDelta),\n        this._insertAndSort(child),\n        updates.push(insertDelta(this._indexOfPosition(key), child)),\n        { reverse: [], modified: makeUpdate(this, updates) }\n      );\n    }\n  }\n  _applySetAck(op) {\n    if (null == this._doc)\n      throw new Error(\"Can't attach child if doc is not present\");\n    const delta = [],\n      deletedDelta = this._detachItemAssociatedToSetOperation(op.deletedId);\n    deletedDelta && delta.push(deletedDelta);\n    const unacknowledgedOpId = this._unacknowledgedSets.get(op.parentKey);\n    if (null != unacknowledgedOpId) {\n      if (unacknowledgedOpId !== op.opId)\n        return 0 === delta.length\n          ? { modified: !1 }\n          : { modified: makeUpdate(this, delta), reverse: [] };\n      this._unacknowledgedSets.delete(op.parentKey);\n    }\n    const indexOfItemWithSamePosition = this._indexOfPosition(op.parentKey),\n      existingItem = this._items.find((item) => item._id === op.id);\n    if (null != existingItem) {\n      if (existingItem._parentKey === op.parentKey)\n        return {\n          modified: delta.length > 0 && makeUpdate(this, delta),\n          reverse: [],\n        };\n      -1 !== indexOfItemWithSamePosition &&\n        (this._implicitlyDeletedItems.add(\n          this._items[indexOfItemWithSamePosition]\n        ),\n        this._items.splice(indexOfItemWithSamePosition, 1),\n        delta.push(deleteDelta(indexOfItemWithSamePosition)));\n      const previousIndex = this._items.indexOf(existingItem);\n      existingItem._setParentLink(this, op.parentKey), this._sortItems();\n      const newIndex = this._items.indexOf(existingItem);\n      return (\n        newIndex !== previousIndex &&\n          delta.push(moveDelta(previousIndex, newIndex, existingItem)),\n        { modified: delta.length > 0 && makeUpdate(this, delta), reverse: [] }\n      );\n    }\n    {\n      const orphan = this._doc.getItem(op.id);\n      if (orphan && this._implicitlyDeletedItems.has(orphan)) {\n        orphan._setParentLink(this, op.parentKey),\n          this._implicitlyDeletedItems.delete(orphan),\n          this._insertAndSort(orphan);\n        const recreatedItemIndex = this._items.indexOf(orphan);\n        return {\n          modified: makeUpdate(this, [\n            -1 === indexOfItemWithSamePosition\n              ? insertDelta(recreatedItemIndex, orphan)\n              : setDelta(recreatedItemIndex, orphan),\n            ...delta,\n          ]),\n          reverse: [],\n        };\n      }\n      {\n        -1 !== indexOfItemWithSamePosition &&\n          this._items.splice(indexOfItemWithSamePosition, 1);\n        const { newItem: newItem, newIndex: newIndex } =\n          this._createAttachItemAndSort(op, op.parentKey);\n        return {\n          modified: makeUpdate(this, [\n            -1 === indexOfItemWithSamePosition\n              ? insertDelta(newIndex, newItem)\n              : setDelta(newIndex, newItem),\n            ...delta,\n          ]),\n          reverse: [],\n        };\n      }\n    }\n  }\n  _detachItemAssociatedToSetOperation(deletedId) {\n    if (null == deletedId || null == this._doc) return null;\n    const deletedItem = this._doc.getItem(deletedId);\n    if (null == deletedItem) return null;\n    const result = this._detachChild(deletedItem);\n    return !1 === result.modified ? null : result.modified.updates[0];\n  }\n  _applyRemoteInsert(op) {\n    if (null == this._doc)\n      throw new Error(\"Can't attach child if doc is not present\");\n    const key = op.parentKey,\n      existingItemIndex = this._indexOfPosition(key);\n    -1 !== existingItemIndex && this._shiftItemPosition(existingItemIndex, key);\n    const { newItem: newItem, newIndex: newIndex } =\n      this._createAttachItemAndSort(op, key);\n    return {\n      modified: makeUpdate(this, [insertDelta(newIndex, newItem)]),\n      reverse: [],\n    };\n  }\n  _applyInsertAck(op) {\n    const existingItem = this._items.find((item) => item._id === op.id),\n      key = op.parentKey,\n      itemIndexAtPosition = this._indexOfPosition(key);\n    if (existingItem) {\n      if (existingItem._parentKey === key) return { modified: !1 };\n      {\n        const oldPositionIndex = this._items.indexOf(existingItem);\n        -1 !== itemIndexAtPosition &&\n          this._shiftItemPosition(itemIndexAtPosition, key),\n          existingItem._setParentLink(this, key),\n          this._sortItems();\n        const newIndex = this._indexOfPosition(key);\n        return newIndex === oldPositionIndex\n          ? { modified: !1 }\n          : {\n              modified: makeUpdate(this, [\n                moveDelta(oldPositionIndex, newIndex, existingItem),\n              ]),\n              reverse: [],\n            };\n      }\n    }\n    {\n      const orphan = nn(this._doc).getItem(op.id);\n      if (orphan && this._implicitlyDeletedItems.has(orphan)) {\n        orphan._setParentLink(this, key),\n          this._implicitlyDeletedItems.delete(orphan),\n          this._insertAndSort(orphan);\n        return {\n          modified: makeUpdate(this, [\n            insertDelta(this._indexOfPosition(key), orphan),\n          ]),\n          reverse: [],\n        };\n      }\n      {\n        -1 !== itemIndexAtPosition &&\n          this._shiftItemPosition(itemIndexAtPosition, key);\n        const { newItem: newItem, newIndex: newIndex } =\n          this._createAttachItemAndSort(op, key);\n        return {\n          modified: makeUpdate(this, [insertDelta(newIndex, newItem)]),\n          reverse: [],\n        };\n      }\n    }\n  }\n  _applyInsertUndoRedo(op) {\n    var _a;\n    const { id: id, parentKey: key } = op,\n      child = creationOpToLiveNode(op);\n    if (\n      void 0 !==\n      (null === (_a = this._doc) || void 0 === _a ? void 0 : _a.getItem(id))\n    )\n      return { modified: !1 };\n    child._attach(id, nn(this._doc)), child._setParentLink(this, key);\n    const existingItemIndex = this._indexOfPosition(key);\n    let newKey = key;\n    if (-1 !== existingItemIndex) {\n      (newKey = makePosition(\n        this._items[existingItemIndex]\n          ? this._items[existingItemIndex]._getParentKeyOrThrow()\n          : void 0,\n        this._items[existingItemIndex + 1]\n          ? this._items[existingItemIndex + 1]._getParentKeyOrThrow()\n          : void 0\n      )),\n        child._setParentLink(this, newKey);\n    }\n    this._insertAndSort(child);\n    return {\n      modified: makeUpdate(this, [\n        insertDelta(this._indexOfPosition(newKey), child),\n      ]),\n      reverse: [{ type: OpCode.DELETE_CRDT, id: id }],\n    };\n  }\n  _applySetUndoRedo(op) {\n    var _a;\n    const { id: id, parentKey: key } = op,\n      child = creationOpToLiveNode(op);\n    if (\n      void 0 !==\n      (null === (_a = this._doc) || void 0 === _a ? void 0 : _a.getItem(id))\n    )\n      return { modified: !1 };\n    this._unacknowledgedSets.set(key, nn(op.opId));\n    const indexOfItemWithSameKey = this._indexOfPosition(key);\n    child._attach(id, nn(this._doc)), child._setParentLink(this, key);\n    const newKey = key;\n    if (-1 !== indexOfItemWithSameKey) {\n      const existingItem = this._items[indexOfItemWithSameKey];\n      existingItem._detach(), (this._items[indexOfItemWithSameKey] = child);\n      const reverse = existingItem._serialize(nn(this._id), key, this._doc);\n      addIntentAndDeletedIdToOperation(reverse, op.id);\n      const delta = [setDelta(indexOfItemWithSameKey, child)],\n        deletedDelta = this._detachItemAssociatedToSetOperation(op.deletedId);\n      return (\n        deletedDelta && delta.push(deletedDelta),\n        { modified: makeUpdate(this, delta), reverse: reverse }\n      );\n    }\n    {\n      this._insertAndSort(child),\n        this._detachItemAssociatedToSetOperation(op.deletedId);\n      const newIndex = this._indexOfPosition(newKey);\n      return {\n        reverse: [{ type: OpCode.DELETE_CRDT, id: id }],\n        modified: makeUpdate(this, [insertDelta(newIndex, child)]),\n      };\n    }\n  }\n  _attachChild(op, source) {\n    if (null == this._doc)\n      throw new Error(\"Can't attach child if doc is not present\");\n    if (\"set\" === op.intent) {\n      if (source === OpSource.REMOTE) return this._applySetRemote(op);\n      if (source === OpSource.UNDOREDO_RECONNECT)\n        return this._applySetUndoRedo(op);\n      if (source === OpSource.ACK) return this._applySetAck(op);\n    }\n    return source === OpSource.REMOTE\n      ? this._applyRemoteInsert(op)\n      : source === OpSource.ACK\n      ? this._applyInsertAck(op)\n      : this._applyInsertUndoRedo(op);\n  }\n  _detachChild(child) {\n    if (child) {\n      const parentKey = nn(child._parentKey),\n        reverse = child._serialize(nn(this._id), parentKey, this._doc),\n        indexToDelete = this._items.indexOf(child);\n      return -1 === indexToDelete\n        ? { modified: !1 }\n        : (this._items.splice(indexToDelete, 1),\n          child._detach(),\n          {\n            modified: makeUpdate(this, [deleteDelta(indexToDelete)]),\n            reverse: reverse,\n          });\n    }\n    return { modified: !1 };\n  }\n  _applySetChildKeyRemote(newKey, child) {\n    var _a;\n    if (this._implicitlyDeletedItems.has(child)) {\n      this._implicitlyDeletedItems.delete(child),\n        child._setParentLink(this, newKey),\n        this._insertAndSort(child);\n      return {\n        modified: makeUpdate(this, [\n          insertDelta(this._items.indexOf(child), child),\n        ]),\n        reverse: [],\n      };\n    }\n    if (newKey === child._parentKey) return { modified: !1 };\n    const existingItemIndex = this._indexOfPosition(newKey);\n    if (-1 === existingItemIndex) {\n      const previousIndex = this._items.indexOf(child);\n      child._setParentLink(this, newKey), this._sortItems();\n      const newIndex = this._items.indexOf(child);\n      return newIndex === previousIndex\n        ? { modified: !1 }\n        : {\n            modified: makeUpdate(this, [\n              moveDelta(previousIndex, newIndex, child),\n            ]),\n            reverse: [],\n          };\n    }\n    {\n      this._items[existingItemIndex]._setParentLink(\n        this,\n        makePosition(\n          newKey,\n          null === (_a = this._items[existingItemIndex + 1]) || void 0 === _a\n            ? void 0\n            : _a._getParentKeyOrThrow()\n        )\n      );\n      const previousIndex = this._items.indexOf(child);\n      child._setParentLink(this, newKey), this._sortItems();\n      const newIndex = this._items.indexOf(child);\n      return newIndex === previousIndex\n        ? { modified: !1 }\n        : {\n            modified: makeUpdate(this, [\n              moveDelta(previousIndex, newIndex, child),\n            ]),\n            reverse: [],\n          };\n    }\n  }\n  _applySetChildKeyAck(newKey, child) {\n    var _a, _b;\n    const previousKey = nn(child._parentKey);\n    if (this._implicitlyDeletedItems.has(child)) {\n      const existingItemIndex = this._indexOfPosition(newKey);\n      return (\n        this._implicitlyDeletedItems.delete(child),\n        -1 !== existingItemIndex &&\n          this._items[existingItemIndex]._setParentLink(\n            this,\n            makePosition(\n              newKey,\n              null === (_a = this._items[existingItemIndex + 1]) ||\n                void 0 === _a\n                ? void 0\n                : _a._getParentKeyOrThrow()\n            )\n          ),\n        child._setParentLink(this, newKey),\n        this._insertAndSort(child),\n        { modified: !1 }\n      );\n    }\n    {\n      if (newKey === previousKey) return { modified: !1 };\n      const previousIndex = this._items.indexOf(child),\n        existingItemIndex = this._indexOfPosition(newKey);\n      -1 !== existingItemIndex &&\n        this._items[existingItemIndex]._setParentLink(\n          this,\n          makePosition(\n            newKey,\n            null === (_b = this._items[existingItemIndex + 1]) || void 0 === _b\n              ? void 0\n              : _b._getParentKeyOrThrow()\n          )\n        ),\n        child._setParentLink(this, newKey),\n        this._sortItems();\n      const newIndex = this._items.indexOf(child);\n      return previousIndex === newIndex\n        ? { modified: !1 }\n        : {\n            modified: makeUpdate(this, [\n              moveDelta(previousIndex, newIndex, child),\n            ]),\n            reverse: [],\n          };\n    }\n  }\n  _applySetChildKeyUndoRedo(newKey, child) {\n    var _a;\n    const previousKey = nn(child._parentKey),\n      previousIndex = this._items.indexOf(child),\n      existingItemIndex = this._indexOfPosition(newKey);\n    -1 !== existingItemIndex &&\n      this._items[existingItemIndex]._setParentLink(\n        this,\n        makePosition(\n          newKey,\n          null === (_a = this._items[existingItemIndex + 1]) || void 0 === _a\n            ? void 0\n            : _a._getParentKeyOrThrow()\n        )\n      ),\n      child._setParentLink(this, newKey),\n      this._sortItems();\n    const newIndex = this._items.indexOf(child);\n    return previousIndex === newIndex\n      ? { modified: !1 }\n      : {\n          modified: makeUpdate(this, [\n            moveDelta(previousIndex, newIndex, child),\n          ]),\n          reverse: [\n            {\n              type: OpCode.SET_PARENT_KEY,\n              id: nn(child._id),\n              parentKey: previousKey,\n            },\n          ],\n        };\n  }\n  _setChildKey(newKey, child, source) {\n    return source === OpSource.REMOTE\n      ? this._applySetChildKeyRemote(newKey, child)\n      : source === OpSource.ACK\n      ? this._applySetChildKeyAck(newKey, child)\n      : this._applySetChildKeyUndoRedo(newKey, child);\n  }\n  _apply(op, isLocal) {\n    return super._apply(op, isLocal);\n  }\n  _toSerializedCrdt() {\n    if (\"HasParent\" !== this.parent.type)\n      throw new Error(\"Cannot serialize LiveList if parent is missing\");\n    return {\n      type: CrdtType.LIST,\n      parentId: nn(this.parent.node._id, \"Parent node expected to have ID\"),\n      parentKey: this.parent.key,\n    };\n  }\n  get length() {\n    return this._items.length;\n  }\n  push(element) {\n    return this.insert(element, this.length);\n  }\n  insert(element, index) {\n    if (index < 0 || index > this._items.length)\n      throw new Error(\n        `Cannot insert list item at index \"\u001D${index}\". index should be between 0 and ${this._items.length}`\n      );\n    const position = makePosition(\n        this._items[index - 1]\n          ? this._items[index - 1]._getParentKeyOrThrow()\n          : void 0,\n        this._items[index] ? this._items[index]._getParentKeyOrThrow() : void 0\n      ),\n      value = lsonToLiveNode(element);\n    if (\n      (value._setParentLink(this, position),\n      this._insertAndSort(value),\n      this._doc && this._id)\n    ) {\n      const id = this._doc.generateId();\n      value._attach(id, this._doc),\n        this._doc.dispatch(\n          value._serialize(this._id, position, this._doc),\n          [{ type: OpCode.DELETE_CRDT, id: id }],\n          new Map([[this._id, makeUpdate(this, [insertDelta(index, value)])]])\n        );\n    }\n  }\n  move(index, targetIndex) {\n    if (targetIndex < 0) throw new Error(\"targetIndex cannot be less than 0\");\n    if (targetIndex >= this._items.length)\n      throw new Error(\n        \"targetIndex cannot be greater or equal than the list length\"\n      );\n    if (index < 0) throw new Error(\"index cannot be less than 0\");\n    if (index >= this._items.length)\n      throw new Error(\"index cannot be greater or equal than the list length\");\n    let beforePosition = null,\n      afterPosition = null;\n    index < targetIndex\n      ? ((afterPosition =\n          targetIndex === this._items.length - 1\n            ? void 0\n            : this._items[targetIndex + 1]._getParentKeyOrThrow()),\n        (beforePosition = this._items[targetIndex]._getParentKeyOrThrow()))\n      : ((afterPosition = this._items[targetIndex]._getParentKeyOrThrow()),\n        (beforePosition =\n          0 === targetIndex\n            ? void 0\n            : this._items[targetIndex - 1]._getParentKeyOrThrow()));\n    const position = makePosition(beforePosition, afterPosition),\n      item = this._items[index],\n      previousPosition = item._getParentKeyOrThrow();\n    if (\n      (item._setParentLink(this, position),\n      this._sortItems(),\n      this._doc && this._id)\n    ) {\n      const storageUpdates = new Map([\n        [this._id, makeUpdate(this, [moveDelta(index, targetIndex, item)])],\n      ]);\n      this._doc.dispatch(\n        [\n          {\n            type: OpCode.SET_PARENT_KEY,\n            id: nn(item._id),\n            opId: this._doc.generateOpId(),\n            parentKey: position,\n          },\n        ],\n        [\n          {\n            type: OpCode.SET_PARENT_KEY,\n            id: nn(item._id),\n            parentKey: previousPosition,\n          },\n        ],\n        storageUpdates\n      );\n    }\n  }\n  delete(index) {\n    if (index < 0 || index >= this._items.length)\n      throw new Error(\n        `Cannot delete list item at index \"\u001D${index}\". index should be between 0 and ${\n          this._items.length - 1\n        }`\n      );\n    const item = this._items[index];\n    if ((item._detach(), this._items.splice(index, 1), this._doc)) {\n      const childRecordId = item._id;\n      if (childRecordId) {\n        const storageUpdates = new Map();\n        storageUpdates.set(\n          nn(this._id),\n          makeUpdate(this, [deleteDelta(index)])\n        ),\n          this._doc.dispatch(\n            [\n              {\n                id: childRecordId,\n                opId: this._doc.generateOpId(),\n                type: OpCode.DELETE_CRDT,\n              },\n            ],\n            item._serialize(nn(this._id), item._getParentKeyOrThrow()),\n            storageUpdates\n          );\n      }\n    }\n  }\n  clear() {\n    if (this._doc) {\n      const ops = [],\n        reverseOps = [],\n        updateDelta = [];\n      for (const item of this._items) {\n        item._detach();\n        const childId = item._id;\n        childId &&\n          (ops.push({\n            type: OpCode.DELETE_CRDT,\n            id: childId,\n            opId: this._doc.generateOpId(),\n          }),\n          reverseOps.push(\n            ...item._serialize(nn(this._id), item._getParentKeyOrThrow())\n          ),\n          updateDelta.push(deleteDelta(0)));\n      }\n      this._items = [];\n      const storageUpdates = new Map();\n      storageUpdates.set(nn(this._id), makeUpdate(this, updateDelta)),\n        this._doc.dispatch(ops, reverseOps, storageUpdates);\n    } else {\n      for (const item of this._items) item._detach();\n      this._items = [];\n    }\n  }\n  set(index, item) {\n    if (index < 0 || index >= this._items.length)\n      throw new Error(\n        `Cannot set list item at index \"\u001D${index}\". index should be between 0 and ${\n          this._items.length - 1\n        }`\n      );\n    const existingItem = this._items[index],\n      position = existingItem._getParentKeyOrThrow(),\n      existingId = existingItem._id;\n    existingItem._detach();\n    const value = lsonToLiveNode(item);\n    if (\n      (value._setParentLink(this, position),\n      (this._items[index] = value),\n      this._doc && this._id)\n    ) {\n      const id = this._doc.generateId();\n      value._attach(id, this._doc);\n      const storageUpdates = new Map();\n      storageUpdates.set(this._id, makeUpdate(this, [setDelta(index, value)]));\n      const ops = value._serialize(this._id, position, this._doc);\n      addIntentAndDeletedIdToOperation(ops, existingId),\n        this._unacknowledgedSets.set(position, nn(ops[0].opId));\n      const reverseOps = existingItem._serialize(this._id, position, void 0);\n      addIntentAndDeletedIdToOperation(reverseOps, id),\n        this._doc.dispatch(ops, reverseOps, storageUpdates);\n    }\n  }\n  toArray() {\n    return this._items.map((entry) => liveNodeToLson(entry));\n  }\n  every(predicate) {\n    return this.toArray().every(predicate);\n  }\n  filter(predicate) {\n    return this.toArray().filter(predicate);\n  }\n  find(predicate) {\n    return this.toArray().find(predicate);\n  }\n  findIndex(predicate) {\n    return this.toArray().findIndex(predicate);\n  }\n  forEach(callbackfn) {\n    return this.toArray().forEach(callbackfn);\n  }\n  get(index) {\n    if (!(index < 0 || index >= this._items.length))\n      return liveNodeToLson(this._items[index]);\n  }\n  indexOf(searchElement, fromIndex) {\n    return this.toArray().indexOf(searchElement, fromIndex);\n  }\n  lastIndexOf(searchElement, fromIndex) {\n    return this.toArray().lastIndexOf(searchElement, fromIndex);\n  }\n  map(callback) {\n    return this._items.map((entry, i) => callback(liveNodeToLson(entry), i));\n  }\n  some(predicate) {\n    return this.toArray().some(predicate);\n  }\n  [Symbol.iterator]() {\n    return new LiveListIterator(this._items);\n  }\n  _createAttachItemAndSort(op, key) {\n    const newItem = creationOpToLiveNode(op);\n    newItem._attach(op.id, nn(this._doc)),\n      newItem._setParentLink(this, key),\n      this._insertAndSort(newItem);\n    return { newItem: newItem, newIndex: this._indexOfPosition(key) };\n  }\n  _shiftItemPosition(index, key) {\n    var _a;\n    const shiftedPosition = makePosition(\n      key,\n      this._items.length > index + 1\n        ? null === (_a = this._items[index + 1]) || void 0 === _a\n          ? void 0\n          : _a._getParentKeyOrThrow()\n        : void 0\n    );\n    this._items[index]._setParentLink(this, shiftedPosition);\n  }\n}\nclass LiveListIterator {\n  constructor(items) {\n    this._innerIterator = items[Symbol.iterator]();\n  }\n  [Symbol.iterator]() {\n    return this;\n  }\n  next() {\n    const result = this._innerIterator.next();\n    if (result.done) return { done: !0, value: void 0 };\n    return { value: liveNodeToLson(result.value) };\n  }\n}\nfunction makeUpdate(liveList, deltaUpdates) {\n  return { node: liveList, type: \"LiveList\", updates: deltaUpdates };\n}\nfunction setDelta(index, item) {\n  return {\n    index: index,\n    type: \"set\",\n    item: item instanceof LiveRegister ? item.data : item,\n  };\n}\nfunction deleteDelta(index) {\n  return { index: index, type: \"delete\" };\n}\nfunction insertDelta(index, item) {\n  return {\n    index: index,\n    type: \"insert\",\n    item: item instanceof LiveRegister ? item.data : item,\n  };\n}\nfunction moveDelta(previousIndex, index, item) {\n  return {\n    index: index,\n    type: \"move\",\n    previousIndex: previousIndex,\n    item: item instanceof LiveRegister ? item.data : item,\n  };\n}\nfunction addIntentAndDeletedIdToOperation(ops, deletedId) {\n  if (0 === ops.length)\n    throw new Error(\n      \"Internal error. Serialized LiveStructure should have at least 1 operation\"\n    );\n  const firstOp = ops[0];\n  (firstOp.intent = \"set\"), (firstOp.deletedId = deletedId);\n}\nclass LiveMap extends AbstractCrdt {\n  constructor(entries) {\n    if (\n      (super(),\n      errorIf(\n        null === entries,\n        \"Support for calling `new LiveMap(null)` will be removed in @liveblocks/client 0.18. Please call as `new LiveMap()`, or `new LiveMap([])`.\"\n      ),\n      (this.unacknowledgedSet = new Map()),\n      entries)\n    ) {\n      const mappedEntries = [];\n      for (const entry of entries) {\n        const value = lsonToLiveNode(entry[1]);\n        value._setParentLink(this, entry[0]),\n          mappedEntries.push([entry[0], value]);\n      }\n      this._map = new Map(mappedEntries);\n    } else this._map = new Map();\n  }\n  _serialize(parentId, parentKey, doc) {\n    if (null == this._id)\n      throw new Error(\"Cannot serialize item is not attached\");\n    const ops = [],\n      op = {\n        id: this._id,\n        opId: null == doc ? void 0 : doc.generateOpId(),\n        type: OpCode.CREATE_MAP,\n        parentId: parentId,\n        parentKey: parentKey,\n      };\n    ops.push(op);\n    for (const [key, value] of this._map)\n      ops.push(...value._serialize(this._id, key, doc));\n    return ops;\n  }\n  static _deserialize([id, _item], parentToChildren, doc) {\n    const map = new LiveMap();\n    map._attach(id, doc);\n    const children = parentToChildren.get(id);\n    if (null == children) return map;\n    for (const [id, crdt] of children) {\n      const child = deserialize([id, crdt], parentToChildren, doc);\n      child._setParentLink(map, crdt.parentKey),\n        map._map.set(crdt.parentKey, child);\n    }\n    return map;\n  }\n  _attach(id, doc) {\n    super._attach(id, doc);\n    for (const [_key, value] of this._map)\n      isLiveNode(value) && value._attach(doc.generateId(), doc);\n  }\n  _attachChild(op, source) {\n    if (null == this._doc)\n      throw new Error(\"Can't attach child if doc is not present\");\n    const { id: id, parentKey: parentKey, opId: opId } = op,\n      key = parentKey,\n      child = creationOpToLiveNode(op);\n    if (void 0 !== this._doc.getItem(id)) return { modified: !1 };\n    if (source === OpSource.ACK) {\n      const lastUpdateOpId = this.unacknowledgedSet.get(key);\n      if (lastUpdateOpId === opId)\n        return this.unacknowledgedSet.delete(key), { modified: !1 };\n      if (null != lastUpdateOpId) return { modified: !1 };\n    } else source === OpSource.REMOTE && this.unacknowledgedSet.delete(key);\n    const previousValue = this._map.get(key);\n    let reverse;\n    if (previousValue) {\n      const thisId = nn(this._id);\n      (reverse = previousValue._serialize(thisId, key)),\n        previousValue._detach();\n    } else reverse = [{ type: OpCode.DELETE_CRDT, id: id }];\n    return (\n      child._setParentLink(this, key),\n      child._attach(id, this._doc),\n      this._map.set(key, child),\n      {\n        modified: {\n          node: this,\n          type: \"LiveMap\",\n          updates: { [key]: { type: \"update\" } },\n        },\n        reverse: reverse,\n      }\n    );\n  }\n  _detach() {\n    super._detach();\n    for (const item of this._map.values()) item._detach();\n  }\n  _detachChild(child) {\n    const id = nn(this._id),\n      parentKey = nn(child._parentKey),\n      reverse = child._serialize(id, parentKey, this._doc);\n    for (const [key, value] of this._map)\n      value === child && this._map.delete(key);\n    child._detach();\n    return {\n      modified: {\n        node: this,\n        type: \"LiveMap\",\n        updates: { [parentKey]: { type: \"delete\" } },\n      },\n      reverse: reverse,\n    };\n  }\n  _toSerializedCrdt() {\n    if (\"HasParent\" !== this.parent.type)\n      throw new Error(\"Cannot serialize LiveMap if parent is missing\");\n    return {\n      type: CrdtType.MAP,\n      parentId: nn(this.parent.node._id, \"Parent node expected to have ID\"),\n      parentKey: this.parent.key,\n    };\n  }\n  get(key) {\n    const value = this._map.get(key);\n    if (null != value) return liveNodeToLson(value);\n  }\n  set(key, value) {\n    const oldValue = this._map.get(key);\n    oldValue && oldValue._detach();\n    const item = lsonToLiveNode(value);\n    if (\n      (item._setParentLink(this, key),\n      this._map.set(key, item),\n      this._doc && this._id)\n    ) {\n      const id = this._doc.generateId();\n      item._attach(id, this._doc);\n      const storageUpdates = new Map();\n      storageUpdates.set(this._id, {\n        node: this,\n        type: \"LiveMap\",\n        updates: { [key]: { type: \"update\" } },\n      });\n      const ops = item._serialize(this._id, key, this._doc);\n      this.unacknowledgedSet.set(key, nn(ops[0].opId)),\n        this._doc.dispatch(\n          item._serialize(this._id, key, this._doc),\n          oldValue\n            ? oldValue._serialize(this._id, key)\n            : [{ type: OpCode.DELETE_CRDT, id: id }],\n          storageUpdates\n        );\n    }\n  }\n  get size() {\n    return this._map.size;\n  }\n  has(key) {\n    return this._map.has(key);\n  }\n  delete(key) {\n    const item = this._map.get(key);\n    if (null == item) return !1;\n    if ((item._detach(), this._map.delete(key), this._doc && item._id)) {\n      const thisId = nn(this._id),\n        storageUpdates = new Map();\n      storageUpdates.set(thisId, {\n        node: this,\n        type: \"LiveMap\",\n        updates: { [key]: { type: \"delete\" } },\n      }),\n        this._doc.dispatch(\n          [\n            {\n              type: OpCode.DELETE_CRDT,\n              id: item._id,\n              opId: this._doc.generateOpId(),\n            },\n          ],\n          item._serialize(thisId, key),\n          storageUpdates\n        );\n    }\n    return !0;\n  }\n  entries() {\n    const innerIterator = this._map.entries();\n    return {\n      [Symbol.iterator]() {\n        return this;\n      },\n      next() {\n        const iteratorValue = innerIterator.next();\n        if (iteratorValue.done) return { done: !0, value: void 0 };\n        return {\n          value: [\n            iteratorValue.value[0],\n            liveNodeToLson(iteratorValue.value[1]),\n          ],\n        };\n      },\n    };\n  }\n  [Symbol.iterator]() {\n    return this.entries();\n  }\n  keys() {\n    return this._map.keys();\n  }\n  values() {\n    const innerIterator = this._map.values();\n    return {\n      [Symbol.iterator]() {\n        return this;\n      },\n      next() {\n        const iteratorValue = innerIterator.next();\n        if (iteratorValue.done) return { done: !0, value: void 0 };\n        return { value: liveNodeToLson(iteratorValue.value) };\n      },\n    };\n  }\n  forEach(callback) {\n    for (const entry of this) callback(entry[1], entry[0], this);\n  }\n}\nclass LiveObject extends AbstractCrdt {\n  constructor(obj = {}) {\n    super(), (this._propToLastUpdate = new Map());\n    for (const key in obj) {\n      const value = obj[key];\n      void 0 !== value && isLiveNode(value) && value._setParentLink(this, key);\n    }\n    this._map = new Map(Object.entries(obj));\n  }\n  _serialize(parentId, parentKey, doc) {\n    if (null == this._id)\n      throw new Error(\"Cannot serialize item is not attached\");\n    const opId = null == doc ? void 0 : doc.generateOpId(),\n      ops = [],\n      op =\n        void 0 !== parentId && void 0 !== parentKey\n          ? {\n              type: OpCode.CREATE_OBJECT,\n              id: this._id,\n              opId: opId,\n              parentId: parentId,\n              parentKey: parentKey,\n              data: {},\n            }\n          : { type: OpCode.CREATE_OBJECT, id: this._id, opId: opId, data: {} };\n    ops.push(op);\n    for (const [key, value] of this._map)\n      isLiveNode(value)\n        ? ops.push(...value._serialize(this._id, key, doc))\n        : (op.data[key] = value);\n    return ops;\n  }\n  static _deserialize([id, item], parentToChildren, doc) {\n    const liveObj = new LiveObject(item.data);\n    return (\n      liveObj._attach(id, doc),\n      this._deserializeChildren(liveObj, parentToChildren, doc)\n    );\n  }\n  static _deserializeChildren(liveObj, parentToChildren, doc) {\n    const children = parentToChildren.get(nn(liveObj._id));\n    if (null == children) return liveObj;\n    for (const [id, crdt] of children) {\n      const child = deserializeToLson([id, crdt], parentToChildren, doc);\n      isLiveStructure(child) && child._setParentLink(liveObj, crdt.parentKey),\n        liveObj._map.set(crdt.parentKey, child);\n    }\n    return liveObj;\n  }\n  _attach(id, doc) {\n    super._attach(id, doc);\n    for (const [_key, value] of this._map)\n      isLiveNode(value) && value._attach(doc.generateId(), doc);\n  }\n  _attachChild(op, source) {\n    if (null == this._doc)\n      throw new Error(\"Can't attach child if doc is not present\");\n    const { id: id, opId: opId, parentKey: key } = op,\n      child = creationOpToLson(op);\n    if (void 0 !== this._doc.getItem(id))\n      return (\n        this._propToLastUpdate.get(key) === opId &&\n          this._propToLastUpdate.delete(key),\n        { modified: !1 }\n      );\n    if (source === OpSource.UNDOREDO_RECONNECT)\n      this._propToLastUpdate.set(key, nn(opId));\n    else if (void 0 !== this._propToLastUpdate.get(key))\n      return this._propToLastUpdate.get(key) === opId\n        ? (this._propToLastUpdate.delete(key), { modified: !1 })\n        : { modified: !1 };\n    const thisId = nn(this._id),\n      previousValue = this._map.get(key);\n    let reverse;\n    return (\n      isLiveNode(previousValue)\n        ? ((reverse = previousValue._serialize(thisId, key)),\n          previousValue._detach())\n        : (reverse =\n            void 0 === previousValue\n              ? [{ type: OpCode.DELETE_OBJECT_KEY, id: thisId, key: key }]\n              : [\n                  {\n                    type: OpCode.UPDATE_OBJECT,\n                    id: thisId,\n                    data: { [key]: previousValue },\n                  },\n                ]),\n      this._map.set(key, child),\n      isLiveStructure(child) &&\n        (child._setParentLink(this, key), child._attach(id, this._doc)),\n      {\n        reverse: reverse,\n        modified: {\n          node: this,\n          type: \"LiveObject\",\n          updates: { [key]: { type: \"update\" } },\n        },\n      }\n    );\n  }\n  _detachChild(child) {\n    if (child) {\n      const id = nn(this._id),\n        parentKey = nn(child._parentKey),\n        reverse = child._serialize(id, parentKey, this._doc);\n      for (const [key, value] of this._map)\n        value === child && this._map.delete(key);\n      child._detach();\n      return {\n        modified: {\n          node: this,\n          type: \"LiveObject\",\n          updates: { [parentKey]: { type: \"delete\" } },\n        },\n        reverse: reverse,\n      };\n    }\n    return { modified: !1 };\n  }\n  _detach() {\n    super._detach();\n    for (const value of this._map.values())\n      isLiveNode(value) && value._detach();\n  }\n  _apply(op, isLocal) {\n    return op.type === OpCode.UPDATE_OBJECT\n      ? this._applyUpdate(op, isLocal)\n      : op.type === OpCode.DELETE_OBJECT_KEY\n      ? this._applyDeleteObjectKey(op)\n      : super._apply(op, isLocal);\n  }\n  _toSerializedCrdt() {\n    const data = {};\n    for (const [key, value] of this._map)\n      isLiveNode(value) || (data[key] = value);\n    return \"HasParent\" === this.parent.type && this.parent.node._id\n      ? {\n          type: CrdtType.OBJECT,\n          parentId: this.parent.node._id,\n          parentKey: this.parent.key,\n          data: data,\n        }\n      : { type: CrdtType.OBJECT, data: data };\n  }\n  _applyUpdate(op, isLocal) {\n    let isModified = !1;\n    const id = nn(this._id),\n      reverse = [],\n      reverseUpdate = { type: OpCode.UPDATE_OBJECT, id: id, data: {} };\n    reverse.push(reverseUpdate);\n    for (const key in op.data) {\n      const oldValue = this._map.get(key);\n      isLiveNode(oldValue)\n        ? (reverse.push(...oldValue._serialize(id, key)), oldValue._detach())\n        : void 0 !== oldValue\n        ? (reverseUpdate.data[key] = oldValue)\n        : void 0 === oldValue &&\n          reverse.push({ type: OpCode.DELETE_OBJECT_KEY, id: id, key: key });\n    }\n    const updateDelta = {};\n    for (const key in op.data) {\n      const value = op.data[key];\n      if (void 0 === value) continue;\n      if (isLocal) this._propToLastUpdate.set(key, nn(op.opId));\n      else {\n        if (null != this._propToLastUpdate.get(key)) {\n          if (this._propToLastUpdate.get(key) === op.opId) {\n            this._propToLastUpdate.delete(key);\n            continue;\n          }\n          continue;\n        }\n        isModified = !0;\n      }\n      const oldValue = this._map.get(key);\n      isLiveNode(oldValue) && oldValue._detach(),\n        (isModified = !0),\n        (updateDelta[key] = { type: \"update\" }),\n        this._map.set(key, value);\n    }\n    return (\n      0 !== Object.keys(reverseUpdate.data).length &&\n        reverse.unshift(reverseUpdate),\n      isModified\n        ? {\n            modified: { node: this, type: \"LiveObject\", updates: updateDelta },\n            reverse: reverse,\n          }\n        : { modified: !1 }\n    );\n  }\n  _applyDeleteObjectKey(op) {\n    const key = op.key;\n    if (!1 === this._map.has(key)) return { modified: !1 };\n    if (void 0 !== this._propToLastUpdate.get(key)) return { modified: !1 };\n    const oldValue = this._map.get(key),\n      id = nn(this._id);\n    let reverse = [];\n    return (\n      isLiveNode(oldValue)\n        ? ((reverse = oldValue._serialize(id, op.key)), oldValue._detach())\n        : void 0 !== oldValue &&\n          (reverse = [\n            { type: OpCode.UPDATE_OBJECT, id: id, data: { [key]: oldValue } },\n          ]),\n      this._map.delete(key),\n      {\n        modified: {\n          node: this,\n          type: \"LiveObject\",\n          updates: { [op.key]: { type: \"delete\" } },\n        },\n        reverse: reverse,\n      }\n    );\n  }\n  toObject() {\n    return (function (iterable) {\n      const obj = {};\n      for (const [key, val] of iterable) obj[key] = val;\n      return obj;\n    })(this._map);\n  }\n  set(key, value) {\n    this.update({ [key]: value });\n  }\n  get(key) {\n    return this._map.get(key);\n  }\n  delete(key) {\n    const keyAsString = key,\n      oldValue = this._map.get(keyAsString);\n    if (void 0 === oldValue) return;\n    if (null == this._doc || null == this._id)\n      return (\n        isLiveNode(oldValue) && oldValue._detach(),\n        void this._map.delete(keyAsString)\n      );\n    let reverse;\n    isLiveNode(oldValue)\n      ? (oldValue._detach(),\n        (reverse = oldValue._serialize(this._id, keyAsString)))\n      : (reverse = [\n          {\n            type: OpCode.UPDATE_OBJECT,\n            data: { [keyAsString]: oldValue },\n            id: this._id,\n          },\n        ]),\n      this._map.delete(keyAsString);\n    const storageUpdates = new Map();\n    storageUpdates.set(this._id, {\n      node: this,\n      type: \"LiveObject\",\n      updates: { [key]: { type: \"delete\" } },\n    }),\n      this._doc.dispatch(\n        [\n          {\n            type: OpCode.DELETE_OBJECT_KEY,\n            key: keyAsString,\n            id: this._id,\n            opId: this._doc.generateOpId(),\n          },\n        ],\n        reverse,\n        storageUpdates\n      );\n  }\n  update(overrides) {\n    if (null == this._doc || null == this._id) {\n      for (const key in overrides) {\n        const newValue = overrides[key];\n        if (void 0 === newValue) continue;\n        const oldValue = this._map.get(key);\n        isLiveNode(oldValue) && oldValue._detach(),\n          isLiveNode(newValue) && newValue._setParentLink(this, key),\n          this._map.set(key, newValue);\n      }\n      return;\n    }\n    const ops = [],\n      reverseOps = [],\n      opId = this._doc.generateOpId(),\n      updatedProps = {},\n      reverseUpdateOp = { id: this._id, type: OpCode.UPDATE_OBJECT, data: {} },\n      updateDelta = {};\n    for (const key in overrides) {\n      const newValue = overrides[key];\n      if (void 0 === newValue) continue;\n      const oldValue = this._map.get(key);\n      if (\n        (isLiveNode(oldValue)\n          ? (reverseOps.push(...oldValue._serialize(this._id, key)),\n            oldValue._detach())\n          : void 0 === oldValue\n          ? reverseOps.push({\n              type: OpCode.DELETE_OBJECT_KEY,\n              id: this._id,\n              key: key,\n            })\n          : (reverseUpdateOp.data[key] = oldValue),\n        isLiveNode(newValue))\n      ) {\n        newValue._setParentLink(this, key),\n          newValue._attach(this._doc.generateId(), this._doc);\n        const newAttachChildOps = newValue._serialize(this._id, key, this._doc),\n          createCrdtOp = newAttachChildOps.find(\n            (op) => op.parentId === this._id\n          );\n        createCrdtOp && this._propToLastUpdate.set(key, nn(createCrdtOp.opId)),\n          ops.push(...newAttachChildOps);\n      } else\n        (updatedProps[key] = newValue), this._propToLastUpdate.set(key, opId);\n      this._map.set(key, newValue), (updateDelta[key] = { type: \"update\" });\n    }\n    0 !== Object.keys(reverseUpdateOp.data).length &&\n      reverseOps.unshift(reverseUpdateOp),\n      0 !== Object.keys(updatedProps).length &&\n        ops.unshift({\n          opId: opId,\n          id: this._id,\n          type: OpCode.UPDATE_OBJECT,\n          data: updatedProps,\n        });\n    const storageUpdates = new Map();\n    storageUpdates.set(this._id, {\n      node: this,\n      type: \"LiveObject\",\n      updates: updateDelta,\n    }),\n      this._doc.dispatch(ops, reverseOps, storageUpdates);\n  }\n}\nfunction remove(array, item) {\n  for (let i = 0; i < array.length; i++)\n    if (array[i] === item) {\n      array.splice(i, 1);\n      break;\n    }\n}\nfunction compact(items) {\n  return items.filter((item) => null != item);\n}\nfunction creationOpToLiveNode(op) {\n  return lsonToLiveNode(creationOpToLson(op));\n}\nfunction creationOpToLson(op) {\n  switch (op.type) {\n    case OpCode.CREATE_REGISTER:\n      return op.data;\n    case OpCode.CREATE_OBJECT:\n      return new LiveObject(op.data);\n    case OpCode.CREATE_MAP:\n      return new LiveMap();\n    case OpCode.CREATE_LIST:\n      return new LiveList();\n    default:\n      return assertNever(0, \"Unknown creation Op\");\n  }\n}\nfunction isSameNodeOrChildOf(node, parent) {\n  return (\n    node === parent ||\n    (\"HasParent\" === node.parent.type &&\n      isSameNodeOrChildOf(node.parent.node, parent))\n  );\n}\nfunction deserialize([id, crdt], parentToChildren, doc) {\n  switch (crdt.type) {\n    case CrdtType.OBJECT:\n      return LiveObject._deserialize([id, crdt], parentToChildren, doc);\n    case CrdtType.LIST:\n      return LiveList._deserialize([id, crdt], parentToChildren, doc);\n    case CrdtType.MAP:\n      return LiveMap._deserialize([id, crdt], parentToChildren, doc);\n    case CrdtType.REGISTER:\n      return LiveRegister._deserialize([id, crdt], parentToChildren, doc);\n    default:\n      throw new Error(\"Unexpected CRDT type\");\n  }\n}\nfunction deserializeToLson([id, crdt], parentToChildren, doc) {\n  switch (crdt.type) {\n    case CrdtType.OBJECT:\n      return LiveObject._deserialize([id, crdt], parentToChildren, doc);\n    case CrdtType.LIST:\n      return LiveList._deserialize([id, crdt], parentToChildren, doc);\n    case CrdtType.MAP:\n      return LiveMap._deserialize([id, crdt], parentToChildren, doc);\n    case CrdtType.REGISTER:\n      return crdt.data;\n    default:\n      throw new Error(\"Unexpected CRDT type\");\n  }\n}\nfunction isLiveStructure(value) {\n  return (\n    isLiveList(value) ||\n    (function (value) {\n      return value instanceof LiveMap;\n    })(value) ||\n    isLiveObject(value)\n  );\n}\nfunction isLiveNode(value) {\n  return (\n    isLiveStructure(value) ||\n    (function (value) {\n      return value instanceof LiveRegister;\n    })(value)\n  );\n}\nfunction isLiveList(value) {\n  return value instanceof LiveList;\n}\nfunction isLiveObject(value) {\n  return value instanceof LiveObject;\n}\nfunction liveNodeToLson(obj) {\n  return obj instanceof LiveRegister\n    ? obj.data\n    : obj instanceof LiveList ||\n      obj instanceof LiveMap ||\n      obj instanceof LiveObject\n    ? obj\n    : assertNever(0, \"Unknown AbstractCrdt\");\n}\nfunction lsonToLiveNode(value) {\n  return value instanceof LiveObject ||\n    value instanceof LiveMap ||\n    value instanceof LiveList\n    ? value\n    : new LiveRegister(value);\n}\nfunction getTreesDiffOperations(currentItems, newItems) {\n  const ops = [];\n  return (\n    currentItems.forEach((_, id) => {\n      newItems.get(id) || ops.push({ type: OpCode.DELETE_CRDT, id: id });\n    }),\n    newItems.forEach((crdt, id) => {\n      const currentCrdt = currentItems.get(id);\n      if (currentCrdt)\n        crdt.type === CrdtType.OBJECT &&\n          ((currentCrdt.type === CrdtType.OBJECT &&\n            JSON.stringify(crdt.data) === JSON.stringify(currentCrdt.data)) ||\n            ops.push({ type: OpCode.UPDATE_OBJECT, id: id, data: crdt.data })),\n          crdt.parentKey !== currentCrdt.parentKey &&\n            ops.push({\n              type: OpCode.SET_PARENT_KEY,\n              id: id,\n              parentKey: nn(crdt.parentKey, \"Parent key must not be missing\"),\n            });\n      else\n        switch (crdt.type) {\n          case CrdtType.REGISTER:\n            ops.push({\n              type: OpCode.CREATE_REGISTER,\n              id: id,\n              parentId: crdt.parentId,\n              parentKey: crdt.parentKey,\n              data: crdt.data,\n            });\n            break;\n          case CrdtType.LIST:\n            ops.push({\n              type: OpCode.CREATE_LIST,\n              id: id,\n              parentId: crdt.parentId,\n              parentKey: crdt.parentKey,\n            });\n            break;\n          case CrdtType.OBJECT:\n            ops.push(\n              crdt.parentId\n                ? {\n                    type: OpCode.CREATE_OBJECT,\n                    id: id,\n                    parentId: crdt.parentId,\n                    parentKey: crdt.parentKey,\n                    data: crdt.data,\n                  }\n                : { type: OpCode.CREATE_OBJECT, id: id, data: crdt.data }\n            );\n            break;\n          case CrdtType.MAP:\n            ops.push({\n              type: OpCode.CREATE_MAP,\n              id: id,\n              parentId: crdt.parentId,\n              parentKey: crdt.parentKey,\n            });\n        }\n    }),\n    ops\n  );\n}\nfunction mergeStorageUpdates(first, second) {\n  return first\n    ? \"LiveObject\" === first.type && \"LiveObject\" === second.type\n      ? (function (first, second) {\n          const updates = first.updates;\n          for (const [key, value] of entries(second.updates))\n            updates[key] = value;\n          return Object.assign(Object.assign({}, second), { updates: updates });\n        })(first, second)\n      : \"LiveMap\" === first.type && \"LiveMap\" === second.type\n      ? (function (first, second) {\n          const updates = first.updates;\n          for (const [key, value] of entries(second.updates))\n            updates[key] = value;\n          return Object.assign(Object.assign({}, second), { updates: updates });\n        })(first, second)\n      : \"LiveList\" === first.type && \"LiveList\" === second.type\n      ? (function (first, second) {\n          const updates = first.updates;\n          return Object.assign(Object.assign({}, second), {\n            updates: updates.concat(second.updates),\n          });\n        })(first, second)\n      : second\n    : second;\n}\nfunction isPlain(value) {\n  const type = typeof value;\n  return (\n    null == value ||\n    \"string\" === type ||\n    \"boolean\" === type ||\n    \"number\" === type ||\n    Array.isArray(value) ||\n    isPlainObject(value)\n  );\n}\nfunction isPlainObject(blob) {\n  return (\n    null !== blob &&\n    \"object\" == typeof blob &&\n    \"[object Object]\" === Object.prototype.toString.call(blob)\n  );\n}\nfunction findNonSerializableValue(value, path = \"\") {\n  if (!isPlain) return { path: path || \"root\", value: value };\n  if (\"object\" != typeof value || null === value) return !1;\n  for (const [key, nestedValue] of Object.entries(value)) {\n    const nestedPath = path ? path + \".\" + key : key;\n    if (!isPlain(nestedValue)) return { path: nestedPath, value: nestedValue };\n    if (\"object\" == typeof nestedValue) {\n      const nonSerializableNestedValue = findNonSerializableValue(\n        nestedValue,\n        nestedPath\n      );\n      if (nonSerializableNestedValue) return nonSerializableNestedValue;\n    }\n  }\n  return !1;\n}\nfunction entries(obj) {\n  return Object.entries(obj);\n}\nfunction tryParseJson(rawMessage) {\n  try {\n    return JSON.parse(rawMessage);\n  } catch (e) {\n    return;\n  }\n}\nfunction b64decode(b64value) {\n  try {\n    const formattedValue = b64value.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    return decodeURIComponent(\n      atob(formattedValue)\n        .split(\"\")\n        .map(function (c) {\n          return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n        })\n        .join(\"\")\n    );\n  } catch (err) {\n    return atob(b64value);\n  }\n}\nconst SCOPES = [\n  \"websocket:presence\",\n  \"websocket:storage\",\n  \"room:read\",\n  \"room:write\",\n  \"rooms:read\",\n  \"rooms:write\",\n];\nfunction isTokenExpired(token) {\n  const now = Date.now() / 1e3;\n  return now > token.exp - 300 || now < token.iat + 300;\n}\nfunction isScope(value) {\n  return SCOPES.includes(value);\n}\nfunction isStringList(value) {\n  return Array.isArray(value) && value.every((i) => \"string\" == typeof i);\n}\nfunction isAppOnlyAuthToken(data) {\n  return (\n    \"string\" == typeof data.appId &&\n    void 0 === data.roomId &&\n    isStringList(data.scopes)\n  );\n}\nfunction isRoomAuthToken(data) {\n  return (\n    \"string\" == typeof data.appId &&\n    \"string\" == typeof data.roomId &&\n    \"number\" == typeof data.actor &&\n    (void 0 === data.id || \"string\" == typeof data.id) &&\n    isStringList(data.scopes) &&\n    (void 0 === data.maxConnectionsPerRoom ||\n      \"number\" == typeof data.maxConnectionsPerRoom)\n  );\n}\nfunction isAuthToken(data) {\n  return isAppOnlyAuthToken(data) || isRoomAuthToken(data);\n}\nfunction parseJwtToken(token) {\n  const tokenParts = token.split(\".\");\n  if (3 !== tokenParts.length)\n    throw new Error(\"Authentication error: invalid JWT token\");\n  const data = tryParseJson(b64decode(tokenParts[1]));\n  if (\n    data &&\n    (function (data) {\n      if (!isPlainObject(data)) return !1;\n      const { iat: iat, exp: exp } = data;\n      return \"number\" == typeof iat && \"number\" == typeof exp;\n    })(data)\n  )\n    return data;\n  throw new Error(\"Authentication error: missing JWT metadata\");\n}\nfunction parseRoomAuthToken(tokenString) {\n  const data = parseJwtToken(tokenString);\n  if (data && isRoomAuthToken(data)) {\n    return __rest(data, [\"maxConnections\"]);\n  }\n  throw new Error(\n    \"Authentication error: we expected a room token but did not get one. Hint: if you are using a callback, ensure the room is passed when creating the token. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClientCallback\"\n  );\n}\nfunction isJsonScalar(data) {\n  return (\n    null === data ||\n    \"string\" == typeof data ||\n    \"number\" == typeof data ||\n    \"boolean\" == typeof data\n  );\n}\nfunction isJsonArray(data) {\n  return Array.isArray(data);\n}\nfunction isJsonObject(data) {\n  return !isJsonScalar(data) && !isJsonArray(data);\n}\nexport {\n  isRoomAuthToken as A,\n  isScope as B,\n  ClientMsgCode as C,\n  deprecate as D,\n  deprecateIf as E,\n  throwUsageError as F,\n  comparePosition as G,\n  makePosition as H,\n  CrdtType as I,\n  isJsonScalar as J,\n  isChildCrdt as K,\n  LiveObject as L,\n  b64decode as M,\n  OpSource as O,\n  ServerMsgCode as S,\n  WebsocketCloseCodes as W,\n  __rest as _,\n  isRoomEventName as a,\n  isPlainObject as b,\n  isTokenExpired as c,\n  isSameNodeOrChildOf as d,\n  OpCode as e,\n  isLiveList as f,\n  getTreesDiffOperations as g,\n  isJsonArray as h,\n  isLiveNode as i,\n  compact as j,\n  isRootCrdt as k,\n  isJsonObject as l,\n  mergeStorageUpdates as m,\n  nn as n,\n  errorIf as o,\n  parseRoomAuthToken as p,\n  LiveList as q,\n  remove as r,\n  LiveMap as s,\n  tryParseJson as t,\n  LiveRegister as u,\n  findNonSerializableValue as v,\n  isLiveObject as w,\n  assertNever as x,\n  isAppOnlyAuthToken as y,\n  isAuthToken as z,\n};\n", "import {\n  _ as __rest,\n  r as remove,\n  i as isLiveNode,\n  a as isRoomEventName,\n  S as ServerMsgCode,\n  m as mergeStorageUpdates,\n  W as WebsocketCloseCodes,\n  C as ClientMsgCode,\n  n as nn,\n  b as isPlainObject,\n  p as parseRoomAuthToken,\n  c as isTokenExpired,\n  d as isSameNodeOrChildOf,\n  L as LiveObject,\n  g as getTreesDiffOperations,\n  O as OpSource,\n  e as OpCode,\n  f as isLiveList,\n  t as tryParseJson,\n  h as isJsonArray,\n  j as compact,\n  k as isRootCrdt,\n  l as isJsonObject,\n  o as errorIf,\n} from \"./shared.mjs\";\nexport { q as LiveList, s as LiveMap, L as LiveObject } from \"./shared.mjs\";\nconst BACKOFF_RETRY_DELAYS = [250, 500, 1e3, 2e3, 4e3, 8e3, 1e4],\n  BACKOFF_RETRY_DELAYS_SLOW = [2e3, 3e4, 6e4, 3e5];\nfunction makeOthers(userMap) {\n  const users = Object.values(userMap).map((user) =>\n    __rest(user, [\"_hasReceivedInitialPresence\"])\n  );\n  return {\n    get count() {\n      return users.length;\n    },\n    [Symbol.iterator]: () => users[Symbol.iterator](),\n    map: (callback) => users.map(callback),\n    toArray: () => users,\n  };\n}\nfunction makeStateMachine(state, context, mockedEffects) {\n  const effects = mockedEffects || {\n    authenticate(auth, createWebSocket) {\n      const rawToken = state.token,\n        parsedToken = null !== rawToken && parseRoomAuthToken(rawToken);\n      if (!parsedToken || isTokenExpired(parsedToken))\n        return auth(context.roomId)\n          .then(({ token: token }) => {\n            if (\"authenticating\" !== state.connection.state) return;\n            authenticationSuccess(\n              parseRoomAuthToken(token),\n              createWebSocket(token)\n            ),\n              (state.token = token);\n          })\n          .catch((er) =>\n            (function (error) {\n              \"production\" !== process.env.NODE_ENV &&\n                console.error(\"Call to authentication endpoint failed\", error);\n              (state.token = null),\n                updateConnection({ state: \"unavailable\" }),\n                state.numberOfRetry++,\n                (state.timeoutHandles.reconnect = effects.scheduleReconnect(\n                  getRetryDelay()\n                ));\n            })(er instanceof Error ? er : new Error(String(er)))\n          );\n      authenticationSuccess(parsedToken, createWebSocket(rawToken));\n    },\n    send(messageOrMessages) {\n      if (null == state.socket)\n        throw new Error(\"Can't send message if socket is null\");\n      state.socket.send(JSON.stringify(messageOrMessages));\n    },\n    delayFlush: (delay) => setTimeout(tryFlushing, delay),\n    startHeartbeatInterval: () => setInterval(heartbeat, 3e4),\n    schedulePongTimeout: () => setTimeout(pongTimeout, 2e3),\n    scheduleReconnect: (delay) => setTimeout(connect, delay),\n  };\n  function genericSubscribe(callback) {\n    return (\n      state.listeners.storage.push(callback),\n      () => remove(state.listeners.storage, callback)\n    );\n  }\n  function createOrUpdateRootFromMessage(message) {\n    if (0 === message.items.length)\n      throw new Error(\"Internal error: cannot load storage without items\");\n    state.root\n      ? (function (items) {\n          if (!state.root) return;\n          const currentItems = new Map();\n          state.items.forEach((liveCrdt, id) => {\n            currentItems.set(id, liveCrdt._toSerializedCrdt());\n          });\n          const ops = getTreesDiffOperations(currentItems, new Map(items));\n          notify(apply(ops, !1).updates);\n        })(message.items)\n      : (state.root = (function (items) {\n          const [root, parentToChildren] = (function (items) {\n            const parentToChildren = new Map();\n            let root = null;\n            for (const [id, crdt] of items)\n              if (isRootCrdt(crdt)) root = [id, crdt];\n              else {\n                const tuple = [id, crdt],\n                  children = parentToChildren.get(crdt.parentId);\n                null != children\n                  ? children.push(tuple)\n                  : parentToChildren.set(crdt.parentId, [tuple]);\n              }\n            if (null == root) throw new Error(\"Root can't be null\");\n            return [root, parentToChildren];\n          })(items);\n          return LiveObject._deserialize(root, parentToChildren, {\n            getItem: getItem,\n            addItem: addItem,\n            deleteItem: deleteItem,\n            generateId: generateId,\n            generateOpId: generateOpId,\n            dispatch: storageDispatch,\n            roomId: context.roomId,\n          });\n        })(message.items));\n    for (const key in state.defaultStorageRoot)\n      null == state.root.get(key) &&\n        state.root.set(key, state.defaultStorageRoot[key]);\n  }\n  function addItem(id, liveItem) {\n    state.items.set(id, liveItem);\n  }\n  function deleteItem(id) {\n    state.items.delete(id);\n  }\n  function getItem(id) {\n    return state.items.get(id);\n  }\n  function addToUndoStack(historyItem) {\n    state.undoStack.length >= 50 && state.undoStack.shift(),\n      state.isHistoryPaused\n        ? state.pausedHistory.unshift(...historyItem)\n        : state.undoStack.push(historyItem);\n  }\n  function storageDispatch(ops, reverse, storageUpdates) {\n    state.isBatching\n      ? (state.batch.ops.push(...ops),\n        storageUpdates.forEach((value, key) => {\n          state.batch.updates.storageUpdates.set(\n            key,\n            mergeStorageUpdates(\n              state.batch.updates.storageUpdates.get(key),\n              value\n            )\n          );\n        }),\n        state.batch.reverseOps.push(...reverse))\n      : (addToUndoStack(reverse),\n        (state.redoStack = []),\n        dispatch(ops),\n        notify({ storageUpdates: storageUpdates }));\n  }\n  function notify({\n    storageUpdates: storageUpdates = new Map(),\n    presence: presence = !1,\n    others: otherEvents = [],\n  }) {\n    if (otherEvents.length > 0) {\n      state.others = makeOthers(state.users);\n      for (const event of otherEvents)\n        for (const listener of state.listeners.others)\n          listener(state.others, event);\n    }\n    if (presence)\n      for (const listener of state.listeners[\"my-presence\"]) listener(state.me);\n    if (storageUpdates.size > 0)\n      for (const subscriber of state.listeners.storage)\n        subscriber(Array.from(storageUpdates.values()));\n  }\n  function getConnectionId() {\n    if (\n      \"open\" === state.connection.state ||\n      \"connecting\" === state.connection.state\n    )\n      return state.connection.id;\n    if (null !== state.lastConnectionId) return state.lastConnectionId;\n    throw new Error(\n      \"Internal. Tried to get connection id but connection was never open\"\n    );\n  }\n  function generateId() {\n    return `${getConnectionId()}:${state.clock++}`;\n  }\n  function generateOpId() {\n    return `${getConnectionId()}:${state.opClock++}`;\n  }\n  function apply(item, isLocal) {\n    const result = {\n        reverse: [],\n        updates: { storageUpdates: new Map(), presence: !1 },\n      },\n      createdNodeIds = new Set();\n    for (const op of item)\n      if (\"presence\" === op.type) {\n        const reverse = { type: \"presence\", data: {} };\n        for (const key in op.data) reverse.data[key] = state.me[key];\n        if (\n          ((state.me = Object.assign(Object.assign({}, state.me), op.data)),\n          null == state.buffer.presence)\n        )\n          state.buffer.presence = op.data;\n        else\n          for (const key in op.data) state.buffer.presence[key] = op.data[key];\n        result.reverse.unshift(reverse), (result.updates.presence = !0);\n      } else {\n        let source;\n        if ((op.opId || (op.opId = generateOpId()), isLocal))\n          source = OpSource.UNDOREDO_RECONNECT;\n        else {\n          source = state.offlineOperations.delete(nn(op.opId))\n            ? OpSource.ACK\n            : OpSource.REMOTE;\n        }\n        const applyOpResult = applyOp(op, source);\n        if (applyOpResult.modified) {\n          const parentId =\n            \"HasParent\" === applyOpResult.modified.node.parent.type\n              ? nn(\n                  applyOpResult.modified.node.parent.node._id,\n                  \"Expected parent node to have an ID\"\n                )\n              : void 0;\n          (parentId && createdNodeIds.has(parentId)) ||\n            (result.updates.storageUpdates.set(\n              nn(applyOpResult.modified.node._id),\n              mergeStorageUpdates(\n                result.updates.storageUpdates.get(\n                  nn(applyOpResult.modified.node._id)\n                ),\n                applyOpResult.modified\n              )\n            ),\n            result.reverse.unshift(...applyOpResult.reverse)),\n            (op.type !== OpCode.CREATE_LIST &&\n              op.type !== OpCode.CREATE_MAP &&\n              op.type !== OpCode.CREATE_OBJECT) ||\n              createdNodeIds.add(nn(applyOpResult.modified.node._id));\n        }\n      }\n    return result;\n  }\n  function applyOp(op, source) {\n    switch (op.type) {\n      case OpCode.DELETE_OBJECT_KEY:\n      case OpCode.UPDATE_OBJECT:\n      case OpCode.DELETE_CRDT: {\n        const item = state.items.get(op.id);\n        return null == item\n          ? { modified: !1 }\n          : item._apply(op, source === OpSource.UNDOREDO_RECONNECT);\n      }\n      case OpCode.SET_PARENT_KEY: {\n        const item = state.items.get(op.id);\n        return null == item\n          ? { modified: !1 }\n          : \"HasParent\" === item.parent.type && isLiveList(item.parent.node)\n          ? item.parent.node._setChildKey(op.parentKey, item, source)\n          : { modified: !1 };\n      }\n      case OpCode.CREATE_OBJECT:\n      case OpCode.CREATE_LIST:\n      case OpCode.CREATE_MAP:\n      case OpCode.CREATE_REGISTER: {\n        if (void 0 === op.parentId) return { modified: !1 };\n        const parent = state.items.get(op.parentId);\n        return null == parent\n          ? { modified: !1 }\n          : parent._attachChild(op, source);\n      }\n    }\n  }\n  function connect() {\n    var _a, _b, _c, _d;\n    if (\n      \"closed\" !== state.connection.state &&\n      \"unavailable\" !== state.connection.state\n    )\n      return null;\n    const auth = (function (authentication, fetchPolyfill) {\n        if (\"public\" === authentication.type) {\n          if (\"undefined\" == typeof window && null == fetchPolyfill)\n            throw new Error(\n              \"To use Liveblocks client in a non-dom environment with a publicApiKey, you need to provide a fetch polyfill.\"\n            );\n          return (room) =>\n            fetchAuthEndpoint(fetchPolyfill || fetch, authentication.url, {\n              room: room,\n              publicApiKey: authentication.publicApiKey,\n            });\n        }\n        if (\"private\" === authentication.type) {\n          if (\"undefined\" == typeof window && null == fetchPolyfill)\n            throw new Error(\n              \"To use Liveblocks client in a non-dom environment with a url as auth endpoint, you need to provide a fetch polyfill.\"\n            );\n          return (room) =>\n            fetchAuthEndpoint(fetchPolyfill || fetch, authentication.url, {\n              room: room,\n            });\n        }\n        if (\"custom\" === authentication.type) {\n          return (room) =>\n            authentication.callback(room).then((response) => {\n              if (!response || !response.token)\n                throw new Error(\n                  'Authentication error. We expect the authentication callback to return a token, but it does not. Hint: the return value should look like: { token: \"...\" }'\n                );\n              return response;\n            });\n        }\n        throw new Error(\"Internal error. Unexpected authentication type\");\n      })(\n        context.authentication,\n        null !==\n          (_b =\n            null === (_a = context.polyfills) || void 0 === _a\n              ? void 0\n              : _a.fetch) && void 0 !== _b\n          ? _b\n          : context.fetchPolyfill\n      ),\n      createWebSocket = (function (liveblocksServer, WebSocketPolyfill) {\n        if (\"undefined\" == typeof window && null == WebSocketPolyfill)\n          throw new Error(\n            \"To use Liveblocks client in a non-dom environment, you need to provide a WebSocket polyfill.\"\n          );\n        const ws = WebSocketPolyfill || WebSocket;\n        return (token) =>\n          new ws(`${liveblocksServer}/?token=${token}&version=0.17.7`);\n      })(\n        context.liveblocksServer,\n        null !==\n          (_d =\n            null === (_c = context.polyfills) || void 0 === _c\n              ? void 0\n              : _c.WebSocket) && void 0 !== _d\n          ? _d\n          : context.WebSocketPolyfill\n      );\n    updateConnection({ state: \"authenticating\" }),\n      effects.authenticate(auth, createWebSocket);\n  }\n  function authenticationSuccess(token, socket) {\n    socket.addEventListener(\"message\", onMessage),\n      socket.addEventListener(\"open\", onOpen),\n      socket.addEventListener(\"close\", onClose),\n      socket.addEventListener(\"error\", onError),\n      updateConnection({\n        state: \"connecting\",\n        id: token.actor,\n        userInfo: token.info,\n        userId: token.id,\n      }),\n      (state.idFactory = (function (connectionId) {\n        let count = 0;\n        return () => `${connectionId}:${count++}`;\n      })(token.actor)),\n      (state.socket = socket);\n  }\n  function onUpdatePresenceMessage(message) {\n    const user = state.users[message.actor];\n    if (\n      void 0 !== message.targetActor ||\n      null == user ||\n      user._hasReceivedInitialPresence\n    )\n      return (\n        (state.users[message.actor] =\n          null == user\n            ? {\n                connectionId: message.actor,\n                presence: message.data,\n                id: void 0,\n                info: void 0,\n                _hasReceivedInitialPresence: !0,\n              }\n            : {\n                id: user.id,\n                info: user.info,\n                connectionId: message.actor,\n                presence: Object.assign(\n                  Object.assign({}, user.presence),\n                  message.data\n                ),\n                _hasReceivedInitialPresence: !0,\n              }),\n        {\n          type: \"update\",\n          updates: message.data,\n          user: state.users[message.actor],\n        }\n      );\n  }\n  function onUserLeftMessage(message) {\n    const userLeftMessage = message,\n      user = state.users[userLeftMessage.actor];\n    return user\n      ? (delete state.users[userLeftMessage.actor],\n        { type: \"leave\", user: user })\n      : null;\n  }\n  function onRoomStateMessage(message) {\n    const newUsers = {};\n    for (const key in message.users) {\n      const connectionId = Number.parseInt(key),\n        user = message.users[key];\n      newUsers[connectionId] = {\n        connectionId: connectionId,\n        info: user.info,\n        id: user.id,\n      };\n    }\n    return (state.users = newUsers), { type: \"reset\" };\n  }\n  function onEvent(message) {\n    for (const listener of state.listeners.event)\n      listener({ connectionId: message.actor, event: message.event });\n  }\n  function onUserJoinedMessage(message) {\n    return (\n      (state.users[message.actor] = {\n        connectionId: message.actor,\n        info: message.info,\n        id: message.id,\n        _hasReceivedInitialPresence: !0,\n      }),\n      state.me &&\n        (state.buffer.messages.push({\n          type: ClientMsgCode.UPDATE_PRESENCE,\n          data: state.me,\n          targetActor: message.actor,\n        }),\n        tryFlushing()),\n      { type: \"enter\", user: state.users[message.actor] }\n    );\n  }\n  function parseServerMessage(data) {\n    return isJsonObject(data) ? data : null;\n  }\n  function onMessage(event) {\n    if (\"pong\" === event.data)\n      return void clearTimeout(state.timeoutHandles.pongTimeout);\n    const messages = (function (text) {\n      const data = tryParseJson(text);\n      return void 0 === data\n        ? null\n        : isJsonArray(data)\n        ? compact(data.map((item) => parseServerMessage(item)))\n        : compact([parseServerMessage(data)]);\n    })(event.data);\n    if (null === messages || 0 === messages.length) return;\n    const updates = { storageUpdates: new Map(), others: [] };\n    for (const message of messages)\n      switch (message.type) {\n        case ServerMsgCode.USER_JOINED:\n          updates.others.push(onUserJoinedMessage(message));\n          break;\n        case ServerMsgCode.UPDATE_PRESENCE: {\n          const othersPresenceUpdate = onUpdatePresenceMessage(message);\n          othersPresenceUpdate && updates.others.push(othersPresenceUpdate);\n          break;\n        }\n        case ServerMsgCode.BROADCASTED_EVENT:\n          onEvent(message);\n          break;\n        case ServerMsgCode.USER_LEFT: {\n          const event = onUserLeftMessage(message);\n          event && updates.others.push(event);\n          break;\n        }\n        case ServerMsgCode.ROOM_STATE:\n          updates.others.push(onRoomStateMessage(message));\n          break;\n        case ServerMsgCode.INITIAL_STORAGE_STATE: {\n          const offlineOps = new Map(state.offlineOperations);\n          createOrUpdateRootFromMessage(message),\n            applyAndSendOfflineOps(offlineOps),\n            null == _getInitialStateResolver || _getInitialStateResolver();\n          break;\n        }\n        case ServerMsgCode.UPDATE_STORAGE:\n          apply(message.ops, !1).updates.storageUpdates.forEach(\n            (value, key) => {\n              updates.storageUpdates.set(\n                key,\n                mergeStorageUpdates(updates.storageUpdates.get(key), value)\n              );\n            }\n          );\n          break;\n      }\n    notify(updates);\n  }\n  function onClose(event) {\n    if (\n      ((state.socket = null),\n      clearTimeout(state.timeoutHandles.pongTimeout),\n      clearInterval(state.intervalHandles.heartbeat),\n      state.timeoutHandles.flush && clearTimeout(state.timeoutHandles.flush),\n      clearTimeout(state.timeoutHandles.reconnect),\n      (state.users = {}),\n      notify({ others: [{ type: \"reset\" }] }),\n      event.code >= 4e3 && event.code <= 4100)\n    ) {\n      updateConnection({ state: \"failed\" });\n      const error = new LiveblocksError(event.reason, event.code);\n      for (const listener of state.listeners.error) listener(error);\n      const delay = getRetryDelay(!0);\n      state.numberOfRetry++,\n        \"production\" !== process.env.NODE_ENV &&\n          console.error(\n            `Connection to Liveblocks websocket server closed. Reason: ${error.message} (code: ${error.code}). Retrying in ${delay}ms.`\n          ),\n        updateConnection({ state: \"unavailable\" }),\n        (state.timeoutHandles.reconnect = effects.scheduleReconnect(delay));\n    } else if (event.code === WebsocketCloseCodes.CLOSE_WITHOUT_RETRY)\n      updateConnection({ state: \"closed\" });\n    else {\n      const delay = getRetryDelay();\n      state.numberOfRetry++,\n        \"production\" !== process.env.NODE_ENV &&\n          console.warn(\n            `Connection to Liveblocks websocket server closed (code: ${event.code}). Retrying in ${delay}ms.`\n          ),\n        updateConnection({ state: \"unavailable\" }),\n        (state.timeoutHandles.reconnect = effects.scheduleReconnect(delay));\n    }\n  }\n  function updateConnection(connection) {\n    state.connection = connection;\n    for (const listener of state.listeners.connection)\n      listener(connection.state);\n  }\n  function getRetryDelay(slow = !1) {\n    return slow\n      ? BACKOFF_RETRY_DELAYS_SLOW[\n          state.numberOfRetry < BACKOFF_RETRY_DELAYS_SLOW.length\n            ? state.numberOfRetry\n            : BACKOFF_RETRY_DELAYS_SLOW.length - 1\n        ]\n      : BACKOFF_RETRY_DELAYS[\n          state.numberOfRetry < BACKOFF_RETRY_DELAYS.length\n            ? state.numberOfRetry\n            : BACKOFF_RETRY_DELAYS.length - 1\n        ];\n  }\n  function onError() {}\n  function onOpen() {\n    clearInterval(state.intervalHandles.heartbeat),\n      (state.intervalHandles.heartbeat = effects.startHeartbeatInterval()),\n      \"connecting\" === state.connection.state &&\n        (updateConnection(\n          Object.assign(Object.assign({}, state.connection), { state: \"open\" })\n        ),\n        (state.numberOfRetry = 0),\n        void 0 !== state.lastConnectionId &&\n          ((state.buffer.presence = state.me), tryFlushing()),\n        (state.lastConnectionId = state.connection.id),\n        state.root &&\n          state.buffer.messages.push({ type: ClientMsgCode.FETCH_STORAGE }),\n        tryFlushing());\n  }\n  function heartbeat() {\n    null != state.socket &&\n      (clearTimeout(state.timeoutHandles.pongTimeout),\n      (state.timeoutHandles.pongTimeout = effects.schedulePongTimeout()),\n      state.socket.readyState === state.socket.OPEN &&\n        state.socket.send(\"ping\"));\n  }\n  function pongTimeout() {\n    reconnect();\n  }\n  function reconnect() {\n    state.socket &&\n      (state.socket.removeEventListener(\"open\", onOpen),\n      state.socket.removeEventListener(\"message\", onMessage),\n      state.socket.removeEventListener(\"close\", onClose),\n      state.socket.removeEventListener(\"error\", onError),\n      state.socket.close(),\n      (state.socket = null)),\n      updateConnection({ state: \"unavailable\" }),\n      clearTimeout(state.timeoutHandles.pongTimeout),\n      state.timeoutHandles.flush && clearTimeout(state.timeoutHandles.flush),\n      clearTimeout(state.timeoutHandles.reconnect),\n      clearInterval(state.intervalHandles.heartbeat),\n      connect();\n  }\n  function applyAndSendOfflineOps(offlineOps) {\n    if (0 === offlineOps.size) return;\n    const messages = [],\n      ops = Array.from(offlineOps.values()),\n      result = apply(ops, !0);\n    messages.push({ type: ClientMsgCode.UPDATE_STORAGE, ops: ops }),\n      notify(result.updates),\n      effects.send(messages);\n  }\n  function tryFlushing() {\n    const storageOps = state.buffer.storageOperations;\n    if (\n      (storageOps.length > 0 &&\n        storageOps.forEach((op) => {\n          state.offlineOperations.set(nn(op.opId), op);\n        }),\n      null == state.socket || state.socket.readyState !== state.socket.OPEN)\n    )\n      return void (state.buffer.storageOperations = []);\n    const now = Date.now();\n    if (now - state.lastFlushTime > context.throttleDelay) {\n      const messages = (function (state) {\n        const messages = [];\n        state.buffer.presence &&\n          messages.push({\n            type: ClientMsgCode.UPDATE_PRESENCE,\n            data: state.buffer.presence,\n          });\n        for (const event of state.buffer.messages) messages.push(event);\n        state.buffer.storageOperations.length > 0 &&\n          messages.push({\n            type: ClientMsgCode.UPDATE_STORAGE,\n            ops: state.buffer.storageOperations,\n          });\n        return messages;\n      })(state);\n      if (0 === messages.length) return;\n      effects.send(messages),\n        (state.buffer = {\n          messages: [],\n          storageOperations: [],\n          presence: null,\n        }),\n        (state.lastFlushTime = now);\n    } else\n      null != state.timeoutHandles.flush &&\n        clearTimeout(state.timeoutHandles.flush),\n        (state.timeoutHandles.flush = effects.delayFlush(\n          context.throttleDelay - (now - state.lastFlushTime)\n        ));\n  }\n  function getPresence() {\n    return state.me;\n  }\n  function dispatch(ops) {\n    state.buffer.storageOperations.push(...ops), tryFlushing();\n  }\n  let _getInitialStatePromise = null,\n    _getInitialStateResolver = null;\n  return {\n    onClose: onClose,\n    onMessage: onMessage,\n    authenticationSuccess: authenticationSuccess,\n    heartbeat: heartbeat,\n    onNavigatorOnline: function () {\n      \"unavailable\" === state.connection.state && reconnect();\n    },\n    simulateSocketClose: function () {\n      state.socket && (state.socket = null);\n    },\n    simulateSendCloseEvent: function (event) {\n      onClose(event);\n    },\n    onVisibilityChange: function (visibilityState) {\n      \"visible\" === visibilityState &&\n        \"open\" === state.connection.state &&\n        heartbeat();\n    },\n    getUndoStack: () => state.undoStack,\n    getItemsCount: () => state.items.size,\n    connect: connect,\n    disconnect: function () {\n      state.socket &&\n        (state.socket.removeEventListener(\"open\", onOpen),\n        state.socket.removeEventListener(\"message\", onMessage),\n        state.socket.removeEventListener(\"close\", onClose),\n        state.socket.removeEventListener(\"error\", onError),\n        state.socket.close(),\n        (state.socket = null)),\n        updateConnection({ state: \"closed\" }),\n        state.timeoutHandles.flush && clearTimeout(state.timeoutHandles.flush),\n        clearTimeout(state.timeoutHandles.reconnect),\n        clearTimeout(state.timeoutHandles.pongTimeout),\n        clearInterval(state.intervalHandles.heartbeat),\n        (state.users = {}),\n        notify({ others: [{ type: \"reset\" }] }),\n        (function () {\n          for (const key in state.listeners) state.listeners[key] = [];\n        })();\n    },\n    subscribe: function (first, second, options) {\n      if (void 0 === second || \"function\" == typeof first) {\n        if (\"function\" == typeof first) {\n          return genericSubscribe(first);\n        }\n        throw new Error(\"Please specify a listener callback\");\n      }\n      if (isLiveNode(first)) {\n        const node = first;\n        if (null == options ? void 0 : options.isDeep) {\n          return (function (node, callback) {\n            return genericSubscribe((updates) => {\n              const relatedUpdates = updates.filter((update) =>\n                isSameNodeOrChildOf(update.node, node)\n              );\n              relatedUpdates.length > 0 && callback(relatedUpdates);\n            });\n          })(node, second);\n        }\n        return (function (node, callback) {\n          return genericSubscribe((updates) => {\n            for (const update of updates)\n              update.node._id === node._id && callback(update.node);\n          });\n        })(node, second);\n      }\n      if (!isRoomEventName(first))\n        throw new Error(`\"${first}\" is not a valid event name`);\n      const eventName = first,\n        eventListener = second;\n      return (\n        state.listeners[eventName].push(eventListener),\n        () => {\n          const callbacks = state.listeners[eventName];\n          remove(callbacks, eventListener);\n        }\n      );\n    },\n    updatePresence: function (overrides, options) {\n      const oldValues = {};\n      null == state.buffer.presence && (state.buffer.presence = {});\n      for (const key in overrides) {\n        const overrideValue = overrides[key];\n        void 0 !== overrideValue &&\n          ((state.buffer.presence[key] = overrideValue),\n          (oldValues[key] = state.me[key]));\n      }\n      (state.me = Object.assign(Object.assign({}, state.me), overrides)),\n        state.isBatching\n          ? ((null == options ? void 0 : options.addToHistory) &&\n              state.batch.reverseOps.push({\n                type: \"presence\",\n                data: oldValues,\n              }),\n            (state.batch.updates.presence = !0))\n          : (tryFlushing(),\n            (null == options ? void 0 : options.addToHistory) &&\n              addToUndoStack([{ type: \"presence\", data: oldValues }]),\n            notify({ presence: !0 }));\n    },\n    broadcastEvent: function (\n      event,\n      options = { shouldQueueEventIfNotReady: !1 }\n    ) {\n      (null == state.socket && 0 == options.shouldQueueEventIfNotReady) ||\n        (state.buffer.messages.push({\n          type: ClientMsgCode.BROADCAST_EVENT,\n          event: event,\n        }),\n        tryFlushing());\n    },\n    batch: function (callback) {\n      if (state.isBatching)\n        throw new Error(\"batch should not be called during a batch\");\n      state.isBatching = !0;\n      try {\n        callback();\n      } finally {\n        (state.isBatching = !1),\n          state.batch.reverseOps.length > 0 &&\n            addToUndoStack(state.batch.reverseOps),\n          state.batch.ops.length > 0 && (state.redoStack = []),\n          state.batch.ops.length > 0 && dispatch(state.batch.ops),\n          notify(state.batch.updates),\n          (state.batch = {\n            ops: [],\n            reverseOps: [],\n            updates: { others: [], storageUpdates: new Map(), presence: !1 },\n          }),\n          tryFlushing();\n      }\n    },\n    undo: function () {\n      if (state.isBatching)\n        throw new Error(\"undo is not allowed during a batch\");\n      const historyItem = state.undoStack.pop();\n      if (null == historyItem) return;\n      state.isHistoryPaused = !1;\n      const result = apply(historyItem, !0);\n      notify(result.updates), state.redoStack.push(result.reverse);\n      for (const op of historyItem)\n        \"presence\" !== op.type && state.buffer.storageOperations.push(op);\n      tryFlushing();\n    },\n    redo: function () {\n      if (state.isBatching)\n        throw new Error(\"redo is not allowed during a batch\");\n      const historyItem = state.redoStack.pop();\n      if (null == historyItem) return;\n      state.isHistoryPaused = !1;\n      const result = apply(historyItem, !0);\n      notify(result.updates), state.undoStack.push(result.reverse);\n      for (const op of historyItem)\n        \"presence\" !== op.type && state.buffer.storageOperations.push(op);\n      tryFlushing();\n    },\n    pauseHistory: function () {\n      (state.pausedHistory = []), (state.isHistoryPaused = !0);\n    },\n    resumeHistory: function () {\n      (state.isHistoryPaused = !1),\n        state.pausedHistory.length > 0 && addToUndoStack(state.pausedHistory),\n        (state.pausedHistory = []);\n    },\n    getStorage: function () {\n      return state.root\n        ? new Promise((resolve) => resolve({ root: state.root }))\n        : (null == _getInitialStatePromise &&\n            (state.buffer.messages.push({ type: ClientMsgCode.FETCH_STORAGE }),\n            tryFlushing(),\n            (_getInitialStatePromise = new Promise(\n              (resolve) => (_getInitialStateResolver = resolve)\n            ))),\n          _getInitialStatePromise.then(() => ({ root: nn(state.root) })));\n    },\n    selectors: {\n      getConnectionState: function () {\n        return state.connection.state;\n      },\n      getSelf: function () {\n        return \"open\" === state.connection.state ||\n          \"connecting\" === state.connection.state\n          ? {\n              connectionId: state.connection.id,\n              id: state.connection.userId,\n              info: state.connection.userInfo,\n              presence: getPresence(),\n            }\n          : null;\n      },\n      getPresence: getPresence,\n      getOthers: function () {\n        return state.others;\n      },\n    },\n  };\n}\nfunction createRoom(options, context) {\n  var _a, _b;\n  const initialPresence =\n      null !== (_a = options.initialPresence) && void 0 !== _a\n        ? _a\n        : options.defaultPresence,\n    initialStorage =\n      null !== (_b = options.initialStorage) && void 0 !== _b\n        ? _b\n        : options.defaultStorageRoot,\n    machine = makeStateMachine(\n      (function (initialPresence, initialStorage) {\n        return {\n          connection: { state: \"closed\" },\n          token: null,\n          lastConnectionId: null,\n          socket: null,\n          listeners: {\n            event: [],\n            others: [],\n            \"my-presence\": [],\n            error: [],\n            connection: [],\n            storage: [],\n          },\n          numberOfRetry: 0,\n          lastFlushTime: 0,\n          timeoutHandles: { flush: null, reconnect: 0, pongTimeout: 0 },\n          buffer: {\n            presence: null == initialPresence ? {} : initialPresence,\n            messages: [],\n            storageOperations: [],\n          },\n          intervalHandles: { heartbeat: 0 },\n          me: null == initialPresence ? {} : initialPresence,\n          users: {},\n          others: makeOthers({}),\n          defaultStorageRoot: initialStorage,\n          idFactory: null,\n          clock: 0,\n          opClock: 0,\n          items: new Map(),\n          root: void 0,\n          undoStack: [],\n          redoStack: [],\n          isHistoryPaused: !1,\n          pausedHistory: [],\n          isBatching: !1,\n          batch: {\n            ops: [],\n            updates: { storageUpdates: new Map(), presence: !1, others: [] },\n            reverseOps: [],\n          },\n          offlineOperations: new Map(),\n        };\n      })(\n        \"function\" == typeof initialPresence\n          ? initialPresence(context.roomId)\n          : initialPresence,\n        \"function\" == typeof initialStorage\n          ? initialStorage(context.roomId)\n          : initialStorage\n      ),\n      context\n    ),\n    room = {\n      id: context.roomId,\n      getConnectionState: machine.selectors.getConnectionState,\n      getSelf: machine.selectors.getSelf,\n      subscribe: machine.subscribe,\n      getPresence: machine.selectors.getPresence,\n      updatePresence: machine.updatePresence,\n      getOthers: machine.selectors.getOthers,\n      broadcastEvent: machine.broadcastEvent,\n      getStorage: machine.getStorage,\n      batch: machine.batch,\n      history: {\n        undo: machine.undo,\n        redo: machine.redo,\n        pause: machine.pauseHistory,\n        resume: machine.resumeHistory,\n      },\n      __INTERNAL_DO_NOT_USE: {\n        simulateCloseWebsocket: machine.simulateSocketClose,\n        simulateSendCloseEvent: machine.simulateSendCloseEvent,\n      },\n    };\n  return {\n    connect: machine.connect,\n    disconnect: machine.disconnect,\n    onNavigatorOnline: machine.onNavigatorOnline,\n    onVisibilityChange: machine.onVisibilityChange,\n    room: room,\n  };\n}\nclass LiveblocksError extends Error {\n  constructor(message, code) {\n    super(message), (this.code = code);\n  }\n}\nfunction fetchAuthEndpoint(fetch, endpoint, body) {\n  return fetch(endpoint, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(body),\n  })\n    .then((res) => {\n      if (!res.ok)\n        throw new AuthenticationError(\n          `Expected a status 200 but got ${res.status} when doing a POST request on \"${endpoint}\"`\n        );\n      return res.json().catch((er) => {\n        throw new AuthenticationError(\n          `Expected a JSON response when doing a POST request on \"${endpoint}\". ${er}`\n        );\n      });\n    })\n    .then((data) => {\n      if (!isPlainObject(data) || \"string\" != typeof data.token)\n        throw new AuthenticationError(\n          `Expected a JSON response of the form \\`{ token: \"...\" }\\` when doing a POST request on \"${endpoint}\", but got ${JSON.stringify(\n            data\n          )}`\n        );\n      const { token: token } = data;\n      return { token: token };\n    });\n}\nclass AuthenticationError extends Error {\n  constructor(message) {\n    super(message);\n  }\n}\nfunction createClient(options) {\n  const clientOptions = options,\n    throttleDelay = (function (options) {\n      if (void 0 === options.throttle) return 100;\n      if (\n        \"number\" != typeof options.throttle ||\n        options.throttle < 80 ||\n        options.throttle > 1e3\n      )\n        throw new Error(\"throttle should be a number between 80 and 1000.\");\n      return options.throttle;\n    })(options),\n    rooms = new Map();\n  return (\n    \"undefined\" != typeof window &&\n      void 0 !== window.addEventListener &&\n      window.addEventListener(\"online\", () => {\n        for (const [, room] of rooms) room.onNavigatorOnline();\n      }),\n    \"undefined\" != typeof document &&\n      document.addEventListener(\"visibilitychange\", () => {\n        for (const [, room] of rooms)\n          room.onVisibilityChange(document.visibilityState);\n      }),\n    {\n      getRoom: function (roomId) {\n        const internalRoom = rooms.get(roomId);\n        return internalRoom ? internalRoom.room : null;\n      },\n      enter: function (roomId, options = {}) {\n        var _a;\n        let internalRoom = rooms.get(roomId);\n        if (internalRoom) return internalRoom.room;\n        if (\n          (errorIf(\n            options.defaultPresence,\n            \"Argument `defaultPresence` will be removed in @liveblocks/client 0.18. Please use `initialPresence` instead. For more info, see https://bit.ly/3Niy5aP\"\n          ),\n          errorIf(\n            options.defaultStorageRoot,\n            \"Argument `defaultStorageRoot` will be removed in @liveblocks/client 0.18. Please use `initialStorage` instead. For more info, see https://bit.ly/3Niy5aP\"\n          ),\n          (internalRoom = createRoom(\n            {\n              initialPresence: options.initialPresence,\n              initialStorage: options.initialStorage,\n              defaultPresence: options.defaultPresence,\n              defaultStorageRoot: options.defaultStorageRoot,\n            },\n            {\n              roomId: roomId,\n              throttleDelay: throttleDelay,\n              polyfills: clientOptions.polyfills,\n              WebSocketPolyfill: clientOptions.WebSocketPolyfill,\n              fetchPolyfill: clientOptions.fetchPolyfill,\n              liveblocksServer:\n                (null == clientOptions\n                  ? void 0\n                  : clientOptions.liveblocksServer) ||\n                \"wss://liveblocks.net/v6\",\n              authentication: prepareAuthentication(clientOptions),\n            }\n          )),\n          rooms.set(roomId, internalRoom),\n          !options.DO_NOT_USE_withoutConnecting)\n        ) {\n          if (\"undefined\" == typeof atob) {\n            if (\n              null ==\n              (null === (_a = clientOptions.polyfills) || void 0 === _a\n                ? void 0\n                : _a.atob)\n            )\n              throw new Error(\n                \"You need to polyfill atob to use the client in your environment. Please follow the instructions at https://liveblocks.io/docs/errors/liveblocks-client/atob-polyfill\"\n              );\n            global.atob = clientOptions.polyfills.atob;\n          }\n          internalRoom.connect();\n        }\n        return internalRoom.room;\n      },\n      leave: function (roomId) {\n        const room = rooms.get(roomId);\n        room && (room.disconnect(), rooms.delete(roomId));\n      },\n    }\n  );\n}\nfunction prepareAuthentication(clientOptions) {\n  const { publicApiKey: publicApiKey, authEndpoint: authEndpoint } =\n    clientOptions;\n  if (void 0 !== authEndpoint && void 0 !== publicApiKey)\n    throw new Error(\n      \"You cannot use both publicApiKey and authEndpoint. Please use either publicApiKey or authEndpoint, but not both. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClient\"\n    );\n  if (\"string\" == typeof publicApiKey) {\n    if (publicApiKey.startsWith(\"sk_\"))\n      throw new Error(\n        \"Invalid publicApiKey. You are using the secret key which is not supported. Please use the public key instead. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClientPublicKey\"\n      );\n    if (!publicApiKey.startsWith(\"pk_\"))\n      throw new Error(\n        \"Invalid key. Please use the public key format: pk_<public key>. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClientPublicKey\"\n      );\n    return {\n      type: \"public\",\n      publicApiKey: publicApiKey,\n      url:\n        clientOptions.publicAuthorizeEndpoint ||\n        \"https://liveblocks.io/api/public/authorize\",\n    };\n  }\n  if (\"string\" == typeof authEndpoint)\n    return { type: \"private\", url: authEndpoint };\n  if (\"function\" == typeof authEndpoint)\n    return { type: \"custom\", callback: authEndpoint };\n  if (void 0 !== authEndpoint)\n    throw new Error(\n      \"authEndpoint must be a string or a function. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClientAuthEndpoint\"\n    );\n  throw new Error(\n    \"Invalid Liveblocks client options. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClient\"\n  );\n}\nexport { createClient };\n"],
  "mappings": ";AAAA,IAAM,8BAA8B,oBAAI,IAAI;AAC5C,SAAS,UAAU,SAAS,MAAM,SAAS;AACzC,EACG,4BAA4B,IAAI,GAAG,MACjC,4BAA4B,IAAI,GAAG,GACpC,QAAQ,MAAM,wBAAwB,SAAS;AACrD;AAIA,SAAS,gBAAgB,SAAS;AAChC,MAAI,MAAuC;AACzC,UAAM,aAAa,IAAI,MAAM,OAAO;AACpC,UAAQ,WAAW,OAAO,eAAgB;AAAA,EAC5C;AACF;AACA,SAAS,QAAQ,WAAW,SAAS;AACnC,EACE,aACA,gBAAgB,OAAO;AAC3B;AACA,SAAS,OAAO,GAAG,GAAG;AACpB,MAAI,IAAI,CAAC;AACT,WAAS,KAAK;AACZ,WAAO,UAAU,eAAe,KAAK,GAAG,CAAC,KACvC,EAAE,QAAQ,CAAC,IAAI,MACd,EAAE,KAAK,EAAE;AACd,MAAI,QAAQ,KAAK,cAAc,OAAO,OAAO,uBAAuB;AAClE,QAAI,IAAI;AACR,SAAK,IAAI,OAAO,sBAAsB,CAAC,GAAG,IAAI,EAAE,QAAQ;AACtD,QAAE,QAAQ,EAAE,EAAE,IAAI,KAChB,OAAO,UAAU,qBAAqB,KAAK,GAAG,EAAE,EAAE,MACjD,EAAE,EAAE,MAAM,EAAE,EAAE;AAAA,EACrB;AACA,SAAO;AACT;AACA,SAAS,YAAY,QAAQ,QAAQ;AACnC,QAAM,IAAI,MAAM,MAAM;AACxB;AACA,SAAS,GAAG,OAAO,SAAS,qCAAqC;AAC/D,SACG,SAAU,WAAWA,SAAQ;AAC5B,QAA6C,CAAC,WAAW;AACvD,YAAM,MAAM,IAAI,MAAMA,OAAM;AAC5B,YAAQ,IAAI,OAAO,qBAAsB;AAAA,IAC3C;AAAA,EACF,EAAG,QAAQ,OAAO,MAAM,GACxB;AAEJ;AACA,IAAI;AAAJ,IACE;AADF,IAEE;AAFF,IAGE;AAHF,IAIE;AAJF,IAKE;AACF,SAAS,WAAW,MAAM;AACxB,SAAO,KAAK,SAAS,SAAS,UAAU,CAAC,YAAY,IAAI;AAC3D;AACA,SAAS,YAAY,MAAM;AACzB,SAAO,WAAW,KAAK,YAAY,WAAW,KAAK;AACrD;AACA,SAAS,gBAAgB,OAAO;AAC9B,SACE,kBAAkB,SAClB,aAAa,SACb,YAAY,SACZ,YAAY,SACZ,iBAAiB;AAErB;AACA,SAAS,UAAU,MAAM,KAAK;AAC5B,SAAO,OAAO,OAAO,EAAE,MAAM,aAAa,MAAY,IAAS,CAAC;AAClE;AACA,CAAE,SAAUC,gBAAe;AACzB,EAACA,eAAeA,eAAc,kBAAkB,OAAQ,mBACrDA,eAAeA,eAAc,kBAAkB,OAAQ,mBACvDA,eAAeA,eAAc,gBAAgB,OAAQ,iBACrDA,eAAeA,eAAc,iBAAiB,OAAQ;AAC3D,EAAG,kBAAkB,gBAAgB,CAAC,EAAE,GACrC,SAAUC,SAAQ;AACjB,EAACA,QAAQA,QAAO,OAAO,KAAM,QAC1BA,QAAQA,QAAO,iBAAiB,KAAM,kBACtCA,QAAQA,QAAO,cAAc,KAAM,eACnCA,QAAQA,QAAO,gBAAgB,KAAM,iBACrCA,QAAQA,QAAO,gBAAgB,KAAM,iBACrCA,QAAQA,QAAO,cAAc,KAAM,eACnCA,QAAQA,QAAO,oBAAoB,KAAM,qBACzCA,QAAQA,QAAO,aAAa,KAAM,cAClCA,QAAQA,QAAO,kBAAkB,KAAM;AAC5C,EAAG,WAAW,SAAS,CAAC,EAAE,GACzB,SAAUC,WAAU;AACnB,EAACA,UAAUA,UAAS,SAAS,KAAM,UAChCA,UAAUA,UAAS,OAAO,KAAM,QAChCA,UAAUA,UAAS,MAAM,KAAM,OAC/BA,UAAUA,UAAS,WAAW,KAAM;AACzC,EAAG,aAAa,WAAW,CAAC,EAAE,GAC7B,SAAUC,gBAAe;AACxB,EAACA,eAAeA,eAAc,kBAAkB,OAAQ,mBACrDA,eAAeA,eAAc,cAAc,OAAQ,eACnDA,eAAeA,eAAc,YAAY,OAAQ,aACjDA,eAAeA,eAAc,oBAAoB,OAChD,qBACDA,eAAeA,eAAc,aAAa,OAAQ,cAClDA,eAAeA,eAAc,wBAAwB,OACpD,yBACDA,eAAeA,eAAc,iBAAiB,OAAQ;AAC3D,EAAG,kBAAkB,gBAAgB,CAAC,EAAE,GACvC,SAAUC,sBAAqB;AAC9B,EAACA,qBAAqBA,qBAAoB,iBAAiB,QACzD,kBACCA,qBAAqBA,qBAAoB,yBAAyB,OACjE,0BACDA,qBAAqBA,qBAAoB,cAAc,QACtD,eACDA,qBACEA,qBAAoB,qCAAqC,QACxD,sCACHA,qBACEA,qBAAoB,uCAAuC,QAC1D,wCACHA,qBACEA,qBAAoB,yCAAyC,QAC5D,0CACHA,qBACEA,qBAAoB,gDAAgD,QACnE,iDACHA,qBAAqBA,qBAAoB,sBAAsB,QAC9D;AACN,EAAG,wBAAwB,sBAAsB,CAAC,EAAE,GACnD,SAAUC,WAAU;AACnB,EAACA,UAAUA,UAAS,qBAAqB,KAAM,sBAC5CA,UAAUA,UAAS,SAAS,KAAM,UAClCA,UAAUA,UAAS,MAAM,KAAM;AACpC,EAAG,aAAa,WAAW,CAAC,EAAE;AAChC,IAAM,WAAW,OAAO,OAAO,EAAE,MAAM,WAAW,CAAC;AACnD,SAAS,SAAS,QAAQ;AACxB,SAAO,OAAO,OAAO,EAAE,MAAM,YAAY,OAAe,CAAC;AAC3D;AACA,IAAM,eAAN,MAAmB;AAAA,EACjB,cAAc;AACZ,SAAK,UAAU;AAAA,EACjB;AAAA,EACA,uBAAuB;AACrB,YAAQ,KAAK,OAAO;AAAA,WACb;AACH,eAAO,KAAK,OAAO;AAAA,WAChB;AACH,cAAM,IAAI,MAAM,uBAAuB;AAAA,WACpC;AACH,eAAO,KAAK,OAAO;AAAA;AAEnB,eAAO,YAAY,KAAK,QAAQ,eAAe;AAAA;AAAA,EAErD;AAAA,EACA,IAAI,OAAO;AACT,WAAO,KAAK;AAAA,EACd;AAAA,EACA,IAAI,SAAS;AACX,WAAO,KAAK,QAAQ,KAAK,MAAM,SAAS;AAAA,EAC1C;AAAA,EACA,IAAI,MAAM;AACR,WAAO,KAAK;AAAA,EACd;AAAA,EACA,IAAI,SAAS;AACX,WAAO,KAAK;AAAA,EACd;AAAA,EACA,IAAI,cAAc;AAChB,YAAQ,KAAK,OAAO;AAAA,WACb;AACH,eAAO,KAAK,OAAO;AAAA,WAChB;AAAA,WACA;AACH,eAAO;AAAA;AAEP,eAAO,YAAY,KAAK,QAAQ,eAAe;AAAA;AAAA,EAErD;AAAA,EACA,IAAI,aAAa;AACf,YAAQ,KAAK,OAAO;AAAA,WACb;AACH,eAAO,KAAK,OAAO;AAAA,WAChB;AACH,eAAO;AAAA,WACJ;AACH,eAAO,KAAK,OAAO;AAAA;AAEnB,eAAO,YAAY,KAAK,QAAQ,eAAe;AAAA;AAAA,EAErD;AAAA,EACA,OAAO,IAAI,UAAU;AACnB,WAAO,GAAG,SAAS,OAAO,eAAe,gBAAgB,KAAK,OAAO,OACjE,KAAK,OAAO,KAAK,aAAa,IAAI,IAClC,EAAE,UAAU,MAAG;AAAA,EACrB;AAAA,EACA,eAAe,eAAe,cAAc;AAC1C,YAAQ,KAAK,OAAO;AAAA,WACb;AACH,YAAI,KAAK,OAAO,SAAS;AACvB,gBAAM,IAAI,MAAM,0CAA0C;AAC5D,eAAO,MAAM,KAAK,UAAU,UAAU,eAAe,YAAY;AAAA,WAC9D;AAAA,WACA;AACH,eAAO,MAAM,KAAK,UAAU,UAAU,eAAe,YAAY;AAAA;AAEjE,eAAO,YAAY,KAAK,QAAQ,eAAe;AAAA;AAAA,EAErD;AAAA,EACA,QAAQ,IAAI,KAAK;AACf,QAAI,KAAK,QAAQ,KAAK;AACpB,YAAM,IAAI,MAAM,2CAA2C;AAC7D,QAAI,QAAQ,IAAI,IAAI,GAAI,KAAK,OAAO,IAAM,KAAK,QAAQ;AAAA,EACzD;AAAA,EACA,UAAU;AACR,YACG,KAAK,SAAS,KAAK,QAAQ,KAAK,MAAM,WAAW,KAAK,IAAI,GAC3D,KAAK,OAAO;AAAA,WAEP;AACH,aAAK,UAAU,SAAS,KAAK,OAAO,GAAG;AACvC;AAAA,WACG;AACH,aAAK,UAAU;AACf;AAAA,WACG;AACH,aAAK,UAAU,SAAS,KAAK,OAAO,MAAM;AAC1C;AAAA;AAEA,oBAAY,KAAK,QAAQ,eAAe;AAAA;AAE5C,SAAK,QAAQ;AAAA,EACf;AACF;AACA,IAAM,eAAN,cAA2B,aAAa;AAAA,EACtC,YAAY,MAAM;AAChB,UAAM,GAAI,KAAK,QAAQ;AAAA,EACzB;AAAA,EACA,IAAI,OAAO;AACT,WAAO,KAAK;AAAA,EACd;AAAA,EACA,OAAO,aAAa,CAAC,IAAI,IAAI,GAAG,mBAAmB,KAAK;AACtD,UAAM,WAAW,IAAI,aAAa,KAAK,IAAI;AAC3C,WAAO,SAAS,QAAQ,IAAI,GAAG,GAAG;AAAA,EACpC;AAAA,EACA,WAAW,UAAU,WAAW,KAAK;AACnC,QAAI,QAAQ,KAAK,OAAO,QAAQ,YAAY,QAAQ;AAClD,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AACF,WAAO;AAAA,MACL;AAAA,QACE,MAAM,OAAO;AAAA,QACb,MAAM,QAAQ,MAAM,SAAS,IAAI,aAAa;AAAA,QAC9C,IAAI,KAAK;AAAA,QACT;AAAA,QACA;AAAA,QACA,MAAM,KAAK;AAAA,MACb;AAAA,IACF;AAAA,EACF;AAAA,EACA,oBAAoB;AAClB,QAAI,gBAAgB,KAAK,OAAO;AAC9B,YAAM,IAAI,MAAM,oDAAoD;AACtE,WAAO;AAAA,MACL,MAAM,SAAS;AAAA,MACf,UAAU,GAAG,KAAK,OAAO,KAAK,KAAK,iCAAiC;AAAA,MACpE,WAAW,KAAK,OAAO;AAAA,MACvB,MAAM,KAAK;AAAA,IACb;AAAA,EACF;AAAA,EACA,aAAa,KAAK;AAChB,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC3C;AAAA,EACA,aAAa,OAAO;AAClB,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC3C;AAAA,EACA,OAAO,IAAI,SAAS;AAClB,WAAO,MAAM,OAAO,IAAI,OAAO;AAAA,EACjC;AACF;AACA,SAAS,aAAa,QAAQ,OAAO;AACnC,SAAO,QAAQ,UAAU,QAAQ,QAC7B,IAAI,sBAAsB,SAAS,MAAM,GAAG,SAAS,KAAK,CAAC,CAAC,IAC5D,QAAQ,SACP,SAAUC,SAAQ;AACjB,UAAM,SAAS,CAAC,GACd,cAAc,SAASA,OAAM;AAC/B,aAAS,IAAI,GAAG,IAAI,YAAY,QAAQ,KAAK;AAC3C,YAAM,OAAO,YAAY;AACzB,UAAI,QAAQ,MAAM;AAChB,eAAO,KAAK,OAAO,CAAC;AACpB;AAAA,MACF;AACA,UAAK,OAAO,KAAK,IAAI,GAAG,YAAY,SAAS,MAAM,GAAI;AACrD,eAAO,KAAK,EAAE;AACd;AAAA,MACF;AAAA,IACF;AACA,WAAO,IAAI,MAAM;AAAA,EACnB,EAAG,MAAM,IACT,QAAQ,QACP,SAAUC,QAAO;AAChB,UAAM,SAAS,CAAC,GACd,aAAa,SAASA,MAAK;AAC7B,aAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,KAAK;AAC1C,YAAM,OAAO,WAAW;AACxB,UAAI,EAAE,QAAQ,KAAK;AACjB,eAAO,KAAK,OAAO,CAAC;AACpB;AAAA,MACF;AACA,UAAK,OAAO,KAAK,EAAE,GAAG,WAAW,SAAS,MAAM,GAAI;AAClD,eAAO,KAAK,GAAG;AACf;AAAA,MACF;AAAA,IACF;AACA,WAAO,IAAI,MAAM;AAAA,EACnB,EAAG,KAAK,IACR,IAAI,CAAC,EAAE,CAAC;AACd;AACA,SAAS,sBAAsB,QAAQ,OAAO;AAC5C,MAAI,QAAQ;AACZ,QAAM,SAAS,CAAC;AAChB,aAAS;AACP,UAAM,cAAc,OAAO,UAAU,IACnC,aAAa,MAAM,UAAU;AAC/B,QAAI,cAAc;AAChB,YAAM,IAAI;AAAA,QACR,2CAA2C,cAAc;AAAA,MAC3D;AACF,QAAI,gBAAgB,YAAY;AAC9B,aAAO,KAAK,WAAW,GAAG;AAC1B;AAAA,IACF;AACA,QAAI,aAAa,eAAe,GAAG;AACjC,aAAO,KAAK,WAAW,GACrB,OAAO,KAAK,GAAG,sBAAsB,OAAO,MAAM,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;AACnE;AAAA,IACF;AACA,UAAM,MAAO,aAAa,eAAgB;AAC1C,WAAO,KAAK,GAAG;AACf;AAAA,EACF;AACA,SAAO;AACT;AACA,SAAS,SAAS,KAAK;AACrB,QAAM,QAAQ,CAAC;AACf,WAAS,IAAI,GAAG,IAAI,IAAI,QAAQ;AAAK,UAAM,KAAK,IAAI,WAAW,CAAC,CAAC;AACjE,SAAO;AACT;AACA,SAAS,IAAI,OAAO;AAClB,SAAO,OAAO,aAAa,GAAG,KAAK;AACrC;AACA,SAAS,gBAAgB,MAAM,MAAM;AACnC,QAAM,SAAS,SAAS,IAAI,GAC1B,SAAS,SAAS,IAAI,GACtB,YAAY,KAAK,IAAI,OAAO,QAAQ,OAAO,MAAM;AACnD,WAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AAClC,UAAM,IAAI,QAAQ,OAAO,KAAK,KAAK,OAAO,IACxC,IAAI,QAAQ,OAAO,KAAK,KAAK,OAAO;AACtC,QAAI,MAAM;AAAG,aAAO,IAAI;AAAA,EAC1B;AACA,QAAM,IAAI;AAAA,IACR,2CAA2C,cAAc;AAAA,EAC3D;AACF;AACA,SAAS,oBAAoB,OAAO,OAAO;AACzC,SAAO;AAAA,IACL,MAAM,qBAAqB;AAAA,IAC3B,MAAM,qBAAqB;AAAA,EAC7B;AACF;AACA,IAAM,WAAN,cAAuB,aAAa;AAAA,EAClC,YAAY,QAAQ,CAAC,GAAG;AACtB,QAAI;AACJ,UAAM,GACH,KAAK,SAAS,CAAC,GACf,KAAK,0BAA0B,oBAAI,IAAI,GACvC,KAAK,sBAAsB,oBAAI,IAAI;AACtC,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,YAAM,cAAc,aAAa,QAAQ,GACvC,OAAO,eAAe,MAAM,EAAE;AAChC,WAAK,eAAe,MAAM,WAAW,GACnC,KAAK,OAAO,KAAK,IAAI,GACpB,WAAW;AAAA,IAChB;AAAA,EACF;AAAA,EACA,OAAO,aAAa,CAAC,EAAE,GAAG,kBAAkB,KAAK;AAC/C,UAAM,OAAO,IAAI,SAAS;AAC1B,SAAK,QAAQ,IAAI,GAAG;AACpB,UAAM,WAAW,iBAAiB,IAAI,EAAE;AACxC,QAAI,QAAQ;AAAU,aAAO;AAC7B,eAAW,CAACC,KAAI,IAAI,KAAK,UAAU;AACjC,YAAM,QAAQ,YAAY,CAACA,KAAI,IAAI,GAAG,kBAAkB,GAAG;AAC3D,YAAM,eAAe,MAAM,KAAK,SAAS,GAAG,KAAK,eAAe,KAAK;AAAA,IACvE;AACA,WAAO;AAAA,EACT;AAAA,EACA,WAAW,UAAU,WAAW,KAAK;AACnC,QAAI,QAAQ,KAAK;AACf,YAAM,IAAI,MAAM,uCAAuC;AACzD,UAAM,MAAM,CAAC,GACX,KAAK;AAAA,MACH,IAAI,KAAK;AAAA,MACT,MAAM,QAAQ,MAAM,SAAS,IAAI,aAAa;AAAA,MAC9C,MAAM,OAAO;AAAA,MACb;AAAA,MACA;AAAA,IACF;AACF,QAAI,KAAK,EAAE;AACX,eAAW,QAAQ,KAAK;AACtB,UAAI,KAAK,GAAG,KAAK,WAAW,KAAK,KAAK,KAAK,qBAAqB,GAAG,GAAG,CAAC;AACzE,WAAO;AAAA,EACT;AAAA,EACA,eAAe,MAAM;AACnB,SAAK,OAAO,KAAK,IAAI,GAAG,KAAK,WAAW;AAAA,EAC1C;AAAA,EACA,aAAa;AACX,SAAK,OAAO,KAAK,mBAAmB;AAAA,EACtC;AAAA,EACA,iBAAiB,UAAU;AACzB,WAAO,KAAK,OAAO;AAAA,MACjB,CAAC,SAAS,KAAK,qBAAqB,MAAM;AAAA,IAC5C;AAAA,EACF;AAAA,EACA,QAAQ,IAAI,KAAK;AACf,UAAM,QAAQ,IAAI,GAAG;AACrB,eAAW,QAAQ,KAAK;AAAQ,WAAK,QAAQ,IAAI,WAAW,GAAG,GAAG;AAAA,EACpE;AAAA,EACA,UAAU;AACR,UAAM,QAAQ;AACd,eAAW,QAAQ,KAAK;AAAQ,WAAK,QAAQ;AAAA,EAC/C;AAAA,EACA,gBAAgB,IAAI;AAClB,QAAI,QAAQ,KAAK;AACf,YAAM,IAAI,MAAM,0CAA0C;AAC5D,UAAM,EAAE,IAAQ,WAAW,IAAI,IAAI,IACjC,QAAQ,qBAAqB,EAAE;AACjC,UAAM,QAAQ,IAAI,KAAK,IAAI,GAAG,MAAM,eAAe,MAAM,GAAG;AAC5D,UAAM,YAAY,GAAG,WACnB,8BAA8B,KAAK,iBAAiB,GAAG;AACzD,QAAI,OAAO,6BAA6B;AACtC,YAAM,uBAAuB,KAAK,OAAO;AACzC,UAAI,qBAAqB,QAAQ;AAC/B,eACE,qBAAqB,QAAQ,GAC5B,KAAK,OAAO,+BAA+B,OAC5C;AAAA,UACE,UAAU,WAAW,MAAM;AAAA,YACzB,SAAS,6BAA6B,KAAK;AAAA,UAC7C,CAAC;AAAA,UACD,SAAS,CAAC;AAAA,QACZ;AAEJ;AACE,aAAK,wBAAwB,IAAI,oBAAoB,GAClD,KAAK,OAAO,+BAA+B;AAC9C,cAAM,QAAQ,CAAC,SAAS,6BAA6B,KAAK,CAAC,GACzDC,eAAc,KAAK,oCAAoC,GAAG,SAAS;AACrE,eACEA,gBAAe,MAAM,KAAKA,YAAW,GACrC,EAAE,UAAU,WAAW,MAAM,KAAK,GAAG,SAAS,CAAC,EAAE;AAAA,MAErD;AAAA,IACF;AACA;AACE,YAAM,UAAU,CAAC,GACfA,eAAc,KAAK,oCAAoC,GAAG,SAAS;AACrE,aACEA,gBAAe,QAAQ,KAAKA,YAAW,GACvC,KAAK,eAAe,KAAK,GACzB,QAAQ,KAAK,YAAY,KAAK,iBAAiB,GAAG,GAAG,KAAK,CAAC,GAC3D,EAAE,SAAS,CAAC,GAAG,UAAU,WAAW,MAAM,OAAO,EAAE;AAAA,IAEvD;AAAA,EACF;AAAA,EACA,aAAa,IAAI;AACf,QAAI,QAAQ,KAAK;AACf,YAAM,IAAI,MAAM,0CAA0C;AAC5D,UAAM,QAAQ,CAAC,GACb,eAAe,KAAK,oCAAoC,GAAG,SAAS;AACtE,oBAAgB,MAAM,KAAK,YAAY;AACvC,UAAM,qBAAqB,KAAK,oBAAoB,IAAI,GAAG,SAAS;AACpE,QAAI,QAAQ,oBAAoB;AAC9B,UAAI,uBAAuB,GAAG;AAC5B,eAAO,MAAM,MAAM,SACf,EAAE,UAAU,MAAG,IACf,EAAE,UAAU,WAAW,MAAM,KAAK,GAAG,SAAS,CAAC,EAAE;AACvD,WAAK,oBAAoB,OAAO,GAAG,SAAS;AAAA,IAC9C;AACA,UAAM,8BAA8B,KAAK,iBAAiB,GAAG,SAAS,GACpE,eAAe,KAAK,OAAO,KAAK,CAAC,SAAS,KAAK,QAAQ,GAAG,EAAE;AAC9D,QAAI,QAAQ,cAAc;AACxB,UAAI,aAAa,eAAe,GAAG;AACjC,eAAO;AAAA,UACL,UAAU,MAAM,SAAS,KAAK,WAAW,MAAM,KAAK;AAAA,UACpD,SAAS,CAAC;AAAA,QACZ;AACF,aAAO,gCACJ,KAAK,wBAAwB;AAAA,QAC5B,KAAK,OAAO;AAAA,MACd,GACA,KAAK,OAAO,OAAO,6BAA6B,CAAC,GACjD,MAAM,KAAK,YAAY,2BAA2B,CAAC;AACrD,YAAM,gBAAgB,KAAK,OAAO,QAAQ,YAAY;AACtD,mBAAa,eAAe,MAAM,GAAG,SAAS,GAAG,KAAK,WAAW;AACjE,YAAM,WAAW,KAAK,OAAO,QAAQ,YAAY;AACjD,aACE,aAAa,iBACX,MAAM,KAAK,UAAU,eAAe,UAAU,YAAY,CAAC,GAC7D,EAAE,UAAU,MAAM,SAAS,KAAK,WAAW,MAAM,KAAK,GAAG,SAAS,CAAC,EAAE;AAAA,IAEzE;AACA;AACE,YAAM,SAAS,KAAK,KAAK,QAAQ,GAAG,EAAE;AACtC,UAAI,UAAU,KAAK,wBAAwB,IAAI,MAAM,GAAG;AACtD,eAAO,eAAe,MAAM,GAAG,SAAS,GACtC,KAAK,wBAAwB,OAAO,MAAM,GAC1C,KAAK,eAAe,MAAM;AAC5B,cAAM,qBAAqB,KAAK,OAAO,QAAQ,MAAM;AACrD,eAAO;AAAA,UACL,UAAU,WAAW,MAAM;AAAA,YACzB,OAAO,8BACH,YAAY,oBAAoB,MAAM,IACtC,SAAS,oBAAoB,MAAM;AAAA,YACvC,GAAG;AAAA,UACL,CAAC;AAAA,UACD,SAAS,CAAC;AAAA,QACZ;AAAA,MACF;AACA;AACE,eAAO,+BACL,KAAK,OAAO,OAAO,6BAA6B,CAAC;AACnD,cAAM,EAAE,SAAkB,SAAmB,IAC3C,KAAK,yBAAyB,IAAI,GAAG,SAAS;AAChD,eAAO;AAAA,UACL,UAAU,WAAW,MAAM;AAAA,YACzB,OAAO,8BACH,YAAY,UAAU,OAAO,IAC7B,SAAS,UAAU,OAAO;AAAA,YAC9B,GAAG;AAAA,UACL,CAAC;AAAA,UACD,SAAS,CAAC;AAAA,QACZ;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,oCAAoC,WAAW;AAC7C,QAAI,QAAQ,aAAa,QAAQ,KAAK;AAAM,aAAO;AACnD,UAAM,cAAc,KAAK,KAAK,QAAQ,SAAS;AAC/C,QAAI,QAAQ;AAAa,aAAO;AAChC,UAAM,SAAS,KAAK,aAAa,WAAW;AAC5C,WAAO,UAAO,OAAO,WAAW,OAAO,OAAO,SAAS,QAAQ;AAAA,EACjE;AAAA,EACA,mBAAmB,IAAI;AACrB,QAAI,QAAQ,KAAK;AACf,YAAM,IAAI,MAAM,0CAA0C;AAC5D,UAAM,MAAM,GAAG,WACb,oBAAoB,KAAK,iBAAiB,GAAG;AAC/C,WAAO,qBAAqB,KAAK,mBAAmB,mBAAmB,GAAG;AAC1E,UAAM,EAAE,SAAkB,SAAmB,IAC3C,KAAK,yBAAyB,IAAI,GAAG;AACvC,WAAO;AAAA,MACL,UAAU,WAAW,MAAM,CAAC,YAAY,UAAU,OAAO,CAAC,CAAC;AAAA,MAC3D,SAAS,CAAC;AAAA,IACZ;AAAA,EACF;AAAA,EACA,gBAAgB,IAAI;AAClB,UAAM,eAAe,KAAK,OAAO,KAAK,CAAC,SAAS,KAAK,QAAQ,GAAG,EAAE,GAChE,MAAM,GAAG,WACT,sBAAsB,KAAK,iBAAiB,GAAG;AACjD,QAAI,cAAc;AAChB,UAAI,aAAa,eAAe;AAAK,eAAO,EAAE,UAAU,MAAG;AAC3D;AACE,cAAM,mBAAmB,KAAK,OAAO,QAAQ,YAAY;AACzD,eAAO,uBACL,KAAK,mBAAmB,qBAAqB,GAAG,GAChD,aAAa,eAAe,MAAM,GAAG,GACrC,KAAK,WAAW;AAClB,cAAM,WAAW,KAAK,iBAAiB,GAAG;AAC1C,eAAO,aAAa,mBAChB,EAAE,UAAU,MAAG,IACf;AAAA,UACE,UAAU,WAAW,MAAM;AAAA,YACzB,UAAU,kBAAkB,UAAU,YAAY;AAAA,UACpD,CAAC;AAAA,UACD,SAAS,CAAC;AAAA,QACZ;AAAA,MACN;AAAA,IACF;AACA;AACE,YAAM,SAAS,GAAG,KAAK,IAAI,EAAE,QAAQ,GAAG,EAAE;AAC1C,UAAI,UAAU,KAAK,wBAAwB,IAAI,MAAM,GAAG;AACtD,eAAO,eAAe,MAAM,GAAG,GAC7B,KAAK,wBAAwB,OAAO,MAAM,GAC1C,KAAK,eAAe,MAAM;AAC5B,eAAO;AAAA,UACL,UAAU,WAAW,MAAM;AAAA,YACzB,YAAY,KAAK,iBAAiB,GAAG,GAAG,MAAM;AAAA,UAChD,CAAC;AAAA,UACD,SAAS,CAAC;AAAA,QACZ;AAAA,MACF;AACA;AACE,eAAO,uBACL,KAAK,mBAAmB,qBAAqB,GAAG;AAClD,cAAM,EAAE,SAAkB,SAAmB,IAC3C,KAAK,yBAAyB,IAAI,GAAG;AACvC,eAAO;AAAA,UACL,UAAU,WAAW,MAAM,CAAC,YAAY,UAAU,OAAO,CAAC,CAAC;AAAA,UAC3D,SAAS,CAAC;AAAA,QACZ;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,qBAAqB,IAAI;AACvB,QAAI;AACJ,UAAM,EAAE,IAAQ,WAAW,IAAI,IAAI,IACjC,QAAQ,qBAAqB,EAAE;AACjC,QACE,YACC,UAAU,KAAK,KAAK,SAAS,WAAW,KAAK,SAAS,GAAG,QAAQ,EAAE;AAEpE,aAAO,EAAE,UAAU,MAAG;AACxB,UAAM,QAAQ,IAAI,GAAG,KAAK,IAAI,CAAC,GAAG,MAAM,eAAe,MAAM,GAAG;AAChE,UAAM,oBAAoB,KAAK,iBAAiB,GAAG;AACnD,QAAI,SAAS;AACb,QAAI,OAAO,mBAAmB;AAC5B,MAAC,SAAS;AAAA,QACR,KAAK,OAAO,qBACR,KAAK,OAAO,mBAAmB,qBAAqB,IACpD;AAAA,QACJ,KAAK,OAAO,oBAAoB,KAC5B,KAAK,OAAO,oBAAoB,GAAG,qBAAqB,IACxD;AAAA,MACN,GACE,MAAM,eAAe,MAAM,MAAM;AAAA,IACrC;AACA,SAAK,eAAe,KAAK;AACzB,WAAO;AAAA,MACL,UAAU,WAAW,MAAM;AAAA,QACzB,YAAY,KAAK,iBAAiB,MAAM,GAAG,KAAK;AAAA,MAClD,CAAC;AAAA,MACD,SAAS,CAAC,EAAE,MAAM,OAAO,aAAa,GAAO,CAAC;AAAA,IAChD;AAAA,EACF;AAAA,EACA,kBAAkB,IAAI;AACpB,QAAI;AACJ,UAAM,EAAE,IAAQ,WAAW,IAAI,IAAI,IACjC,QAAQ,qBAAqB,EAAE;AACjC,QACE,YACC,UAAU,KAAK,KAAK,SAAS,WAAW,KAAK,SAAS,GAAG,QAAQ,EAAE;AAEpE,aAAO,EAAE,UAAU,MAAG;AACxB,SAAK,oBAAoB,IAAI,KAAK,GAAG,GAAG,IAAI,CAAC;AAC7C,UAAM,yBAAyB,KAAK,iBAAiB,GAAG;AACxD,UAAM,QAAQ,IAAI,GAAG,KAAK,IAAI,CAAC,GAAG,MAAM,eAAe,MAAM,GAAG;AAChE,UAAM,SAAS;AACf,QAAI,OAAO,wBAAwB;AACjC,YAAM,eAAe,KAAK,OAAO;AACjC,mBAAa,QAAQ,GAAI,KAAK,OAAO,0BAA0B;AAC/D,YAAM,UAAU,aAAa,WAAW,GAAG,KAAK,GAAG,GAAG,KAAK,KAAK,IAAI;AACpE,uCAAiC,SAAS,GAAG,EAAE;AAC/C,YAAM,QAAQ,CAAC,SAAS,wBAAwB,KAAK,CAAC,GACpD,eAAe,KAAK,oCAAoC,GAAG,SAAS;AACtE,aACE,gBAAgB,MAAM,KAAK,YAAY,GACvC,EAAE,UAAU,WAAW,MAAM,KAAK,GAAG,QAAiB;AAAA,IAE1D;AACA;AACE,WAAK,eAAe,KAAK,GACvB,KAAK,oCAAoC,GAAG,SAAS;AACvD,YAAM,WAAW,KAAK,iBAAiB,MAAM;AAC7C,aAAO;AAAA,QACL,SAAS,CAAC,EAAE,MAAM,OAAO,aAAa,GAAO,CAAC;AAAA,QAC9C,UAAU,WAAW,MAAM,CAAC,YAAY,UAAU,KAAK,CAAC,CAAC;AAAA,MAC3D;AAAA,IACF;AAAA,EACF;AAAA,EACA,aAAa,IAAI,QAAQ;AACvB,QAAI,QAAQ,KAAK;AACf,YAAM,IAAI,MAAM,0CAA0C;AAC5D,QAAI,UAAU,GAAG,QAAQ;AACvB,UAAI,WAAW,SAAS;AAAQ,eAAO,KAAK,gBAAgB,EAAE;AAC9D,UAAI,WAAW,SAAS;AACtB,eAAO,KAAK,kBAAkB,EAAE;AAClC,UAAI,WAAW,SAAS;AAAK,eAAO,KAAK,aAAa,EAAE;AAAA,IAC1D;AACA,WAAO,WAAW,SAAS,SACvB,KAAK,mBAAmB,EAAE,IAC1B,WAAW,SAAS,MACpB,KAAK,gBAAgB,EAAE,IACvB,KAAK,qBAAqB,EAAE;AAAA,EAClC;AAAA,EACA,aAAa,OAAO;AAClB,QAAI,OAAO;AACT,YAAM,YAAY,GAAG,MAAM,UAAU,GACnC,UAAU,MAAM,WAAW,GAAG,KAAK,GAAG,GAAG,WAAW,KAAK,IAAI,GAC7D,gBAAgB,KAAK,OAAO,QAAQ,KAAK;AAC3C,aAAO,OAAO,gBACV,EAAE,UAAU,MAAG,KACd,KAAK,OAAO,OAAO,eAAe,CAAC,GACpC,MAAM,QAAQ,GACd;AAAA,QACE,UAAU,WAAW,MAAM,CAAC,YAAY,aAAa,CAAC,CAAC;AAAA,QACvD;AAAA,MACF;AAAA,IACN;AACA,WAAO,EAAE,UAAU,MAAG;AAAA,EACxB;AAAA,EACA,wBAAwB,QAAQ,OAAO;AACrC,QAAI;AACJ,QAAI,KAAK,wBAAwB,IAAI,KAAK,GAAG;AAC3C,WAAK,wBAAwB,OAAO,KAAK,GACvC,MAAM,eAAe,MAAM,MAAM,GACjC,KAAK,eAAe,KAAK;AAC3B,aAAO;AAAA,QACL,UAAU,WAAW,MAAM;AAAA,UACzB,YAAY,KAAK,OAAO,QAAQ,KAAK,GAAG,KAAK;AAAA,QAC/C,CAAC;AAAA,QACD,SAAS,CAAC;AAAA,MACZ;AAAA,IACF;AACA,QAAI,WAAW,MAAM;AAAY,aAAO,EAAE,UAAU,MAAG;AACvD,UAAM,oBAAoB,KAAK,iBAAiB,MAAM;AACtD,QAAI,OAAO,mBAAmB;AAC5B,YAAM,gBAAgB,KAAK,OAAO,QAAQ,KAAK;AAC/C,YAAM,eAAe,MAAM,MAAM,GAAG,KAAK,WAAW;AACpD,YAAM,WAAW,KAAK,OAAO,QAAQ,KAAK;AAC1C,aAAO,aAAa,gBAChB,EAAE,UAAU,MAAG,IACf;AAAA,QACE,UAAU,WAAW,MAAM;AAAA,UACzB,UAAU,eAAe,UAAU,KAAK;AAAA,QAC1C,CAAC;AAAA,QACD,SAAS,CAAC;AAAA,MACZ;AAAA,IACN;AACA;AACE,WAAK,OAAO,mBAAmB;AAAA,QAC7B;AAAA,QACA;AAAA,UACE;AAAA,UACA,UAAU,KAAK,KAAK,OAAO,oBAAoB,OAAO,WAAW,KAC7D,SACA,GAAG,qBAAqB;AAAA,QAC9B;AAAA,MACF;AACA,YAAM,gBAAgB,KAAK,OAAO,QAAQ,KAAK;AAC/C,YAAM,eAAe,MAAM,MAAM,GAAG,KAAK,WAAW;AACpD,YAAM,WAAW,KAAK,OAAO,QAAQ,KAAK;AAC1C,aAAO,aAAa,gBAChB,EAAE,UAAU,MAAG,IACf;AAAA,QACE,UAAU,WAAW,MAAM;AAAA,UACzB,UAAU,eAAe,UAAU,KAAK;AAAA,QAC1C,CAAC;AAAA,QACD,SAAS,CAAC;AAAA,MACZ;AAAA,IACN;AAAA,EACF;AAAA,EACA,qBAAqB,QAAQ,OAAO;AAClC,QAAI,IAAI;AACR,UAAM,cAAc,GAAG,MAAM,UAAU;AACvC,QAAI,KAAK,wBAAwB,IAAI,KAAK,GAAG;AAC3C,YAAM,oBAAoB,KAAK,iBAAiB,MAAM;AACtD,aACE,KAAK,wBAAwB,OAAO,KAAK,GACzC,OAAO,qBACL,KAAK,OAAO,mBAAmB;AAAA,QAC7B;AAAA,QACA;AAAA,UACE;AAAA,UACA,UAAU,KAAK,KAAK,OAAO,oBAAoB,OAC7C,WAAW,KACT,SACA,GAAG,qBAAqB;AAAA,QAC9B;AAAA,MACF,GACF,MAAM,eAAe,MAAM,MAAM,GACjC,KAAK,eAAe,KAAK,GACzB,EAAE,UAAU,MAAG;AAAA,IAEnB;AACA;AACE,UAAI,WAAW;AAAa,eAAO,EAAE,UAAU,MAAG;AAClD,YAAM,gBAAgB,KAAK,OAAO,QAAQ,KAAK,GAC7C,oBAAoB,KAAK,iBAAiB,MAAM;AAClD,aAAO,qBACL,KAAK,OAAO,mBAAmB;AAAA,QAC7B;AAAA,QACA;AAAA,UACE;AAAA,UACA,UAAU,KAAK,KAAK,OAAO,oBAAoB,OAAO,WAAW,KAC7D,SACA,GAAG,qBAAqB;AAAA,QAC9B;AAAA,MACF,GACA,MAAM,eAAe,MAAM,MAAM,GACjC,KAAK,WAAW;AAClB,YAAM,WAAW,KAAK,OAAO,QAAQ,KAAK;AAC1C,aAAO,kBAAkB,WACrB,EAAE,UAAU,MAAG,IACf;AAAA,QACE,UAAU,WAAW,MAAM;AAAA,UACzB,UAAU,eAAe,UAAU,KAAK;AAAA,QAC1C,CAAC;AAAA,QACD,SAAS,CAAC;AAAA,MACZ;AAAA,IACN;AAAA,EACF;AAAA,EACA,0BAA0B,QAAQ,OAAO;AACvC,QAAI;AACJ,UAAM,cAAc,GAAG,MAAM,UAAU,GACrC,gBAAgB,KAAK,OAAO,QAAQ,KAAK,GACzC,oBAAoB,KAAK,iBAAiB,MAAM;AAClD,WAAO,qBACL,KAAK,OAAO,mBAAmB;AAAA,MAC7B;AAAA,MACA;AAAA,QACE;AAAA,QACA,UAAU,KAAK,KAAK,OAAO,oBAAoB,OAAO,WAAW,KAC7D,SACA,GAAG,qBAAqB;AAAA,MAC9B;AAAA,IACF,GACA,MAAM,eAAe,MAAM,MAAM,GACjC,KAAK,WAAW;AAClB,UAAM,WAAW,KAAK,OAAO,QAAQ,KAAK;AAC1C,WAAO,kBAAkB,WACrB,EAAE,UAAU,MAAG,IACf;AAAA,MACE,UAAU,WAAW,MAAM;AAAA,QACzB,UAAU,eAAe,UAAU,KAAK;AAAA,MAC1C,CAAC;AAAA,MACD,SAAS;AAAA,QACP;AAAA,UACE,MAAM,OAAO;AAAA,UACb,IAAI,GAAG,MAAM,GAAG;AAAA,UAChB,WAAW;AAAA,QACb;AAAA,MACF;AAAA,IACF;AAAA,EACN;AAAA,EACA,aAAa,QAAQ,OAAO,QAAQ;AAClC,WAAO,WAAW,SAAS,SACvB,KAAK,wBAAwB,QAAQ,KAAK,IAC1C,WAAW,SAAS,MACpB,KAAK,qBAAqB,QAAQ,KAAK,IACvC,KAAK,0BAA0B,QAAQ,KAAK;AAAA,EAClD;AAAA,EACA,OAAO,IAAI,SAAS;AAClB,WAAO,MAAM,OAAO,IAAI,OAAO;AAAA,EACjC;AAAA,EACA,oBAAoB;AAClB,QAAI,gBAAgB,KAAK,OAAO;AAC9B,YAAM,IAAI,MAAM,gDAAgD;AAClE,WAAO;AAAA,MACL,MAAM,SAAS;AAAA,MACf,UAAU,GAAG,KAAK,OAAO,KAAK,KAAK,iCAAiC;AAAA,MACpE,WAAW,KAAK,OAAO;AAAA,IACzB;AAAA,EACF;AAAA,EACA,IAAI,SAAS;AACX,WAAO,KAAK,OAAO;AAAA,EACrB;AAAA,EACA,KAAK,SAAS;AACZ,WAAO,KAAK,OAAO,SAAS,KAAK,MAAM;AAAA,EACzC;AAAA,EACA,OAAO,SAAS,OAAO;AACrB,QAAI,QAAQ,KAAK,QAAQ,KAAK,OAAO;AACnC,YAAM,IAAI;AAAA,QACR,sCAAsC,yCAAyC,KAAK,OAAO;AAAA,MAC7F;AACF,UAAM,WAAW;AAAA,MACb,KAAK,OAAO,QAAQ,KAChB,KAAK,OAAO,QAAQ,GAAG,qBAAqB,IAC5C;AAAA,MACJ,KAAK,OAAO,SAAS,KAAK,OAAO,OAAO,qBAAqB,IAAI;AAAA,IACnE,GACA,QAAQ,eAAe,OAAO;AAChC,QACG,MAAM,eAAe,MAAM,QAAQ,GACpC,KAAK,eAAe,KAAK,GACzB,KAAK,QAAQ,KAAK,KAClB;AACA,YAAM,KAAK,KAAK,KAAK,WAAW;AAChC,YAAM,QAAQ,IAAI,KAAK,IAAI,GACzB,KAAK,KAAK;AAAA,QACR,MAAM,WAAW,KAAK,KAAK,UAAU,KAAK,IAAI;AAAA,QAC9C,CAAC,EAAE,MAAM,OAAO,aAAa,GAAO,CAAC;AAAA,QACrC,oBAAI,IAAI,CAAC,CAAC,KAAK,KAAK,WAAW,MAAM,CAAC,YAAY,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AAAA,MACrE;AAAA,IACJ;AAAA,EACF;AAAA,EACA,KAAK,OAAO,aAAa;AACvB,QAAI,cAAc;AAAG,YAAM,IAAI,MAAM,mCAAmC;AACxE,QAAI,eAAe,KAAK,OAAO;AAC7B,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AACF,QAAI,QAAQ;AAAG,YAAM,IAAI,MAAM,6BAA6B;AAC5D,QAAI,SAAS,KAAK,OAAO;AACvB,YAAM,IAAI,MAAM,uDAAuD;AACzE,QAAI,iBAAiB,MACnB,gBAAgB;AAClB,YAAQ,eACF,gBACA,gBAAgB,KAAK,OAAO,SAAS,IACjC,SACA,KAAK,OAAO,cAAc,GAAG,qBAAqB,GACvD,iBAAiB,KAAK,OAAO,aAAa,qBAAqB,MAC9D,gBAAgB,KAAK,OAAO,aAAa,qBAAqB,GAC/D,iBACC,MAAM,cACF,SACA,KAAK,OAAO,cAAc,GAAG,qBAAqB;AAC5D,UAAM,WAAW,aAAa,gBAAgB,aAAa,GACzD,OAAO,KAAK,OAAO,QACnB,mBAAmB,KAAK,qBAAqB;AAC/C,QACG,KAAK,eAAe,MAAM,QAAQ,GACnC,KAAK,WAAW,GAChB,KAAK,QAAQ,KAAK,KAClB;AACA,YAAM,iBAAiB,oBAAI,IAAI;AAAA,QAC7B,CAAC,KAAK,KAAK,WAAW,MAAM,CAAC,UAAU,OAAO,aAAa,IAAI,CAAC,CAAC,CAAC;AAAA,MACpE,CAAC;AACD,WAAK,KAAK;AAAA,QACR;AAAA,UACE;AAAA,YACE,MAAM,OAAO;AAAA,YACb,IAAI,GAAG,KAAK,GAAG;AAAA,YACf,MAAM,KAAK,KAAK,aAAa;AAAA,YAC7B,WAAW;AAAA,UACb;AAAA,QACF;AAAA,QACA;AAAA,UACE;AAAA,YACE,MAAM,OAAO;AAAA,YACb,IAAI,GAAG,KAAK,GAAG;AAAA,YACf,WAAW;AAAA,UACb;AAAA,QACF;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,OAAO,OAAO;AACZ,QAAI,QAAQ,KAAK,SAAS,KAAK,OAAO;AACpC,YAAM,IAAI;AAAA,QACR,sCAAsC,yCACpC,KAAK,OAAO,SAAS;AAAA,MAEzB;AACF,UAAM,OAAO,KAAK,OAAO;AACzB,QAAK,KAAK,QAAQ,GAAG,KAAK,OAAO,OAAO,OAAO,CAAC,GAAG,KAAK,MAAO;AAC7D,YAAM,gBAAgB,KAAK;AAC3B,UAAI,eAAe;AACjB,cAAM,iBAAiB,oBAAI,IAAI;AAC/B,uBAAe;AAAA,UACb,GAAG,KAAK,GAAG;AAAA,UACX,WAAW,MAAM,CAAC,YAAY,KAAK,CAAC,CAAC;AAAA,QACvC,GACE,KAAK,KAAK;AAAA,UACR;AAAA,YACE;AAAA,cACE,IAAI;AAAA,cACJ,MAAM,KAAK,KAAK,aAAa;AAAA,cAC7B,MAAM,OAAO;AAAA,YACf;AAAA,UACF;AAAA,UACA,KAAK,WAAW,GAAG,KAAK,GAAG,GAAG,KAAK,qBAAqB,CAAC;AAAA,UACzD;AAAA,QACF;AAAA,MACJ;AAAA,IACF;AAAA,EACF;AAAA,EACA,QAAQ;AACN,QAAI,KAAK,MAAM;AACb,YAAM,MAAM,CAAC,GACX,aAAa,CAAC,GACd,cAAc,CAAC;AACjB,iBAAW,QAAQ,KAAK,QAAQ;AAC9B,aAAK,QAAQ;AACb,cAAM,UAAU,KAAK;AACrB,oBACG,IAAI,KAAK;AAAA,UACR,MAAM,OAAO;AAAA,UACb,IAAI;AAAA,UACJ,MAAM,KAAK,KAAK,aAAa;AAAA,QAC/B,CAAC,GACD,WAAW;AAAA,UACT,GAAG,KAAK,WAAW,GAAG,KAAK,GAAG,GAAG,KAAK,qBAAqB,CAAC;AAAA,QAC9D,GACA,YAAY,KAAK,YAAY,CAAC,CAAC;AAAA,MACnC;AACA,WAAK,SAAS,CAAC;AACf,YAAM,iBAAiB,oBAAI,IAAI;AAC/B,qBAAe,IAAI,GAAG,KAAK,GAAG,GAAG,WAAW,MAAM,WAAW,CAAC,GAC5D,KAAK,KAAK,SAAS,KAAK,YAAY,cAAc;AAAA,IACtD,OAAO;AACL,iBAAW,QAAQ,KAAK;AAAQ,aAAK,QAAQ;AAC7C,WAAK,SAAS,CAAC;AAAA,IACjB;AAAA,EACF;AAAA,EACA,IAAI,OAAO,MAAM;AACf,QAAI,QAAQ,KAAK,SAAS,KAAK,OAAO;AACpC,YAAM,IAAI;AAAA,QACR,mCAAmC,yCACjC,KAAK,OAAO,SAAS;AAAA,MAEzB;AACF,UAAM,eAAe,KAAK,OAAO,QAC/B,WAAW,aAAa,qBAAqB,GAC7C,aAAa,aAAa;AAC5B,iBAAa,QAAQ;AACrB,UAAM,QAAQ,eAAe,IAAI;AACjC,QACG,MAAM,eAAe,MAAM,QAAQ,GACnC,KAAK,OAAO,SAAS,OACtB,KAAK,QAAQ,KAAK,KAClB;AACA,YAAM,KAAK,KAAK,KAAK,WAAW;AAChC,YAAM,QAAQ,IAAI,KAAK,IAAI;AAC3B,YAAM,iBAAiB,oBAAI,IAAI;AAC/B,qBAAe,IAAI,KAAK,KAAK,WAAW,MAAM,CAAC,SAAS,OAAO,KAAK,CAAC,CAAC,CAAC;AACvE,YAAM,MAAM,MAAM,WAAW,KAAK,KAAK,UAAU,KAAK,IAAI;AAC1D,uCAAiC,KAAK,UAAU,GAC9C,KAAK,oBAAoB,IAAI,UAAU,GAAG,IAAI,GAAG,IAAI,CAAC;AACxD,YAAM,aAAa,aAAa,WAAW,KAAK,KAAK,UAAU,MAAM;AACrE,uCAAiC,YAAY,EAAE,GAC7C,KAAK,KAAK,SAAS,KAAK,YAAY,cAAc;AAAA,IACtD;AAAA,EACF;AAAA,EACA,UAAU;AACR,WAAO,KAAK,OAAO,IAAI,CAAC,UAAU,eAAe,KAAK,CAAC;AAAA,EACzD;AAAA,EACA,MAAM,WAAW;AACf,WAAO,KAAK,QAAQ,EAAE,MAAM,SAAS;AAAA,EACvC;AAAA,EACA,OAAO,WAAW;AAChB,WAAO,KAAK,QAAQ,EAAE,OAAO,SAAS;AAAA,EACxC;AAAA,EACA,KAAK,WAAW;AACd,WAAO,KAAK,QAAQ,EAAE,KAAK,SAAS;AAAA,EACtC;AAAA,EACA,UAAU,WAAW;AACnB,WAAO,KAAK,QAAQ,EAAE,UAAU,SAAS;AAAA,EAC3C;AAAA,EACA,QAAQ,YAAY;AAClB,WAAO,KAAK,QAAQ,EAAE,QAAQ,UAAU;AAAA,EAC1C;AAAA,EACA,IAAI,OAAO;AACT,QAAI,EAAE,QAAQ,KAAK,SAAS,KAAK,OAAO;AACtC,aAAO,eAAe,KAAK,OAAO,MAAM;AAAA,EAC5C;AAAA,EACA,QAAQ,eAAe,WAAW;AAChC,WAAO,KAAK,QAAQ,EAAE,QAAQ,eAAe,SAAS;AAAA,EACxD;AAAA,EACA,YAAY,eAAe,WAAW;AACpC,WAAO,KAAK,QAAQ,EAAE,YAAY,eAAe,SAAS;AAAA,EAC5D;AAAA,EACA,IAAI,UAAU;AACZ,WAAO,KAAK,OAAO,IAAI,CAAC,OAAO,MAAM,SAAS,eAAe,KAAK,GAAG,CAAC,CAAC;AAAA,EACzE;AAAA,EACA,KAAK,WAAW;AACd,WAAO,KAAK,QAAQ,EAAE,KAAK,SAAS;AAAA,EACtC;AAAA,EACA,CAAC,OAAO,YAAY;AAClB,WAAO,IAAI,iBAAiB,KAAK,MAAM;AAAA,EACzC;AAAA,EACA,yBAAyB,IAAI,KAAK;AAChC,UAAM,UAAU,qBAAqB,EAAE;AACvC,YAAQ,QAAQ,GAAG,IAAI,GAAG,KAAK,IAAI,CAAC,GAClC,QAAQ,eAAe,MAAM,GAAG,GAChC,KAAK,eAAe,OAAO;AAC7B,WAAO,EAAE,SAAkB,UAAU,KAAK,iBAAiB,GAAG,EAAE;AAAA,EAClE;AAAA,EACA,mBAAmB,OAAO,KAAK;AAC7B,QAAI;AACJ,UAAM,kBAAkB;AAAA,MACtB;AAAA,MACA,KAAK,OAAO,SAAS,QAAQ,IACzB,UAAU,KAAK,KAAK,OAAO,QAAQ,OAAO,WAAW,KACnD,SACA,GAAG,qBAAqB,IAC1B;AAAA,IACN;AACA,SAAK,OAAO,OAAO,eAAe,MAAM,eAAe;AAAA,EACzD;AACF;AACA,IAAM,mBAAN,MAAuB;AAAA,EACrB,YAAY,OAAO;AACjB,SAAK,iBAAiB,MAAM,OAAO,UAAU;AAAA,EAC/C;AAAA,EACA,CAAC,OAAO,YAAY;AAClB,WAAO;AAAA,EACT;AAAA,EACA,OAAO;AACL,UAAM,SAAS,KAAK,eAAe,KAAK;AACxC,QAAI,OAAO;AAAM,aAAO,EAAE,MAAM,MAAI,OAAO,OAAO;AAClD,WAAO,EAAE,OAAO,eAAe,OAAO,KAAK,EAAE;AAAA,EAC/C;AACF;AACA,SAAS,WAAW,UAAU,cAAc;AAC1C,SAAO,EAAE,MAAM,UAAU,MAAM,YAAY,SAAS,aAAa;AACnE;AACA,SAAS,SAAS,OAAO,MAAM;AAC7B,SAAO;AAAA,IACL;AAAA,IACA,MAAM;AAAA,IACN,MAAM,gBAAgB,eAAe,KAAK,OAAO;AAAA,EACnD;AACF;AACA,SAAS,YAAY,OAAO;AAC1B,SAAO,EAAE,OAAc,MAAM,SAAS;AACxC;AACA,SAAS,YAAY,OAAO,MAAM;AAChC,SAAO;AAAA,IACL;AAAA,IACA,MAAM;AAAA,IACN,MAAM,gBAAgB,eAAe,KAAK,OAAO;AAAA,EACnD;AACF;AACA,SAAS,UAAU,eAAe,OAAO,MAAM;AAC7C,SAAO;AAAA,IACL;AAAA,IACA,MAAM;AAAA,IACN;AAAA,IACA,MAAM,gBAAgB,eAAe,KAAK,OAAO;AAAA,EACnD;AACF;AACA,SAAS,iCAAiC,KAAK,WAAW;AACxD,MAAI,MAAM,IAAI;AACZ,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AACF,QAAM,UAAU,IAAI;AACpB,EAAC,QAAQ,SAAS,OAAS,QAAQ,YAAY;AACjD;AACA,IAAM,UAAN,cAAsB,aAAa;AAAA,EACjC,YAAYC,UAAS;AACnB,QACG,MAAM,GACP;AAAA,MACE,SAASA;AAAA,MACT;AAAA,IACF,GACC,KAAK,oBAAoB,oBAAI,IAAI,GAClCA,UACA;AACA,YAAM,gBAAgB,CAAC;AACvB,iBAAW,SAASA,UAAS;AAC3B,cAAM,QAAQ,eAAe,MAAM,EAAE;AACrC,cAAM,eAAe,MAAM,MAAM,EAAE,GACjC,cAAc,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC;AAAA,MACxC;AACA,WAAK,OAAO,IAAI,IAAI,aAAa;AAAA,IACnC;AAAO,WAAK,OAAO,oBAAI,IAAI;AAAA,EAC7B;AAAA,EACA,WAAW,UAAU,WAAW,KAAK;AACnC,QAAI,QAAQ,KAAK;AACf,YAAM,IAAI,MAAM,uCAAuC;AACzD,UAAM,MAAM,CAAC,GACX,KAAK;AAAA,MACH,IAAI,KAAK;AAAA,MACT,MAAM,QAAQ,MAAM,SAAS,IAAI,aAAa;AAAA,MAC9C,MAAM,OAAO;AAAA,MACb;AAAA,MACA;AAAA,IACF;AACF,QAAI,KAAK,EAAE;AACX,eAAW,CAAC,KAAK,KAAK,KAAK,KAAK;AAC9B,UAAI,KAAK,GAAG,MAAM,WAAW,KAAK,KAAK,KAAK,GAAG,CAAC;AAClD,WAAO;AAAA,EACT;AAAA,EACA,OAAO,aAAa,CAAC,IAAI,KAAK,GAAG,kBAAkB,KAAK;AACtD,UAAM,MAAM,IAAI,QAAQ;AACxB,QAAI,QAAQ,IAAI,GAAG;AACnB,UAAM,WAAW,iBAAiB,IAAI,EAAE;AACxC,QAAI,QAAQ;AAAU,aAAO;AAC7B,eAAW,CAACF,KAAI,IAAI,KAAK,UAAU;AACjC,YAAM,QAAQ,YAAY,CAACA,KAAI,IAAI,GAAG,kBAAkB,GAAG;AAC3D,YAAM,eAAe,KAAK,KAAK,SAAS,GACtC,IAAI,KAAK,IAAI,KAAK,WAAW,KAAK;AAAA,IACtC;AACA,WAAO;AAAA,EACT;AAAA,EACA,QAAQ,IAAI,KAAK;AACf,UAAM,QAAQ,IAAI,GAAG;AACrB,eAAW,CAAC,MAAM,KAAK,KAAK,KAAK;AAC/B,iBAAW,KAAK,KAAK,MAAM,QAAQ,IAAI,WAAW,GAAG,GAAG;AAAA,EAC5D;AAAA,EACA,aAAa,IAAI,QAAQ;AACvB,QAAI,QAAQ,KAAK;AACf,YAAM,IAAI,MAAM,0CAA0C;AAC5D,UAAM,EAAE,IAAQ,WAAsB,KAAW,IAAI,IACnD,MAAM,WACN,QAAQ,qBAAqB,EAAE;AACjC,QAAI,WAAW,KAAK,KAAK,QAAQ,EAAE;AAAG,aAAO,EAAE,UAAU,MAAG;AAC5D,QAAI,WAAW,SAAS,KAAK;AAC3B,YAAM,iBAAiB,KAAK,kBAAkB,IAAI,GAAG;AACrD,UAAI,mBAAmB;AACrB,eAAO,KAAK,kBAAkB,OAAO,GAAG,GAAG,EAAE,UAAU,MAAG;AAC5D,UAAI,QAAQ;AAAgB,eAAO,EAAE,UAAU,MAAG;AAAA,IACpD;AAAO,iBAAW,SAAS,UAAU,KAAK,kBAAkB,OAAO,GAAG;AACtE,UAAM,gBAAgB,KAAK,KAAK,IAAI,GAAG;AACvC,QAAI;AACJ,QAAI,eAAe;AACjB,YAAM,SAAS,GAAG,KAAK,GAAG;AAC1B,MAAC,UAAU,cAAc,WAAW,QAAQ,GAAG,GAC7C,cAAc,QAAQ;AAAA,IAC1B;AAAO,gBAAU,CAAC,EAAE,MAAM,OAAO,aAAa,GAAO,CAAC;AACtD,WACE,MAAM,eAAe,MAAM,GAAG,GAC9B,MAAM,QAAQ,IAAI,KAAK,IAAI,GAC3B,KAAK,KAAK,IAAI,KAAK,KAAK,GACxB;AAAA,MACE,UAAU;AAAA,QACR,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS,EAAE,CAAC,MAAM,EAAE,MAAM,SAAS,EAAE;AAAA,MACvC;AAAA,MACA;AAAA,IACF;AAAA,EAEJ;AAAA,EACA,UAAU;AACR,UAAM,QAAQ;AACd,eAAW,QAAQ,KAAK,KAAK,OAAO;AAAG,WAAK,QAAQ;AAAA,EACtD;AAAA,EACA,aAAa,OAAO;AAClB,UAAM,KAAK,GAAG,KAAK,GAAG,GACpB,YAAY,GAAG,MAAM,UAAU,GAC/B,UAAU,MAAM,WAAW,IAAI,WAAW,KAAK,IAAI;AACrD,eAAW,CAAC,KAAK,KAAK,KAAK,KAAK;AAC9B,gBAAU,SAAS,KAAK,KAAK,OAAO,GAAG;AACzC,UAAM,QAAQ;AACd,WAAO;AAAA,MACL,UAAU;AAAA,QACR,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS,EAAE,CAAC,YAAY,EAAE,MAAM,SAAS,EAAE;AAAA,MAC7C;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA,EACA,oBAAoB;AAClB,QAAI,gBAAgB,KAAK,OAAO;AAC9B,YAAM,IAAI,MAAM,+CAA+C;AACjE,WAAO;AAAA,MACL,MAAM,SAAS;AAAA,MACf,UAAU,GAAG,KAAK,OAAO,KAAK,KAAK,iCAAiC;AAAA,MACpE,WAAW,KAAK,OAAO;AAAA,IACzB;AAAA,EACF;AAAA,EACA,IAAI,KAAK;AACP,UAAM,QAAQ,KAAK,KAAK,IAAI,GAAG;AAC/B,QAAI,QAAQ;AAAO,aAAO,eAAe,KAAK;AAAA,EAChD;AAAA,EACA,IAAI,KAAK,OAAO;AACd,UAAM,WAAW,KAAK,KAAK,IAAI,GAAG;AAClC,gBAAY,SAAS,QAAQ;AAC7B,UAAM,OAAO,eAAe,KAAK;AACjC,QACG,KAAK,eAAe,MAAM,GAAG,GAC9B,KAAK,KAAK,IAAI,KAAK,IAAI,GACvB,KAAK,QAAQ,KAAK,KAClB;AACA,YAAM,KAAK,KAAK,KAAK,WAAW;AAChC,WAAK,QAAQ,IAAI,KAAK,IAAI;AAC1B,YAAM,iBAAiB,oBAAI,IAAI;AAC/B,qBAAe,IAAI,KAAK,KAAK;AAAA,QAC3B,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS,EAAE,CAAC,MAAM,EAAE,MAAM,SAAS,EAAE;AAAA,MACvC,CAAC;AACD,YAAM,MAAM,KAAK,WAAW,KAAK,KAAK,KAAK,KAAK,IAAI;AACpD,WAAK,kBAAkB,IAAI,KAAK,GAAG,IAAI,GAAG,IAAI,CAAC,GAC7C,KAAK,KAAK;AAAA,QACR,KAAK,WAAW,KAAK,KAAK,KAAK,KAAK,IAAI;AAAA,QACxC,WACI,SAAS,WAAW,KAAK,KAAK,GAAG,IACjC,CAAC,EAAE,MAAM,OAAO,aAAa,GAAO,CAAC;AAAA,QACzC;AAAA,MACF;AAAA,IACJ;AAAA,EACF;AAAA,EACA,IAAI,OAAO;AACT,WAAO,KAAK,KAAK;AAAA,EACnB;AAAA,EACA,IAAI,KAAK;AACP,WAAO,KAAK,KAAK,IAAI,GAAG;AAAA,EAC1B;AAAA,EACA,OAAO,KAAK;AACV,UAAM,OAAO,KAAK,KAAK,IAAI,GAAG;AAC9B,QAAI,QAAQ;AAAM,aAAO;AACzB,QAAK,KAAK,QAAQ,GAAG,KAAK,KAAK,OAAO,GAAG,GAAG,KAAK,QAAQ,KAAK,KAAM;AAClE,YAAM,SAAS,GAAG,KAAK,GAAG,GACxB,iBAAiB,oBAAI,IAAI;AAC3B,qBAAe,IAAI,QAAQ;AAAA,QACzB,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS,EAAE,CAAC,MAAM,EAAE,MAAM,SAAS,EAAE;AAAA,MACvC,CAAC,GACC,KAAK,KAAK;AAAA,QACR;AAAA,UACE;AAAA,YACE,MAAM,OAAO;AAAA,YACb,IAAI,KAAK;AAAA,YACT,MAAM,KAAK,KAAK,aAAa;AAAA,UAC/B;AAAA,QACF;AAAA,QACA,KAAK,WAAW,QAAQ,GAAG;AAAA,QAC3B;AAAA,MACF;AAAA,IACJ;AACA,WAAO;AAAA,EACT;AAAA,EACA,UAAU;AACR,UAAM,gBAAgB,KAAK,KAAK,QAAQ;AACxC,WAAO;AAAA,MACL,CAAC,OAAO,YAAY;AAClB,eAAO;AAAA,MACT;AAAA,MACA,OAAO;AACL,cAAM,gBAAgB,cAAc,KAAK;AACzC,YAAI,cAAc;AAAM,iBAAO,EAAE,MAAM,MAAI,OAAO,OAAO;AACzD,eAAO;AAAA,UACL,OAAO;AAAA,YACL,cAAc,MAAM;AAAA,YACpB,eAAe,cAAc,MAAM,EAAE;AAAA,UACvC;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,CAAC,OAAO,YAAY;AAClB,WAAO,KAAK,QAAQ;AAAA,EACtB;AAAA,EACA,OAAO;AACL,WAAO,KAAK,KAAK,KAAK;AAAA,EACxB;AAAA,EACA,SAAS;AACP,UAAM,gBAAgB,KAAK,KAAK,OAAO;AACvC,WAAO;AAAA,MACL,CAAC,OAAO,YAAY;AAClB,eAAO;AAAA,MACT;AAAA,MACA,OAAO;AACL,cAAM,gBAAgB,cAAc,KAAK;AACzC,YAAI,cAAc;AAAM,iBAAO,EAAE,MAAM,MAAI,OAAO,OAAO;AACzD,eAAO,EAAE,OAAO,eAAe,cAAc,KAAK,EAAE;AAAA,MACtD;AAAA,IACF;AAAA,EACF;AAAA,EACA,QAAQ,UAAU;AAChB,eAAW,SAAS;AAAM,eAAS,MAAM,IAAI,MAAM,IAAI,IAAI;AAAA,EAC7D;AACF;AACA,IAAM,aAAN,cAAyB,aAAa;AAAA,EACpC,YAAY,MAAM,CAAC,GAAG;AACpB,UAAM,GAAI,KAAK,oBAAoB,oBAAI,IAAI;AAC3C,eAAW,OAAO,KAAK;AACrB,YAAM,QAAQ,IAAI;AAClB,iBAAW,SAAS,WAAW,KAAK,KAAK,MAAM,eAAe,MAAM,GAAG;AAAA,IACzE;AACA,SAAK,OAAO,IAAI,IAAI,OAAO,QAAQ,GAAG,CAAC;AAAA,EACzC;AAAA,EACA,WAAW,UAAU,WAAW,KAAK;AACnC,QAAI,QAAQ,KAAK;AACf,YAAM,IAAI,MAAM,uCAAuC;AACzD,UAAM,OAAO,QAAQ,MAAM,SAAS,IAAI,aAAa,GACnD,MAAM,CAAC,GACP,KACE,WAAW,YAAY,WAAW,YAC9B;AAAA,MACE,MAAM,OAAO;AAAA,MACb,IAAI,KAAK;AAAA,MACT;AAAA,MACA;AAAA,MACA;AAAA,MACA,MAAM,CAAC;AAAA,IACT,IACA,EAAE,MAAM,OAAO,eAAe,IAAI,KAAK,KAAK,MAAY,MAAM,CAAC,EAAE;AACzE,QAAI,KAAK,EAAE;AACX,eAAW,CAAC,KAAK,KAAK,KAAK,KAAK;AAC9B,iBAAW,KAAK,IACZ,IAAI,KAAK,GAAG,MAAM,WAAW,KAAK,KAAK,KAAK,GAAG,CAAC,IAC/C,GAAG,KAAK,OAAO;AACtB,WAAO;AAAA,EACT;AAAA,EACA,OAAO,aAAa,CAAC,IAAI,IAAI,GAAG,kBAAkB,KAAK;AACrD,UAAM,UAAU,IAAI,WAAW,KAAK,IAAI;AACxC,WACE,QAAQ,QAAQ,IAAI,GAAG,GACvB,KAAK,qBAAqB,SAAS,kBAAkB,GAAG;AAAA,EAE5D;AAAA,EACA,OAAO,qBAAqB,SAAS,kBAAkB,KAAK;AAC1D,UAAM,WAAW,iBAAiB,IAAI,GAAG,QAAQ,GAAG,CAAC;AACrD,QAAI,QAAQ;AAAU,aAAO;AAC7B,eAAW,CAAC,IAAI,IAAI,KAAK,UAAU;AACjC,YAAM,QAAQ,kBAAkB,CAAC,IAAI,IAAI,GAAG,kBAAkB,GAAG;AACjE,sBAAgB,KAAK,KAAK,MAAM,eAAe,SAAS,KAAK,SAAS,GACpE,QAAQ,KAAK,IAAI,KAAK,WAAW,KAAK;AAAA,IAC1C;AACA,WAAO;AAAA,EACT;AAAA,EACA,QAAQ,IAAI,KAAK;AACf,UAAM,QAAQ,IAAI,GAAG;AACrB,eAAW,CAAC,MAAM,KAAK,KAAK,KAAK;AAC/B,iBAAW,KAAK,KAAK,MAAM,QAAQ,IAAI,WAAW,GAAG,GAAG;AAAA,EAC5D;AAAA,EACA,aAAa,IAAI,QAAQ;AACvB,QAAI,QAAQ,KAAK;AACf,YAAM,IAAI,MAAM,0CAA0C;AAC5D,UAAM,EAAE,IAAQ,MAAY,WAAW,IAAI,IAAI,IAC7C,QAAQ,iBAAiB,EAAE;AAC7B,QAAI,WAAW,KAAK,KAAK,QAAQ,EAAE;AACjC,aACE,KAAK,kBAAkB,IAAI,GAAG,MAAM,QAClC,KAAK,kBAAkB,OAAO,GAAG,GACnC,EAAE,UAAU,MAAG;AAEnB,QAAI,WAAW,SAAS;AACtB,WAAK,kBAAkB,IAAI,KAAK,GAAG,IAAI,CAAC;AAAA,aACjC,WAAW,KAAK,kBAAkB,IAAI,GAAG;AAChD,aAAO,KAAK,kBAAkB,IAAI,GAAG,MAAM,QACtC,KAAK,kBAAkB,OAAO,GAAG,GAAG,EAAE,UAAU,MAAG,KACpD,EAAE,UAAU,MAAG;AACrB,UAAM,SAAS,GAAG,KAAK,GAAG,GACxB,gBAAgB,KAAK,KAAK,IAAI,GAAG;AACnC,QAAI;AACJ,WACE,WAAW,aAAa,KAClB,UAAU,cAAc,WAAW,QAAQ,GAAG,GAChD,cAAc,QAAQ,KACrB,UACC,WAAW,gBACP,CAAC,EAAE,MAAM,OAAO,mBAAmB,IAAI,QAAQ,IAAS,CAAC,IACzD;AAAA,MACE;AAAA,QACE,MAAM,OAAO;AAAA,QACb,IAAI;AAAA,QACJ,MAAM,EAAE,CAAC,MAAM,cAAc;AAAA,MAC/B;AAAA,IACF,GACV,KAAK,KAAK,IAAI,KAAK,KAAK,GACxB,gBAAgB,KAAK,MAClB,MAAM,eAAe,MAAM,GAAG,GAAG,MAAM,QAAQ,IAAI,KAAK,IAAI,IAC/D;AAAA,MACE;AAAA,MACA,UAAU;AAAA,QACR,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS,EAAE,CAAC,MAAM,EAAE,MAAM,SAAS,EAAE;AAAA,MACvC;AAAA,IACF;AAAA,EAEJ;AAAA,EACA,aAAa,OAAO;AAClB,QAAI,OAAO;AACT,YAAM,KAAK,GAAG,KAAK,GAAG,GACpB,YAAY,GAAG,MAAM,UAAU,GAC/B,UAAU,MAAM,WAAW,IAAI,WAAW,KAAK,IAAI;AACrD,iBAAW,CAAC,KAAK,KAAK,KAAK,KAAK;AAC9B,kBAAU,SAAS,KAAK,KAAK,OAAO,GAAG;AACzC,YAAM,QAAQ;AACd,aAAO;AAAA,QACL,UAAU;AAAA,UACR,MAAM;AAAA,UACN,MAAM;AAAA,UACN,SAAS,EAAE,CAAC,YAAY,EAAE,MAAM,SAAS,EAAE;AAAA,QAC7C;AAAA,QACA;AAAA,MACF;AAAA,IACF;AACA,WAAO,EAAE,UAAU,MAAG;AAAA,EACxB;AAAA,EACA,UAAU;AACR,UAAM,QAAQ;AACd,eAAW,SAAS,KAAK,KAAK,OAAO;AACnC,iBAAW,KAAK,KAAK,MAAM,QAAQ;AAAA,EACvC;AAAA,EACA,OAAO,IAAI,SAAS;AAClB,WAAO,GAAG,SAAS,OAAO,gBACtB,KAAK,aAAa,IAAI,OAAO,IAC7B,GAAG,SAAS,OAAO,oBACnB,KAAK,sBAAsB,EAAE,IAC7B,MAAM,OAAO,IAAI,OAAO;AAAA,EAC9B;AAAA,EACA,oBAAoB;AAClB,UAAM,OAAO,CAAC;AACd,eAAW,CAAC,KAAK,KAAK,KAAK,KAAK;AAC9B,iBAAW,KAAK,MAAM,KAAK,OAAO;AACpC,WAAO,gBAAgB,KAAK,OAAO,QAAQ,KAAK,OAAO,KAAK,MACxD;AAAA,MACE,MAAM,SAAS;AAAA,MACf,UAAU,KAAK,OAAO,KAAK;AAAA,MAC3B,WAAW,KAAK,OAAO;AAAA,MACvB;AAAA,IACF,IACA,EAAE,MAAM,SAAS,QAAQ,KAAW;AAAA,EAC1C;AAAA,EACA,aAAa,IAAI,SAAS;AACxB,QAAI,aAAa;AACjB,UAAM,KAAK,GAAG,KAAK,GAAG,GACpB,UAAU,CAAC,GACX,gBAAgB,EAAE,MAAM,OAAO,eAAe,IAAQ,MAAM,CAAC,EAAE;AACjE,YAAQ,KAAK,aAAa;AAC1B,eAAW,OAAO,GAAG,MAAM;AACzB,YAAM,WAAW,KAAK,KAAK,IAAI,GAAG;AAClC,iBAAW,QAAQ,KACd,QAAQ,KAAK,GAAG,SAAS,WAAW,IAAI,GAAG,CAAC,GAAG,SAAS,QAAQ,KACjE,WAAW,WACV,cAAc,KAAK,OAAO,WAC3B,WAAW,YACX,QAAQ,KAAK,EAAE,MAAM,OAAO,mBAAmB,IAAQ,IAAS,CAAC;AAAA,IACvE;AACA,UAAM,cAAc,CAAC;AACrB,eAAW,OAAO,GAAG,MAAM;AACzB,YAAM,QAAQ,GAAG,KAAK;AACtB,UAAI,WAAW;AAAO;AACtB,UAAI;AAAS,aAAK,kBAAkB,IAAI,KAAK,GAAG,GAAG,IAAI,CAAC;AAAA,WACnD;AACH,YAAI,QAAQ,KAAK,kBAAkB,IAAI,GAAG,GAAG;AAC3C,cAAI,KAAK,kBAAkB,IAAI,GAAG,MAAM,GAAG,MAAM;AAC/C,iBAAK,kBAAkB,OAAO,GAAG;AACjC;AAAA,UACF;AACA;AAAA,QACF;AACA,qBAAa;AAAA,MACf;AACA,YAAM,WAAW,KAAK,KAAK,IAAI,GAAG;AAClC,iBAAW,QAAQ,KAAK,SAAS,QAAQ,GACtC,aAAa,MACb,YAAY,OAAO,EAAE,MAAM,SAAS,GACrC,KAAK,KAAK,IAAI,KAAK,KAAK;AAAA,IAC5B;AACA,WACE,MAAM,OAAO,KAAK,cAAc,IAAI,EAAE,UACpC,QAAQ,QAAQ,aAAa,GAC/B,aACI;AAAA,MACE,UAAU,EAAE,MAAM,MAAM,MAAM,cAAc,SAAS,YAAY;AAAA,MACjE;AAAA,IACF,IACA,EAAE,UAAU,MAAG;AAAA,EAEvB;AAAA,EACA,sBAAsB,IAAI;AACxB,UAAM,MAAM,GAAG;AACf,QAAI,UAAO,KAAK,KAAK,IAAI,GAAG;AAAG,aAAO,EAAE,UAAU,MAAG;AACrD,QAAI,WAAW,KAAK,kBAAkB,IAAI,GAAG;AAAG,aAAO,EAAE,UAAU,MAAG;AACtE,UAAM,WAAW,KAAK,KAAK,IAAI,GAAG,GAChC,KAAK,GAAG,KAAK,GAAG;AAClB,QAAI,UAAU,CAAC;AACf,WACE,WAAW,QAAQ,KACb,UAAU,SAAS,WAAW,IAAI,GAAG,GAAG,GAAI,SAAS,QAAQ,KAC/D,WAAW,aACV,UAAU;AAAA,MACT,EAAE,MAAM,OAAO,eAAe,IAAQ,MAAM,EAAE,CAAC,MAAM,SAAS,EAAE;AAAA,IAClE,IACJ,KAAK,KAAK,OAAO,GAAG,GACpB;AAAA,MACE,UAAU;AAAA,QACR,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS,EAAE,CAAC,GAAG,MAAM,EAAE,MAAM,SAAS,EAAE;AAAA,MAC1C;AAAA,MACA;AAAA,IACF;AAAA,EAEJ;AAAA,EACA,WAAW;AACT,WAAQ,SAAU,UAAU;AAC1B,YAAM,MAAM,CAAC;AACb,iBAAW,CAAC,KAAK,GAAG,KAAK;AAAU,YAAI,OAAO;AAC9C,aAAO;AAAA,IACT,EAAG,KAAK,IAAI;AAAA,EACd;AAAA,EACA,IAAI,KAAK,OAAO;AACd,SAAK,OAAO,EAAE,CAAC,MAAM,MAAM,CAAC;AAAA,EAC9B;AAAA,EACA,IAAI,KAAK;AACP,WAAO,KAAK,KAAK,IAAI,GAAG;AAAA,EAC1B;AAAA,EACA,OAAO,KAAK;AACV,UAAM,cAAc,KAClB,WAAW,KAAK,KAAK,IAAI,WAAW;AACtC,QAAI,WAAW;AAAU;AACzB,QAAI,QAAQ,KAAK,QAAQ,QAAQ,KAAK;AACpC,aACE,WAAW,QAAQ,KAAK,SAAS,QAAQ,GACzC,KAAK,KAAK,KAAK,OAAO,WAAW;AAErC,QAAI;AACJ,eAAW,QAAQ,KACd,SAAS,QAAQ,GACjB,UAAU,SAAS,WAAW,KAAK,KAAK,WAAW,KACnD,UAAU;AAAA,MACT;AAAA,QACE,MAAM,OAAO;AAAA,QACb,MAAM,EAAE,CAAC,cAAc,SAAS;AAAA,QAChC,IAAI,KAAK;AAAA,MACX;AAAA,IACF,GACF,KAAK,KAAK,OAAO,WAAW;AAC9B,UAAM,iBAAiB,oBAAI,IAAI;AAC/B,mBAAe,IAAI,KAAK,KAAK;AAAA,MAC3B,MAAM;AAAA,MACN,MAAM;AAAA,MACN,SAAS,EAAE,CAAC,MAAM,EAAE,MAAM,SAAS,EAAE;AAAA,IACvC,CAAC,GACC,KAAK,KAAK;AAAA,MACR;AAAA,QACE;AAAA,UACE,MAAM,OAAO;AAAA,UACb,KAAK;AAAA,UACL,IAAI,KAAK;AAAA,UACT,MAAM,KAAK,KAAK,aAAa;AAAA,QAC/B;AAAA,MACF;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACJ;AAAA,EACA,OAAO,WAAW;AAChB,QAAI,QAAQ,KAAK,QAAQ,QAAQ,KAAK,KAAK;AACzC,iBAAW,OAAO,WAAW;AAC3B,cAAM,WAAW,UAAU;AAC3B,YAAI,WAAW;AAAU;AACzB,cAAM,WAAW,KAAK,KAAK,IAAI,GAAG;AAClC,mBAAW,QAAQ,KAAK,SAAS,QAAQ,GACvC,WAAW,QAAQ,KAAK,SAAS,eAAe,MAAM,GAAG,GACzD,KAAK,KAAK,IAAI,KAAK,QAAQ;AAAA,MAC/B;AACA;AAAA,IACF;AACA,UAAM,MAAM,CAAC,GACX,aAAa,CAAC,GACd,OAAO,KAAK,KAAK,aAAa,GAC9B,eAAe,CAAC,GAChB,kBAAkB,EAAE,IAAI,KAAK,KAAK,MAAM,OAAO,eAAe,MAAM,CAAC,EAAE,GACvE,cAAc,CAAC;AACjB,eAAW,OAAO,WAAW;AAC3B,YAAM,WAAW,UAAU;AAC3B,UAAI,WAAW;AAAU;AACzB,YAAM,WAAW,KAAK,KAAK,IAAI,GAAG;AAClC,UACG,WAAW,QAAQ,KACf,WAAW,KAAK,GAAG,SAAS,WAAW,KAAK,KAAK,GAAG,CAAC,GACtD,SAAS,QAAQ,KACjB,WAAW,WACX,WAAW,KAAK;AAAA,QACd,MAAM,OAAO;AAAA,QACb,IAAI,KAAK;AAAA,QACT;AAAA,MACF,CAAC,IACA,gBAAgB,KAAK,OAAO,UACjC,WAAW,QAAQ,GACnB;AACA,iBAAS,eAAe,MAAM,GAAG,GAC/B,SAAS,QAAQ,KAAK,KAAK,WAAW,GAAG,KAAK,IAAI;AACpD,cAAM,oBAAoB,SAAS,WAAW,KAAK,KAAK,KAAK,KAAK,IAAI,GACpE,eAAe,kBAAkB;AAAA,UAC/B,CAAC,OAAO,GAAG,aAAa,KAAK;AAAA,QAC/B;AACF,wBAAgB,KAAK,kBAAkB,IAAI,KAAK,GAAG,aAAa,IAAI,CAAC,GACnE,IAAI,KAAK,GAAG,iBAAiB;AAAA,MACjC;AACE,QAAC,aAAa,OAAO,UAAW,KAAK,kBAAkB,IAAI,KAAK,IAAI;AACtE,WAAK,KAAK,IAAI,KAAK,QAAQ,GAAI,YAAY,OAAO,EAAE,MAAM,SAAS;AAAA,IACrE;AACA,UAAM,OAAO,KAAK,gBAAgB,IAAI,EAAE,UACtC,WAAW,QAAQ,eAAe,GAClC,MAAM,OAAO,KAAK,YAAY,EAAE,UAC9B,IAAI,QAAQ;AAAA,MACV;AAAA,MACA,IAAI,KAAK;AAAA,MACT,MAAM,OAAO;AAAA,MACb,MAAM;AAAA,IACR,CAAC;AACL,UAAM,iBAAiB,oBAAI,IAAI;AAC/B,mBAAe,IAAI,KAAK,KAAK;AAAA,MAC3B,MAAM;AAAA,MACN,MAAM;AAAA,MACN,SAAS;AAAA,IACX,CAAC,GACC,KAAK,KAAK,SAAS,KAAK,YAAY,cAAc;AAAA,EACtD;AACF;AACA,SAAS,OAAO,OAAO,MAAM;AAC3B,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ;AAChC,QAAI,MAAM,OAAO,MAAM;AACrB,YAAM,OAAO,GAAG,CAAC;AACjB;AAAA,IACF;AACJ;AACA,SAAS,QAAQ,OAAO;AACtB,SAAO,MAAM,OAAO,CAAC,SAAS,QAAQ,IAAI;AAC5C;AACA,SAAS,qBAAqB,IAAI;AAChC,SAAO,eAAe,iBAAiB,EAAE,CAAC;AAC5C;AACA,SAAS,iBAAiB,IAAI;AAC5B,UAAQ,GAAG;AAAA,SACJ,OAAO;AACV,aAAO,GAAG;AAAA,SACP,OAAO;AACV,aAAO,IAAI,WAAW,GAAG,IAAI;AAAA,SAC1B,OAAO;AACV,aAAO,IAAI,QAAQ;AAAA,SAChB,OAAO;AACV,aAAO,IAAI,SAAS;AAAA;AAEpB,aAAO,YAAY,GAAG,qBAAqB;AAAA;AAEjD;AACA,SAAS,oBAAoB,MAAM,QAAQ;AACzC,SACE,SAAS,UACR,gBAAgB,KAAK,OAAO,QAC3B,oBAAoB,KAAK,OAAO,MAAM,MAAM;AAElD;AACA,SAAS,YAAY,CAAC,IAAI,IAAI,GAAG,kBAAkB,KAAK;AACtD,UAAQ,KAAK;AAAA,SACN,SAAS;AACZ,aAAO,WAAW,aAAa,CAAC,IAAI,IAAI,GAAG,kBAAkB,GAAG;AAAA,SAC7D,SAAS;AACZ,aAAO,SAAS,aAAa,CAAC,IAAI,IAAI,GAAG,kBAAkB,GAAG;AAAA,SAC3D,SAAS;AACZ,aAAO,QAAQ,aAAa,CAAC,IAAI,IAAI,GAAG,kBAAkB,GAAG;AAAA,SAC1D,SAAS;AACZ,aAAO,aAAa,aAAa,CAAC,IAAI,IAAI,GAAG,kBAAkB,GAAG;AAAA;AAElE,YAAM,IAAI,MAAM,sBAAsB;AAAA;AAE5C;AACA,SAAS,kBAAkB,CAAC,IAAI,IAAI,GAAG,kBAAkB,KAAK;AAC5D,UAAQ,KAAK;AAAA,SACN,SAAS;AACZ,aAAO,WAAW,aAAa,CAAC,IAAI,IAAI,GAAG,kBAAkB,GAAG;AAAA,SAC7D,SAAS;AACZ,aAAO,SAAS,aAAa,CAAC,IAAI,IAAI,GAAG,kBAAkB,GAAG;AAAA,SAC3D,SAAS;AACZ,aAAO,QAAQ,aAAa,CAAC,IAAI,IAAI,GAAG,kBAAkB,GAAG;AAAA,SAC1D,SAAS;AACZ,aAAO,KAAK;AAAA;AAEZ,YAAM,IAAI,MAAM,sBAAsB;AAAA;AAE5C;AACA,SAAS,gBAAgB,OAAO;AAC9B,SACE,WAAW,KAAK,KACf,SAAUG,QAAO;AAChB,WAAOA,kBAAiB;AAAA,EAC1B,EAAG,KAAK,KACR,aAAa,KAAK;AAEtB;AACA,SAAS,WAAW,OAAO;AACzB,SACE,gBAAgB,KAAK,KACpB,SAAUA,QAAO;AAChB,WAAOA,kBAAiB;AAAA,EAC1B,EAAG,KAAK;AAEZ;AACA,SAAS,WAAW,OAAO;AACzB,SAAO,iBAAiB;AAC1B;AACA,SAAS,aAAa,OAAO;AAC3B,SAAO,iBAAiB;AAC1B;AACA,SAAS,eAAe,KAAK;AAC3B,SAAO,eAAe,eAClB,IAAI,OACJ,eAAe,YACf,eAAe,WACf,eAAe,aACf,MACA,YAAY,GAAG,sBAAsB;AAC3C;AACA,SAAS,eAAe,OAAO;AAC7B,SAAO,iBAAiB,cACtB,iBAAiB,WACjB,iBAAiB,WACf,QACA,IAAI,aAAa,KAAK;AAC5B;AACA,SAAS,uBAAuB,cAAc,UAAU;AACtD,QAAM,MAAM,CAAC;AACb,SACE,aAAa,QAAQ,CAAC,GAAG,OAAO;AAC9B,aAAS,IAAI,EAAE,KAAK,IAAI,KAAK,EAAE,MAAM,OAAO,aAAa,GAAO,CAAC;AAAA,EACnE,CAAC,GACD,SAAS,QAAQ,CAAC,MAAM,OAAO;AAC7B,UAAM,cAAc,aAAa,IAAI,EAAE;AACvC,QAAI;AACF,WAAK,SAAS,SAAS,WACnB,YAAY,SAAS,SAAS,UAC9B,KAAK,UAAU,KAAK,IAAI,MAAM,KAAK,UAAU,YAAY,IAAI,KAC7D,IAAI,KAAK,EAAE,MAAM,OAAO,eAAe,IAAQ,MAAM,KAAK,KAAK,CAAC,IAClE,KAAK,cAAc,YAAY,aAC7B,IAAI,KAAK;AAAA,QACP,MAAM,OAAO;AAAA,QACb;AAAA,QACA,WAAW,GAAG,KAAK,WAAW,gCAAgC;AAAA,MAChE,CAAC;AAAA;AAEL,cAAQ,KAAK;AAAA,aACN,SAAS;AACZ,cAAI,KAAK;AAAA,YACP,MAAM,OAAO;AAAA,YACb;AAAA,YACA,UAAU,KAAK;AAAA,YACf,WAAW,KAAK;AAAA,YAChB,MAAM,KAAK;AAAA,UACb,CAAC;AACD;AAAA,aACG,SAAS;AACZ,cAAI,KAAK;AAAA,YACP,MAAM,OAAO;AAAA,YACb;AAAA,YACA,UAAU,KAAK;AAAA,YACf,WAAW,KAAK;AAAA,UAClB,CAAC;AACD;AAAA,aACG,SAAS;AACZ,cAAI;AAAA,YACF,KAAK,WACD;AAAA,cACE,MAAM,OAAO;AAAA,cACb;AAAA,cACA,UAAU,KAAK;AAAA,cACf,WAAW,KAAK;AAAA,cAChB,MAAM,KAAK;AAAA,YACb,IACA,EAAE,MAAM,OAAO,eAAe,IAAQ,MAAM,KAAK,KAAK;AAAA,UAC5D;AACA;AAAA,aACG,SAAS;AACZ,cAAI,KAAK;AAAA,YACP,MAAM,OAAO;AAAA,YACb;AAAA,YACA,UAAU,KAAK;AAAA,YACf,WAAW,KAAK;AAAA,UAClB,CAAC;AAAA;AAAA,EAET,CAAC,GACD;AAEJ;AACA,SAAS,oBAAoB,OAAO,QAAQ;AAC1C,SAAO,QACH,iBAAiB,MAAM,QAAQ,iBAAiB,OAAO,OACpD,SAAUC,QAAOC,SAAQ;AACxB,UAAM,UAAUD,OAAM;AACtB,eAAW,CAAC,KAAK,KAAK,KAAK,QAAQC,QAAO,OAAO;AAC/C,cAAQ,OAAO;AACjB,WAAO,OAAO,OAAO,OAAO,OAAO,CAAC,GAAGA,OAAM,GAAG,EAAE,QAAiB,CAAC;AAAA,EACtE,EAAG,OAAO,MAAM,IAChB,cAAc,MAAM,QAAQ,cAAc,OAAO,OAChD,SAAUD,QAAOC,SAAQ;AACxB,UAAM,UAAUD,OAAM;AACtB,eAAW,CAAC,KAAK,KAAK,KAAK,QAAQC,QAAO,OAAO;AAC/C,cAAQ,OAAO;AACjB,WAAO,OAAO,OAAO,OAAO,OAAO,CAAC,GAAGA,OAAM,GAAG,EAAE,QAAiB,CAAC;AAAA,EACtE,EAAG,OAAO,MAAM,IAChB,eAAe,MAAM,QAAQ,eAAe,OAAO,OAClD,SAAUD,QAAOC,SAAQ;AACxB,UAAM,UAAUD,OAAM;AACtB,WAAO,OAAO,OAAO,OAAO,OAAO,CAAC,GAAGC,OAAM,GAAG;AAAA,MAC9C,SAAS,QAAQ,OAAOA,QAAO,OAAO;AAAA,IACxC,CAAC;AAAA,EACH,EAAG,OAAO,MAAM,IAChB,SACF;AACN;AAYA,SAAS,cAAc,MAAM;AAC3B,SACE,SAAS,QACT,YAAY,OAAO,QACnB,sBAAsB,OAAO,UAAU,SAAS,KAAK,IAAI;AAE7D;AAiBA,SAAS,QAAQ,KAAK;AACpB,SAAO,OAAO,QAAQ,GAAG;AAC3B;AACA,SAAS,aAAa,YAAY;AAChC,MAAI;AACF,WAAO,KAAK,MAAM,UAAU;AAAA,EAC9B,SAAS,GAAP;AACA;AAAA,EACF;AACF;AACA,SAAS,UAAU,UAAU;AAC3B,MAAI;AACF,UAAM,iBAAiB,SAAS,QAAQ,MAAM,GAAG,EAAE,QAAQ,MAAM,GAAG;AACpE,WAAO;AAAA,MACL,KAAK,cAAc,EAChB,MAAM,EAAE,EACR,IAAI,SAAU,GAAG;AAChB,eAAO,OAAO,OAAO,EAAE,WAAW,CAAC,EAAE,SAAS,EAAE,GAAG,MAAM,EAAE;AAAA,MAC7D,CAAC,EACA,KAAK,EAAE;AAAA,IACZ;AAAA,EACF,SAAS,KAAP;AACA,WAAO,KAAK,QAAQ;AAAA,EACtB;AACF;AASA,SAAS,eAAe,OAAO;AAC7B,QAAM,MAAM,KAAK,IAAI,IAAI;AACzB,SAAO,MAAM,MAAM,MAAM,OAAO,MAAM,MAAM,MAAM;AACpD;AAIA,SAAS,aAAa,OAAO;AAC3B,SAAO,MAAM,QAAQ,KAAK,KAAK,MAAM,MAAM,CAAC,MAAM,YAAY,OAAO,CAAC;AACxE;AAQA,SAAS,gBAAgB,MAAM;AAC7B,SACE,YAAY,OAAO,KAAK,SACxB,YAAY,OAAO,KAAK,UACxB,YAAY,OAAO,KAAK,UACvB,WAAW,KAAK,MAAM,YAAY,OAAO,KAAK,OAC/C,aAAa,KAAK,MAAM,MACvB,WAAW,KAAK,yBACf,YAAY,OAAO,KAAK;AAE9B;AAIA,SAAS,cAAc,OAAO;AAC5B,QAAM,aAAa,MAAM,MAAM,GAAG;AAClC,MAAI,MAAM,WAAW;AACnB,UAAM,IAAI,MAAM,yCAAyC;AAC3D,QAAM,OAAO,aAAa,UAAU,WAAW,EAAE,CAAC;AAClD,MACE,QACC,SAAUC,OAAM;AACf,QAAI,CAAC,cAAcA,KAAI;AAAG,aAAO;AACjC,UAAM,EAAE,KAAU,IAAS,IAAIA;AAC/B,WAAO,YAAY,OAAO,OAAO,YAAY,OAAO;AAAA,EACtD,EAAG,IAAI;AAEP,WAAO;AACT,QAAM,IAAI,MAAM,4CAA4C;AAC9D;AACA,SAAS,mBAAmB,aAAa;AACvC,QAAM,OAAO,cAAc,WAAW;AACtC,MAAI,QAAQ,gBAAgB,IAAI,GAAG;AACjC,WAAO,OAAO,MAAM,CAAC,gBAAgB,CAAC;AAAA,EACxC;AACA,QAAM,IAAI;AAAA,IACR;AAAA,EACF;AACF;AACA,SAAS,aAAa,MAAM;AAC1B,SACE,SAAS,QACT,YAAY,OAAO,QACnB,YAAY,OAAO,QACnB,aAAa,OAAO;AAExB;AACA,SAAS,YAAY,MAAM;AACzB,SAAO,MAAM,QAAQ,IAAI;AAC3B;AACA,SAAS,aAAa,MAAM;AAC1B,SAAO,CAAC,aAAa,IAAI,KAAK,CAAC,YAAY,IAAI;AACjD;;;AC58DA,IAAM,uBAAuB,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG;AAA/D,IACE,4BAA4B,CAAC,KAAK,KAAK,KAAK,GAAG;AACjD,SAAS,WAAW,SAAS;AAC3B,QAAM,QAAQ,OAAO,OAAO,OAAO,EAAE;AAAA,IAAI,CAAC,SACxC,OAAO,MAAM,CAAC,6BAA6B,CAAC;AAAA,EAC9C;AACA,SAAO;AAAA,IACL,IAAI,QAAQ;AACV,aAAO,MAAM;AAAA,IACf;AAAA,IACA,CAAC,OAAO,WAAW,MAAM,MAAM,OAAO,UAAU;AAAA,IAChD,KAAK,CAAC,aAAa,MAAM,IAAI,QAAQ;AAAA,IACrC,SAAS,MAAM;AAAA,EACjB;AACF;AACA,SAAS,iBAAiB,OAAO,SAAS,eAAe;AACvD,QAAM,UAAU,iBAAiB;AAAA,IAC/B,aAAa,MAAM,iBAAiB;AAClC,YAAM,WAAW,MAAM,OACrB,cAAc,SAAS,YAAY,mBAAmB,QAAQ;AAChE,UAAI,CAAC,eAAe,eAAe,WAAW;AAC5C,eAAO,KAAK,QAAQ,MAAM,EACvB,KAAK,CAAC,EAAE,MAAa,MAAM;AAC1B,cAAI,qBAAqB,MAAM,WAAW;AAAO;AACjD;AAAA,YACE,mBAAmB,KAAK;AAAA,YACxB,gBAAgB,KAAK;AAAA,UACvB,GACG,MAAM,QAAQ;AAAA,QACnB,CAAC,EACA;AAAA,UAAM,CAAC,OACL,SAAU,OAAO;AAChB,YACE,QAAQ,MAAM,0CAA0C,KAAK;AAC/D,YAAC,MAAM,QAAQ,MACb,iBAAiB,EAAE,OAAO,cAAc,CAAC,GACzC,MAAM,iBACL,MAAM,eAAe,YAAY,QAAQ;AAAA,cACxC,cAAc;AAAA,YAChB;AAAA,UACJ,EAAG,cAAc,QAAQ,KAAK,IAAI,MAAM,OAAO,EAAE,CAAC,CAAC;AAAA,QACrD;AACJ,4BAAsB,aAAa,gBAAgB,QAAQ,CAAC;AAAA,IAC9D;AAAA,IACA,KAAK,mBAAmB;AACtB,UAAI,QAAQ,MAAM;AAChB,cAAM,IAAI,MAAM,sCAAsC;AACxD,YAAM,OAAO,KAAK,KAAK,UAAU,iBAAiB,CAAC;AAAA,IACrD;AAAA,IACA,YAAY,CAAC,UAAU,WAAW,aAAa,KAAK;AAAA,IACpD,wBAAwB,MAAM,YAAY,WAAW,GAAG;AAAA,IACxD,qBAAqB,MAAM,WAAW,aAAa,GAAG;AAAA,IACtD,mBAAmB,CAAC,UAAU,WAAW,SAAS,KAAK;AAAA,EACzD;AACA,WAAS,iBAAiB,UAAU;AAClC,WACE,MAAM,UAAU,QAAQ,KAAK,QAAQ,GACrC,MAAM,OAAO,MAAM,UAAU,SAAS,QAAQ;AAAA,EAElD;AACA,WAAS,8BAA8B,SAAS;AAC9C,QAAI,MAAM,QAAQ,MAAM;AACtB,YAAM,IAAI,MAAM,mDAAmD;AACrE,UAAM,OACD,SAAU,OAAO;AAChB,UAAI,CAAC,MAAM;AAAM;AACjB,YAAM,eAAe,oBAAI,IAAI;AAC7B,YAAM,MAAM,QAAQ,CAAC,UAAU,OAAO;AACpC,qBAAa,IAAI,IAAI,SAAS,kBAAkB,CAAC;AAAA,MACnD,CAAC;AACD,YAAM,MAAM,uBAAuB,cAAc,IAAI,IAAI,KAAK,CAAC;AAC/D,aAAO,MAAM,KAAK,KAAE,EAAE,OAAO;AAAA,IAC/B,EAAG,QAAQ,KAAK,IACf,MAAM,OAAQ,SAAU,OAAO;AAC9B,YAAM,CAAC,MAAM,gBAAgB,IAAK,SAAUC,QAAO;AACjD,cAAMC,oBAAmB,oBAAI,IAAI;AACjC,YAAIC,QAAO;AACX,mBAAW,CAAC,IAAI,IAAI,KAAKF;AACvB,cAAI,WAAW,IAAI;AAAG,YAAAE,QAAO,CAAC,IAAI,IAAI;AAAA,eACjC;AACH,kBAAM,QAAQ,CAAC,IAAI,IAAI,GACrB,WAAWD,kBAAiB,IAAI,KAAK,QAAQ;AAC/C,oBAAQ,WACJ,SAAS,KAAK,KAAK,IACnBA,kBAAiB,IAAI,KAAK,UAAU,CAAC,KAAK,CAAC;AAAA,UACjD;AACF,YAAI,QAAQC;AAAM,gBAAM,IAAI,MAAM,oBAAoB;AACtD,eAAO,CAACA,OAAMD,iBAAgB;AAAA,MAChC,EAAG,KAAK;AACR,aAAO,WAAW,aAAa,MAAM,kBAAkB;AAAA,QACrD;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,UAAU;AAAA,QACV,QAAQ,QAAQ;AAAA,MAClB,CAAC;AAAA,IACH,EAAG,QAAQ,KAAK;AACpB,eAAW,OAAO,MAAM;AACtB,cAAQ,MAAM,KAAK,IAAI,GAAG,KACxB,MAAM,KAAK,IAAI,KAAK,MAAM,mBAAmB,IAAI;AAAA,EACvD;AACA,WAAS,QAAQ,IAAI,UAAU;AAC7B,UAAM,MAAM,IAAI,IAAI,QAAQ;AAAA,EAC9B;AACA,WAAS,WAAW,IAAI;AACtB,UAAM,MAAM,OAAO,EAAE;AAAA,EACvB;AACA,WAAS,QAAQ,IAAI;AACnB,WAAO,MAAM,MAAM,IAAI,EAAE;AAAA,EAC3B;AACA,WAAS,eAAe,aAAa;AACnC,UAAM,UAAU,UAAU,MAAM,MAAM,UAAU,MAAM,GACpD,MAAM,kBACF,MAAM,cAAc,QAAQ,GAAG,WAAW,IAC1C,MAAM,UAAU,KAAK,WAAW;AAAA,EACxC;AACA,WAAS,gBAAgB,KAAK,SAAS,gBAAgB;AACrD,UAAM,cACD,MAAM,MAAM,IAAI,KAAK,GAAG,GAAG,GAC5B,eAAe,QAAQ,CAAC,OAAO,QAAQ;AACrC,YAAM,MAAM,QAAQ,eAAe;AAAA,QACjC;AAAA,QACA;AAAA,UACE,MAAM,MAAM,QAAQ,eAAe,IAAI,GAAG;AAAA,UAC1C;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC,GACD,MAAM,MAAM,WAAW,KAAK,GAAG,OAAO,MACrC,eAAe,OAAO,GACtB,MAAM,YAAY,CAAC,GACpB,SAAS,GAAG,GACZ,OAAO,EAAE,eAA+B,CAAC;AAAA,EAC/C;AACA,WAAS,OAAO;AAAA,IACd,iBAAiC,oBAAI,IAAI;AAAA,IACzC,WAAqB;AAAA,IACrB,QAAQ,cAAc,CAAC;AAAA,EACzB,GAAG;AACD,QAAI,YAAY,SAAS,GAAG;AAC1B,YAAM,SAAS,WAAW,MAAM,KAAK;AACrC,iBAAW,SAAS;AAClB,mBAAW,YAAY,MAAM,UAAU;AACrC,mBAAS,MAAM,QAAQ,KAAK;AAAA,IAClC;AACA,QAAI;AACF,iBAAW,YAAY,MAAM,UAAU;AAAgB,iBAAS,MAAM,EAAE;AAC1E,QAAI,eAAe,OAAO;AACxB,iBAAW,cAAc,MAAM,UAAU;AACvC,mBAAW,MAAM,KAAK,eAAe,OAAO,CAAC,CAAC;AAAA,EACpD;AACA,WAAS,kBAAkB;AACzB,QACE,WAAW,MAAM,WAAW,SAC5B,iBAAiB,MAAM,WAAW;AAElC,aAAO,MAAM,WAAW;AAC1B,QAAI,SAAS,MAAM;AAAkB,aAAO,MAAM;AAClD,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AACA,WAAS,aAAa;AACpB,WAAO,GAAG,gBAAgB,KAAK,MAAM;AAAA,EACvC;AACA,WAAS,eAAe;AACtB,WAAO,GAAG,gBAAgB,KAAK,MAAM;AAAA,EACvC;AACA,WAAS,MAAM,MAAM,SAAS;AAC5B,UAAM,SAAS;AAAA,MACX,SAAS,CAAC;AAAA,MACV,SAAS,EAAE,gBAAgB,oBAAI,IAAI,GAAG,UAAU,MAAG;AAAA,IACrD,GACA,iBAAiB,oBAAI,IAAI;AAC3B,eAAW,MAAM;AACf,UAAI,eAAe,GAAG,MAAM;AAC1B,cAAM,UAAU,EAAE,MAAM,YAAY,MAAM,CAAC,EAAE;AAC7C,mBAAW,OAAO,GAAG;AAAM,kBAAQ,KAAK,OAAO,MAAM,GAAG;AACxD,YACI,MAAM,KAAK,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,MAAM,EAAE,GAAG,GAAG,IAAI,GAC/D,QAAQ,MAAM,OAAO;AAErB,gBAAM,OAAO,WAAW,GAAG;AAAA;AAE3B,qBAAW,OAAO,GAAG;AAAM,kBAAM,OAAO,SAAS,OAAO,GAAG,KAAK;AAClE,eAAO,QAAQ,QAAQ,OAAO,GAAI,OAAO,QAAQ,WAAW;AAAA,MAC9D,OAAO;AACL,YAAI;AACJ,YAAK,GAAG,SAAS,GAAG,OAAO,aAAa,IAAI;AAC1C,mBAAS,SAAS;AAAA,aACf;AACH,mBAAS,MAAM,kBAAkB,OAAO,GAAG,GAAG,IAAI,CAAC,IAC/C,SAAS,MACT,SAAS;AAAA,QACf;AACA,cAAM,gBAAgB,QAAQ,IAAI,MAAM;AACxC,YAAI,cAAc,UAAU;AAC1B,gBAAM,WACJ,gBAAgB,cAAc,SAAS,KAAK,OAAO,OAC/C;AAAA,YACE,cAAc,SAAS,KAAK,OAAO,KAAK;AAAA,YACxC;AAAA,UACF,IACA;AACN,UAAC,YAAY,eAAe,IAAI,QAAQ,MACrC,OAAO,QAAQ,eAAe;AAAA,YAC7B,GAAG,cAAc,SAAS,KAAK,GAAG;AAAA,YAClC;AAAA,cACE,OAAO,QAAQ,eAAe;AAAA,gBAC5B,GAAG,cAAc,SAAS,KAAK,GAAG;AAAA,cACpC;AAAA,cACA,cAAc;AAAA,YAChB;AAAA,UACF,GACA,OAAO,QAAQ,QAAQ,GAAG,cAAc,OAAO,IAC9C,GAAG,SAAS,OAAO,eAClB,GAAG,SAAS,OAAO,cACnB,GAAG,SAAS,OAAO,iBACnB,eAAe,IAAI,GAAG,cAAc,SAAS,KAAK,GAAG,CAAC;AAAA,QAC5D;AAAA,MACF;AACF,WAAO;AAAA,EACT;AACA,WAAS,QAAQ,IAAI,QAAQ;AAC3B,YAAQ,GAAG;AAAA,WACJ,OAAO;AAAA,WACP,OAAO;AAAA,WACP,OAAO,aAAa;AACvB,cAAM,OAAO,MAAM,MAAM,IAAI,GAAG,EAAE;AAClC,eAAO,QAAQ,OACX,EAAE,UAAU,MAAG,IACf,KAAK,OAAO,IAAI,WAAW,SAAS,kBAAkB;AAAA,MAC5D;AAAA,WACK,OAAO,gBAAgB;AAC1B,cAAM,OAAO,MAAM,MAAM,IAAI,GAAG,EAAE;AAClC,eAAO,QAAQ,OACX,EAAE,UAAU,MAAG,IACf,gBAAgB,KAAK,OAAO,QAAQ,WAAW,KAAK,OAAO,IAAI,IAC/D,KAAK,OAAO,KAAK,aAAa,GAAG,WAAW,MAAM,MAAM,IACxD,EAAE,UAAU,MAAG;AAAA,MACrB;AAAA,WACK,OAAO;AAAA,WACP,OAAO;AAAA,WACP,OAAO;AAAA,WACP,OAAO,iBAAiB;AAC3B,YAAI,WAAW,GAAG;AAAU,iBAAO,EAAE,UAAU,MAAG;AAClD,cAAM,SAAS,MAAM,MAAM,IAAI,GAAG,QAAQ;AAC1C,eAAO,QAAQ,SACX,EAAE,UAAU,MAAG,IACf,OAAO,aAAa,IAAI,MAAM;AAAA,MACpC;AAAA;AAAA,EAEJ;AACA,WAAS,UAAU;AACjB,QAAI,IAAI,IAAI,IAAI;AAChB,QACE,aAAa,MAAM,WAAW,SAC9B,kBAAkB,MAAM,WAAW;AAEnC,aAAO;AACT,UAAM,OAAQ,SAAU,gBAAgB,eAAe;AACnD,UAAI,aAAa,eAAe,MAAM;AACpC,YAAI,eAAe,OAAO,UAAU,QAAQ;AAC1C,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AACF,eAAO,CAAC,SACN,kBAAkB,iBAAiB,OAAO,eAAe,KAAK;AAAA,UAC5D;AAAA,UACA,cAAc,eAAe;AAAA,QAC/B,CAAC;AAAA,MACL;AACA,UAAI,cAAc,eAAe,MAAM;AACrC,YAAI,eAAe,OAAO,UAAU,QAAQ;AAC1C,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AACF,eAAO,CAAC,SACN,kBAAkB,iBAAiB,OAAO,eAAe,KAAK;AAAA,UAC5D;AAAA,QACF,CAAC;AAAA,MACL;AACA,UAAI,aAAa,eAAe,MAAM;AACpC,eAAO,CAAC,SACN,eAAe,SAAS,IAAI,EAAE,KAAK,CAAC,aAAa;AAC/C,cAAI,CAAC,YAAY,CAAC,SAAS;AACzB,kBAAM,IAAI;AAAA,cACR;AAAA,YACF;AACF,iBAAO;AAAA,QACT,CAAC;AAAA,MACL;AACA,YAAM,IAAI,MAAM,gDAAgD;AAAA,IAClE;AAAA,MACE,QAAQ;AAAA,MACR,UACG,KACC,UAAU,KAAK,QAAQ,cAAc,WAAW,KAC5C,SACA,GAAG,UAAU,WAAW,KAC5B,KACA,QAAQ;AAAA,IACd,GACA,kBAAmB,SAAU,kBAAkB,mBAAmB;AAChE,UAAI,eAAe,OAAO,UAAU,QAAQ;AAC1C,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AACF,YAAM,KAAK,qBAAqB;AAChC,aAAO,CAAC,UACN,IAAI,GAAG,GAAG,2BAA2B,sBAAsB;AAAA,IAC/D;AAAA,MACE,QAAQ;AAAA,MACR,UACG,KACC,UAAU,KAAK,QAAQ,cAAc,WAAW,KAC5C,SACA,GAAG,cAAc,WAAW,KAChC,KACA,QAAQ;AAAA,IACd;AACF,qBAAiB,EAAE,OAAO,iBAAiB,CAAC,GAC1C,QAAQ,aAAa,MAAM,eAAe;AAAA,EAC9C;AACA,WAAS,sBAAsB,OAAO,QAAQ;AAC5C,WAAO,iBAAiB,WAAW,SAAS,GAC1C,OAAO,iBAAiB,QAAQ,MAAM,GACtC,OAAO,iBAAiB,SAAS,OAAO,GACxC,OAAO,iBAAiB,SAAS,OAAO,GACxC,iBAAiB;AAAA,MACf,OAAO;AAAA,MACP,IAAI,MAAM;AAAA,MACV,UAAU,MAAM;AAAA,MAChB,QAAQ,MAAM;AAAA,IAChB,CAAC,GACA,MAAM,YAAa,SAAU,cAAc;AAC1C,UAAI,QAAQ;AACZ,aAAO,MAAM,GAAG,gBAAgB;AAAA,IAClC,EAAG,MAAM,KAAK,GACb,MAAM,SAAS;AAAA,EACpB;AACA,WAAS,wBAAwB,SAAS;AACxC,UAAM,OAAO,MAAM,MAAM,QAAQ;AACjC,QACE,WAAW,QAAQ,eACnB,QAAQ,QACR,KAAK;AAEL,aACG,MAAM,MAAM,QAAQ,SACnB,QAAQ,OACJ;AAAA,QACE,cAAc,QAAQ;AAAA,QACtB,UAAU,QAAQ;AAAA,QAClB,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,6BAA6B;AAAA,MAC/B,IACA;AAAA,QACE,IAAI,KAAK;AAAA,QACT,MAAM,KAAK;AAAA,QACX,cAAc,QAAQ;AAAA,QACtB,UAAU,OAAO;AAAA,UACf,OAAO,OAAO,CAAC,GAAG,KAAK,QAAQ;AAAA,UAC/B,QAAQ;AAAA,QACV;AAAA,QACA,6BAA6B;AAAA,MAC/B,GACN;AAAA,QACE,MAAM;AAAA,QACN,SAAS,QAAQ;AAAA,QACjB,MAAM,MAAM,MAAM,QAAQ;AAAA,MAC5B;AAAA,EAEN;AACA,WAAS,kBAAkB,SAAS;AAClC,UAAM,kBAAkB,SACtB,OAAO,MAAM,MAAM,gBAAgB;AACrC,WAAO,QACF,OAAO,MAAM,MAAM,gBAAgB,QACpC,EAAE,MAAM,SAAS,KAAW,KAC5B;AAAA,EACN;AACA,WAAS,mBAAmB,SAAS;AACnC,UAAM,WAAW,CAAC;AAClB,eAAW,OAAO,QAAQ,OAAO;AAC/B,YAAM,eAAe,OAAO,SAAS,GAAG,GACtC,OAAO,QAAQ,MAAM;AACvB,eAAS,gBAAgB;AAAA,QACvB;AAAA,QACA,MAAM,KAAK;AAAA,QACX,IAAI,KAAK;AAAA,MACX;AAAA,IACF;AACA,WAAQ,MAAM,QAAQ,UAAW,EAAE,MAAM,QAAQ;AAAA,EACnD;AACA,WAAS,QAAQ,SAAS;AACxB,eAAW,YAAY,MAAM,UAAU;AACrC,eAAS,EAAE,cAAc,QAAQ,OAAO,OAAO,QAAQ,MAAM,CAAC;AAAA,EAClE;AACA,WAAS,oBAAoB,SAAS;AACpC,WACG,MAAM,MAAM,QAAQ,SAAS;AAAA,MAC5B,cAAc,QAAQ;AAAA,MACtB,MAAM,QAAQ;AAAA,MACd,IAAI,QAAQ;AAAA,MACZ,6BAA6B;AAAA,IAC/B,GACA,MAAM,OACH,MAAM,OAAO,SAAS,KAAK;AAAA,MAC1B,MAAM,cAAc;AAAA,MACpB,MAAM,MAAM;AAAA,MACZ,aAAa,QAAQ;AAAA,IACvB,CAAC,GACD,YAAY,IACd,EAAE,MAAM,SAAS,MAAM,MAAM,MAAM,QAAQ,OAAO;AAAA,EAEtD;AACA,WAAS,mBAAmB,MAAM;AAChC,WAAO,aAAa,IAAI,IAAI,OAAO;AAAA,EACrC;AACA,WAAS,UAAU,OAAO;AACxB,QAAI,WAAW,MAAM;AACnB,aAAO,KAAK,aAAa,MAAM,eAAe,WAAW;AAC3D,UAAM,WAAY,SAAU,MAAM;AAChC,YAAM,OAAO,aAAa,IAAI;AAC9B,aAAO,WAAW,OACd,OACA,YAAY,IAAI,IAChB,QAAQ,KAAK,IAAI,CAAC,SAAS,mBAAmB,IAAI,CAAC,CAAC,IACpD,QAAQ,CAAC,mBAAmB,IAAI,CAAC,CAAC;AAAA,IACxC,EAAG,MAAM,IAAI;AACb,QAAI,SAAS,YAAY,MAAM,SAAS;AAAQ;AAChD,UAAM,UAAU,EAAE,gBAAgB,oBAAI,IAAI,GAAG,QAAQ,CAAC,EAAE;AACxD,eAAW,WAAW;AACpB,cAAQ,QAAQ;AAAA,aACT,cAAc;AACjB,kBAAQ,OAAO,KAAK,oBAAoB,OAAO,CAAC;AAChD;AAAA,aACG,cAAc,iBAAiB;AAClC,gBAAM,uBAAuB,wBAAwB,OAAO;AAC5D,kCAAwB,QAAQ,OAAO,KAAK,oBAAoB;AAChE;AAAA,QACF;AAAA,aACK,cAAc;AACjB,kBAAQ,OAAO;AACf;AAAA,aACG,cAAc,WAAW;AAC5B,gBAAME,SAAQ,kBAAkB,OAAO;AACvC,UAAAA,UAAS,QAAQ,OAAO,KAAKA,MAAK;AAClC;AAAA,QACF;AAAA,aACK,cAAc;AACjB,kBAAQ,OAAO,KAAK,mBAAmB,OAAO,CAAC;AAC/C;AAAA,aACG,cAAc,uBAAuB;AACxC,gBAAM,aAAa,IAAI,IAAI,MAAM,iBAAiB;AAClD,wCAA8B,OAAO,GACnC,uBAAuB,UAAU,GACjC,QAAQ,4BAA4B,yBAAyB;AAC/D;AAAA,QACF;AAAA,aACK,cAAc;AACjB,gBAAM,QAAQ,KAAK,KAAE,EAAE,QAAQ,eAAe;AAAA,YAC5C,CAAC,OAAO,QAAQ;AACd,sBAAQ,eAAe;AAAA,gBACrB;AAAA,gBACA,oBAAoB,QAAQ,eAAe,IAAI,GAAG,GAAG,KAAK;AAAA,cAC5D;AAAA,YACF;AAAA,UACF;AACA;AAAA;AAEN,WAAO,OAAO;AAAA,EAChB;AACA,WAAS,QAAQ,OAAO;AACtB,QACI,MAAM,SAAS,MACjB,aAAa,MAAM,eAAe,WAAW,GAC7C,cAAc,MAAM,gBAAgB,SAAS,GAC7C,MAAM,eAAe,SAAS,aAAa,MAAM,eAAe,KAAK,GACrE,aAAa,MAAM,eAAe,SAAS,GAC1C,MAAM,QAAQ,CAAC,GAChB,OAAO,EAAE,QAAQ,CAAC,EAAE,MAAM,QAAQ,CAAC,EAAE,CAAC,GACtC,MAAM,QAAQ,OAAO,MAAM,QAAQ,MACnC;AACA,uBAAiB,EAAE,OAAO,SAAS,CAAC;AACpC,YAAM,QAAQ,IAAI,gBAAgB,MAAM,QAAQ,MAAM,IAAI;AAC1D,iBAAW,YAAY,MAAM,UAAU;AAAO,iBAAS,KAAK;AAC5D,YAAM,QAAQ,cAAc,IAAE;AAC9B,YAAM,iBAEF,QAAQ;AAAA,QACN,6DAA6D,MAAM,kBAAkB,MAAM,sBAAsB;AAAA,MACnH,GACF,iBAAiB,EAAE,OAAO,cAAc,CAAC,GACxC,MAAM,eAAe,YAAY,QAAQ,kBAAkB,KAAK;AAAA,IACrE,WAAW,MAAM,SAAS,oBAAoB;AAC5C,uBAAiB,EAAE,OAAO,SAAS,CAAC;AAAA,SACjC;AACH,YAAM,QAAQ,cAAc;AAC5B,YAAM,iBAEF,QAAQ;AAAA,QACN,2DAA2D,MAAM,sBAAsB;AAAA,MACzF,GACF,iBAAiB,EAAE,OAAO,cAAc,CAAC,GACxC,MAAM,eAAe,YAAY,QAAQ,kBAAkB,KAAK;AAAA,IACrE;AAAA,EACF;AACA,WAAS,iBAAiB,YAAY;AACpC,UAAM,aAAa;AACnB,eAAW,YAAY,MAAM,UAAU;AACrC,eAAS,WAAW,KAAK;AAAA,EAC7B;AACA,WAAS,cAAc,OAAO,OAAI;AAChC,WAAO,OACH,0BACE,MAAM,gBAAgB,0BAA0B,SAC5C,MAAM,gBACN,0BAA0B,SAAS,KAEzC,qBACE,MAAM,gBAAgB,qBAAqB,SACvC,MAAM,gBACN,qBAAqB,SAAS;AAAA,EAE1C;AACA,WAAS,UAAU;AAAA,EAAC;AACpB,WAAS,SAAS;AAChB,kBAAc,MAAM,gBAAgB,SAAS,GAC1C,MAAM,gBAAgB,YAAY,QAAQ,uBAAuB,GAClE,iBAAiB,MAAM,WAAW,UAC/B;AAAA,MACC,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,MAAM,UAAU,GAAG,EAAE,OAAO,OAAO,CAAC;AAAA,IACtE,GACC,MAAM,gBAAgB,GACvB,WAAW,MAAM,qBACb,MAAM,OAAO,WAAW,MAAM,IAAK,YAAY,IAClD,MAAM,mBAAmB,MAAM,WAAW,IAC3C,MAAM,QACJ,MAAM,OAAO,SAAS,KAAK,EAAE,MAAM,cAAc,cAAc,CAAC,GAClE,YAAY;AAAA,EAClB;AACA,WAAS,YAAY;AACnB,YAAQ,MAAM,WACX,aAAa,MAAM,eAAe,WAAW,GAC7C,MAAM,eAAe,cAAc,QAAQ,oBAAoB,GAChE,MAAM,OAAO,eAAe,MAAM,OAAO,QACvC,MAAM,OAAO,KAAK,MAAM;AAAA,EAC9B;AACA,WAAS,cAAc;AACrB,cAAU;AAAA,EACZ;AACA,WAAS,YAAY;AACnB,UAAM,WACH,MAAM,OAAO,oBAAoB,QAAQ,MAAM,GAChD,MAAM,OAAO,oBAAoB,WAAW,SAAS,GACrD,MAAM,OAAO,oBAAoB,SAAS,OAAO,GACjD,MAAM,OAAO,oBAAoB,SAAS,OAAO,GACjD,MAAM,OAAO,MAAM,GAClB,MAAM,SAAS,OAChB,iBAAiB,EAAE,OAAO,cAAc,CAAC,GACzC,aAAa,MAAM,eAAe,WAAW,GAC7C,MAAM,eAAe,SAAS,aAAa,MAAM,eAAe,KAAK,GACrE,aAAa,MAAM,eAAe,SAAS,GAC3C,cAAc,MAAM,gBAAgB,SAAS,GAC7C,QAAQ;AAAA,EACZ;AACA,WAAS,uBAAuB,YAAY;AAC1C,QAAI,MAAM,WAAW;AAAM;AAC3B,UAAM,WAAW,CAAC,GAChB,MAAM,MAAM,KAAK,WAAW,OAAO,CAAC,GACpC,SAAS,MAAM,KAAK,IAAE;AACxB,aAAS,KAAK,EAAE,MAAM,cAAc,gBAAgB,IAAS,CAAC,GAC5D,OAAO,OAAO,OAAO,GACrB,QAAQ,KAAK,QAAQ;AAAA,EACzB;AACA,WAAS,cAAc;AACrB,UAAM,aAAa,MAAM,OAAO;AAChC,QACG,WAAW,SAAS,KACnB,WAAW,QAAQ,CAAC,OAAO;AACzB,YAAM,kBAAkB,IAAI,GAAG,GAAG,IAAI,GAAG,EAAE;AAAA,IAC7C,CAAC,GACH,QAAQ,MAAM,UAAU,MAAM,OAAO,eAAe,MAAM,OAAO;AAEjE,aAAO,MAAM,MAAM,OAAO,oBAAoB,CAAC;AACjD,UAAM,MAAM,KAAK,IAAI;AACrB,QAAI,MAAM,MAAM,gBAAgB,QAAQ,eAAe;AACrD,YAAM,WAAY,SAAUC,QAAO;AACjC,cAAMC,YAAW,CAAC;AAClB,QAAAD,OAAM,OAAO,YACXC,UAAS,KAAK;AAAA,UACZ,MAAM,cAAc;AAAA,UACpB,MAAMD,OAAM,OAAO;AAAA,QACrB,CAAC;AACH,mBAAW,SAASA,OAAM,OAAO;AAAU,UAAAC,UAAS,KAAK,KAAK;AAC9D,QAAAD,OAAM,OAAO,kBAAkB,SAAS,KACtCC,UAAS,KAAK;AAAA,UACZ,MAAM,cAAc;AAAA,UACpB,KAAKD,OAAM,OAAO;AAAA,QACpB,CAAC;AACH,eAAOC;AAAA,MACT,EAAG,KAAK;AACR,UAAI,MAAM,SAAS;AAAQ;AAC3B,cAAQ,KAAK,QAAQ,GAClB,MAAM,SAAS;AAAA,QACd,UAAU,CAAC;AAAA,QACX,mBAAmB,CAAC;AAAA,QACpB,UAAU;AAAA,MACZ,GACC,MAAM,gBAAgB;AAAA,IAC3B;AACE,cAAQ,MAAM,eAAe,SAC3B,aAAa,MAAM,eAAe,KAAK,GACtC,MAAM,eAAe,QAAQ,QAAQ;AAAA,QACpC,QAAQ,iBAAiB,MAAM,MAAM;AAAA,MACvC;AAAA,EACN;AACA,WAAS,cAAc;AACrB,WAAO,MAAM;AAAA,EACf;AACA,WAAS,SAAS,KAAK;AACrB,UAAM,OAAO,kBAAkB,KAAK,GAAG,GAAG,GAAG,YAAY;AAAA,EAC3D;AACA,MAAI,0BAA0B,MAC5B,2BAA2B;AAC7B,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,mBAAmB,WAAY;AAC7B,wBAAkB,MAAM,WAAW,SAAS,UAAU;AAAA,IACxD;AAAA,IACA,qBAAqB,WAAY;AAC/B,YAAM,WAAW,MAAM,SAAS;AAAA,IAClC;AAAA,IACA,wBAAwB,SAAU,OAAO;AACvC,cAAQ,KAAK;AAAA,IACf;AAAA,IACA,oBAAoB,SAAU,iBAAiB;AAC7C,oBAAc,mBACZ,WAAW,MAAM,WAAW,SAC5B,UAAU;AAAA,IACd;AAAA,IACA,cAAc,MAAM,MAAM;AAAA,IAC1B,eAAe,MAAM,MAAM,MAAM;AAAA,IACjC;AAAA,IACA,YAAY,WAAY;AACtB,YAAM,WACH,MAAM,OAAO,oBAAoB,QAAQ,MAAM,GAChD,MAAM,OAAO,oBAAoB,WAAW,SAAS,GACrD,MAAM,OAAO,oBAAoB,SAAS,OAAO,GACjD,MAAM,OAAO,oBAAoB,SAAS,OAAO,GACjD,MAAM,OAAO,MAAM,GAClB,MAAM,SAAS,OAChB,iBAAiB,EAAE,OAAO,SAAS,CAAC,GACpC,MAAM,eAAe,SAAS,aAAa,MAAM,eAAe,KAAK,GACrE,aAAa,MAAM,eAAe,SAAS,GAC3C,aAAa,MAAM,eAAe,WAAW,GAC7C,cAAc,MAAM,gBAAgB,SAAS,GAC5C,MAAM,QAAQ,CAAC,GAChB,OAAO,EAAE,QAAQ,CAAC,EAAE,MAAM,QAAQ,CAAC,EAAE,CAAC,GACrC,WAAY;AACX,mBAAW,OAAO,MAAM;AAAW,gBAAM,UAAU,OAAO,CAAC;AAAA,MAC7D,EAAG;AAAA,IACP;AAAA,IACA,WAAW,SAAU,OAAO,QAAQ,SAAS;AAC3C,UAAI,WAAW,UAAU,cAAc,OAAO,OAAO;AACnD,YAAI,cAAc,OAAO,OAAO;AAC9B,iBAAO,iBAAiB,KAAK;AAAA,QAC/B;AACA,cAAM,IAAI,MAAM,oCAAoC;AAAA,MACtD;AACA,UAAI,WAAW,KAAK,GAAG;AACrB,cAAM,OAAO;AACb,YAAI,QAAQ,UAAU,SAAS,QAAQ,QAAQ;AAC7C,iBAAQ,SAAUC,OAAM,UAAU;AAChC,mBAAO,iBAAiB,CAAC,YAAY;AACnC,oBAAM,iBAAiB,QAAQ;AAAA,gBAAO,CAAC,WACrC,oBAAoB,OAAO,MAAMA,KAAI;AAAA,cACvC;AACA,6BAAe,SAAS,KAAK,SAAS,cAAc;AAAA,YACtD,CAAC;AAAA,UACH,EAAG,MAAM,MAAM;AAAA,QACjB;AACA,eAAQ,SAAUA,OAAM,UAAU;AAChC,iBAAO,iBAAiB,CAAC,YAAY;AACnC,uBAAW,UAAU;AACnB,qBAAO,KAAK,QAAQA,MAAK,OAAO,SAAS,OAAO,IAAI;AAAA,UACxD,CAAC;AAAA,QACH,EAAG,MAAM,MAAM;AAAA,MACjB;AACA,UAAI,CAAC,gBAAgB,KAAK;AACxB,cAAM,IAAI,MAAM,IAAI,kCAAkC;AACxD,YAAM,YAAY,OAChB,gBAAgB;AAClB,aACE,MAAM,UAAU,WAAW,KAAK,aAAa,GAC7C,MAAM;AACJ,cAAM,YAAY,MAAM,UAAU;AAClC,eAAO,WAAW,aAAa;AAAA,MACjC;AAAA,IAEJ;AAAA,IACA,gBAAgB,SAAU,WAAW,SAAS;AAC5C,YAAM,YAAY,CAAC;AACnB,cAAQ,MAAM,OAAO,aAAa,MAAM,OAAO,WAAW,CAAC;AAC3D,iBAAW,OAAO,WAAW;AAC3B,cAAM,gBAAgB,UAAU;AAChC,mBAAW,kBACP,MAAM,OAAO,SAAS,OAAO,eAC9B,UAAU,OAAO,MAAM,GAAG;AAAA,MAC/B;AACA,MAAC,MAAM,KAAK,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,MAAM,EAAE,GAAG,SAAS,GAC9D,MAAM,eACA,QAAQ,UAAU,SAAS,QAAQ,iBACnC,MAAM,MAAM,WAAW,KAAK;AAAA,QAC1B,MAAM;AAAA,QACN,MAAM;AAAA,MACR,CAAC,GACF,MAAM,MAAM,QAAQ,WAAW,SAC/B,YAAY,IACZ,QAAQ,UAAU,SAAS,QAAQ,iBAClC,eAAe,CAAC,EAAE,MAAM,YAAY,MAAM,UAAU,CAAC,CAAC,GACxD,OAAO,EAAE,UAAU,KAAG,CAAC;AAAA,IAC/B;AAAA,IACA,gBAAgB,SACd,OACA,UAAU,EAAE,4BAA4B,MAAG,GAC3C;AACA,MAAC,QAAQ,MAAM,UAAU,KAAK,QAAQ,+BACnC,MAAM,OAAO,SAAS,KAAK;AAAA,QAC1B,MAAM,cAAc;AAAA,QACpB;AAAA,MACF,CAAC,GACD,YAAY;AAAA,IAChB;AAAA,IACA,OAAO,SAAU,UAAU;AACzB,UAAI,MAAM;AACR,cAAM,IAAI,MAAM,2CAA2C;AAC7D,YAAM,aAAa;AACnB,UAAI;AACF,iBAAS;AAAA,MACX,UAAE;AACA,QAAC,MAAM,aAAa,OAClB,MAAM,MAAM,WAAW,SAAS,KAC9B,eAAe,MAAM,MAAM,UAAU,GACvC,MAAM,MAAM,IAAI,SAAS,MAAM,MAAM,YAAY,CAAC,IAClD,MAAM,MAAM,IAAI,SAAS,KAAK,SAAS,MAAM,MAAM,GAAG,GACtD,OAAO,MAAM,MAAM,OAAO,GACzB,MAAM,QAAQ;AAAA,UACb,KAAK,CAAC;AAAA,UACN,YAAY,CAAC;AAAA,UACb,SAAS,EAAE,QAAQ,CAAC,GAAG,gBAAgB,oBAAI,IAAI,GAAG,UAAU,MAAG;AAAA,QACjE,GACA,YAAY;AAAA,MAChB;AAAA,IACF;AAAA,IACA,MAAM,WAAY;AAChB,UAAI,MAAM;AACR,cAAM,IAAI,MAAM,oCAAoC;AACtD,YAAM,cAAc,MAAM,UAAU,IAAI;AACxC,UAAI,QAAQ;AAAa;AACzB,YAAM,kBAAkB;AACxB,YAAM,SAAS,MAAM,aAAa,IAAE;AACpC,aAAO,OAAO,OAAO,GAAG,MAAM,UAAU,KAAK,OAAO,OAAO;AAC3D,iBAAW,MAAM;AACf,uBAAe,GAAG,QAAQ,MAAM,OAAO,kBAAkB,KAAK,EAAE;AAClE,kBAAY;AAAA,IACd;AAAA,IACA,MAAM,WAAY;AAChB,UAAI,MAAM;AACR,cAAM,IAAI,MAAM,oCAAoC;AACtD,YAAM,cAAc,MAAM,UAAU,IAAI;AACxC,UAAI,QAAQ;AAAa;AACzB,YAAM,kBAAkB;AACxB,YAAM,SAAS,MAAM,aAAa,IAAE;AACpC,aAAO,OAAO,OAAO,GAAG,MAAM,UAAU,KAAK,OAAO,OAAO;AAC3D,iBAAW,MAAM;AACf,uBAAe,GAAG,QAAQ,MAAM,OAAO,kBAAkB,KAAK,EAAE;AAClE,kBAAY;AAAA,IACd;AAAA,IACA,cAAc,WAAY;AACxB,MAAC,MAAM,gBAAgB,CAAC,GAAK,MAAM,kBAAkB;AAAA,IACvD;AAAA,IACA,eAAe,WAAY;AACzB,MAAC,MAAM,kBAAkB,OACvB,MAAM,cAAc,SAAS,KAAK,eAAe,MAAM,aAAa,GACnE,MAAM,gBAAgB,CAAC;AAAA,IAC5B;AAAA,IACA,YAAY,WAAY;AACtB,aAAO,MAAM,OACT,IAAI,QAAQ,CAAC,YAAY,QAAQ,EAAE,MAAM,MAAM,KAAK,CAAC,CAAC,KACrD,QAAQ,4BACN,MAAM,OAAO,SAAS,KAAK,EAAE,MAAM,cAAc,cAAc,CAAC,GACjE,YAAY,GACX,0BAA0B,IAAI;AAAA,QAC7B,CAAC,YAAa,2BAA2B;AAAA,MAC3C,IACF,wBAAwB,KAAK,OAAO,EAAE,MAAM,GAAG,MAAM,IAAI,EAAE,EAAE;AAAA,IACnE;AAAA,IACA,WAAW;AAAA,MACT,oBAAoB,WAAY;AAC9B,eAAO,MAAM,WAAW;AAAA,MAC1B;AAAA,MACA,SAAS,WAAY;AACnB,eAAO,WAAW,MAAM,WAAW,SACjC,iBAAiB,MAAM,WAAW,QAChC;AAAA,UACE,cAAc,MAAM,WAAW;AAAA,UAC/B,IAAI,MAAM,WAAW;AAAA,UACrB,MAAM,MAAM,WAAW;AAAA,UACvB,UAAU,YAAY;AAAA,QACxB,IACA;AAAA,MACN;AAAA,MACA;AAAA,MACA,WAAW,WAAY;AACrB,eAAO,MAAM;AAAA,MACf;AAAA,IACF;AAAA,EACF;AACF;AACA,SAAS,WAAW,SAAS,SAAS;AACpC,MAAI,IAAI;AACR,QAAM,kBACF,UAAU,KAAK,QAAQ,oBAAoB,WAAW,KAClD,KACA,QAAQ,iBACd,iBACE,UAAU,KAAK,QAAQ,mBAAmB,WAAW,KACjD,KACA,QAAQ,oBACd,UAAU;AAAA,IACP,SAAUC,kBAAiBC,iBAAgB;AAC1C,aAAO;AAAA,QACL,YAAY,EAAE,OAAO,SAAS;AAAA,QAC9B,OAAO;AAAA,QACP,kBAAkB;AAAA,QAClB,QAAQ;AAAA,QACR,WAAW;AAAA,UACT,OAAO,CAAC;AAAA,UACR,QAAQ,CAAC;AAAA,UACT,eAAe,CAAC;AAAA,UAChB,OAAO,CAAC;AAAA,UACR,YAAY,CAAC;AAAA,UACb,SAAS,CAAC;AAAA,QACZ;AAAA,QACA,eAAe;AAAA,QACf,eAAe;AAAA,QACf,gBAAgB,EAAE,OAAO,MAAM,WAAW,GAAG,aAAa,EAAE;AAAA,QAC5D,QAAQ;AAAA,UACN,UAAU,QAAQD,mBAAkB,CAAC,IAAIA;AAAA,UACzC,UAAU,CAAC;AAAA,UACX,mBAAmB,CAAC;AAAA,QACtB;AAAA,QACA,iBAAiB,EAAE,WAAW,EAAE;AAAA,QAChC,IAAI,QAAQA,mBAAkB,CAAC,IAAIA;AAAA,QACnC,OAAO,CAAC;AAAA,QACR,QAAQ,WAAW,CAAC,CAAC;AAAA,QACrB,oBAAoBC;AAAA,QACpB,WAAW;AAAA,QACX,OAAO;AAAA,QACP,SAAS;AAAA,QACT,OAAO,oBAAI,IAAI;AAAA,QACf,MAAM;AAAA,QACN,WAAW,CAAC;AAAA,QACZ,WAAW,CAAC;AAAA,QACZ,iBAAiB;AAAA,QACjB,eAAe,CAAC;AAAA,QAChB,YAAY;AAAA,QACZ,OAAO;AAAA,UACL,KAAK,CAAC;AAAA,UACN,SAAS,EAAE,gBAAgB,oBAAI,IAAI,GAAG,UAAU,OAAI,QAAQ,CAAC,EAAE;AAAA,UAC/D,YAAY,CAAC;AAAA,QACf;AAAA,QACA,mBAAmB,oBAAI,IAAI;AAAA,MAC7B;AAAA,IACF;AAAA,MACE,cAAc,OAAO,kBACjB,gBAAgB,QAAQ,MAAM,IAC9B;AAAA,MACJ,cAAc,OAAO,iBACjB,eAAe,QAAQ,MAAM,IAC7B;AAAA,IACN;AAAA,IACA;AAAA,EACF,GACA,OAAO;AAAA,IACL,IAAI,QAAQ;AAAA,IACZ,oBAAoB,QAAQ,UAAU;AAAA,IACtC,SAAS,QAAQ,UAAU;AAAA,IAC3B,WAAW,QAAQ;AAAA,IACnB,aAAa,QAAQ,UAAU;AAAA,IAC/B,gBAAgB,QAAQ;AAAA,IACxB,WAAW,QAAQ,UAAU;AAAA,IAC7B,gBAAgB,QAAQ;AAAA,IACxB,YAAY,QAAQ;AAAA,IACpB,OAAO,QAAQ;AAAA,IACf,SAAS;AAAA,MACP,MAAM,QAAQ;AAAA,MACd,MAAM,QAAQ;AAAA,MACd,OAAO,QAAQ;AAAA,MACf,QAAQ,QAAQ;AAAA,IAClB;AAAA,IACA,uBAAuB;AAAA,MACrB,wBAAwB,QAAQ;AAAA,MAChC,wBAAwB,QAAQ;AAAA,IAClC;AAAA,EACF;AACF,SAAO;AAAA,IACL,SAAS,QAAQ;AAAA,IACjB,YAAY,QAAQ;AAAA,IACpB,mBAAmB,QAAQ;AAAA,IAC3B,oBAAoB,QAAQ;AAAA,IAC5B;AAAA,EACF;AACF;AACA,IAAM,kBAAN,cAA8B,MAAM;AAAA,EAClC,YAAY,SAAS,MAAM;AACzB,UAAM,OAAO,GAAI,KAAK,OAAO;AAAA,EAC/B;AACF;AACA,SAAS,kBAAkBC,QAAO,UAAU,MAAM;AAChD,SAAOA,OAAM,UAAU;AAAA,IACrB,QAAQ;AAAA,IACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,IAC9C,MAAM,KAAK,UAAU,IAAI;AAAA,EAC3B,CAAC,EACE,KAAK,CAAC,QAAQ;AACb,QAAI,CAAC,IAAI;AACP,YAAM,IAAI;AAAA,QACR,iCAAiC,IAAI,wCAAwC;AAAA,MAC/E;AACF,WAAO,IAAI,KAAK,EAAE,MAAM,CAAC,OAAO;AAC9B,YAAM,IAAI;AAAA,QACR,0DAA0D,cAAc;AAAA,MAC1E;AAAA,IACF,CAAC;AAAA,EACH,CAAC,EACA,KAAK,CAAC,SAAS;AACd,QAAI,CAAC,cAAc,IAAI,KAAK,YAAY,OAAO,KAAK;AAClD,YAAM,IAAI;AAAA,QACR,2FAA2F,sBAAsB,KAAK;AAAA,UACpH;AAAA,QACF;AAAA,MACF;AACF,UAAM,EAAE,MAAa,IAAI;AACzB,WAAO,EAAE,MAAa;AAAA,EACxB,CAAC;AACL;AACA,IAAM,sBAAN,cAAkC,MAAM;AAAA,EACtC,YAAY,SAAS;AACnB,UAAM,OAAO;AAAA,EACf;AACF;AACA,SAAS,aAAa,SAAS;AAC7B,QAAM,gBAAgB,SACpB,gBAAiB,SAAUC,UAAS;AAClC,QAAI,WAAWA,SAAQ;AAAU,aAAO;AACxC,QACE,YAAY,OAAOA,SAAQ,YAC3BA,SAAQ,WAAW,MACnBA,SAAQ,WAAW;AAEnB,YAAM,IAAI,MAAM,kDAAkD;AACpE,WAAOA,SAAQ;AAAA,EACjB,EAAG,OAAO,GACV,QAAQ,oBAAI,IAAI;AAClB,SACE,eAAe,OAAO,UACpB,WAAW,OAAO,oBAClB,OAAO,iBAAiB,UAAU,MAAM;AACtC,eAAW,CAAC,EAAE,IAAI,KAAK;AAAO,WAAK,kBAAkB;AAAA,EACvD,CAAC,GACH,eAAe,OAAO,YACpB,SAAS,iBAAiB,oBAAoB,MAAM;AAClD,eAAW,CAAC,EAAE,IAAI,KAAK;AACrB,WAAK,mBAAmB,SAAS,eAAe;AAAA,EACpD,CAAC,GACH;AAAA,IACE,SAAS,SAAU,QAAQ;AACzB,YAAM,eAAe,MAAM,IAAI,MAAM;AACrC,aAAO,eAAe,aAAa,OAAO;AAAA,IAC5C;AAAA,IACA,OAAO,SAAU,QAAQA,WAAU,CAAC,GAAG;AACrC,UAAI;AACJ,UAAI,eAAe,MAAM,IAAI,MAAM;AACnC,UAAI;AAAc,eAAO,aAAa;AACtC,UACG;AAAA,QACCA,SAAQ;AAAA,QACR;AAAA,MACF,GACA;AAAA,QACEA,SAAQ;AAAA,QACR;AAAA,MACF,GACC,eAAe;AAAA,QACd;AAAA,UACE,iBAAiBA,SAAQ;AAAA,UACzB,gBAAgBA,SAAQ;AAAA,UACxB,iBAAiBA,SAAQ;AAAA,UACzB,oBAAoBA,SAAQ;AAAA,QAC9B;AAAA,QACA;AAAA,UACE;AAAA,UACA;AAAA,UACA,WAAW,cAAc;AAAA,UACzB,mBAAmB,cAAc;AAAA,UACjC,eAAe,cAAc;AAAA,UAC7B,mBACG,QAAQ,gBACL,SACA,cAAc,qBAClB;AAAA,UACF,gBAAgB,sBAAsB,aAAa;AAAA,QACrD;AAAA,MACF,GACA,MAAM,IAAI,QAAQ,YAAY,GAC9B,CAACA,SAAQ,8BACT;AACA,YAAI,eAAe,OAAO,MAAM;AAC9B,cACE,SACC,UAAU,KAAK,cAAc,cAAc,WAAW,KACnD,SACA,GAAG;AAEP,kBAAM,IAAI;AAAA,cACR;AAAA,YACF;AACF,iBAAO,OAAO,cAAc,UAAU;AAAA,QACxC;AACA,qBAAa,QAAQ;AAAA,MACvB;AACA,aAAO,aAAa;AAAA,IACtB;AAAA,IACA,OAAO,SAAU,QAAQ;AACvB,YAAM,OAAO,MAAM,IAAI,MAAM;AAC7B,eAAS,KAAK,WAAW,GAAG,MAAM,OAAO,MAAM;AAAA,IACjD;AAAA,EACF;AAEJ;AACA,SAAS,sBAAsB,eAAe;AAC5C,QAAM,EAAE,cAA4B,aAA2B,IAC7D;AACF,MAAI,WAAW,gBAAgB,WAAW;AACxC,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AACF,MAAI,YAAY,OAAO,cAAc;AACnC,QAAI,aAAa,WAAW,KAAK;AAC/B,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AACF,QAAI,CAAC,aAAa,WAAW,KAAK;AAChC,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AACF,WAAO;AAAA,MACL,MAAM;AAAA,MACN;AAAA,MACA,KACE,cAAc,2BACd;AAAA,IACJ;AAAA,EACF;AACA,MAAI,YAAY,OAAO;AACrB,WAAO,EAAE,MAAM,WAAW,KAAK,aAAa;AAC9C,MAAI,cAAc,OAAO;AACvB,WAAO,EAAE,MAAM,UAAU,UAAU,aAAa;AAClD,MAAI,WAAW;AACb,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AACF,QAAM,IAAI;AAAA,IACR;AAAA,EACF;AACF;",
  "names": ["errmsg", "ClientMsgCode", "OpCode", "CrdtType", "ServerMsgCode", "WebsocketCloseCodes", "OpSource", "before", "after", "id", "deleteDelta", "entries", "value", "first", "second", "data", "items", "parentToChildren", "root", "event", "state", "messages", "node", "initialPresence", "initialStorage", "fetch", "options"]
}
